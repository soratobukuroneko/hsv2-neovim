
Executing: augroup nvim_terminal
Executing: autocmd BufReadCmd term://* ++nested if !exists('b:term_title')|call termopen(matchstr(expand("<amatch>"), '\c\mterm://\%(.\{-}//\%(\d\+:\)\?\)\?\zs.*'), {'cwd': expand(get(matchlist(expand("<amatch>"), '\c\mterm://\(.\{-}\)//'), 1, ''))})|endif
Executing: augroup END
Executing: augroup nvim_cmdwin
Executing: autocmd! CmdwinEnter [:>] syntax sync minlines=1 maxlines=1
Executing: augroup END
Searching for "ftplugin.vim" in runtime path
Searching for "/Users/ablanken/.config/nvim/ftplugin.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/ftplugin.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/42header/ftplugin.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/auto-session/ftplugin.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/cheatsheet.nvim/ftplugin.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/coc-nvim-lua/ftplugin.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/coc.nvim/ftplugin.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/Comment.nvim/ftplugin.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/c_formatter_42.vim/ftplugin.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/FTerm.nvim/ftplugin.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/gentoo-syntax/ftplugin.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/gitsigns.nvim/ftplugin.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/indent-blankline.nvim/ftplugin.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/lualine.nvim/ftplugin.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/neon/ftplugin.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/nvim-neoclip.lua/ftplugin.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/nvim-treesitter/ftplugin.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/nvim-web-devicons/ftplugin.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/packer.nvim/ftplugin.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/plenary.nvim/ftplugin.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/session-lens/ftplugin.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/sqlite.lua/ftplugin.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/suda.vim/ftplugin.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/telescope-file-browser.nvim/ftplugin.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/telescope-fzf-native.nvim/ftplugin.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/telescope-packer.nvim/ftplugin.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/telescope-repo.nvim/ftplugin.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/telescope-symbols.nvim/ftplugin.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/telescope.nvim/ftplugin.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/vim-fugitive/ftplugin.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/vim-polyglot/ftplugin.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/vim-rooter/ftplugin.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/which-key.nvim/ftplugin.vim"
Searching for "/Users/ablanken/.local/nvim-brew/Cellar/neovim/0.7.0/share/nvim/runtime/ftplugin.vim"
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/nvim-brew/Cellar/neovim/0.7.0/share/nvim/runtime)
chdir(/Users/ablanken/Sync/src/neovim-conf)
sourcing "/Users/ablanken/.local/nvim-brew/Cellar/neovim/0.7.0/share/nvim/runtime/ftplugin.vim"
line 1: " Vim support file to switch on loading plugins for file types
line 2: "
line 3: " Maintainer:^IBram Moolenaar <Bram@vim.org>
line 4: " Last change:^I2006 Apr 30
line 5: 
line 6: if exists("did_load_ftplugin")
line 7:   finish
line 8: endif
line 9: let did_load_ftplugin = 1
line 10: 
line 11: augroup filetypeplugin
line 12:   au FileType * call s:LoadFTPlugin()
line 13: 
line 14:   func! s:LoadFTPlugin()
line 37: augroup END
finished sourcing /Users/ablanken/.local/nvim-brew/Cellar/neovim/0.7.0/share/nvim/runtime/ftplugin.vim
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/Comment.nvim/after/ftplugin.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/vim-polyglot/after/ftplugin.vim"
Searching for "indent.vim" in runtime path
Searching for "/Users/ablanken/.config/nvim/indent.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/indent.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/42header/indent.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/auto-session/indent.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/cheatsheet.nvim/indent.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/coc-nvim-lua/indent.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/coc.nvim/indent.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/Comment.nvim/indent.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/c_formatter_42.vim/indent.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/FTerm.nvim/indent.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/gentoo-syntax/indent.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/gitsigns.nvim/indent.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/indent-blankline.nvim/indent.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/lualine.nvim/indent.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/neon/indent.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/nvim-neoclip.lua/indent.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/nvim-treesitter/indent.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/nvim-web-devicons/indent.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/packer.nvim/indent.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/plenary.nvim/indent.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/session-lens/indent.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/sqlite.lua/indent.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/suda.vim/indent.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/telescope-file-browser.nvim/indent.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/telescope-fzf-native.nvim/indent.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/telescope-packer.nvim/indent.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/telescope-repo.nvim/indent.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/telescope-symbols.nvim/indent.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/telescope.nvim/indent.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/vim-fugitive/indent.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/vim-polyglot/indent.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/vim-rooter/indent.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/which-key.nvim/indent.vim"
Searching for "/Users/ablanken/.local/nvim-brew/Cellar/neovim/0.7.0/share/nvim/runtime/indent.vim"
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/nvim-brew/Cellar/neovim/0.7.0/share/nvim/runtime)
chdir(/Users/ablanken/Sync/src/neovim-conf)
sourcing "/Users/ablanken/.local/nvim-brew/Cellar/neovim/0.7.0/share/nvim/runtime/indent.vim"
line 1: " Vim support file to switch on loading indent files for file types
line 2: "
line 3: " Maintainer:^IBram Moolenaar <Bram@vim.org>
line 4: " Last Change:^I2008 Feb 22
line 5: 
line 6: if exists("did_indent_on")
line 7:   finish
line 8: endif
line 9: let did_indent_on = 1
line 10: 
line 11: augroup filetypeindent
line 12:   au FileType * call s:LoadIndent()
line 13:   func! s:LoadIndent()
line 32: augroup END
finished sourcing /Users/ablanken/.local/nvim-brew/Cellar/neovim/0.7.0/share/nvim/runtime/indent.vim
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/Comment.nvim/after/indent.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/vim-polyglot/after/indent.vim"
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/etc/xdg/nvim)
chdir(/Users/ablanken/Sync/src/neovim-conf)
could not source "/etc/xdg/nvim/sysinit.vim"
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/nvim-brew/Cellar/neovim/0.7.0/share/nvim)
chdir(/Users/ablanken/Sync/src/neovim-conf)
could not source "$VIM/sysinit.vim"
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.config/nvim)
chdir(/Users/ablanken/Sync/src/neovim-conf)
sourcing "/Users/ablanken/.config/nvim/init.lua"
Executing: command! -nargs=+ -complete=customlist,v:lua.require'packer.snapshot'.completion.create PackerSnapshot  lua require('packer').snapshot(<f-args>)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/packer.nvim/lua)
chdir(/Users/ablanken/Sync/src/neovim-conf)
Executing: command! -nargs=+ -complete=customlist,v:lua.require'packer.snapshot'.completion.rollback PackerSnapshotRollback  lua require('packer').rollback(<f-args>)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/packer.nvim/lua)
chdir(/Users/ablanken/Sync/src/neovim-conf)
Executing: command! -nargs=+ -complete=customlist,v:lua.require'packer.snapshot'.completion.snapshot PackerSnapshotDelete lua require('packer.snapshot').delete(<f-args>)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/packer.nvim/lua)
chdir(/Users/ablanken/Sync/src/neovim-conf)
Executing: command! -nargs=* -complete=customlist,v:lua.require'packer'.plugin_complete  PackerInstall lua require('packer').install(<f-args>)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/packer.nvim/lua)
chdir(/Users/ablanken/Sync/src/neovim-conf)
Executing: command! -nargs=* -complete=customlist,v:lua.require'packer'.plugin_complete PackerUpdate lua require('packer').update(<f-args>)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/packer.nvim/lua)
chdir(/Users/ablanken/Sync/src/neovim-conf)
Executing: command! -nargs=* -complete=customlist,v:lua.require'packer'.plugin_complete PackerSync lua require('packer').sync(<f-args>)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/packer.nvim/lua)
chdir(/Users/ablanken/Sync/src/neovim-conf)
Executing: command! PackerClean             lua require('packer').clean()
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/packer.nvim/lua)
chdir(/Users/ablanken/Sync/src/neovim-conf)
Executing: command! -nargs=* PackerCompile  lua require('packer').compile(<q-args>)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/packer.nvim/lua)
chdir(/Users/ablanken/Sync/src/neovim-conf)
Executing: command! PackerStatus            lua require('packer').status()
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/packer.nvim/lua)
chdir(/Users/ablanken/Sync/src/neovim-conf)
Executing: command! PackerProfile           lua require('packer').profile_output()
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/packer.nvim/lua)
chdir(/Users/ablanken/Sync/src/neovim-conf)
Executing: command! -bang -nargs=+ -complete=customlist,v:lua.require'packer'.loader_complete PackerLoad lua require('packer').loader(<f-args>, '<bang>' == '!')
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/packer.nvim/lua)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf/conf/nvim)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf/conf/nvim)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf/conf/nvim)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf/conf/nvim)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf/conf/nvim)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf/conf/nvim)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf/conf/nvim)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf/conf/nvim)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf/conf/nvim)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf/conf/nvim)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf/conf/nvim)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf/conf/nvim)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf/conf/nvim)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf/conf/nvim)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf/conf/nvim)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf/conf/nvim)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf/conf/nvim)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf/conf/nvim)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf/conf/nvim)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf/conf/nvim)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf/conf/nvim)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf/conf/nvim)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf/conf/nvim)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf/conf/nvim)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf/conf/nvim)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf/conf/nvim)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf/conf/nvim)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf/conf/nvim)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf/conf/nvim)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf/conf/nvim)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf/conf/nvim)
chdir(/Users/ablanken/Sync/src/neovim-conf)
Executing: au VimEnter * ++once lua require("which-key").load()
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/which-key.nvim/lua/which-key)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf/conf/nvim)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf/conf/nvim)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf/conf/nvim)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf/conf/nvim)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf/conf/nvim)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf/conf/nvim)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf/conf/nvim)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf/conf/nvim)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf/conf/nvim)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf/conf/nvim)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf/conf/nvim)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf/conf/nvim)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf/conf/nvim)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf/conf/nvim)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf/conf/nvim)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf/conf/nvim)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf/conf/nvim)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf/conf/nvim)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf/conf/nvim)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf/conf/nvim)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf/conf/nvim)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf/conf/nvim)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf/conf/nvim)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf/conf/nvim)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf/conf/nvim)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf/conf/nvim)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf/conf/nvim)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf/conf/nvim)
chdir(/Users/ablanken/Sync/src/neovim-conf)
Executing: highlight link CocSemDefaultLibrary TSOtherDefaultLibrary
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf/conf/nvim)
chdir(/Users/ablanken/Sync/src/neovim-conf)
Executing: highlight link CocSemDefaultLibraryClass TSTypeDefaultLibrary
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf/conf/nvim)
chdir(/Users/ablanken/Sync/src/neovim-conf)
Executing: highlight link CocSemDefaultLibraryInterface TSTypeDefaultLibrary
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf/conf/nvim)
chdir(/Users/ablanken/Sync/src/neovim-conf)
Executing: highlight link CocSemDefaultLibraryEnum TSTypeDefaultLibrary
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf/conf/nvim)
chdir(/Users/ablanken/Sync/src/neovim-conf)
Executing: highlight link CocSemDefaultLibraryType TSTypeDefaultLibrary
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf/conf/nvim)
chdir(/Users/ablanken/Sync/src/neovim-conf)
Executing: highlight link CocSemDefaultLibraryNamespace TSTypeDefaultLibrary
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf/conf/nvim)
chdir(/Users/ablanken/Sync/src/neovim-conf)
Executing: highlight link CocSemDeclaration TSOtherDeclaration
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf/conf/nvim)
chdir(/Users/ablanken/Sync/src/neovim-conf)
Executing: highlight link CocSemDeclarationClass TSTypeDeclaration
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf/conf/nvim)
chdir(/Users/ablanken/Sync/src/neovim-conf)
Executing: highlight link CocSemDeclarationInterface TSTypeDeclaration
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf/conf/nvim)
chdir(/Users/ablanken/Sync/src/neovim-conf)
Executing: highlight link CocSemDeclarationEnum TSTypeDeclaration
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf/conf/nvim)
chdir(/Users/ablanken/Sync/src/neovim-conf)
Executing: highlight link CocSemDeclarationType TSTypeDeclaration
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf/conf/nvim)
chdir(/Users/ablanken/Sync/src/neovim-conf)
Executing: highlight link CocSemDeclarationNamespace TSTypeDeclaration
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf/conf/nvim)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf/conf/nvim)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/gitsigns.nvim/lua/gitsigns)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/gitsigns.nvim/lua/gitsigns)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf/conf/nvim)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf/conf/nvim)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf/conf/nvim)
chdir(/Users/ablanken/Sync/src/neovim-conf)
Executing:             augroup IndentBlanklineContextAutogroup
Executing:                 autocmd!
Executing:                 autocmd CursorMoved * IndentBlanklineRefresh
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/indent-blankline.nvim/lua/indent_blankline)
chdir(/Users/ablanken/Sync/src/neovim-conf)
Executing:             augroup END
Executing:         
Executing: augroup lualine | exe "autocmd!" | augroup END
Executing:  exe "autocmd!" | augroup END
Executing: autocmd!
Executing:  augroup END
Searching for "lua/lualine/themes/auto.lua" in runtime path
Searching for "/Users/ablanken/.config/nvim/lua/lualine/themes/auto.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/lua/lualine/themes/auto.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/42header/lua/lualine/themes/auto.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/auto-session/lua/lualine/themes/auto.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/cheatsheet.nvim/lua/lualine/themes/auto.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/coc-nvim-lua/lua/lualine/themes/auto.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/coc.nvim/lua/lualine/themes/auto.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/Comment.nvim/lua/lualine/themes/auto.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/c_formatter_42.vim/lua/lualine/themes/auto.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/FTerm.nvim/lua/lualine/themes/auto.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/gentoo-syntax/lua/lualine/themes/auto.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/gitsigns.nvim/lua/lualine/themes/auto.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/indent-blankline.nvim/lua/lualine/themes/auto.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine/themes/auto.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/neon/lua/lualine/themes/auto.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/nvim-neoclip.lua/lua/lualine/themes/auto.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/nvim-treesitter/lua/lualine/themes/auto.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/nvim-web-devicons/lua/lualine/themes/auto.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/packer.nvim/lua/lualine/themes/auto.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/plenary.nvim/lua/lualine/themes/auto.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/session-lens/lua/lualine/themes/auto.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/sqlite.lua/lua/lualine/themes/auto.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/suda.vim/lua/lualine/themes/auto.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/telescope-file-browser.nvim/lua/lualine/themes/auto.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/telescope-fzf-native.nvim/lua/lualine/themes/auto.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/telescope-packer.nvim/lua/lualine/themes/auto.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/telescope-repo.nvim/lua/lualine/themes/auto.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/telescope-symbols.nvim/lua/lualine/themes/auto.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/telescope.nvim/lua/lualine/themes/auto.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/vim-fugitive/lua/lualine/themes/auto.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/vim-polyglot/lua/lualine/themes/auto.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/vim-rooter/lua/lualine/themes/auto.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/which-key.nvim/lua/lualine/themes/auto.lua"
Searching for "/Users/ablanken/.local/nvim-brew/Cellar/neovim/0.7.0/share/nvim/runtime/lua/lualine/themes/auto.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/Comment.nvim/after/lua/lualine/themes/auto.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/vim-polyglot/after/lua/lualine/themes/auto.lua"
Executing: highlight! lualine_a_command guifg=#000000 guibg=#40ffff gui=bold
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine)
chdir(/Users/ablanken/Sync/src/neovim-conf)
Executing: highlight! lualine_b_command guifg=#40ffff guibg=#000000 gui=None
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine)
chdir(/Users/ablanken/Sync/src/neovim-conf)
Executing: highlight! lualine_c_command guifg=#505050 guibg=#000000 gui=None
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine)
chdir(/Users/ablanken/Sync/src/neovim-conf)
Executing: highlight! lualine_a_inactive guifg=#000000 guibg=#a9a9a9 gui=bold
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine)
chdir(/Users/ablanken/Sync/src/neovim-conf)
Executing: highlight! lualine_b_inactive guifg=#a9a9a9 guibg=#000000 gui=None
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine)
chdir(/Users/ablanken/Sync/src/neovim-conf)
Executing: highlight! lualine_c_inactive guifg=#505050 guibg=#000000 gui=None
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine)
chdir(/Users/ablanken/Sync/src/neovim-conf)
Executing: highlight! lualine_a_replace guifg=#000000 guibg=#ffa0a0 gui=bold
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine)
chdir(/Users/ablanken/Sync/src/neovim-conf)
Executing: highlight! lualine_b_replace guifg=#ffa0a0 guibg=#000000 gui=None
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine)
chdir(/Users/ablanken/Sync/src/neovim-conf)
Executing: highlight! lualine_c_replace guifg=#505050 guibg=#000000 gui=None
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine)
chdir(/Users/ablanken/Sync/src/neovim-conf)
Executing: highlight! lualine_a_normal guifg=#000000 guibg=#a9a9a9 gui=bold
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine)
chdir(/Users/ablanken/Sync/src/neovim-conf)
Executing: highlight! lualine_b_normal guifg=#a9a9a9 guibg=#000000 gui=None
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine)
chdir(/Users/ablanken/Sync/src/neovim-conf)
Executing: highlight! lualine_c_normal guifg=#505050 guibg=#000000 gui=None
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine)
chdir(/Users/ablanken/Sync/src/neovim-conf)
Executing: highlight! lualine_a_visual guifg=#000000 guibg=#ffa500 gui=bold
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine)
chdir(/Users/ablanken/Sync/src/neovim-conf)
Executing: highlight! lualine_b_visual guifg=#ffa500 guibg=#000000 gui=None
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine)
chdir(/Users/ablanken/Sync/src/neovim-conf)
Executing: highlight! lualine_c_visual guifg=#505050 guibg=#000000 gui=None
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine)
chdir(/Users/ablanken/Sync/src/neovim-conf)
Executing: highlight! lualine_a_terminal guifg=#000000 guibg=#40ffff gui=bold
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine)
chdir(/Users/ablanken/Sync/src/neovim-conf)
Executing: highlight! lualine_b_terminal guifg=#40ffff guibg=#000000 gui=None
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine)
chdir(/Users/ablanken/Sync/src/neovim-conf)
Executing: highlight! lualine_c_terminal guifg=#505050 guibg=#000000 gui=None
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine)
chdir(/Users/ablanken/Sync/src/neovim-conf)
Executing: highlight! lualine_a_insert guifg=#000000 guibg=#ffa0a0 gui=bold
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine)
chdir(/Users/ablanken/Sync/src/neovim-conf)
Executing: highlight! lualine_b_insert guifg=#ffa0a0 guibg=#000000 gui=None
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine)
chdir(/Users/ablanken/Sync/src/neovim-conf)
Executing: highlight! lualine_c_insert guifg=#505050 guibg=#000000 gui=None
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine)
chdir(/Users/ablanken/Sync/src/neovim-conf)
Executing: autocmd lualine ColorScheme * lua require'lualine'.setup()
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua)
chdir(/Users/ablanken/Sync/src/neovim-conf)
Executing:     autocmd lualine OptionSet background lua require'lualine'.setup()
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua)
chdir(/Users/ablanken/Sync/src/neovim-conf)
Executing: au lualine BufEnter *
--- Autocommands ---
Executing: autocmd lualine BufEnter * lua require'lualine.components.branch.git_branch'.find_git_dir()
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine/utils)
chdir(/Users/ablanken/Sync/src/neovim-conf)
Executing: highlight! lualine_b_diff_added_normal guifg=#90ee90 guibg=#000000 gui=None
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine)
chdir(/Users/ablanken/Sync/src/neovim-conf)
Executing: highlight! lualine_b_diff_added_insert guifg=#90ee90 guibg=#000000 gui=None
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine)
chdir(/Users/ablanken/Sync/src/neovim-conf)
Executing: highlight! lualine_b_diff_added_visual guifg=#90ee90 guibg=#000000 gui=None
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine)
chdir(/Users/ablanken/Sync/src/neovim-conf)
Executing: highlight! lualine_b_diff_added_replace guifg=#90ee90 guibg=#000000 gui=None
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine)
chdir(/Users/ablanken/Sync/src/neovim-conf)
Executing: highlight! lualine_b_diff_added_command guifg=#90ee90 guibg=#000000 gui=None
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine)
chdir(/Users/ablanken/Sync/src/neovim-conf)
Executing: highlight! lualine_b_diff_added_terminal guifg=#90ee90 guibg=#000000 gui=None
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine)
chdir(/Users/ablanken/Sync/src/neovim-conf)
Executing: highlight! lualine_b_diff_added_inactive guifg=#90ee90 guibg=#000000 gui=None
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine)
chdir(/Users/ablanken/Sync/src/neovim-conf)
Executing: highlight! lualine_b_diff_modified_normal guifg=#f0e130 guibg=#000000 gui=None
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine)
chdir(/Users/ablanken/Sync/src/neovim-conf)
Executing: highlight! lualine_b_diff_modified_insert guifg=#f0e130 guibg=#000000 gui=None
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine)
chdir(/Users/ablanken/Sync/src/neovim-conf)
Executing: highlight! lualine_b_diff_modified_visual guifg=#f0e130 guibg=#000000 gui=None
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine)
chdir(/Users/ablanken/Sync/src/neovim-conf)
Executing: highlight! lualine_b_diff_modified_replace guifg=#f0e130 guibg=#000000 gui=None
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine)
chdir(/Users/ablanken/Sync/src/neovim-conf)
Executing: highlight! lualine_b_diff_modified_command guifg=#f0e130 guibg=#000000 gui=None
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine)
chdir(/Users/ablanken/Sync/src/neovim-conf)
Executing: highlight! lualine_b_diff_modified_terminal guifg=#f0e130 guibg=#000000 gui=None
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine)
chdir(/Users/ablanken/Sync/src/neovim-conf)
Executing: highlight! lualine_b_diff_modified_inactive guifg=#f0e130 guibg=#000000 gui=None
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine)
chdir(/Users/ablanken/Sync/src/neovim-conf)
Executing: highlight! lualine_b_diff_removed_normal guifg=#0000ff guibg=#000000 gui=None
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine)
chdir(/Users/ablanken/Sync/src/neovim-conf)
Executing: highlight! lualine_b_diff_removed_insert guifg=#0000ff guibg=#000000 gui=None
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine)
chdir(/Users/ablanken/Sync/src/neovim-conf)
Executing: highlight! lualine_b_diff_removed_visual guifg=#0000ff guibg=#000000 gui=None
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine)
chdir(/Users/ablanken/Sync/src/neovim-conf)
Executing: highlight! lualine_b_diff_removed_replace guifg=#0000ff guibg=#000000 gui=None
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine)
chdir(/Users/ablanken/Sync/src/neovim-conf)
Executing: highlight! lualine_b_diff_removed_command guifg=#0000ff guibg=#000000 gui=None
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine)
chdir(/Users/ablanken/Sync/src/neovim-conf)
Executing: highlight! lualine_b_diff_removed_terminal guifg=#0000ff guibg=#000000 gui=None
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine)
chdir(/Users/ablanken/Sync/src/neovim-conf)
Executing: highlight! lualine_b_diff_removed_inactive guifg=#0000ff guibg=#000000 gui=None
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine)
chdir(/Users/ablanken/Sync/src/neovim-conf)
Executing: au lualine BufEnter *
--- Autocommands ---
lualine  BufEnter
    *         lua require'lualine.components.branch.git_branch'.find_git_dir()
	Last set from ~/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine/utils/utils.lua line 90
Executing: autocmd lualine BufEnter * lua require'lualine.components.diff.git_diff'.update_diff_args()
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine/utils)
chdir(/Users/ablanken/Sync/src/neovim-conf)
Executing: au lualine BufWritePost *
--- Autocommands ---
Executing: autocmd lualine BufWritePost * lua require'lualine.components.diff.git_diff'.update_git_diff()
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine/utils)
chdir(/Users/ablanken/Sync/src/neovim-conf)
Executing: highlight! lualine_b_diagnostics_error_normal guifg=#ff0000 guibg=#000000 gui=None
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine)
chdir(/Users/ablanken/Sync/src/neovim-conf)
Executing: highlight! lualine_b_diagnostics_error_insert guifg=#ff0000 guibg=#000000 gui=None
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine)
chdir(/Users/ablanken/Sync/src/neovim-conf)
Executing: highlight! lualine_b_diagnostics_error_visual guifg=#ff0000 guibg=#000000 gui=None
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine)
chdir(/Users/ablanken/Sync/src/neovim-conf)
Executing: highlight! lualine_b_diagnostics_error_replace guifg=#ff0000 guibg=#000000 gui=None
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine)
chdir(/Users/ablanken/Sync/src/neovim-conf)
Executing: highlight! lualine_b_diagnostics_error_command guifg=#ff0000 guibg=#000000 gui=None
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine)
chdir(/Users/ablanken/Sync/src/neovim-conf)
Executing: highlight! lualine_b_diagnostics_error_terminal guifg=#ff0000 guibg=#000000 gui=None
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine)
chdir(/Users/ablanken/Sync/src/neovim-conf)
Executing: highlight! lualine_b_diagnostics_error_inactive guifg=#ff0000 guibg=#000000 gui=None
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine)
chdir(/Users/ablanken/Sync/src/neovim-conf)
Executing: highlight! lualine_b_diagnostics_warn_normal guifg=#ffa500 guibg=#000000 gui=None
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine)
chdir(/Users/ablanken/Sync/src/neovim-conf)
Executing: highlight! lualine_b_diagnostics_warn_insert guifg=#ffa500 guibg=#000000 gui=None
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine)
chdir(/Users/ablanken/Sync/src/neovim-conf)
Executing: highlight! lualine_b_diagnostics_warn_visual guifg=#ffa500 guibg=#000000 gui=None
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine)
chdir(/Users/ablanken/Sync/src/neovim-conf)
Executing: highlight! lualine_b_diagnostics_warn_replace guifg=#ffa500 guibg=#000000 gui=None
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine)
chdir(/Users/ablanken/Sync/src/neovim-conf)
Executing: highlight! lualine_b_diagnostics_warn_command guifg=#ffa500 guibg=#000000 gui=None
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine)
chdir(/Users/ablanken/Sync/src/neovim-conf)
Executing: highlight! lualine_b_diagnostics_warn_terminal guifg=#ffa500 guibg=#000000 gui=None
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine)
chdir(/Users/ablanken/Sync/src/neovim-conf)
Executing: highlight! lualine_b_diagnostics_warn_inactive guifg=#ffa500 guibg=#000000 gui=None
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine)
chdir(/Users/ablanken/Sync/src/neovim-conf)
Executing: highlight! lualine_b_diagnostics_info_normal guifg=#add8e6 guibg=#000000 gui=None
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine)
chdir(/Users/ablanken/Sync/src/neovim-conf)
Executing: highlight! lualine_b_diagnostics_info_insert guifg=#add8e6 guibg=#000000 gui=None
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine)
chdir(/Users/ablanken/Sync/src/neovim-conf)
Executing: highlight! lualine_b_diagnostics_info_visual guifg=#add8e6 guibg=#000000 gui=None
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine)
chdir(/Users/ablanken/Sync/src/neovim-conf)
Executing: highlight! lualine_b_diagnostics_info_replace guifg=#add8e6 guibg=#000000 gui=None
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine)
chdir(/Users/ablanken/Sync/src/neovim-conf)
Executing: highlight! lualine_b_diagnostics_info_command guifg=#add8e6 guibg=#000000 gui=None
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine)
chdir(/Users/ablanken/Sync/src/neovim-conf)
Executing: highlight! lualine_b_diagnostics_info_terminal guifg=#add8e6 guibg=#000000 gui=None
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine)
chdir(/Users/ablanken/Sync/src/neovim-conf)
Executing: highlight! lualine_b_diagnostics_info_inactive guifg=#add8e6 guibg=#000000 gui=None
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine)
chdir(/Users/ablanken/Sync/src/neovim-conf)
Executing: highlight! lualine_b_diagnostics_hint_normal guifg=#d3d3d3 guibg=#000000 gui=None
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine)
chdir(/Users/ablanken/Sync/src/neovim-conf)
Executing: highlight! lualine_b_diagnostics_hint_insert guifg=#d3d3d3 guibg=#000000 gui=None
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine)
chdir(/Users/ablanken/Sync/src/neovim-conf)
Executing: highlight! lualine_b_diagnostics_hint_visual guifg=#d3d3d3 guibg=#000000 gui=None
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine)
chdir(/Users/ablanken/Sync/src/neovim-conf)
Executing: highlight! lualine_b_diagnostics_hint_replace guifg=#d3d3d3 guibg=#000000 gui=None
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine)
chdir(/Users/ablanken/Sync/src/neovim-conf)
Executing: highlight! lualine_b_diagnostics_hint_command guifg=#d3d3d3 guibg=#000000 gui=None
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine)
chdir(/Users/ablanken/Sync/src/neovim-conf)
Executing: highlight! lualine_b_diagnostics_hint_terminal guifg=#d3d3d3 guibg=#000000 gui=None
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine)
chdir(/Users/ablanken/Sync/src/neovim-conf)
Executing: highlight! lualine_b_diagnostics_hint_inactive guifg=#d3d3d3 guibg=#000000 gui=None
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine)
chdir(/Users/ablanken/Sync/src/neovim-conf)
Executing:   function! LualineSwitchTab(tabnr, mouseclicks, mousebutton, modifiers)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine/components/tabs)
chdir(/Users/ablanken/Sync/src/neovim-conf)
Executing: 
Executing:   function! LualineRenameTab(...)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine/components/tabs)
chdir(/Users/ablanken/Sync/src/neovim-conf)
Executing: 
Executing:   command! -nargs=? LualineRenameTab call LualineRenameTab("<args>")
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine/components/tabs)
chdir(/Users/ablanken/Sync/src/neovim-conf)
Executing: highlight! link lualine_a_tabs_active lualine_a_normal
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine)
chdir(/Users/ablanken/Sync/src/neovim-conf)
Executing: highlight! link lualine_a_tabs_inactive lualine_a_inactive
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine)
chdir(/Users/ablanken/Sync/src/neovim-conf)
Executing: autocmd lualine VimResized * redrawstatus
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua)
chdir(/Users/ablanken/Sync/src/neovim-conf)
Executing: augroup neoclip
Executing: autocmd!
Executing: autocmd TextYankPost * :lua require("neoclip.handlers").handle_yank_post()
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/nvim-neoclip.lua/lua)
chdir(/Users/ablanken/Sync/src/neovim-conf)
Executing: autocmd VimLeavePre * :lua require("neoclip.handlers").on_exit()
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/nvim-neoclip.lua/lua)
chdir(/Users/ablanken/Sync/src/neovim-conf)
Executing: augroup end
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf/conf/nvim)
chdir(/Users/ablanken/Sync/src/neovim-conf)
Searching for "data/plenary/filetypes/base.lua" in runtime path
Searching for "/Users/ablanken/.config/nvim/data/plenary/filetypes/base.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/data/plenary/filetypes/base.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/42header/data/plenary/filetypes/base.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/auto-session/data/plenary/filetypes/base.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/cheatsheet.nvim/data/plenary/filetypes/base.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/coc-nvim-lua/data/plenary/filetypes/base.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/coc.nvim/data/plenary/filetypes/base.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/Comment.nvim/data/plenary/filetypes/base.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/c_formatter_42.vim/data/plenary/filetypes/base.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/FTerm.nvim/data/plenary/filetypes/base.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/gentoo-syntax/data/plenary/filetypes/base.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/gitsigns.nvim/data/plenary/filetypes/base.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/indent-blankline.nvim/data/plenary/filetypes/base.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/lualine.nvim/data/plenary/filetypes/base.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/neon/data/plenary/filetypes/base.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/nvim-neoclip.lua/data/plenary/filetypes/base.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/nvim-treesitter/data/plenary/filetypes/base.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/nvim-web-devicons/data/plenary/filetypes/base.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/packer.nvim/data/plenary/filetypes/base.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/plenary.nvim/data/plenary/filetypes/base.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/session-lens/data/plenary/filetypes/base.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/sqlite.lua/data/plenary/filetypes/base.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/suda.vim/data/plenary/filetypes/base.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/telescope-file-browser.nvim/data/plenary/filetypes/base.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/telescope-fzf-native.nvim/data/plenary/filetypes/base.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/telescope-packer.nvim/data/plenary/filetypes/base.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/telescope-repo.nvim/data/plenary/filetypes/base.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/telescope-symbols.nvim/data/plenary/filetypes/base.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/telescope.nvim/data/plenary/filetypes/base.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/vim-fugitive/data/plenary/filetypes/base.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/vim-polyglot/data/plenary/filetypes/base.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/vim-rooter/data/plenary/filetypes/base.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/which-key.nvim/data/plenary/filetypes/base.lua"
Searching for "/Users/ablanken/.local/nvim-brew/Cellar/neovim/0.7.0/share/nvim/runtime/data/plenary/filetypes/base.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/Comment.nvim/after/data/plenary/filetypes/base.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/vim-polyglot/after/data/plenary/filetypes/base.lua"
Searching for "data/plenary/filetypes/builtin.lua" in runtime path
Searching for "/Users/ablanken/.config/nvim/data/plenary/filetypes/builtin.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/data/plenary/filetypes/builtin.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/42header/data/plenary/filetypes/builtin.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/auto-session/data/plenary/filetypes/builtin.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/cheatsheet.nvim/data/plenary/filetypes/builtin.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/coc-nvim-lua/data/plenary/filetypes/builtin.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/coc.nvim/data/plenary/filetypes/builtin.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/Comment.nvim/data/plenary/filetypes/builtin.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/c_formatter_42.vim/data/plenary/filetypes/builtin.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/FTerm.nvim/data/plenary/filetypes/builtin.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/gentoo-syntax/data/plenary/filetypes/builtin.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/gitsigns.nvim/data/plenary/filetypes/builtin.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/indent-blankline.nvim/data/plenary/filetypes/builtin.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/lualine.nvim/data/plenary/filetypes/builtin.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/neon/data/plenary/filetypes/builtin.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/nvim-neoclip.lua/data/plenary/filetypes/builtin.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/nvim-treesitter/data/plenary/filetypes/builtin.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/nvim-web-devicons/data/plenary/filetypes/builtin.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/packer.nvim/data/plenary/filetypes/builtin.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/plenary.nvim/data/plenary/filetypes/builtin.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/session-lens/data/plenary/filetypes/builtin.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/sqlite.lua/data/plenary/filetypes/builtin.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/suda.vim/data/plenary/filetypes/builtin.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/telescope-file-browser.nvim/data/plenary/filetypes/builtin.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/telescope-fzf-native.nvim/data/plenary/filetypes/builtin.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/telescope-packer.nvim/data/plenary/filetypes/builtin.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/telescope-repo.nvim/data/plenary/filetypes/builtin.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/telescope-symbols.nvim/data/plenary/filetypes/builtin.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/telescope.nvim/data/plenary/filetypes/builtin.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/vim-fugitive/data/plenary/filetypes/builtin.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/vim-polyglot/data/plenary/filetypes/builtin.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/vim-rooter/data/plenary/filetypes/builtin.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/which-key.nvim/data/plenary/filetypes/builtin.lua"
Searching for "/Users/ablanken/.local/nvim-brew/Cellar/neovim/0.7.0/share/nvim/runtime/data/plenary/filetypes/builtin.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/Comment.nvim/after/data/plenary/filetypes/builtin.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/vim-polyglot/after/data/plenary/filetypes/builtin.lua"
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf/conf/nvim)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf/conf/nvim)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf/conf/nvim)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf/conf/nvim)
chdir(/Users/ablanken/Sync/src/neovim-conf)
Executing: colorscheme neon
Searching for "colors/neon.vim" in runtime path
Searching for "/Users/ablanken/.config/nvim/colors/neon.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/colors/neon.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/42header/colors/neon.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/auto-session/colors/neon.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/cheatsheet.nvim/colors/neon.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/coc-nvim-lua/colors/neon.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/coc.nvim/colors/neon.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/Comment.nvim/colors/neon.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/c_formatter_42.vim/colors/neon.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/FTerm.nvim/colors/neon.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/gentoo-syntax/colors/neon.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/gitsigns.nvim/colors/neon.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/indent-blankline.nvim/colors/neon.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/lualine.nvim/colors/neon.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim"
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/neon/colors)
chdir(/Users/ablanken/Sync/src/neovim-conf)
line 0: sourcing "/Users/ablanken/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim"
line 1: " clear cache so this reloads changes.
line 2: " useful for development
line 3: lua package.loaded['neon'] = nil
line 4: lua package.loaded['neon.colors'] = nil
line 5: lua package.loaded['neon.utils'] = nil
line 6: lua package.loaded['neon.config'] = nil
line 7: lua require('neon').colorscheme()
line 7: hi clear
line 7: syntax reset
line 7: highlight TSConstant gui=NONE guifg=NONE guibg=NONE 
line 7: highlight Comment gui=italic guifg=#7e8294 guibg=NONE 
line 7: highlight TSField gui=NONE guifg=#ec7279 guibg=NONE 
line 7: highlight TSFunction gui=italicbold guifg=#d38aea guibg=NONE 
line 7: highlight TSMethod gui=italic guifg=#d38aea guibg=NONE 
line 7: highlight TSParameter gui=NONE guifg=#a9a1e1 guibg=NONE 
line 7: highlight TSProperty gui=NONE guifg=#a9a1e1 guibg=NONE 
line 7: highlight TSVariableBuiltin gui=italic guifg=#4db5bd guibg=NONE 
line 7: highlight Constant gui=NONE guifg=#a9a1e1 guibg=NONE 
line 7: highlight Function gui=italicbold guifg=#6cb6eb guibg=NONE 
line 7: highlight IndentBlanklineChar gui=NONE guifg=#676E95 guibg=NONE 
line 7: highlight IndentBlanklineContextChar gui=NONE guifg=#4db5bd guibg=NONE 
line 7: highlight Statement gui=NONE guifg=#6cb6eb guibg=NONE 
line 7: highlight Identifier gui=italic guifg=#6cb6eb guibg=NONE 
line 7: highlight StatusLineNC gui=NONE guifg=#7e8294 guibg=NONE 
line 7: highlight StatusLine gui=NONE guifg=#6cb6eb guibg=#2b2d37 
line 7: highlight Keyword gui=italic guifg=#6cb6eb guibg=NONE 
line 7: highlight Type gui=NONE guifg=#4db5bd guibg=NONE 
line 7: highlight GitSignsChangeNr gui=NONE guifg=#fabd2f guibg=NONE 
line 7: highlight GitSignsChange gui=NONE guifg=#fabd2f guibg=NONE 
line 7: highlight GitSignsAddLn gui=NONE guifg=#8ec07c guibg=NONE 
line 7: highlight GitSignsAddNr gui=NONE guifg=#8ec07c guibg=NONE 
line 7: highlight CocExplorerBufferNameVisible gui=NONE guifg=#da8548 guibg=NONE 
line 7: highlight CocExplorerBufferModified gui=NONE guifg=#d38aea guibg=NONE 
line 7: highlight CocExplorerBufferReadonly gui=NONE guifg=#d38aea guibg=NONE 
line 7: highlight CocExplorerFileFullPath gui=NONE guifg=#7e8294 guibg=NONE 
line 7: highlight markdownListMarker gui=NONE guifg=#ec7279 guibg=NONE 
line 7: highlight TSURI gui=NONE guifg=#d38aea guibg=NONE 
line 7: highlight CocExplorerBufferRoot gui=NONE guifg=#4db5bd guibg=NONE 
line 7: highlight CocExplorerIndentLine gui=NONE guifg=#7e8294 guibg=NONE 
line 7: highlight CocHintHighlight gui=NONE guifg=#6cb6eb guibg=NONE 
line 7: highlight CocInfoHighlight gui=NONE guifg=#a0c980 guibg=NONE 
line 7: highlight CocWarningHighlight gui=NONE guifg=#da8548 guibg=NONE 
line 7: highlight CocErrorHighlight gui=NONE guifg=#ec7279 guibg=NONE 
line 7: highlight CocCodeLens gui=NONE guifg=#7e8294 guibg=NONE 
line 7: highlight PreProc gui=NONE guifg=#da8548 guibg=NONE 
line 7: highlight CocDiagnosticsHint gui=NONE guifg=#6cb6eb guibg=NONE 
line 7: highlight CocDiagnosticsInfo gui=NONE guifg=#a0c980 guibg=NONE 
line 7: highlight CocDiagnosticsWarning gui=NONE guifg=#da8548 guibg=NONE 
line 7: highlight CocDiagnosticsError gui=NONE guifg=#ec7279 guibg=NONE 
line 7: highlight CocHintFloat gui=NONE guifg=#6cb6eb guibg=NONE 
line 7: highlight CocInfoFloat gui=NONE guifg=#a0c980 guibg=NONE 
line 7: highlight CocWarningFloat gui=NONE guifg=#da8548 guibg=NONE 
line 7: highlight CocErrorFloat gui=NONE guifg=#ec7279 guibg=NONE 
line 7: highlight CocHintSign gui=NONE guifg=#6cb6eb guibg=NONE 
line 7: highlight CocInfoSign gui=NONE guifg=#a0c980 guibg=NONE 
line 7: highlight NormalFloat gui=NONE guifg=#c5cdd9 guibg=#363a49 
line 7: highlight CocErrorSign gui=NONE guifg=#ec7279 guibg=NONE 
line 7: highlight EasyMotionTarget2Second gui=bold guifg=#ec7279 guibg=NONE 
line 7: highlight EasyMotionTarget2First gui=bold guifg=#ec7279 guibg=NONE 
line 7: highlight EasyMotionTarget gui=bold guifg=#ec7279 guibg=NONE 
line 7: highlight StartifyFooter gui=NONE guifg=#a0c980 guibg=NONE 
line 7: highlight StartifySection gui=NONE guifg=#ec7279 guibg=NONE 
line 7: highlight StartifyHeader gui=NONE guifg=#d38aea guibg=NONE 
line 7: highlight StartifySlash gui=NONE guifg=#a9a1e1 guibg=NONE 
line 7: highlight StartifyFile gui=NONE guifg=#a0c980 guibg=NONE 
line 7: highlight StartifyPath gui=NONE guifg=#6cb6eb guibg=NONE 
line 7: highlight Define gui=NONE guifg=#4db5bd guibg=NONE 
line 7: highlight StartifySpecial gui=NONE guifg=#4db5bd guibg=NONE 
line 7: highlight StartifyBracket gui=NONE guifg=#7e8294 guibg=NONE 
line 7: highlight StartifySelect gui=NONE guifg=#a0c980 guibg=NONE 
line 7: highlight StartifyNumber gui=NONE guifg=#d38aea guibg=NONE 
line 7: highlight Float gui=NONE guifg=#ec7279 guibg=NONE 
line 7: highlight TSNumber gui=NONE guifg=#ec7279 guibg=NONE 
line 7: highlight SneakScope gui=NONE guifg=NONE guibg=#404455 
line 7: highlight Sneak gui=NONE guifg=#2b2d37 guibg=#a0c980 
line 7: highlight BufferLineFill gui=NONE guifg=NONE guibg=#3a3e4e 
line 7: highlight BufferLineIndicatorSelected gui=NONE guifg=#a0c980 guibg=NONE 
line 7: highlight TargetWord gui=NONE guifg=#4db5bd guibg=NONE 
line 7: highlight Character gui=NONE guifg=#da8548 guibg=NONE 
line 7: highlight DefinitionIcon gui=NONE guifg=#6cb6eb guibg=NONE 
line 7: highlight DefinitionCount gui=NONE guifg=#d38aea guibg=NONE 
line 7: highlight ReferencesCount gui=NONE guifg=#d38aea guibg=NONE 
line 7: highlight String gui=NONE guifg=#a0c980 guibg=NONE 
line 7: highlight LspSagaCodeActionContent gui=NONE guifg=#d38aea guibg=NONE 
line 7: highlight LspSagaCodeActionTitle gui=NONE guifg=#4C566A guibg=NONE 
line 7: highlight LspSagaFinderSelection gui=NONE guifg=#a0c980 guibg=NONE 
line 7: highlight LspSagaCodeActionBorder gui=NONE guifg=#6cb6eb guibg=NONE 
line 7: highlight LspSagaDefPreviewBorder gui=NONE guifg=#a0c980 guibg=NONE 
line 7: highlight SignColumn gui=NONE guifg=#c5cdd9 guibg=#2b2d37 
line 7: highlight LspSagaHoverBorder gui=NONE guifg=#4C566A guibg=NONE 
line 7: highlight SpecialChar gui=NONE guifg=#da8548 guibg=NONE 
line 7: highlight TabLineFill gui=NONE guifg=#c5cdd9 guibg=NONE 
line 7: highlight LspDiagnosticsDefaultHint gui=NONE guifg=#4db5bd guibg=NONE 
line 7: highlight DiagnosticTruncateLine gui=NONE guifg=#c5cdd9 guibg=NONE 
line 7: highlight TelescopeResultsBorder gui=NONE guifg=#6cb6eb guibg=NONE 
line 7: highlight markdownIdDelimiter gui=NONE guifg=#4db5bd guibg=NONE 
line 7: highlight markdownstyle gui=italic guifg=#4db5bd guibg=NONE 
line 7: highlight markdownLinkDelimiter gui=NONE guifg=#4db5bd guibg=NONE 
line 7: highlight markdownLinkText gui=NONE guifg=#6cb6eb guibg=NONE 
line 7: highlight TelescopePreviewBorder gui=NONE guifg=#d38aea guibg=NONE 
line 7: highlight markdownOrderedListMarker gui=NONE guifg=#ec7279 guibg=NONE 
line 7: highlight markdownRule gui=NONE guifg=#7e8294 guibg=NONE 
line 7: highlight markdownUrl gui=underline guifg=#4db5bd guibg=NONE 
line 7: highlight markdownBlockquote gui=NONE guifg=#7e8294 guibg=NONE 
line 7: highlight markdownBold gui=bold guifg=#da8548 guibg=NONE 
line 7: highlight markdownCode gui=NONE guifg=#d38aea guibg=#333644 
line 7: highlight markdownCodeBlock gui=NONE guifg=#a0c980 guibg=NONE 
line 7: highlight markdownCodeDelimiter gui=NONE guifg=#a0c980 guibg=NONE 
line 7: highlight DashboardShortCut gui=NONE guifg=#ec7279 guibg=NONE 
line 7: highlight DashboardHeader gui=NONE guifg=#d38aea guibg=NONE 
line 7: highlight DashboardCenter gui=NONE guifg=#6cb6eb guibg=NONE 
line 7: highlight DashboardFooter gui=italic guifg=#a0c980 guibg=NONE 
line 7: highlight TSComment gui=italic guifg=#7e8294 guibg=NONE 
line 7: highlight TSConditional gui=italic guifg=#ADD8E6 guibg=NONE 
line 7: highlight DiagnosticHint gui=NONE guifg=#4db5bd guibg=NONE 
line 7: highlight TSKeyword gui=italic guifg=#6cb6eb guibg=NONE 
line 7: highlight TSAnnotation gui=NONE guifg=NONE guibg=NONE 
line 7: highlight TSRepeat gui=italic guifg=#6cb6eb guibg=NONE 
line 7: highlight TSAttribute gui=NONE guifg=NONE guibg=NONE 
line 7: highlight TSKeywordFunction gui=italic guifg=#6cb6eb guibg=NONE 
line 7: highlight TSCharacter gui=NONE guifg=NONE guibg=NONE 
line 7: highlight TSBoolean gui=italic guifg=#da8548 guibg=NONE 
line 7: highlight TSConstructor gui=NONE guifg=NONE guibg=NONE 
line 7: highlight TSFuncBuiltin gui=italic guifg=#da8548 guibg=NONE 
line 7: highlight TSVariable gui=italic guifg=#D8BFD8 guibg=NONE 
line 7: highlight DiagnosticInformation gui=NONE guifg=#6cb6eb guibg=NONE 
line 7: highlight TSConstMacro gui=NONE guifg=#4db5bd guibg=NONE 
line 7: highlight TSError gui=NONE guifg=#ec7279 guibg=NONE 
line 7: highlight TSException gui=NONE guifg=#6cb6eb guibg=NONE 
line 7: highlight TSFloat gui=NONE guifg=#ec7279 guibg=NONE 
line 7: highlight GitGutterAdd gui=NONE guifg=#8ec07c guibg=NONE 
line 7: highlight SignifySignAdd gui=NONE guifg=#8ec07c guibg=NONE 
line 7: highlight TSLabel gui=NONE guifg=#4db5bd guibg=NONE 
line 7: highlight diffAdded gui=NONE guifg=#8ec07c guibg=NONE 
line 7: highlight DiffAdd gui=reverse guifg=#8ec07c guibg=NONE 
line 7: highlight TSOperator gui=NONE guifg=#6cb6eb guibg=NONE 
line 7: highlight TSParameterReference gui=NONE guifg=#c5cdd9 guibg=NONE 
line 7: highlight TSPunctDelimiter gui=NONE guifg=#c5cdd9 guibg=NONE 
line 7: highlight TSPunctBracket gui=NONE guifg=#d38aea guibg=NONE 
line 7: highlight DiffChange gui=reverse guifg=#458588 guibg=NONE 
line 7: highlight TSString gui=NONE guifg=#a0c980 guibg=NONE 
line 7: highlight TSStringRegex gui=NONE guifg=#6cb6eb guibg=NONE 
line 7: highlight TSStringEscape gui=NONE guifg=#da8548 guibg=NONE 
line 7: highlight diffRemoved gui=NONE guifg=#fb4934 guibg=NONE 
line 7: highlight DiffDelete gui=reverse guifg=#fb4934 guibg=NONE 
line 7: highlight TSTypeBuiltin gui=NONE guifg=#4db5bd guibg=NONE 
line 7: highlight TSTag gui=NONE guifg=#6cb6eb guibg=NONE 
line 7: highlight TSTagDelimiter gui=NONE guifg=#6cb6eb guibg=NONE 
line 7: highlight TSText gui=NONE guifg=#a9a1e1 guibg=NONE 
line 7: highlight TSTextReference gui=NONE guifg=#da8548 guibg=NONE 
line 7: highlight TSEmphasis gui=NONE guifg=#a9a1e1 guibg=NONE 
line 7: highlight TSUnderline gui=underline guifg=#c5cdd9 guibg=NONE 
line 7: highlight TSStrike gui=NONE guifg=NONE guibg=NONE 
line 7: highlight TSTitle gui=bold guifg=#c5cdd9 guibg=NONE 
line 7: highlight TSLiteral gui=NONE guifg=#c5cdd9 guibg=NONE 
line 7: highlight NonText gui=NONE guifg=#3a3e4e guibg=NONE 
line 7: highlight LspDiagnosticsSignError gui=NONE guifg=#ec7279 guibg=NONE 
line 7: highlight LspDiagnosticsFloatingError gui=bold guifg=#ec7279 guibg=NONE 
line 7: highlight LspDiagnosticsVirtualTextError gui=bold guifg=#ec7279 guibg=NONE 
line 7: highlight LspDiagnosticsUnderlineError gui=undercurl guifg=#ec7279 guibg=NONE guisp=#ec7279
line 7: highlight DiagnosticWarning gui=NONE guifg=#da8548 guibg=NONE 
line 7: highlight LspDiagnosticsSignWarning gui=NONE guifg=#da8548 guibg=NONE 
line 7: highlight LspDiagnosticsFloatingWarning gui=bold guifg=#da8548 guibg=NONE 
line 7: highlight LspDiagnosticsVirtualTextWarning gui=bold guifg=#da8548 guibg=NONE 
line 7: highlight LspDiagnosticsUnderlineWarning gui=undercurl guifg=#da8548 guibg=NONE guisp=#da8548
line 7: highlight LspDiagnosticsSignInformation gui=NONE guifg=#6cb6eb guibg=NONE 
line 7: highlight LspDiagnosticsFloatingInformation gui=bold guifg=#6cb6eb guibg=NONE 
line 7: highlight LspDiagnosticsVirtualTextInformation gui=bold guifg=#6cb6eb guibg=NONE 
line 7: highlight LspDiagnosticsUnderlineInformation gui=undercurl guifg=#6cb6eb guibg=NONE guisp=#6cb6eb
line 7: highlight LspDiagnosticsSignHint gui=NONE guifg=#4db5bd guibg=NONE 
line 7: highlight LspDiagnosticsFloatingHint gui=bold guifg=#4db5bd guibg=NONE 
line 7: highlight LspDiagnosticsVirtualTextHint gui=bold guifg=#4db5bd guibg=NONE 
line 7: highlight LspDiagnosticsUnderlineHint gui=undercurl guifg=#4db5bd guibg=NONE guisp=#6cb6eb
line 7: highlight LspReferenceText gui=NONE guifg=#c5cdd9 guibg=#d38aea 
line 7: highlight LspReferenceRead gui=NONE guifg=#c5cdd9 guibg=#d38aea 
line 7: highlight LspReferenceWrite gui=NONE guifg=#c5cdd9 guibg=#d38aea 
line 7: highlight LspTroubleText gui=NONE guifg=#404455 guibg=NONE 
line 7: highlight LspTroubleCount gui=NONE guifg=#d38aea guibg=#3a3e4e 
line 7: highlight LspTroubleNormal gui=NONE guifg=#c5cdd9 guibg=#2b2d37 
line 7: highlight diffOldFile gui=NONE guifg=#404455 guibg=NONE 
line 7: highlight diffNewFile gui=NONE guifg=#c5cdd9 guibg=NONE 
line 7: highlight diffFile gui=NONE guifg=#7e8294 guibg=NONE 
line 7: highlight diffLine gui=NONE guifg=#4db5bd guibg=NONE 
line 7: highlight diffIndexLine gui=NONE guifg=#d38aea guibg=NONE 
line 7: highlight NeogitBranch gui=NONE guifg=#4C566A guibg=NONE 
line 7: highlight NeogitRemote gui=NONE guifg=#d38aea guibg=NONE 
line 7: highlight NeogitHunkHeader gui=NONE guifg=#c5cdd9 guibg=#4db5bd 
line 7: highlight NeogitHunkHeaderHighlight gui=NONE guifg=#6cb6eb guibg=NONE 
line 7: highlight NeogitDiffContextHighlight gui=NONE guifg=#c5cdd9 guibg=NONE 
line 7: highlight NeogitDiffDeleteHighlight gui=NONE guifg=#ec7279 guibg=NONE 
line 7: highlight NeogitDiffAddHighlight gui=NONE guifg=#a0c980 guibg=NONE 
line 7: highlight Include gui=NONE guifg=#6cb6eb guibg=NONE 
line 7: highlight SyntasticError gui=NONE guifg=#ec7279 guibg=NONE 
line 7: highlight SyntasticWarning gui=NONE guifg=#ECBE7B guibg=NONE 
line 7: highlight SyntasticErrorSign gui=NONE guifg=#ec7279 guibg=NONE 
line 7: highlight SyntasticWarningSign gui=NONE guifg=#ECBE7B guibg=NONE 
line 7: highlight NERDTreeDir gui=NONE guifg=#d38aea guibg=NONE 
line 7: highlight NERDTreeDirSlash gui=NONE guifg=#6cb6eb guibg=NONE 
line 7: highlight NERDTreeOpenable gui=NONE guifg=#da8548 guibg=NONE 
line 7: highlight Tag gui=NONE guifg=#ec7279 guibg=NONE 
line 7: highlight Delimiter gui=NONE guifg=#ECBE7B guibg=NONE 
line 7: highlight SpecialComment gui=NONE guifg=#6cb6eb guibg=NONE 
line 7: highlight Debug gui=NONE guifg=#ec7279 guibg=NONE 
line 7: highlight Underlined gui=underline guifg=#4db5bd guibg=NONE 
line 7: highlight NERDTreeHelp gui=NONE guifg=#4C566A guibg=NONE 
line 7: highlight Ignore gui=NONE guifg=#4C566A guibg=NONE 
line 7: highlight NERDTreeToggleOff gui=NONE guifg=#ec7279 guibg=NONE 
line 7: highlight Todo gui=bold,italic guifg=#4db5bd guibg=NONE 
line 7: highlight htmlArg gui=NONE guifg=#da8548 guibg=NONE 
line 7: highlight htmlBold gui=bold guifg=#da8548 guibg=NONE 
line 7: highlight htmlEndTag gui=NONE guifg=#c5cdd9 guibg=NONE 
line 7: highlight htmlstyle gui=italic guifg=#4db5bd guibg=NONE 
line 7: highlight htmlLink gui=underline guifg=#4db5bd guibg=NONE 
line 7: highlight htmlSpecialChar gui=NONE guifg=#da8548 guibg=NONE 
line 7: highlight htmlSpecialTagName gui=bold guifg=#6cb6eb guibg=NONE 
line 7: highlight htmlTag gui=NONE guifg=#c5cdd9 guibg=NONE 
line 7: highlight htmlTagN gui=NONE guifg=#6cb6eb guibg=NONE 
line 7: highlight htmlTagName gui=NONE guifg=#6cb6eb guibg=NONE 
line 7: highlight htmlTitle gui=NONE guifg=#c5cdd9 guibg=NONE 
line 7: highlight htmlH1 gui=bold guifg=#6cb6eb guibg=NONE 
line 7: highlight htmlH2 gui=bold guifg=#6cb6eb guibg=NONE 
line 7: highlight htmlH3 gui=bold guifg=#6cb6eb guibg=NONE 
line 7: highlight htmlH4 gui=bold guifg=#6cb6eb guibg=NONE 
line 7: highlight htmlH5 gui=bold guifg=#6cb6eb guibg=NONE 
line 7: highlight markdownH1 gui=bold guifg=#6cb6eb guibg=NONE 
line 7: highlight markdownH2 gui=bold guifg=#6cb6eb guibg=NONE 
line 7: highlight markdownH3 gui=bold guifg=#6cb6eb guibg=NONE 
line 7: highlight markdownH4 gui=bold guifg=#6cb6eb guibg=NONE 
line 7: highlight markdownH5 gui=bold guifg=#6cb6eb guibg=NONE 
line 7: highlight markdownH6 gui=bold guifg=#6cb6eb guibg=NONE 
line 7: highlight markdownHeadingDelimiter gui=NONE guifg=#ec7279 guibg=NONE 
line 7: highlight markdownHeadingRule gui=NONE guifg=#7e8294 guibg=NONE 
line 7: highlight markdownId gui=NONE guifg=#4db5bd guibg=NONE 
line 7: highlight TSFuncMacro gui=NONE guifg=#da8548 guibg=NONE 
line 7: highlight WhichKeyFloating gui=NONE guifg=NONE guibg=#333644 
line 7: highlight WhichKeySeperator gui=NONE guifg=#a0c980 guibg=NONE 
line 7: highlight WhichKeyDesc gui=bold guifg=#6cb6eb guibg=NONE 
line 7: highlight WhichKeyGroup gui=italic guifg=#a9a1e1 guibg=NONE 
line 7: highlight WhichKey gui=bold guifg=#d38aea guibg=NONE 
line 7: highlight ALEVirtualTextInfo gui=NONE guifg=#6cb6eb guibg=NONE 
line 7: highlight ALEVirtualTextWarning gui=NONE guifg=#ECBE7B guibg=NONE 
line 7: highlight ALEVirtualTextError gui=NONE guifg=#ec7279 guibg=NONE 
line 7: highlight ALEInfoSign gui=NONE guifg=#6cb6eb guibg=NONE 
line 7: highlight ALEWarningSign gui=NONE guifg=#da8548 guibg=NONE 
line 7: highlight ALEErrorSign gui=NONE guifg=#ec7279 guibg=NONE 
line 7: highlight ALEInfo gui=NONE guifg=#6cb6eb guibg=NONE 
line 7: highlight ALEWarning gui=NONE guifg=#da8548 guibg=NONE 
line 7: highlight ALEError gui=NONE guifg=#ec7279 guibg=NONE 
line 7: highlight LspDiagnosticsHint gui=NONE guifg=#6cb6eb guibg=NONE 
line 7: highlight LspDiagnosticsInformation gui=NONE guifg=#4C566A guibg=NONE 
line 7: highlight LspDiagnosticsWarning gui=NONE guifg=#da8548 guibg=NONE 
line 7: highlight LspDiagnosticsError gui=NONE guifg=#ec7279 guibg=NONE 
line 7: highlight NvimTreeIndentMarker gui=NONE guifg=#676E95 guibg=NONE 
line 7: highlight NvimTreeFolderIcon gui=NONE guifg=#7e8294 guibg=NONE 
line 7: highlight NvimTreeEmptyFolderName gui=NONE guifg=#7e8294 guibg=NONE 
line 7: highlight NvimTreeFolderName gui=NONE guifg=#6cb6eb guibg=NONE 
line 7: highlight NvimTreeSpecialFile gui=underline guifg=#ECBE7B guibg=NONE 
line 7: highlight NvimTreeExecFile gui=NONE guifg=#a0c980 guibg=NONE 
line 7: highlight NvimTreeImageFile gui=NONE guifg=#d38aea guibg=NONE 
line 7: highlight NvimTreeGitNew gui=NONE guifg=#a0c980 guibg=NONE 
line 7: highlight NvimTreeGitDirty gui=NONE guifg=#fabd2f guibg=NONE 
line 7: highlight NvimTreeNormal gui=NONE guifg=#c5cdd9 guibg=#2b2d37 
line 7: highlight NvimTreeRootFolder gui=italic guifg=#4db5bd guibg=NONE 
line 7: highlight NERDTreeToggleOn gui=NONE guifg=#a0c980 guibg=NONE 
line 7: highlight NERDTreeCWD gui=NONE guifg=#a0c980 guibg=NONE 
line 7: highlight NERDTreeUp gui=NONE guifg=#7e8294 guibg=NONE 
line 7: highlight NERDTreeExecFile gui=NONE guifg=#a0c980 guibg=NONE 
line 7: highlight NERDTreeFile gui=NONE guifg=#6cb6eb guibg=NONE 
line 7: highlight NERDTreeClosable gui=NONE guifg=#da8548 guibg=NONE 
line 7: highlight GitSignsDeleteLn gui=NONE guifg=#fb4934 guibg=NONE 
line 7: highlight Error gui=bold,underline guifg=#ec7279 guibg=NONE 
line 7: highlight Typedef gui=NONE guifg=#4db5bd guibg=NONE 
line 7: highlight GitSignsAdd gui=NONE guifg=#8ec07c guibg=NONE 
line 7: highlight GitGutterDelete gui=NONE guifg=#fb4934 guibg=NONE 
line 7: highlight GitGutterChange gui=NONE guifg=#458588 guibg=NONE 
line 7: highlight diffChanged gui=NONE guifg=#458588 guibg=NONE 
line 7: highlight TSType gui=NONE guifg=#da8548 guibg=NONE 
line 7: highlight TSSymbol gui=NONE guifg=#da8548 guibg=NONE 
line 7: highlight TSPunctSpecial gui=NONE guifg=#ECBE7B guibg=NONE 
line 7: highlight healthSuccess gui=NONE guifg=#a0c980 guibg=NONE 
line 7: highlight Operator gui=NONE guifg=#6cb6eb guibg=NONE 
line 7: highlight markdownIdDeclaration gui=NONE guifg=#6cb6eb guibg=NONE 
line 7: highlight Special gui=italic guifg=#6cb6eb guibg=NONE 
line 7: highlight Label gui=NONE guifg=#4db5bd guibg=NONE 
line 7: highlight PreCondit gui=NONE guifg=#4db5bd guibg=NONE 
line 7: highlight Macro gui=NONE guifg=#6cb6eb guibg=NONE 
line 7: highlight Exception gui=NONE guifg=#6cb6eb guibg=NONE 
line 7: highlight ErrorMsg gui=NONE guifg=#ec7279 guibg=NONE 
line 7: highlight DiagnosticError gui=NONE guifg=#ec7279 guibg=NONE 
line 7: highlight LspDiagnosticsDefaultError gui=NONE guifg=#ec7279 guibg=NONE 
line 7: highlight TSNamespace gui=NONE guifg=#4db5bd guibg=NONE 
line 7: highlight TSInclude gui=NONE guifg=#6cb6eb guibg=NONE 
line 7: highlight LspDiagnosticsDefaultWarning gui=NONE guifg=#da8548 guibg=NONE 
line 7: highlight DiffText gui=reverse guifg=#c5cdd9 guibg=NONE 
line 7: highlight EndOfBuffer gui=NONE guifg=#676E95 guibg=NONE 
line 7: highlight LspDiagnosticsDefaultInformation gui=NONE guifg=#6cb6eb guibg=NONE 
line 7: highlight FloatBorder gui=NONE guifg=#6cb6eb guibg=#363a49 
line 7: highlight ColorColumn gui=NONE guifg=NONE guibg=#3a3e4e 
line 7: highlight TelescopePromptBorder gui=NONE guifg=#a0c980 guibg=NONE 
line 7: highlight Conceal gui=NONE guifg=#7e8294 guibg=NONE 
line 7: highlight WhichKeyFloat gui=NONE guifg=NONE guibg=#333644 
line 7: highlight Cursor gui=reverse guifg=#4db5bd guibg=NONE 
line 7: highlight CursorIM gui=reverse guifg=#4db5bd guibg=NONE 
line 7: highlight Directory gui=bold guifg=#6cb6eb guibg=NONE 
line 7: highlight LspFloatWinNormal gui=NONE guifg=NONE guibg=#2b2d37 
line 7: highlight LspFloatWinBorder gui=NONE guifg=#d38aea guibg=NONE 
line 7: highlight LspSagaBorderTitle gui=NONE guifg=#4db5bd guibg=NONE 
line 7: highlight Folded gui=italic guifg=#7e8294 guibg=NONE 
line 7: highlight LspSagaRenameBorder gui=NONE guifg=#a0c980 guibg=NONE 
line 7: highlight FoldColumn gui=NONE guifg=#6cb6eb guibg=NONE 
line 7: highlight IncSearch gui=reverse guifg=NONE guibg=NONE 
line 7: highlight LineNr gui=NONE guifg=#676E95 guibg=NONE 
line 7: highlight CursorLineNr gui=NONE guifg=#4db5bd guibg=NONE 
line 7: highlight MatchParen gui=underline,bold guifg=#ec7279 guibg=NONE 
line 7: highlight LspSagaSignatureHelpBorder gui=NONE guifg=#d38aea guibg=NONE 
line 7: highlight ModeMsg gui=bold guifg=#4db5bd guibg=NONE 
line 7: highlight MoreMsg gui=bold guifg=#4db5bd guibg=NONE 
line 7: highlight Pmenu gui=NONE guifg=#c5cdd9 guibg=#404455 
line 7: highlight ReferencesIcon gui=NONE guifg=#6cb6eb guibg=NONE 
line 7: highlight PmenuSel gui=bold guifg=#2b2d37 guibg=#6cb6eb 
line 7: highlight PmenuSbar gui=NONE guifg=#c5cdd9 guibg=#363a49 
line 7: highlight PmenuThumb gui=NONE guifg=#c5cdd9 guibg=#7e8294 
line 7: highlight Question gui=bold guifg=#a0c980 guibg=NONE 
line 7: highlight QuickFixLine gui=bold,italic guifg=#6cb6eb guibg=#333644 
line 7: highlight DapBreakpoint gui=NONE guifg=#ec7279 guibg=NONE 
line 7: highlight DapStopped gui=NONE guifg=#a0c980 guibg=NONE 
line 7: highlight qfLineNr gui=NONE guifg=#6cb6eb guibg=#333644 
line 7: highlight Search gui=reverse guifg=NONE guibg=NONE 
line 7: highlight SpecialKey gui=NONE guifg=#3a3e4e guibg=NONE 
line 7: highlight SpellBad gui=italic,undercurl guifg=#ec7279 guibg=NONE 
line 7: highlight StartifyVar gui=NONE guifg=#6cb6eb guibg=NONE 
line 7: highlight SpellCap gui=italic,undercurl guifg=#6cb6eb guibg=NONE 
line 7: highlight SpellLocal gui=italic,undercurl guifg=#4db5bd guibg=NONE 
line 7: highlight SpellRare gui=italic,undercurl guifg=#4db5bd guibg=NONE 
line 7: highlight StatusLineTerm gui=NONE guifg=#c5cdd9 guibg=#3a3e4e 
line 7: highlight StatusLineTermNC gui=NONE guifg=#c5cdd9 guibg=#3a3e4e 
line 7: highlight TablineSel gui=NONE guifg=#2b2d37 guibg=#6cb6eb 
line 7: highlight Tabline gui=NONE guifg=#7e8294 guibg=NONE 
line 7: highlight Title gui=bold guifg=#4db5bd guibg=NONE 
line 7: highlight Visual gui=reverse guifg=NONE guibg=NONE 
line 7: highlight VisualNOS gui=reverse guifg=NONE guibg=NONE 
line 7: highlight CocWarningSign gui=NONE guifg=#da8548 guibg=NONE 
line 7: highlight WildMenu gui=bold guifg=#2b2d37 guibg=#6cb6eb 
line 7: highlight CursorColumn gui=NONE guifg=NONE guibg=#c5cdd9 
line 7: highlight CursorLine gui=NONE guifg=NONE guibg=#333644 
line 7: highlight ToolbarLine gui=NONE guifg=#c5cdd9 guibg=#333644 
line 7: highlight ToolbarButton gui=bold guifg=#c5cdd9 guibg=NONE 
line 7: highlight NormalMode gui=reverse guifg=#4db5bd guibg=NONE 
line 7: highlight InsertMode gui=reverse guifg=#a0c980 guibg=NONE 
line 7: highlight ReplacelMode gui=reverse guifg=#ec7279 guibg=NONE 
line 7: highlight VisualMode gui=reverse guifg=#4db5bd guibg=NONE 
line 7: highlight VertSplit gui=NONE guifg=#4C566A guibg=NONE 
line 7: highlight CocSelectedText gui=NONE guifg=#ec7279 guibg=NONE 
line 7: highlight CommandMode gui=reverse guifg=#7e8294 guibg=NONE 
line 7: highlight Warnings gui=NONE guifg=#da8548 guibg=NONE 
line 7: highlight healthError gui=NONE guifg=#ec7279 guibg=NONE 
line 7: highlight Number gui=NONE guifg=#ec7279 guibg=NONE 
line 7: highlight healthWarning gui=NONE guifg=#da8548 guibg=NONE 
line 7: highlight StorageClass gui=NONE guifg=#4db5bd guibg=NONE 
line 7: highlight Structure gui=NONE guifg=#da8548 guibg=NONE 
line 7: highlight CocExplorerFileRoot gui=NONE guifg=#4db5bd guibg=NONE 
line 7: highlight CocExplorerBufferFullPath gui=NONE guifg=#7e8294 guibg=NONE 
line 7: highlight Conditional gui=italic guifg=#6cb6eb guibg=NONE 
line 7: highlight WarningMsg gui=bold guifg=#da8548 guibg=NONE 
line 7: highlight Repeat gui=italic guifg=#da8548 guibg=NONE 
line 7: highlight Boolean gui=italic guifg=NONE guibg=NONE 
line 7: highlight CocExplorerFileReadonly gui=NONE guifg=#d38aea guibg=NONE 
line 7: highlight CocExplorerFileModified gui=NONE guifg=#d38aea guibg=NONE 
line 7: highlight CocExplorerFileHidden gui=NONE guifg=#7e8294 guibg=NONE 
line 7: highlight CocExplorerHelpLine gui=NONE guifg=#d38aea guibg=NONE 
line 7: highlight GitSignsChangeLn gui=NONE guifg=#fabd2f guibg=NONE 
line 7: highlight GitSignsDelete gui=NONE guifg=#fb4934 guibg=NONE 
line 7: highlight GitSignsDeleteNr gui=NONE guifg=#fb4934 guibg=NONE 
line 7: highlight Normal gui=NONE guifg=#c5cdd9 guibg=#2b2d37 
line 7: highlight SignifySignChange gui=NONE guifg=#fabd2f guibg=NONE 
line 7: highlight SignifySignDelete gui=NONE guifg=#fb4934 guibg=NONE 
finished sourcing /Users/ablanken/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim
continuing in nvim_exec() called at /Users/ablanken/Sync/src/neovim-conf/conf/nvim/init.lua:0
Executing ColorScheme Autocommands for "*"
autocommand lua require'lualine'.setup()

Executing: lua require'lualine'.setup()
Executing: augroup lualine | exe "autocmd!" | augroup END
Executing:  exe "autocmd!" | augroup END
Executing: autocmd!
Executing:  augroup END
Searching for "lua/lualine/themes/auto.lua" in runtime path
Searching for "/Users/ablanken/.config/nvim/lua/lualine/themes/auto.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/lua/lualine/themes/auto.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/42header/lua/lualine/themes/auto.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/auto-session/lua/lualine/themes/auto.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/cheatsheet.nvim/lua/lualine/themes/auto.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/coc-nvim-lua/lua/lualine/themes/auto.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/coc.nvim/lua/lualine/themes/auto.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/Comment.nvim/lua/lualine/themes/auto.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/c_formatter_42.vim/lua/lualine/themes/auto.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/FTerm.nvim/lua/lualine/themes/auto.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/gentoo-syntax/lua/lualine/themes/auto.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/gitsigns.nvim/lua/lualine/themes/auto.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/indent-blankline.nvim/lua/lualine/themes/auto.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine/themes/auto.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/neon/lua/lualine/themes/auto.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/nvim-neoclip.lua/lua/lualine/themes/auto.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/nvim-treesitter/lua/lualine/themes/auto.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/nvim-web-devicons/lua/lualine/themes/auto.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/packer.nvim/lua/lualine/themes/auto.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/plenary.nvim/lua/lualine/themes/auto.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/session-lens/lua/lualine/themes/auto.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/sqlite.lua/lua/lualine/themes/auto.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/suda.vim/lua/lualine/themes/auto.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/telescope-file-browser.nvim/lua/lualine/themes/auto.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/telescope-fzf-native.nvim/lua/lualine/themes/auto.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/telescope-packer.nvim/lua/lualine/themes/auto.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/telescope-repo.nvim/lua/lualine/themes/auto.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/telescope-symbols.nvim/lua/lualine/themes/auto.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/telescope.nvim/lua/lualine/themes/auto.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/vim-fugitive/lua/lualine/themes/auto.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/vim-polyglot/lua/lualine/themes/auto.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/vim-rooter/lua/lualine/themes/auto.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/which-key.nvim/lua/lualine/themes/auto.lua"
Searching for "/Users/ablanken/.local/nvim-brew/Cellar/neovim/0.7.0/share/nvim/runtime/lua/lualine/themes/auto.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/Comment.nvim/after/lua/lualine/themes/auto.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/vim-polyglot/after/lua/lualine/themes/auto.lua"
Searching for "lua/lualine/themes/neon.lua" in runtime path
Searching for "/Users/ablanken/.config/nvim/lua/lualine/themes/neon.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/lua/lualine/themes/neon.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/42header/lua/lualine/themes/neon.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/auto-session/lua/lualine/themes/neon.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/cheatsheet.nvim/lua/lualine/themes/neon.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/coc-nvim-lua/lua/lualine/themes/neon.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/coc.nvim/lua/lualine/themes/neon.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/Comment.nvim/lua/lualine/themes/neon.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/c_formatter_42.vim/lua/lualine/themes/neon.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/FTerm.nvim/lua/lualine/themes/neon.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/gentoo-syntax/lua/lualine/themes/neon.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/gitsigns.nvim/lua/lualine/themes/neon.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/indent-blankline.nvim/lua/lualine/themes/neon.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine/themes/neon.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/neon/lua/lualine/themes/neon.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/nvim-neoclip.lua/lua/lualine/themes/neon.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/nvim-treesitter/lua/lualine/themes/neon.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/nvim-web-devicons/lua/lualine/themes/neon.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/packer.nvim/lua/lualine/themes/neon.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/plenary.nvim/lua/lualine/themes/neon.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/session-lens/lua/lualine/themes/neon.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/sqlite.lua/lua/lualine/themes/neon.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/suda.vim/lua/lualine/themes/neon.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/telescope-file-browser.nvim/lua/lualine/themes/neon.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/telescope-fzf-native.nvim/lua/lualine/themes/neon.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/telescope-packer.nvim/lua/lualine/themes/neon.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/telescope-repo.nvim/lua/lualine/themes/neon.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/telescope-symbols.nvim/lua/lualine/themes/neon.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/telescope.nvim/lua/lualine/themes/neon.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/vim-fugitive/lua/lualine/themes/neon.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/vim-polyglot/lua/lualine/themes/neon.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/vim-rooter/lua/lualine/themes/neon.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/which-key.nvim/lua/lualine/themes/neon.lua"
Searching for "/Users/ablanken/.local/nvim-brew/Cellar/neovim/0.7.0/share/nvim/runtime/lua/lualine/themes/neon.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/Comment.nvim/after/lua/lualine/themes/neon.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/vim-polyglot/after/lua/lualine/themes/neon.lua"
Executing: highlight clear lualine_c_command
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine)
chdir(/Users/ablanken/Sync/src/neovim-conf)
Executing: highlight clear lualine_a_inactive
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine)
chdir(/Users/ablanken/Sync/src/neovim-conf)
Executing: highlight clear lualine_b_inactive
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine)
chdir(/Users/ablanken/Sync/src/neovim-conf)
Executing: highlight clear lualine_c_inactive
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine)
chdir(/Users/ablanken/Sync/src/neovim-conf)
Executing: highlight clear lualine_a_replace
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine)
chdir(/Users/ablanken/Sync/src/neovim-conf)
Executing: highlight clear lualine_b_replace
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine)
chdir(/Users/ablanken/Sync/src/neovim-conf)
Executing: highlight clear lualine_b_normal
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine)
chdir(/Users/ablanken/Sync/src/neovim-conf)
Executing: highlight clear lualine_c_replace
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine)
chdir(/Users/ablanken/Sync/src/neovim-conf)
Executing: highlight clear lualine_c_normal
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine)
chdir(/Users/ablanken/Sync/src/neovim-conf)
Executing: highlight clear lualine_a_normal
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine)
chdir(/Users/ablanken/Sync/src/neovim-conf)
Executing: highlight clear lualine_a_visual
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine)
chdir(/Users/ablanken/Sync/src/neovim-conf)
Executing: highlight clear lualine_b_visual
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine)
chdir(/Users/ablanken/Sync/src/neovim-conf)
Executing: highlight clear lualine_c_visual
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine)
chdir(/Users/ablanken/Sync/src/neovim-conf)
Executing: highlight clear lualine_a_terminal
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine)
chdir(/Users/ablanken/Sync/src/neovim-conf)
Executing: highlight clear lualine_b_terminal
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine)
chdir(/Users/ablanken/Sync/src/neovim-conf)
Executing: highlight clear lualine_c_terminal
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine)
chdir(/Users/ablanken/Sync/src/neovim-conf)
Executing: highlight clear lualine_a_insert
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine)
chdir(/Users/ablanken/Sync/src/neovim-conf)
Executing: highlight clear lualine_b_diagnostics_info_terminal
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine)
chdir(/Users/ablanken/Sync/src/neovim-conf)
Executing: highlight clear lualine_b_diagnostics_info_inactive
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine)
chdir(/Users/ablanken/Sync/src/neovim-conf)
Executing: highlight clear lualine_c_insert
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine)
chdir(/Users/ablanken/Sync/src/neovim-conf)
Executing: highlight clear lualine_b_diagnostics_error_normal
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine)
chdir(/Users/ablanken/Sync/src/neovim-conf)
Executing: highlight clear lualine_b_diagnostics_hint_normal
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine)
chdir(/Users/ablanken/Sync/src/neovim-conf)
Executing: highlight clear lualine_b_diagnostics_error_insert
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine)
chdir(/Users/ablanken/Sync/src/neovim-conf)
Executing: highlight clear lualine_b_diagnostics_error_visual
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine)
chdir(/Users/ablanken/Sync/src/neovim-conf)
Executing: highlight clear lualine_b_diagnostics_error_replace
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine)
chdir(/Users/ablanken/Sync/src/neovim-conf)
Executing: highlight clear lualine_b_diagnostics_error_command
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine)
chdir(/Users/ablanken/Sync/src/neovim-conf)
Executing: highlight clear lualine_b_diff_removed_command
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine)
chdir(/Users/ablanken/Sync/src/neovim-conf)
Executing: highlight clear lualine_b_diagnostics_error_inactive
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine)
chdir(/Users/ablanken/Sync/src/neovim-conf)
Executing: highlight clear lualine_b_diff_removed_inactive
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine)
chdir(/Users/ablanken/Sync/src/neovim-conf)
Executing: highlight clear lualine_b_diagnostics_warn_normal
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine)
chdir(/Users/ablanken/Sync/src/neovim-conf)
Executing: highlight clear lualine_b_diagnostics_warn_insert
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine)
chdir(/Users/ablanken/Sync/src/neovim-conf)
Executing: highlight clear lualine_b_diagnostics_warn_visual
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine)
chdir(/Users/ablanken/Sync/src/neovim-conf)
Executing: highlight clear lualine_b_diagnostics_warn_replace
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine)
chdir(/Users/ablanken/Sync/src/neovim-conf)
Executing: highlight clear lualine_b_diagnostics_warn_command
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine)
chdir(/Users/ablanken/Sync/src/neovim-conf)
Executing: highlight clear lualine_b_diagnostics_warn_terminal
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine)
chdir(/Users/ablanken/Sync/src/neovim-conf)
Executing: highlight clear lualine_b_diagnostics_warn_inactive
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine)
chdir(/Users/ablanken/Sync/src/neovim-conf)
Executing: highlight clear lualine_b_diagnostics_info_normal
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine)
chdir(/Users/ablanken/Sync/src/neovim-conf)
Executing: highlight clear lualine_b_diagnostics_info_insert
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine)
chdir(/Users/ablanken/Sync/src/neovim-conf)
Executing: highlight clear lualine_a_tabs_inactive
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine)
chdir(/Users/ablanken/Sync/src/neovim-conf)
Executing: highlight clear lualine_b_diagnostics_info_visual
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine)
chdir(/Users/ablanken/Sync/src/neovim-conf)
Executing: highlight clear lualine_b_diff_modified_insert
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine)
chdir(/Users/ablanken/Sync/src/neovim-conf)
Executing: highlight clear lualine_b_diagnostics_info_replace
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine)
chdir(/Users/ablanken/Sync/src/neovim-conf)
Executing: highlight clear lualine_b_diff_modified_visual
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine)
chdir(/Users/ablanken/Sync/src/neovim-conf)
Executing: highlight clear lualine_b_diagnostics_info_command
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine)
chdir(/Users/ablanken/Sync/src/neovim-conf)
Executing: highlight clear lualine_b_diff_modified_replace
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine)
chdir(/Users/ablanken/Sync/src/neovim-conf)
Executing: highlight clear lualine_a_tabs_active
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine)
chdir(/Users/ablanken/Sync/src/neovim-conf)
Executing: highlight clear lualine_b_diff_modified_command
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine)
chdir(/Users/ablanken/Sync/src/neovim-conf)
Executing: highlight clear lualine_b_diagnostics_hint_inactive
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine)
chdir(/Users/ablanken/Sync/src/neovim-conf)
Executing: highlight clear lualine_b_diff_modified_terminal
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine)
chdir(/Users/ablanken/Sync/src/neovim-conf)
Executing: highlight clear lualine_b_diff_added_normal
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine)
chdir(/Users/ablanken/Sync/src/neovim-conf)
Executing: highlight clear lualine_b_diff_modified_inactive
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine)
chdir(/Users/ablanken/Sync/src/neovim-conf)
Executing: highlight clear lualine_b_diagnostics_hint_terminal
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine)
chdir(/Users/ablanken/Sync/src/neovim-conf)
Executing: highlight clear lualine_b_diff_added_insert
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine)
chdir(/Users/ablanken/Sync/src/neovim-conf)
Executing: highlight clear lualine_b_diagnostics_hint_command
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine)
chdir(/Users/ablanken/Sync/src/neovim-conf)
Executing: highlight clear lualine_b_diff_removed_normal
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine)
chdir(/Users/ablanken/Sync/src/neovim-conf)
Executing: highlight clear lualine_b_diagnostics_hint_replace
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine)
chdir(/Users/ablanken/Sync/src/neovim-conf)
Executing: highlight clear lualine_b_diff_added_replace
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine)
chdir(/Users/ablanken/Sync/src/neovim-conf)
Executing: highlight clear lualine_b_diff_removed_insert
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine)
chdir(/Users/ablanken/Sync/src/neovim-conf)
Executing: highlight clear lualine_b_diff_added_command
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine)
chdir(/Users/ablanken/Sync/src/neovim-conf)
Executing: highlight clear lualine_b_diff_removed_visual
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine)
chdir(/Users/ablanken/Sync/src/neovim-conf)
Executing: highlight clear lualine_b_diff_added_terminal
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine)
chdir(/Users/ablanken/Sync/src/neovim-conf)
Executing: highlight clear lualine_b_diff_removed_replace
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine)
chdir(/Users/ablanken/Sync/src/neovim-conf)
Executing: highlight clear lualine_a_command
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine)
chdir(/Users/ablanken/Sync/src/neovim-conf)
Executing: highlight clear lualine_b_diagnostics_hint_visual
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine)
chdir(/Users/ablanken/Sync/src/neovim-conf)
Executing: highlight clear lualine_b_diagnostics_hint_insert
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine)
chdir(/Users/ablanken/Sync/src/neovim-conf)
Executing: highlight clear lualine_b_diff_added_visual
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine)
chdir(/Users/ablanken/Sync/src/neovim-conf)
Executing: highlight clear lualine_b_diff_added_inactive
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine)
chdir(/Users/ablanken/Sync/src/neovim-conf)
Executing: highlight clear lualine_b_insert
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine)
chdir(/Users/ablanken/Sync/src/neovim-conf)
Executing: highlight clear lualine_b_command
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine)
chdir(/Users/ablanken/Sync/src/neovim-conf)
Executing: highlight clear lualine_b_diff_removed_terminal
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine)
chdir(/Users/ablanken/Sync/src/neovim-conf)
Executing: highlight clear lualine_b_diff_modified_normal
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine)
chdir(/Users/ablanken/Sync/src/neovim-conf)
Executing: highlight clear lualine_b_diagnostics_error_terminal
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine)
chdir(/Users/ablanken/Sync/src/neovim-conf)
Executing: highlight! lualine_b_command guifg=#a0c980 guibg=#3a3e4e gui=None
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine)
chdir(/Users/ablanken/Sync/src/neovim-conf)
Executing: highlight! lualine_a_command guifg=#2b2d37 guibg=#ec7279 gui=bold
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine)
chdir(/Users/ablanken/Sync/src/neovim-conf)
Executing: highlight! lualine_a_inactive guifg=#c5cdd9 guibg=#3a3e4e gui=bold
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine)
chdir(/Users/ablanken/Sync/src/neovim-conf)
Executing: highlight! lualine_b_inactive guifg=#c5cdd9 guibg=#3a3e4e gui=None
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine)
chdir(/Users/ablanken/Sync/src/neovim-conf)
Executing: highlight! lualine_c_inactive guifg=#c5cdd9 guibg=#3a3e4e gui=None
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine)
chdir(/Users/ablanken/Sync/src/neovim-conf)
Executing: highlight! lualine_b_replace guifg=#d38aea guibg=#3a3e4e gui=None
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine)
chdir(/Users/ablanken/Sync/src/neovim-conf)
Executing: highlight! lualine_a_replace guifg=#2b2d37 guibg=#676E95 gui=bold
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine)
chdir(/Users/ablanken/Sync/src/neovim-conf)
Executing: highlight! lualine_a_normal guifg=#2b2d37 guibg=#5699AF gui=bold
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine)
chdir(/Users/ablanken/Sync/src/neovim-conf)
Executing: highlight! lualine_b_normal guifg=#6cb6eb guibg=#3a3e4e gui=None
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine)
chdir(/Users/ablanken/Sync/src/neovim-conf)
Executing: highlight! lualine_c_normal guifg=#c5cdd9 guibg=#3a3e4e gui=None
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine)
chdir(/Users/ablanken/Sync/src/neovim-conf)
Executing: highlight! lualine_b_visual guifg=#4db5bd guibg=#3a3e4e gui=None
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine)
chdir(/Users/ablanken/Sync/src/neovim-conf)
Executing: highlight! lualine_a_visual guifg=#2b2d37 guibg=#6cb6eb gui=bold
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine)
chdir(/Users/ablanken/Sync/src/neovim-conf)
Executing: highlight! lualine_b_insert guifg=#a0c980 guibg=#3a3e4e gui=None
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine)
chdir(/Users/ablanken/Sync/src/neovim-conf)
Executing: highlight! lualine_a_insert guifg=#2b2d37 guibg=#d38aea gui=bold
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine)
chdir(/Users/ablanken/Sync/src/neovim-conf)
Executing: autocmd lualine ColorScheme * lua require'lualine'.setup()
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua)
chdir(/Users/ablanken/Sync/src/neovim-conf)
Executing:     autocmd lualine OptionSet background lua require'lualine'.setup()
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua)
chdir(/Users/ablanken/Sync/src/neovim-conf)
Executing: au lualine BufEnter *
--- Autocommands ---
Executing: autocmd lualine BufEnter * lua require'lualine.components.branch.git_branch'.find_git_dir()
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine/utils)
chdir(/Users/ablanken/Sync/src/neovim-conf)
Executing: highlight! lualine_b_diff_added_normal guifg=#8ec07c guibg=#3a3e4e gui=None
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine)
chdir(/Users/ablanken/Sync/src/neovim-conf)
Executing: highlight! lualine_b_diff_added_insert guifg=#8ec07c guibg=#3a3e4e gui=None
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine)
chdir(/Users/ablanken/Sync/src/neovim-conf)
Executing: highlight! lualine_b_diff_added_visual guifg=#8ec07c guibg=#3a3e4e gui=None
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine)
chdir(/Users/ablanken/Sync/src/neovim-conf)
Executing: highlight! lualine_b_diff_added_replace guifg=#8ec07c guibg=#3a3e4e gui=None
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine)
chdir(/Users/ablanken/Sync/src/neovim-conf)
Executing: highlight! lualine_b_diff_added_command guifg=#8ec07c guibg=#3a3e4e gui=None
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine)
chdir(/Users/ablanken/Sync/src/neovim-conf)
Executing: highlight! lualine_b_diff_added_terminal guifg=#8ec07c guibg=#3a3e4e gui=None
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine)
chdir(/Users/ablanken/Sync/src/neovim-conf)
Executing: highlight! lualine_b_diff_added_inactive guifg=#8ec07c guibg=#3a3e4e gui=None
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine)
chdir(/Users/ablanken/Sync/src/neovim-conf)
Executing: highlight! lualine_b_diff_modified_normal guifg=#fabd2f guibg=#3a3e4e gui=None
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine)
chdir(/Users/ablanken/Sync/src/neovim-conf)
Executing: highlight! lualine_b_diff_modified_insert guifg=#fabd2f guibg=#3a3e4e gui=None
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine)
chdir(/Users/ablanken/Sync/src/neovim-conf)
Executing: highlight! lualine_b_diff_modified_visual guifg=#fabd2f guibg=#3a3e4e gui=None
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine)
chdir(/Users/ablanken/Sync/src/neovim-conf)
Executing: highlight! lualine_b_diff_modified_replace guifg=#fabd2f guibg=#3a3e4e gui=None
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine)
chdir(/Users/ablanken/Sync/src/neovim-conf)
Executing: highlight! lualine_b_diff_modified_command guifg=#fabd2f guibg=#3a3e4e gui=None
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine)
chdir(/Users/ablanken/Sync/src/neovim-conf)
Executing: highlight! lualine_b_diff_modified_terminal guifg=#fabd2f guibg=#3a3e4e gui=None
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine)
chdir(/Users/ablanken/Sync/src/neovim-conf)
Executing: highlight! lualine_b_diff_modified_inactive guifg=#fabd2f guibg=#3a3e4e gui=None
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine)
chdir(/Users/ablanken/Sync/src/neovim-conf)
Executing: highlight! lualine_b_diff_removed_normal guifg=#fb4934 guibg=#3a3e4e gui=None
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine)
chdir(/Users/ablanken/Sync/src/neovim-conf)
Executing: highlight! lualine_b_diff_removed_insert guifg=#fb4934 guibg=#3a3e4e gui=None
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine)
chdir(/Users/ablanken/Sync/src/neovim-conf)
Executing: highlight! lualine_b_diff_removed_visual guifg=#fb4934 guibg=#3a3e4e gui=None
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine)
chdir(/Users/ablanken/Sync/src/neovim-conf)
Executing: highlight! lualine_b_diff_removed_replace guifg=#fb4934 guibg=#3a3e4e gui=None
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine)
chdir(/Users/ablanken/Sync/src/neovim-conf)
Executing: highlight! lualine_b_diff_removed_command guifg=#fb4934 guibg=#3a3e4e gui=None
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine)
chdir(/Users/ablanken/Sync/src/neovim-conf)
Executing: highlight! lualine_b_diff_removed_terminal guifg=#fb4934 guibg=#3a3e4e gui=None
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine)
chdir(/Users/ablanken/Sync/src/neovim-conf)
Executing: highlight! lualine_b_diff_removed_inactive guifg=#fb4934 guibg=#3a3e4e gui=None
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine)
chdir(/Users/ablanken/Sync/src/neovim-conf)
Executing: au lualine BufEnter *
--- Autocommands ---
lualine  BufEnter
    *         lua require'lualine.components.branch.git_branch'.find_git_dir()
	Last set from ~/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine/utils/utils.lua line 90
Executing: autocmd lualine BufEnter * lua require'lualine.components.diff.git_diff'.update_diff_args()
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine/utils)
chdir(/Users/ablanken/Sync/src/neovim-conf)
Executing: au lualine BufWritePost *
--- Autocommands ---
Executing: autocmd lualine BufWritePost * lua require'lualine.components.diff.git_diff'.update_git_diff()
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine/utils)
chdir(/Users/ablanken/Sync/src/neovim-conf)
Executing: highlight! lualine_b_diagnostics_error_normal guifg=#ec7279 guibg=#3a3e4e gui=None
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine)
chdir(/Users/ablanken/Sync/src/neovim-conf)
Executing: highlight! lualine_b_diagnostics_error_insert guifg=#ec7279 guibg=#3a3e4e gui=None
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine)
chdir(/Users/ablanken/Sync/src/neovim-conf)
Executing: highlight! lualine_b_diagnostics_error_visual guifg=#ec7279 guibg=#3a3e4e gui=None
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine)
chdir(/Users/ablanken/Sync/src/neovim-conf)
Executing: highlight! lualine_b_diagnostics_error_replace guifg=#ec7279 guibg=#3a3e4e gui=None
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine)
chdir(/Users/ablanken/Sync/src/neovim-conf)
Executing: highlight! lualine_b_diagnostics_error_command guifg=#ec7279 guibg=#3a3e4e gui=None
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine)
chdir(/Users/ablanken/Sync/src/neovim-conf)
Executing: highlight! lualine_b_diagnostics_error_terminal guifg=#ec7279 guibg=#3a3e4e gui=None
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine)
chdir(/Users/ablanken/Sync/src/neovim-conf)
Executing: highlight! lualine_b_diagnostics_error_inactive guifg=#ec7279 guibg=#3a3e4e gui=None
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine)
chdir(/Users/ablanken/Sync/src/neovim-conf)
Executing: highlight! lualine_b_diagnostics_warn_normal guifg=#ffa500 guibg=#3a3e4e gui=None
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine)
chdir(/Users/ablanken/Sync/src/neovim-conf)
Executing: highlight! lualine_b_diagnostics_warn_insert guifg=#ffa500 guibg=#3a3e4e gui=None
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine)
chdir(/Users/ablanken/Sync/src/neovim-conf)
Executing: highlight! lualine_b_diagnostics_warn_visual guifg=#ffa500 guibg=#3a3e4e gui=None
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine)
chdir(/Users/ablanken/Sync/src/neovim-conf)
Executing: highlight! lualine_b_diagnostics_warn_replace guifg=#ffa500 guibg=#3a3e4e gui=None
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine)
chdir(/Users/ablanken/Sync/src/neovim-conf)
Executing: highlight! lualine_b_diagnostics_warn_command guifg=#ffa500 guibg=#3a3e4e gui=None
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine)
chdir(/Users/ablanken/Sync/src/neovim-conf)
Executing: highlight! lualine_b_diagnostics_warn_terminal guifg=#ffa500 guibg=#3a3e4e gui=None
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine)
chdir(/Users/ablanken/Sync/src/neovim-conf)
Executing: highlight! lualine_b_diagnostics_warn_inactive guifg=#ffa500 guibg=#3a3e4e gui=None
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine)
chdir(/Users/ablanken/Sync/src/neovim-conf)
Executing: highlight! lualine_b_diagnostics_info_normal guifg=#add8e6 guibg=#3a3e4e gui=None
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine)
chdir(/Users/ablanken/Sync/src/neovim-conf)
Executing: highlight! lualine_b_diagnostics_info_insert guifg=#add8e6 guibg=#3a3e4e gui=None
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine)
chdir(/Users/ablanken/Sync/src/neovim-conf)
Executing: highlight! lualine_b_diagnostics_info_visual guifg=#add8e6 guibg=#3a3e4e gui=None
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine)
chdir(/Users/ablanken/Sync/src/neovim-conf)
Executing: highlight! lualine_b_diagnostics_info_replace guifg=#add8e6 guibg=#3a3e4e gui=None
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine)
chdir(/Users/ablanken/Sync/src/neovim-conf)
Executing: highlight! lualine_b_diagnostics_info_command guifg=#add8e6 guibg=#3a3e4e gui=None
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine)
chdir(/Users/ablanken/Sync/src/neovim-conf)
Executing: highlight! lualine_b_diagnostics_info_terminal guifg=#add8e6 guibg=#3a3e4e gui=None
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine)
chdir(/Users/ablanken/Sync/src/neovim-conf)
Executing: highlight! lualine_b_diagnostics_info_inactive guifg=#add8e6 guibg=#3a3e4e gui=None
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine)
chdir(/Users/ablanken/Sync/src/neovim-conf)
Executing: highlight! lualine_b_diagnostics_hint_normal guifg=#4db5bd guibg=#3a3e4e gui=None
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine)
chdir(/Users/ablanken/Sync/src/neovim-conf)
Executing: highlight! lualine_b_diagnostics_hint_insert guifg=#4db5bd guibg=#3a3e4e gui=None
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine)
chdir(/Users/ablanken/Sync/src/neovim-conf)
Executing: highlight! lualine_b_diagnostics_hint_visual guifg=#4db5bd guibg=#3a3e4e gui=None
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine)
chdir(/Users/ablanken/Sync/src/neovim-conf)
Executing: highlight! lualine_b_diagnostics_hint_replace guifg=#4db5bd guibg=#3a3e4e gui=None
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine)
chdir(/Users/ablanken/Sync/src/neovim-conf)
Executing: highlight! lualine_b_diagnostics_hint_command guifg=#4db5bd guibg=#3a3e4e gui=None
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine)
chdir(/Users/ablanken/Sync/src/neovim-conf)
Executing: highlight! lualine_b_diagnostics_hint_terminal guifg=#4db5bd guibg=#3a3e4e gui=None
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine)
chdir(/Users/ablanken/Sync/src/neovim-conf)
Executing: highlight! lualine_b_diagnostics_hint_inactive guifg=#4db5bd guibg=#3a3e4e gui=None
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine)
chdir(/Users/ablanken/Sync/src/neovim-conf)
Executing: highlight! link lualine_a_tabs_active lualine_a_normal
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine)
chdir(/Users/ablanken/Sync/src/neovim-conf)
Executing: highlight! link lualine_a_tabs_inactive lualine_a_inactive
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine)
chdir(/Users/ablanken/Sync/src/neovim-conf)
Executing: autocmd lualine VimResized * redrawstatus
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf/conf/nvim)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf/conf/nvim)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf/conf/nvim)
chdir(/Users/ablanken/Sync/src/neovim-conf)
finished sourcing /Users/ablanken/.config/nvim/init.lua
Searching for "filetype.lua filetype.vim" in runtime path
Searching for "/Users/ablanken/.config/nvim/filetype.lua"
Searching for "/Users/ablanken/.config/nvim/filetype.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/filetype.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/filetype.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/42header/filetype.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/42header/filetype.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/auto-session/filetype.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/auto-session/filetype.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/cheatsheet.nvim/filetype.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/cheatsheet.nvim/filetype.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/coc-nvim-lua/filetype.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/coc-nvim-lua/filetype.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/coc.nvim/filetype.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/coc.nvim/filetype.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/Comment.nvim/filetype.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/Comment.nvim/filetype.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/c_formatter_42.vim/filetype.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/c_formatter_42.vim/filetype.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/FTerm.nvim/filetype.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/FTerm.nvim/filetype.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/gentoo-syntax/filetype.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/gentoo-syntax/filetype.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/gitsigns.nvim/filetype.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/gitsigns.nvim/filetype.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/indent-blankline.nvim/filetype.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/indent-blankline.nvim/filetype.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/lualine.nvim/filetype.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/lualine.nvim/filetype.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/neon/filetype.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/neon/filetype.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/nvim-neoclip.lua/filetype.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/nvim-neoclip.lua/filetype.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/nvim-treesitter/filetype.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/nvim-treesitter/filetype.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/nvim-web-devicons/filetype.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/nvim-web-devicons/filetype.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/packer.nvim/filetype.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/packer.nvim/filetype.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/plenary.nvim/filetype.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/plenary.nvim/filetype.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/session-lens/filetype.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/session-lens/filetype.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/sqlite.lua/filetype.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/sqlite.lua/filetype.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/suda.vim/filetype.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/suda.vim/filetype.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/telescope-file-browser.nvim/filetype.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/telescope-file-browser.nvim/filetype.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/telescope-fzf-native.nvim/filetype.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/telescope-fzf-native.nvim/filetype.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/telescope-packer.nvim/filetype.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/telescope-packer.nvim/filetype.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/telescope-repo.nvim/filetype.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/telescope-repo.nvim/filetype.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/telescope-symbols.nvim/filetype.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/telescope-symbols.nvim/filetype.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/telescope.nvim/filetype.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/telescope.nvim/filetype.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/vim-fugitive/filetype.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/vim-fugitive/filetype.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/vim-polyglot/filetype.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/vim-polyglot/filetype.vim"
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/vim-polyglot)
chdir(/Users/ablanken/Sync/src/neovim-conf)
sourcing "/Users/ablanken/.local/share/nvim/site/pack/packer/start/vim-polyglot/filetype.vim"
line 1: call polyglot#init#init()
Searching for "autoload/polyglot/init.vim" in runtime path
Searching for "/Users/ablanken/.config/nvim/autoload/polyglot/init.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/autoload/polyglot/init.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/42header/autoload/polyglot/init.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/auto-session/autoload/polyglot/init.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/cheatsheet.nvim/autoload/polyglot/init.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/coc-nvim-lua/autoload/polyglot/init.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/coc.nvim/autoload/polyglot/init.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/Comment.nvim/autoload/polyglot/init.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/c_formatter_42.vim/autoload/polyglot/init.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/FTerm.nvim/autoload/polyglot/init.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/gentoo-syntax/autoload/polyglot/init.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/gitsigns.nvim/autoload/polyglot/init.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/indent-blankline.nvim/autoload/polyglot/init.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/lualine.nvim/autoload/polyglot/init.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/neon/autoload/polyglot/init.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/nvim-neoclip.lua/autoload/polyglot/init.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/nvim-treesitter/autoload/polyglot/init.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/nvim-web-devicons/autoload/polyglot/init.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/packer.nvim/autoload/polyglot/init.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/plenary.nvim/autoload/polyglot/init.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/session-lens/autoload/polyglot/init.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/sqlite.lua/autoload/polyglot/init.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/suda.vim/autoload/polyglot/init.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/telescope-file-browser.nvim/autoload/polyglot/init.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/telescope-fzf-native.nvim/autoload/polyglot/init.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/telescope-packer.nvim/autoload/polyglot/init.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/telescope-repo.nvim/autoload/polyglot/init.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/telescope-symbols.nvim/autoload/polyglot/init.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/telescope.nvim/autoload/polyglot/init.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/vim-fugitive/autoload/polyglot/init.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/vim-polyglot/autoload/polyglot/init.vim"
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/vim-polyglot/autoload/polyglot)
chdir(/Users/ablanken/Sync/src/neovim-conf)
line 1: sourcing "/Users/ablanken/.local/share/nvim/site/pack/packer/start/vim-polyglot/autoload/polyglot/init.vim"
line 1: " Vim support file to detect file types
line 2: "
line 3: " Maintainer:^IAdam Stankiewicz <sheerun@sher.pl>
line 4: " URL: https://github.com/sheerun/vim-polyglot
line 5: 
line 6: " Listen very carefully, I will say this only once
line 7: if exists("did_load_polyglot")
line 8:   finish
line 9: endif
line 10: 
line 11: " Switch to compatible mode for the time being
line 12: let s:cpo_save = &cpo
line 13: set cpo&vim
line 14: 
line 15: let did_load_polyglot = 1
line 16: 
line 17: let g:polyglot_initialized = 0
line 18: 
line 19: func! polyglot#init#init()
line 22: 
line 23: func! polyglot#init#is_disabled(caller, name, path)
line 38: 
line 39: let g:polyglot_is_disabled = {}
line 40: let s:new_polyglot_disabled = []
line 41: 
line 42: if exists('g:polyglot_disabled')
line 43:   for pkg in g:polyglot_disabled
line 44:     let base = split(pkg, '\.')
line 45:     if len(base) > 0
line 46:       let g:polyglot_is_disabled[pkg] = 1
line 47:       call add(s:new_polyglot_disabled, base[0])
line 48:     endif
line 49:   endfor
line 50: else
line 51:   let g:polyglot_disabled_not_set = 1
line 52: endif
line 53: 
line 54: func! PolyglotVerify()
line 65: 
line 66: au VimEnter * call PolyglotVerify()
line 67: 
line 68: function! s:SetDefault(name, value)
line 73: 
line 74: call s:SetDefault('g:markdown_enable_spell_checking', 0)
calling function <SNR>15_SetDefault('g:markdown_enable_spell_checking', 0)

line 1:   if !exists(a:name)
line 2:     let {a:name} = a:value
line 3:   endif
function <SNR>15_SetDefault returning #0

continuing in /Users/ablanken/.local/share/nvim/site/pack/packer/start/vim-polyglot/autoload/polyglot/init.vim

line 75: call s:SetDefault('g:markdown_enable_input_abbreviations', 0)
calling function <SNR>15_SetDefault('g:markdown_enable_input_abbreviations', 0)

line 1:   if !exists(a:name)
line 2:     let {a:name} = a:value
line 3:   endif
function <SNR>15_SetDefault returning #0

continuing in /Users/ablanken/.local/share/nvim/site/pack/packer/start/vim-polyglot/autoload/polyglot/init.vim

line 76: call s:SetDefault('g:markdown_enable_mappings', 0)
calling function <SNR>15_SetDefault('g:markdown_enable_mappings', 0)

line 1:   if !exists(a:name)
line 2:     let {a:name} = a:value
line 3:   endif
function <SNR>15_SetDefault returning #0

continuing in /Users/ablanken/.local/share/nvim/site/pack/packer/start/vim-polyglot/autoload/polyglot/init.vim

line 77: 
line 78: " Enable jsx syntax by default
line 79: call s:SetDefault('g:jsx_ext_required', 0)
calling function <SNR>15_SetDefault('g:jsx_ext_required', 0)

line 1:   if !exists(a:name)
line 2:     let {a:name} = a:value
line 3:   endif
function <SNR>15_SetDefault returning #0

continuing in /Users/ablanken/.local/share/nvim/site/pack/packer/start/vim-polyglot/autoload/polyglot/init.vim

line 80: 
line 81: " Needed for sql highlighting
line 82: call s:SetDefault('g:javascript_sql_dialect', 'sql')
calling function <SNR>15_SetDefault('g:javascript_sql_dialect', 'sql')

line 1:   if !exists(a:name)
line 2:     let {a:name} = a:value
line 3:   endif
function <SNR>15_SetDefault returning #0

continuing in /Users/ablanken/.local/share/nvim/site/pack/packer/start/vim-polyglot/autoload/polyglot/init.vim

line 83: 
line 84: " Enable jsdoc highlighting by default
line 85: call s:SetDefault('g:javascript_plugin_jsdoc', 1)
calling function <SNR>15_SetDefault('g:javascript_plugin_jsdoc', 1)

line 1:   if !exists(a:name)
line 2:     let {a:name} = a:value
line 3:   endif
function <SNR>15_SetDefault returning #0

continuing in /Users/ablanken/.local/share/nvim/site/pack/packer/start/vim-polyglot/autoload/polyglot/init.vim

line 86: 
line 87: " Make csv loading faster
line 88: call s:SetDefault('g:csv_start', 1)
calling function <SNR>15_SetDefault('g:csv_start', 1)

line 1:   if !exists(a:name)
line 2:     let {a:name} = a:value
line 3:   endif
function <SNR>15_SetDefault returning #0

continuing in /Users/ablanken/.local/share/nvim/site/pack/packer/start/vim-polyglot/autoload/polyglot/init.vim

line 89: call s:SetDefault('g:csv_end', 2)
calling function <SNR>15_SetDefault('g:csv_end', 2)

line 1:   if !exists(a:name)
line 2:     let {a:name} = a:value
line 3:   endif
function <SNR>15_SetDefault returning #0

continuing in /Users/ablanken/.local/share/nvim/site/pack/packer/start/vim-polyglot/autoload/polyglot/init.vim

line 90: call s:SetDefault('g:csv_default_delim', ',')
calling function <SNR>15_SetDefault('g:csv_default_delim', ',')

line 1:   if !exists(a:name)
line 2:     let {a:name} = a:value
line 3:   endif
function <SNR>15_SetDefault returning #0

continuing in /Users/ablanken/.local/share/nvim/site/pack/packer/start/vim-polyglot/autoload/polyglot/init.vim

line 91: 
line 92: " Disable json concealing by default
line 93: call s:SetDefault('g:vim_json_syntax_conceal', 0)
calling function <SNR>15_SetDefault('g:vim_json_syntax_conceal', 0)

line 1:   if !exists(a:name)
line 2:     let {a:name} = a:value
line 3:   endif
function <SNR>15_SetDefault returning #0

continuing in /Users/ablanken/.local/share/nvim/site/pack/packer/start/vim-polyglot/autoload/polyglot/init.vim

line 94: 
line 95: call s:SetDefault('g:filetype_euphoria', 'elixir')
calling function <SNR>15_SetDefault('g:filetype_euphoria', 'elixir')

line 1:   if !exists(a:name)
line 2:     let {a:name} = a:value
line 3:   endif
function <SNR>15_SetDefault returning #0

continuing in /Users/ablanken/.local/share/nvim/site/pack/packer/start/vim-polyglot/autoload/polyglot/init.vim

line 96: 
line 97: if !exists('g:python_highlight_all')
line 98:   call s:SetDefault('g:python_highlight_builtins', 1)
calling function <SNR>15_SetDefault('g:python_highlight_builtins', 1)

line 1:   if !exists(a:name)
line 2:     let {a:name} = a:value
line 3:   endif
function <SNR>15_SetDefault returning #0

continuing in /Users/ablanken/.local/share/nvim/site/pack/packer/start/vim-polyglot/autoload/polyglot/init.vim

line 99:   call s:SetDefault('g:python_highlight_builtin_objs', 1)
calling function <SNR>15_SetDefault('g:python_highlight_builtin_objs', 1)

line 1:   if !exists(a:name)
line 2:     let {a:name} = a:value
line 3:   endif
function <SNR>15_SetDefault returning #0

continuing in /Users/ablanken/.local/share/nvim/site/pack/packer/start/vim-polyglot/autoload/polyglot/init.vim

line 100:   call s:SetDefault('g:python_highlight_builtin_types', 1)
calling function <SNR>15_SetDefault('g:python_highlight_builtin_types', 1)

line 1:   if !exists(a:name)
line 2:     let {a:name} = a:value
line 3:   endif
function <SNR>15_SetDefault returning #0

continuing in /Users/ablanken/.local/share/nvim/site/pack/packer/start/vim-polyglot/autoload/polyglot/init.vim

line 101:   call s:SetDefault('g:python_highlight_builtin_funcs', 1)
calling function <SNR>15_SetDefault('g:python_highlight_builtin_funcs', 1)

line 1:   if !exists(a:name)
line 2:     let {a:name} = a:value
line 3:   endif
function <SNR>15_SetDefault returning #0

continuing in /Users/ablanken/.local/share/nvim/site/pack/packer/start/vim-polyglot/autoload/polyglot/init.vim

line 102:   call s:SetDefault('g:python_highlight_builtin_funcs_kwarg', 1)
calling function <SNR>15_SetDefault('g:python_highlight_builtin_funcs_kwarg', 1)

line 1:   if !exists(a:name)
line 2:     let {a:name} = a:value
line 3:   endif
function <SNR>15_SetDefault returning #0

continuing in /Users/ablanken/.local/share/nvim/site/pack/packer/start/vim-polyglot/autoload/polyglot/init.vim

line 103:   call s:SetDefault('g:python_highlight_exceptions', 1)
calling function <SNR>15_SetDefault('g:python_highlight_exceptions', 1)

line 1:   if !exists(a:name)
line 2:     let {a:name} = a:value
line 3:   endif
function <SNR>15_SetDefault returning #0

continuing in /Users/ablanken/.local/share/nvim/site/pack/packer/start/vim-polyglot/autoload/polyglot/init.vim

line 104:   call s:SetDefault('g:python_highlight_string_formatting', 1)
calling function <SNR>15_SetDefault('g:python_highlight_string_formatting', 1)

line 1:   if !exists(a:name)
line 2:     let {a:name} = a:value
line 3:   endif
function <SNR>15_SetDefault returning #0

continuing in /Users/ablanken/.local/share/nvim/site/pack/packer/start/vim-polyglot/autoload/polyglot/init.vim

line 105:   call s:SetDefault('g:python_highlight_string_format', 1)
calling function <SNR>15_SetDefault('g:python_highlight_string_format', 1)

line 1:   if !exists(a:name)
line 2:     let {a:name} = a:value
line 3:   endif
function <SNR>15_SetDefault returning #0

continuing in /Users/ablanken/.local/share/nvim/site/pack/packer/start/vim-polyglot/autoload/polyglot/init.vim

line 106:   call s:SetDefault('g:python_highlight_string_templates', 1)
calling function <SNR>15_SetDefault('g:python_highlight_string_templates', 1)

line 1:   if !exists(a:name)
line 2:     let {a:name} = a:value
line 3:   endif
function <SNR>15_SetDefault returning #0

continuing in /Users/ablanken/.local/share/nvim/site/pack/packer/start/vim-polyglot/autoload/polyglot/init.vim

line 107:   call s:SetDefault('g:python_highlight_indent_errors', 1)
calling function <SNR>15_SetDefault('g:python_highlight_indent_errors', 1)

line 1:   if !exists(a:name)
line 2:     let {a:name} = a:value
line 3:   endif
function <SNR>15_SetDefault returning #0

continuing in /Users/ablanken/.local/share/nvim/site/pack/packer/start/vim-polyglot/autoload/polyglot/init.vim

line 108:   call s:SetDefault('g:python_highlight_space_errors', 1)
calling function <SNR>15_SetDefault('g:python_highlight_space_errors', 1)

line 1:   if !exists(a:name)
line 2:     let {a:name} = a:value
line 3:   endif
function <SNR>15_SetDefault returning #0

continuing in /Users/ablanken/.local/share/nvim/site/pack/packer/start/vim-polyglot/autoload/polyglot/init.vim

line 109:   call s:SetDefault('g:python_highlight_doctests', 1)
calling function <SNR>15_SetDefault('g:python_highlight_doctests', 1)

line 1:   if !exists(a:name)
line 2:     let {a:name} = a:value
line 3:   endif
function <SNR>15_SetDefault returning #0

continuing in /Users/ablanken/.local/share/nvim/site/pack/packer/start/vim-polyglot/autoload/polyglot/init.vim

line 110:   call s:SetDefault('g:python_highlight_func_calls', 1)
calling function <SNR>15_SetDefault('g:python_highlight_func_calls', 1)

line 1:   if !exists(a:name)
line 2:     let {a:name} = a:value
line 3:   endif
function <SNR>15_SetDefault returning #0

continuing in /Users/ablanken/.local/share/nvim/site/pack/packer/start/vim-polyglot/autoload/polyglot/init.vim

line 111:   call s:SetDefault('g:python_highlight_class_vars', 1)
calling function <SNR>15_SetDefault('g:python_highlight_class_vars', 1)

line 1:   if !exists(a:name)
line 2:     let {a:name} = a:value
line 3:   endif
function <SNR>15_SetDefault returning #0

continuing in /Users/ablanken/.local/share/nvim/site/pack/packer/start/vim-polyglot/autoload/polyglot/init.vim

line 112:   call s:SetDefault('g:python_highlight_operators', 1)
calling function <SNR>15_SetDefault('g:python_highlight_operators', 1)

line 1:   if !exists(a:name)
line 2:     let {a:name} = a:value
line 3:   endif
function <SNR>15_SetDefault returning #0

continuing in /Users/ablanken/.local/share/nvim/site/pack/packer/start/vim-polyglot/autoload/polyglot/init.vim

line 113:   call s:SetDefault('g:python_highlight_file_headers_as_comments', 1)
calling function <SNR>15_SetDefault('g:python_highlight_file_headers_as_comments', 1)

line 1:   if !exists(a:name)
line 2:     let {a:name} = a:value
line 3:   endif
function <SNR>15_SetDefault returning #0

continuing in /Users/ablanken/.local/share/nvim/site/pack/packer/start/vim-polyglot/autoload/polyglot/init.vim

line 114:   call s:SetDefault('g:python_slow_sync', 1)
calling function <SNR>15_SetDefault('g:python_slow_sync', 1)

line 1:   if !exists(a:name)
line 2:     let {a:name} = a:value
line 3:   endif
function <SNR>15_SetDefault returning #0

continuing in /Users/ablanken/.local/share/nvim/site/pack/packer/start/vim-polyglot/autoload/polyglot/init.vim

line 115: endif
line 116: 
line 117: " Some variables are needed for haxe loading
line 118: 
line 119: " We need it because scripts.vim in vim uses "set ft=" which cannot be
line 120: " overridden with setf (and we can't use set ft= so our scripts.vim work)
line 121: func! s:Setf(ft)
line 126: 
line 127: " Function used for patterns that end in a star: don't set the filetype if the
line 128: " file name matches ft_ignore_pat.
line 129: " When using this, the entry should probably be further down below with the
line 130: " other StarSetf() calls.
line 131: func! s:StarSetf(ft)
line 136: 
line 137: augroup polyglot-observer | augroup END
line 137:  augroup END
line 138: 
line 139: if exists('s:cpo_save')
line 140:   " Restore 'cpoptions'
line 141:   let &cpo = s:cpo_save
line 142:   unlet s:cpo_save
line 143: endif
line 144: 
line 145: " Load user-defined filetype.vim and oter plugins ftdetect first
line 146: " This is to use polyglot-defined ftdetect always as fallback to user settings
line 147: augroup filetypedetect
line 148:   runtime! filetype.vim
Searching for "filetype.vim" in runtime path
Searching for "/Users/ablanken/.config/nvim/filetype.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/filetype.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/42header/filetype.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/auto-session/filetype.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/cheatsheet.nvim/filetype.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/coc-nvim-lua/filetype.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/coc.nvim/filetype.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/Comment.nvim/filetype.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/c_formatter_42.vim/filetype.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/FTerm.nvim/filetype.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/gentoo-syntax/filetype.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/gitsigns.nvim/filetype.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/indent-blankline.nvim/filetype.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/lualine.nvim/filetype.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/neon/filetype.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/nvim-neoclip.lua/filetype.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/nvim-treesitter/filetype.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/nvim-web-devicons/filetype.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/packer.nvim/filetype.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/plenary.nvim/filetype.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/session-lens/filetype.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/sqlite.lua/filetype.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/suda.vim/filetype.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/telescope-file-browser.nvim/filetype.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/telescope-fzf-native.nvim/filetype.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/telescope-packer.nvim/filetype.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/telescope-repo.nvim/filetype.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/telescope-symbols.nvim/filetype.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/telescope.nvim/filetype.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/vim-fugitive/filetype.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/vim-polyglot/filetype.vim"
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/vim-polyglot)
chdir(/Users/ablanken/Sync/src/neovim-conf)
line 148: sourcing "/Users/ablanken/.local/share/nvim/site/pack/packer/start/vim-polyglot/filetype.vim"
line 1: call polyglot#init#init()
calling function polyglot#init#init()

line 1:   " A no-op as sourcing this file is enough
function polyglot#init#init returning #0

continuing in /Users/ablanken/.local/share/nvim/site/pack/packer/start/vim-polyglot/filetype.vim

finished sourcing /Users/ablanken/.local/share/nvim/site/pack/packer/start/vim-polyglot/filetype.vim
continuing in /Users/ablanken/.local/share/nvim/site/pack/packer/start/vim-polyglot/autoload/polyglot/init.vim
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/vim-rooter/filetype.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/which-key.nvim/filetype.vim"
Searching for "/Users/ablanken/.local/nvim-brew/Cellar/neovim/0.7.0/share/nvim/runtime/filetype.vim"
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/nvim-brew/Cellar/neovim/0.7.0/share/nvim/runtime)
chdir(/Users/ablanken/Sync/src/neovim-conf)
line 148: sourcing "/Users/ablanken/.local/nvim-brew/Cellar/neovim/0.7.0/share/nvim/runtime/filetype.vim"
line 1: " Vim support file to detect file types
line 2: "
line 3: " Maintainer:^IBram Moolenaar <Bram@vim.org>
line 4: " Last Change:^I2022 Apr 07
line 5: 
line 6: " Listen very carefully, I will say this only once
line 7: if exists("did_load_filetypes")
line 8:   finish
line 9: endif
line 10: let did_load_filetypes = 1
line 11: 
line 12: " Line continuation is used here, remove 'C' from 'cpoptions'
line 13: let s:cpo_save = &cpo
line 14: set cpo&vim
line 15: 
line 16: augroup filetypedetect
line 17: 
line 18: " Ignored extensions
line 19: if exists("*fnameescape")
line 20: au BufNewFile,BufRead ?\+.orig,?\+.bak,?\+.old,?\+.new,?\+.dpkg-dist,?\+.dpkg-old,?\+.dpkg-new,?\+.dpkg-bak,?\+.rpmsave,?\+.rpmnew,?\+.pacsave,?\+.pacnew exe "doau filetypedetect BufRead " . fnameescape(expand("<afile>:r"))
line 22: au BufNewFile,BufRead *~ let s:name = expand("<afile>") | let s:short = substitute(s:name, '\~$', '', '') | if s:name != s:short && s:short != "" |   exe "doau filetypedetect BufRead " . fnameescape(s:short) | endif | unlet! s:name s:short
line 29: au BufNewFile,BufRead ?\+.in if expand("<afile>:t") != "configure.in" |   exe "doau filetypedetect BufRead " . fnameescape(expand("<afile>:r")) | endif
line 33: elseif &verbose > 0
line 34:   echomsg "Warning: some filetypes will not be recognized because this version of Vim does not have fnameescape()"
line 35: endif
line 36: 
line 37: " Pattern used to match file names which should not be inspected.
line 38: " Currently finds compressed files.
line 39: if !exists("g:ft_ignore_pat")
line 40:   let g:ft_ignore_pat = '\.\(Z\|gz\|bz2\|zip\|tgz\)$'
line 41: endif
line 42: 
line 43: " Function used for patterns that end in a star: don't set the filetype if the
line 44: " file name matches ft_ignore_pat.
line 45: " When using this, the entry should probably be further down below with the
line 46: " other StarSetf() calls.
line 47: func s:StarSetf(ft)
line 52: 
line 53: " Vim help file
line 54: au BufNewFile,BufRead $VIMRUNTIME/doc/*.txt setf help
line 55: 
line 56: " Abaqus or Trasys
line 57: au BufNewFile,BufRead *.inp^I^I^Icall dist#ft#Check_inp()
line 58: 
line 59: " 8th (Firth-derivative)
line 60: au BufNewFile,BufRead *.8th^I^I^Isetf 8th
line 61: 
line 62: " A-A-P recipe
line 63: au BufNewFile,BufRead *.aap^I^I^Isetf aap
line 64: 
line 65: " A2ps printing utility
line 66: au BufNewFile,BufRead */etc/a2ps.cfg,*/etc/a2ps/*.cfg,a2psrc,.a2psrc setf a2ps
line 67: 
line 68: " ABAB/4
line 69: au BufNewFile,BufRead *.abap^I^I^Isetf abap
line 70: 
line 71: " ABC music notation
line 72: au BufNewFile,BufRead *.abc^I^I^Isetf abc
line 73: 
line 74: " ABEL
line 75: au BufNewFile,BufRead *.abl^I^I^Isetf abel
line 76: 
line 77: " AceDB
line 78: au BufNewFile,BufRead *.wrm^I^I^Isetf acedb
line 79: 
line 80: " Ada (83, 9X, 95)
line 81: au BufNewFile,BufRead *.adb,*.ads,*.ada^I^Isetf ada
line 82: au BufNewFile,BufRead *.gpr^I^I^Isetf ada
line 83: 
line 84: " AHDL
line 85: au BufNewFile,BufRead *.tdf^I^I^Isetf ahdl
line 86: 
line 87: " AIDL
line 88: au BufNewFile,BufRead *.aidl^I^I^Isetf aidl
line 89: 
line 90: " AMPL
line 91: au BufNewFile,BufRead *.run^I^I^Isetf ampl
line 92: 
line 93: " Ant
line 94: au BufNewFile,BufRead build.xml^I^I^Isetf ant
line 95: 
line 96: " Arduino
line 97: au BufNewFile,BufRead *.ino,*.pde^I^Isetf arduino
line 98: 
line 99: " Apache config file
line 100: au BufNewFile,BufRead .htaccess,*/etc/httpd/*.conf^I^Isetf apache
line 101: au BufNewFile,BufRead */etc/apache2/sites-*/*.com^I^Isetf apache
line 102: 
line 103: " XA65 MOS6510 cross assembler
line 104: au BufNewFile,BufRead *.a65^I^I^Isetf a65
line 105: 
line 106: " Applescript
line 107: au BufNewFile,BufRead *.scpt^I^I^Isetf applescript
line 108: 
line 109: " Applix ELF
line 110: au BufNewFile,BufRead *.am if expand("<afile>") !~? 'Makefile.am\>' | setf elf | endif
line 112: 
line 113: " ALSA configuration
line 114: au BufNewFile,BufRead .asoundrc,*/usr/share/alsa/alsa.conf,*/etc/asound.conf setf alsaconf
line 115: 
line 116: " Arc Macro Language
line 117: au BufNewFile,BufRead *.aml^I^I^Isetf aml
line 118: 
line 119: " APT config file
line 120: au BufNewFile,BufRead apt.conf^I^I       setf aptconf
line 121: au BufNewFile,BufRead */.aptitude/config       setf aptconf
line 122: " more generic pattern far down
line 123: 
line 124: " Arch Inventory file
line 125: au BufNewFile,BufRead .arch-inventory,=tagging-method^Isetf arch
line 126: 
line 127: " ART*Enterprise (formerly ART-IM)
line 128: au BufNewFile,BufRead *.art^I^I^Isetf art
line 129: 
line 130: " AsciiDoc
line 131: au BufNewFile,BufRead *.asciidoc,*.adoc^I^Isetf asciidoc
line 132: 
line 133: " ASN.1
line 134: au BufNewFile,BufRead *.asn,*.asn1^I^Isetf asn
line 135: 
line 136: " Active Server Pages (with Visual Basic Script)
line 137: au BufNewFile,BufRead *.asa if exists("g:filetype_asa") |   exe "setf " . g:filetype_asa | else |   setf aspvbs | endif
line 143: 
line 144: " Active Server Pages (with Perl or Visual Basic Script)
line 145: au BufNewFile,BufRead *.asp if exists("g:filetype_asp") |   exe "setf " . g:filetype_asp | elseif getline(1) . getline(2) . getline(3) =~? "perlscript" |   setf aspperl | else |   setf aspvbs | endif
line 153: 
line 154: " Grub (must be before catch *.lst)
line 155: au BufNewFile,BufRead */boot/grub/menu.lst,*/boot/grub/grub.conf,*/etc/grub.conf setf grub
line 156: 
line 157: " Assembly (all kinds)
line 158: " *.lst is not pure assembly, it has two extra columns (address, byte codes)
line 159: au BufNewFile,BufRead *.asm,*.[sS],*.[aA],*.mac,*.lst^Icall dist#ft#FTasm()
line 160: 
line 161: " Macro (VAX)
line 162: au BufNewFile,BufRead *.mar^I^I^Isetf vmasm
line 163: 
line 164: " Atlas
line 165: au BufNewFile,BufRead *.atl,*.as^I^Isetf atlas
line 166: 
line 167: " Atom is based on XML
line 168: au BufNewFile,BufRead *.atom^I^I^Isetf xml
line 169: 
line 170: " Autoit v3
line 171: au BufNewFile,BufRead *.au3^I^I^Isetf autoit
line 172: 
line 173: " Autohotkey
line 174: au BufNewFile,BufRead *.ahk^I^I^Isetf autohotkey
line 175: 
line 176: " Automake
line 177: au BufNewFile,BufRead [mM]akefile.am,GNUmakefile.am^Isetf automake
line 178: 
line 179: " Autotest .at files are actually m4
line 180: au BufNewFile,BufRead *.at^I^I^Isetf m4
line 181: 
line 182: " Avenue
line 183: au BufNewFile,BufRead *.ave^I^I^Isetf ave
line 184: 
line 185: " Awk
line 186: au BufNewFile,BufRead *.awk,*.gawk^I^Isetf awk
line 187: 
line 188: " B
line 189: au BufNewFile,BufRead *.mch,*.ref,*.imp^I^Isetf b
line 190: 
line 191: " BASIC or Visual Basic
line 192: au BufNewFile,BufRead *.bas^I^I^Icall dist#ft#FTbas()
line 193: au BufNewFile,BufRead *.bi,*.bm^I^I^Icall dist#ft#FTbas()
line 194: 
line 195: " Visual Basic Script (close to Visual Basic) or Visual Basic .NET
line 196: au BufNewFile,BufRead *.vb,*.vbs,*.dsm,*.ctl^Isetf vb
line 197: 
line 198: " IBasic file (similar to QBasic)
line 199: au BufNewFile,BufRead *.iba,*.ibi^I^Isetf ibasic
line 200: 
line 201: " FreeBasic file (similar to QBasic)
line 202: au BufNewFile,BufRead *.fb^I^I^Isetf freebasic
line 203: 
line 204: " Batch file for MSDOS. See dist#ft#FTsys for *.sys
line 205: au BufNewFile,BufRead *.bat^I^I^Isetf dosbatch
line 206: " *.cmd is close to a Batch file, but on OS/2 Rexx files also use *.cmd.
line 207: au BufNewFile,BufRead *.cmd if getline(1) =~ '^/\*' | setf rexx | else | setf dosbatch | endif
line 209: " ABB RAPID or Batch file for MSDOS.
line 210: au BufNewFile,BufRead *.sys\c^I^I^Icall dist#ft#FTsys()
line 211: 
line 212: " Batch file for 4DOS
line 213: au BufNewFile,BufRead *.btm^I^I^Icall dist#ft#FTbtm()
line 214: 
line 215: " BC calculator
line 216: au BufNewFile,BufRead *.bc^I^I^Isetf bc
line 217: 
line 218: " BDF font
line 219: au BufNewFile,BufRead *.bdf^I^I^Isetf bdf
line 220: 
line 221: " Beancount
line 222: au BufNewFile,BufRead *.beancount^I^Isetf beancount
line 223: 
line 224: " BibTeX bibliography database file
line 225: au BufNewFile,BufRead *.bib^I^I^Isetf bib
line 226: 
line 227: " BibTeX Bibliography Style
line 228: au BufNewFile,BufRead *.bst^I^I^Isetf bst
line 229: 
line 230: " Bicep
line 231: au BufNewFile,BufRead *.bicep^I^I^Isetf bicep
line 232: 
line 233: " BIND configuration
line 234: " sudoedit uses namedXXXX.conf
line 235: au BufNewFile,BufRead named*.conf,rndc*.conf,rndc*.key^Isetf named
line 236: 
line 237: " BIND zone
line 238: au BufNewFile,BufRead named.root^I^Isetf bindzone
line 239: au BufNewFile,BufRead *.db^I^I^Icall dist#ft#BindzoneCheck('')
line 240: 
line 241: " Blank
line 242: au BufNewFile,BufRead *.bl^I^I^Isetf blank
line 243: 
line 244: " Blkid cache file
line 245: au BufNewFile,BufRead */etc/blkid.tab,*/etc/blkid.tab.old   setf xml
line 246: 
line 247: " BSDL
line 248: au BufNewFile,BufRead *bsd,*.bsdl^I^Isetf bsdl
line 249: 
line 250: " Bazel (http://bazel.io)
line 251: autocmd BufRead,BufNewFile *.bzl,*.bazel,WORKSPACE^Isetf bzl
line 252: if has("fname_case")
line 253:   " There is another check for BUILD further below.
line 254:   autocmd BufRead,BufNewFile *.BUILD,BUILD^I^Isetf bzl
line 255: endif
line 256: 
line 257: " C or lpc
line 258: au BufNewFile,BufRead *.c^I^I^Icall dist#ft#FTlpc()
line 259: au BufNewFile,BufRead *.lpc,*.ulpc^I^Isetf lpc
line 260: 
line 261: " Calendar
line 262: au BufNewFile,BufRead calendar^I^I^Isetf calendar
line 263: 
line 264: " C#
line 265: au BufNewFile,BufRead *.cs,*.csx^I^Isetf cs
line 266: 
line 267: " CSDL
line 268: au BufNewFile,BufRead *.csdl^I^I^Isetf csdl
line 269: 
line 270: " Cabal
line 271: au BufNewFile,BufRead *.cabal^I^I^Isetf cabal
line 272: 
line 273: " Cdrdao TOC
line 274: au BufNewFile,BufRead *.toc^I^I^Isetf cdrtoc
line 275: 
line 276: " Cdrdao config
line 277: au BufNewFile,BufRead */etc/cdrdao.conf,*/etc/defaults/cdrdao,*/etc/default/cdrdao,.cdrdao^Isetf cdrdaoconf
line 278: 
line 279: " Cfengine
line 280: au BufNewFile,BufRead cfengine.conf^I^Isetf cfengine
line 281: 
line 282: " ChaiScript
line 283: au BufRead,BufNewFile *.chai^I^I^Isetf chaiscript
line 284: 
line 285: " Comshare Dimension Definition Language
line 286: au BufNewFile,BufRead *.cdl^I^I^Isetf cdl
line 287: 
line 288: " Conary Recipe
line 289: au BufNewFile,BufRead *.recipe^I^I^Isetf conaryrecipe
line 290: 
line 291: " Controllable Regex Mutilator
line 292: au BufNewFile,BufRead *.crm^I^I^Isetf crm
line 293: 
line 294: " Cyn++
line 295: au BufNewFile,BufRead *.cyn^I^I^Isetf cynpp
line 296: 
line 297: " Cynlib
line 298: " .cc and .cpp files can be C++ or Cynlib.
line 299: au BufNewFile,BufRead *.cc if exists("cynlib_syntax_for_cc")|setf cynlib|else|setf cpp|endif
line 301: au BufNewFile,BufRead *.cpp if exists("cynlib_syntax_for_cpp")|setf cynlib|else|setf cpp|endif
line 303: 
line 304: " C++
line 305: au BufNewFile,BufRead *.cxx,*.c++,*.hh,*.hxx,*.hpp,*.ipp,*.moc,*.tcc,*.inl setf cpp
line 306: if has("fname_case")
line 307:   au BufNewFile,BufRead *.C,*.H setf cpp
line 308: endif
line 309: 
line 310: " .h files can be C, Ch C++, ObjC or ObjC++.
line 311: " Set c_syntax_for_h if you want C, ch_syntax_for_h if you want Ch. ObjC is
line 312: " detected automatically.
line 313: au BufNewFile,BufRead *.h^I^I^Icall dist#ft#FTheader()
line 314: 
line 315: " Ch (CHscript)
line 316: au BufNewFile,BufRead *.chf^I^I^Isetf ch
line 317: 
line 318: " TLH files are C++ headers generated by Visual C++'s #import from typelibs
line 319: au BufNewFile,BufRead *.tlh^I^I^Isetf cpp
line 320: 
line 321: " Cascading Style Sheets
line 322: au BufNewFile,BufRead *.css^I^I^Isetf css
line 323: 
line 324: " Century Term Command Scripts (*.cmd too)
line 325: au BufNewFile,BufRead *.con^I^I^Isetf cterm
line 326: 
line 327: " Changelog
line 328: au BufNewFile,BufRead changelog.Debian,changelog.dch,NEWS.Debian,NEWS.dch,*/debian/changelog^Isetf debchangelog
line 330: 
line 331: au BufNewFile,BufRead [cC]hange[lL]og  if getline(1) =~ '; urgency='|   setf debchangelog| else|   setf changelog| endif
line 337: 
line 338: au BufNewFile,BufRead NEWS  if getline(1) =~ '; urgency='|   setf debchangelog| endif
line 342: 
line 343: " CHILL
line 344: au BufNewFile,BufRead *..ch^I^I^Isetf chill
line 345: 
line 346: " Changes for WEB and CWEB or CHILL
line 347: au BufNewFile,BufRead *.ch^I^I^Icall dist#ft#FTchange()
line 348: 
line 349: " ChordPro
line 350: au BufNewFile,BufRead *.chopro,*.crd,*.cho,*.crdpro,*.chordpro^Isetf chordpro
line 351: 
line 352: " Clean
line 353: au BufNewFile,BufRead *.dcl,*.icl^I^Isetf clean
line 354: 
line 355: " Clever
line 356: au BufNewFile,BufRead *.eni^I^I^Isetf cl
line 357: 
line 358: " Clever or dtd
line 359: au BufNewFile,BufRead *.ent^I^I^Icall dist#ft#FTent()
line 360: 
line 361: " Clipper, FoxPro, ABB RAPID or eviews
line 362: au BufNewFile,BufRead *.prg\c^I^I^Icall dist#ft#FTprg()
line 363: 
line 364: " Clojure
line 365: au BufNewFile,BufRead *.clj,*.cljs,*.cljx,*.cljc^I^Isetf clojure
line 366: 
line 367: " Cmake
line 368: au BufNewFile,BufRead CMakeLists.txt,*.cmake,*.cmake.in^I^Isetf cmake
line 369: 
line 370: " Cmusrc
line 371: au BufNewFile,BufRead */.cmus/{autosave,rc,command-history,*.theme} setf cmusrc
line 372: au BufNewFile,BufRead */cmus/{rc,*.theme}^I^I^Isetf cmusrc
line 373: 
line 374: " Cobol
line 375: au BufNewFile,BufRead *.cbl,*.cob,*.lib^Isetf cobol
line 376: "   cobol or zope form controller python script? (heuristic)
line 377: au BufNewFile,BufRead *.cpy if getline(1) =~ '^##' |   setf python | else |   setf cobol | endif
line 383: 
line 384: " Coco/R
line 385: au BufNewFile,BufRead *.atg^I^I^Isetf coco
line 386: 
line 387: " Cold Fusion
line 388: au BufNewFile,BufRead *.cfm,*.cfi,*.cfc^I^Isetf cf
line 389: 
line 390: " Configure scripts
line 391: au BufNewFile,BufRead configure.in,configure.ac setf config
line 392: 
line 393: " Cooklang
line 394: au BufNewFile,BufRead *.cook^I^I^Isetf cook
line 395: 
line 396: " CUDA Compute Unified Device Architecture
line 397: au BufNewFile,BufRead *.cu,*.cuh^I^Isetf cuda
line 398: 
line 399: " Dockerfile; Podman uses the same syntax with name Containerfile
line 400: " Also see Dockerfile.* below.
line 401: au BufNewFile,BufRead Containerfile,Dockerfile,*.Dockerfile^Isetf dockerfile
line 402: 
line 403: " WildPackets EtherPeek Decoder
line 404: au BufNewFile,BufRead *.dcd^I^I^Isetf dcd
line 405: 
line 406: " Enlightenment configuration files
line 407: au BufNewFile,BufRead *enlightenment/*.cfg^Isetf c
line 408: 
line 409: " Eterm
line 410: au BufNewFile,BufRead *Eterm/*.cfg^I^Isetf eterm
line 411: 
line 412: " Elixir or Euphoria
line 413: au BufNewFile,BufRead *.ex call dist#ft#ExCheck()
line 414: 
line 415: " Elixir
line 416: au BufRead,BufNewFile mix.lock,*.exs setf elixir
line 417: au BufRead,BufNewFile *.eex,*.leex setf eelixir
line 418: 
line 419: " Elvish
line 420: au BufRead,BufNewFile *.elv setf elvish
line 421: 
line 422: " Euphoria 3 or 4
line 423: au BufNewFile,BufRead *.eu,*.ew,*.exu,*.exw  call dist#ft#EuphoriaCheck()
line 424: if has("fname_case")
line 425:    au BufNewFile,BufRead *.EU,*.EW,*.EX,*.EXU,*.EXW  call dist#ft#EuphoriaCheck()
line 426: endif
line 427: 
line 428: " Lynx config files
line 429: au BufNewFile,BufRead lynx.cfg^I^I^Isetf lynx
line 430: 
line 431: " Modula-3 configuration language (must be before *.cfg and *makefile)
line 432: au BufNewFile,BufRead *.quake,cm3.cfg^I^Isetf m3quake
line 433: au BufNewFile,BufRead m3makefile,m3overrides^Isetf m3build
line 434: 
line 435: " Quake
line 436: au BufNewFile,BufRead *baseq[2-3]/*.cfg,*id1/*.cfg^Isetf quake
line 437: au BufNewFile,BufRead *quake[1-3]/*.cfg^I^I^Isetf quake
line 438: 
line 439: " Quake C
line 440: au BufNewFile,BufRead *.qc^I^I^Isetf c
line 441: 
line 442: " Configure files
line 443: au BufNewFile,BufRead *.cfg\c^I^I^Icall dist#ft#FTcfg()
line 444: 
line 445: " Cucumber
line 446: au BufNewFile,BufRead *.feature^I^I^Isetf cucumber
line 447: 
line 448: " Communicating Sequential Processes
line 449: au BufNewFile,BufRead *.csp,*.fdr^I^Isetf csp
line 450: 
line 451: " CUPL logic description and simulation
line 452: au BufNewFile,BufRead *.pld^I^I^Isetf cupl
line 453: au BufNewFile,BufRead *.si^I^I^Isetf cuplsim
line 454: 
line 455: " Dart
line 456: au BufRead,BufNewfile *.dart,*.drt^I^Isetf dart
line 457: 
line 458: " Debian Control
line 459: au BufNewFile,BufRead */debian/control^I^Isetf debcontrol
line 460: au BufNewFile,BufRead control  if getline(1) =~ '^Source:'|   setf debcontrol| endif
line 464: 
line 465: " Debian Copyright
line 466: au BufNewFile,BufRead */debian/copyright^Isetf debcopyright
line 467: au BufNewFile,BufRead copyright  if getline(1) =~ '^Format:'|   setf debcopyright| endif
line 471: 
line 472: " Debian Sources.list
line 473: au BufNewFile,BufRead */etc/apt/sources.list^I^Isetf debsources
line 474: au BufNewFile,BufRead */etc/apt/sources.list.d/*.list^Isetf debsources
line 475: 
line 476: " Deny hosts
line 477: au BufNewFile,BufRead denyhosts.conf^I^Isetf denyhosts
line 478: 
line 479: " dnsmasq(8) configuration files
line 480: au BufNewFile,BufRead */etc/dnsmasq.conf^Isetf dnsmasq
line 481: 
line 482: " ROCKLinux package description
line 483: au BufNewFile,BufRead *.desc^I^I^Isetf desc
line 484: 
line 485: " the D language or dtrace
line 486: au BufNewFile,BufRead */dtrace/*.d^I^Isetf dtrace
line 487: au BufNewFile,BufRead *.d^I^I^Icall dist#ft#DtraceCheck()
line 488: 
line 489: " Desktop files
line 490: au BufNewFile,BufRead *.desktop,*.directory^Isetf desktop
line 491: 
line 492: " Dict config
line 493: au BufNewFile,BufRead dict.conf,.dictrc^I^Isetf dictconf
line 494: 
line 495: " Dictd config
line 496: au BufNewFile,BufRead dictd*.conf^I^Isetf dictdconf
line 497: 
line 498: " DEP3 formatted patch files
line 499: au BufNewFile,BufRead */debian/patches/*^Icall dist#ft#Dep3patch()
line 500: 
line 501: " Diff files
line 502: au BufNewFile,BufRead *.diff,*.rej^I^Isetf diff
line 503: au BufNewFile,BufRead *.patch if getline(1) =~# '^From [0-9a-f]\{40,\} Mon Sep 17 00:00:00 2001$' |   setf gitsendemail | else |   setf diff | endif
line 509: 
line 510: " Dircolors
line 511: au BufNewFile,BufRead .dir_colors,.dircolors,*/etc/DIR_COLORS^Isetf dircolors
line 512: 
line 513: " Diva (with Skill) or InstallShield
line 514: au BufNewFile,BufRead *.rul if getline(1).getline(2).getline(3).getline(4).getline(5).getline(6) =~? 'InstallShield' |   setf ishd | else |   setf diva | endif
line 520: 
line 521: " DCL (Digital Command Language - vms) or DNS zone file
line 522: au BufNewFile,BufRead *.com^I^I^Icall dist#ft#BindzoneCheck('dcl')
line 523: 
line 524: " DOT
line 525: au BufNewFile,BufRead *.dot,*.gv^I^Isetf dot
line 526: 
line 527: " Dune
line 528: au BufNewFile,BufRead jbuild,dune,dune-project,dune-workspace setf dune
line 529: 
line 530: " Dylan - lid files
line 531: au BufNewFile,BufRead *.lid^I^I^Isetf dylanlid
line 532: 
line 533: " Dylan - intr files (melange)
line 534: au BufNewFile,BufRead *.intr^I^I^Isetf dylanintr
line 535: 
line 536: " Dylan
line 537: au BufNewFile,BufRead *.dylan^I^I^Isetf dylan
line 538: 
line 539: " Microsoft Module Definition
line 540: au BufNewFile,BufRead *.def^I^I^Isetf def
line 541: 
line 542: " Dracula
line 543: au BufNewFile,BufRead *.drac,*.drc,*lvs,*lpe^Isetf dracula
line 544: 
line 545: " Datascript
line 546: au BufNewFile,BufRead *.ds^I^I^Isetf datascript
line 547: 
line 548: " dsl: DSSSL or Structurizr
line 549: au BufNewFile,BufRead *.dsl if getline(1) =~ '^\s*<\!' |   setf dsl | else |   setf structurizr | endif
line 555: 
line 556: " DTD (Document Type Definition for XML)
line 557: au BufNewFile,BufRead *.dtd^I^I^Isetf dtd
line 558: 
line 559: " DTS/DSTI (device tree files)
line 560: au BufNewFile,BufRead *.dts,*.dtsi^I^Isetf dts
line 561: 
line 562: " EDIF (*.edf,*.edif,*.edn,*.edo) or edn
line 563: au BufNewFile,BufRead *.ed\(f\|if\|o\)^I^Isetf edif
line 564: au BufNewFile,BufRead *.edn if getline(1) =~ '^\s*(\s*edif\>' |   setf edif | else |   setf clojure | endif
line 570: 
line 571: " EditorConfig (close enough to dosini)
line 572: au BufNewFile,BufRead .editorconfig^I^Isetf dosini
line 573: 
line 574: " Embedix Component Description
line 575: au BufNewFile,BufRead *.ecd^I^I^Isetf ecd
line 576: 
line 577: " Eiffel or Specman or Euphoria
line 578: au BufNewFile,BufRead *.e,*.E^I^I^Icall dist#ft#FTe()
line 579: 
line 580: " Elinks configuration
line 581: au BufNewFile,BufRead elinks.conf^I^Isetf elinks
line 582: 
line 583: " ERicsson LANGuage; Yaws is erlang too
line 584: au BufNewFile,BufRead *.erl,*.hrl,*.yaws^Isetf erlang
line 585: 
line 586: " Elm
line 587: au BufNewFile,BufRead *.elm^I^I^Isetf elm
line 588: 
line 589: " Elm Filter Rules file
line 590: au BufNewFile,BufRead filter-rules^I^Isetf elmfilt
line 591: 
line 592: " ESMTP rc file
line 593: au BufNewFile,BufRead *esmtprc^I^I^Isetf esmtprc
line 594: 
line 595: " ESQL-C
line 596: au BufNewFile,BufRead *.ec,*.EC^I^I^Isetf esqlc
line 597: 
line 598: " Esterel
line 599: au BufNewFile,BufRead *.strl^I^I^Isetf esterel
line 600: 
line 601: " Essbase script
line 602: au BufNewFile,BufRead *.csc^I^I^Isetf csc
line 603: 
line 604: " Exim
line 605: au BufNewFile,BufRead exim.conf^I^I^Isetf exim
line 606: 
line 607: " Expect
line 608: au BufNewFile,BufRead *.exp^I^I^Isetf expect
line 609: 
line 610: " Exports
line 611: au BufNewFile,BufRead exports^I^I^Isetf exports
line 612: 
line 613: " Falcon
line 614: au BufNewFile,BufRead *.fal^I^I^Isetf falcon
line 615: 
line 616: " Fantom
line 617: au BufNewFile,BufRead *.fan,*.fwt^I^Isetf fan
line 618: 
line 619: " Factor
line 620: au BufNewFile,BufRead *.factor^I^I^Isetf factor
line 621: 
line 622: " Fennel
line 623: autocmd BufRead,BufNewFile *.fnl^I^Isetf fennel
line 624: 
line 625: " Fetchmail RC file
line 626: au BufNewFile,BufRead .fetchmailrc^I^Isetf fetchmail
line 627: 
line 628: " Fish shell
line 629: au BufNewFile,BufRead *.fish^I^I^Isetf fish
line 630: 
line 631: " FlexWiki - disabled, because it has side effects when a .wiki file
line 632: " is not actually FlexWiki
line 633: "au BufNewFile,BufRead *.wiki^I^I^Isetf flexwiki
line 634: 
line 635: " Focus Executable
line 636: au BufNewFile,BufRead *.fex,*.focexec^I^Isetf focexec
line 637: 
line 638: " Focus Master file (but not for auto.master)
line 639: au BufNewFile,BufRead auto.master^I^Isetf conf
line 640: au BufNewFile,BufRead *.mas,*.master^I^Isetf master
line 641: 
line 642: " Forth
line 643: au BufNewFile,BufRead *.ft,*.fth^I^Isetf forth
line 644: 
line 645: " Reva Forth
line 646: au BufNewFile,BufRead *.frt^I^I^Isetf reva
line 647: 
line 648: " Fortran
line 649: if has("fname_case")
line 650:   au BufNewFile,BufRead *.F,*.FOR,*.FPP,*.FTN,*.F77,*.F90,*.F95,*.F03,*.F08^I setf fortran
line 651: endif
line 652: au BufNewFile,BufRead   *.f,*.for,*.fortran,*.fpp,*.ftn,*.f77,*.f90,*.f95,*.f03,*.f08  setf fortran
line 653: 
line 654: " Framescript
line 655: au BufNewFile,BufRead *.fsl^I^I^Isetf framescript
line 656: 
line 657: " FStab
line 658: au BufNewFile,BufRead fstab,mtab^I^Isetf fstab
line 659: 
line 660: " Fusion
line 661: au BufRead,BufNewFile *.fusion^I^I^Isetf fusion
line 662: 
line 663: " F# or Forth
line 664: au BufNewFile,BufRead *.fs^I^I^Icall dist#ft#FTfs()
line 665: 
line 666: " F#
line 667: au BufNewFile,BufRead *.fsi,*.fsx^I^Isetf fsharp
line 668: 
line 669: " GDB command files
line 670: au BufNewFile,BufRead .gdbinit,gdbinit,.gdbearlyinit,gdbearlyinit,*.gdb^I^Isetf gdb
line 671: 
line 672: " GDMO
line 673: au BufNewFile,BufRead *.mo,*.gdmo^I^Isetf gdmo
line 674: 
line 675: " GDscript
line 676: au BufNewFile,BufRead *.gd^I^I^Isetf gdscript
line 677: 
line 678: " Godot resource
line 679: au BufRead,BufNewFile *.tscn,*.tres^I^I^Isetf gdresource
line 680: 
line 681: " Gedcom
line 682: au BufNewFile,BufRead *.ged,lltxxxxx.txt^Isetf gedcom
line 683: 
line 684: " Gemtext
line 685: au BufNewFile,BufRead *.gmi,*.gemini^I^Isetf gemtext
line 686: 
line 687: " Gift (Moodle)
line 688: autocmd BufRead,BufNewFile *.gift^I^Isetf gift
line 689: 
line 690: " Git
line 691: au BufNewFile,BufRead COMMIT_EDITMSG,MERGE_MSG,TAG_EDITMSG ^Isetf gitcommit
line 692: au BufNewFile,BufRead NOTES_EDITMSG,EDIT_DESCRIPTION^I^Isetf gitcommit
line 693: au BufNewFile,BufRead *.git/config,.gitconfig,*/etc/gitconfig ^Isetf gitconfig
line 694: au BufNewFile,BufRead */.config/git/config^I^I^Isetf gitconfig
line 695: au BufNewFile,BufRead *.git/config.worktree^I^I^Isetf gitconfig
line 696: au BufNewFile,BufRead *.git/worktrees/*/config.worktree^I^Isetf gitconfig
line 697: au BufNewFile,BufRead .gitmodules,*.git/modules/*/config^Isetf gitconfig
line 698: if !empty($XDG_CONFIG_HOME)
line 699:   au BufNewFile,BufRead $XDG_CONFIG_HOME/git/config^I^Isetf gitconfig
line 700: endif
line 701: au BufNewFile,BufRead git-rebase-todo^I^Isetf gitrebase
line 702: au BufRead,BufNewFile .gitsendemail.msg.??????^Isetf gitsendemail
line 703: au BufNewFile,BufRead *.git/* if getline(1) =~# '^\x\{40,\}\>\|^ref: ' |   setf git | endif
line 707: 
line 708: " Gkrellmrc
line 709: au BufNewFile,BufRead gkrellmrc,gkrellmrc_?^Isetf gkrellmrc
line 710: 
line 711: " GLSL
line 712: au BufNewFile,BufRead *.glsl^I^I^Isetf glsl
line 713: 
line 714: " GP scripts (2.0 and onward)
line 715: au BufNewFile,BufRead *.gp,.gprc^I^Isetf gp
line 716: 
line 717: " GPG
line 718: au BufNewFile,BufRead */.gnupg/options^I^Isetf gpg
line 719: au BufNewFile,BufRead */.gnupg/gpg.conf^I^Isetf gpg
line 720: au BufNewFile,BufRead */usr/*/gnupg/options.skel setf gpg
line 721: if !empty($GNUPGHOME)
line 722:   au BufNewFile,BufRead $GNUPGHOME/options^Isetf gpg
line 723:   au BufNewFile,BufRead $GNUPGHOME/gpg.conf^Isetf gpg
line 724: endif
line 725: 
line 726: " gnash(1) configuration files
line 727: au BufNewFile,BufRead gnashrc,.gnashrc,gnashpluginrc,.gnashpluginrc setf gnash
line 728: 
line 729: " Gitolite
line 730: au BufNewFile,BufRead gitolite.conf^I^Isetf gitolite
line 731: au BufNewFile,BufRead {,.}gitolite.rc,example.gitolite.rc^Isetf perl
line 732: 
line 733: " Glimmer-flavored TypeScript and JavaScript
line 734: au BufNewFile,BufRead *.gts^Isetf typescript.glimmer
line 735: au BufNewFile,BufRead *.gjs^Isetf javascript.glimmer
line 736: 
line 737: " Gnuplot scripts
line 738: au BufNewFile,BufRead *.gpi,.gnuplot^I^Isetf gnuplot
line 739: 
line 740: " Go (Google)
line 741: au BufNewFile,BufRead *.go^I^I^Isetf go
line 742: au BufNewFile,BufRead Gopkg.lock^I^Isetf toml
line 743: au BufRead,BufNewFile go.work^I^I^Isetf gowork
line 744: 
line 745: " GrADS scripts
line 746: au BufNewFile,BufRead *.gs^I^I^Isetf grads
line 747: 
line 748: " GraphQL
line 749: au BufNewFile,BufRead *.graphql,*.graphqls,*.gql^I^I^Isetf graphql
line 750: 
line 751: " Gretl
line 752: au BufNewFile,BufRead *.gretl^I^I^Isetf gretl
line 753: 
line 754: " Groovy
line 755: au BufNewFile,BufRead *.gradle,*.groovy^I^Isetf groovy
line 756: 
line 757: " GNU Server Pages
line 758: au BufNewFile,BufRead *.gsp^I^I^Isetf gsp
line 759: 
line 760: " Group file
line 761: au BufNewFile,BufRead */etc/group,*/etc/group-,*/etc/group.edit,*/etc/gshadow,*/etc/gshadow-,*/etc/gshadow.edit,*/var/backups/group.bak,*/var/backups/gshadow.bak  setf group
line 762: 
line 763: " GTK RC
line 764: au BufNewFile,BufRead .gtkrc,gtkrc^I^Isetf gtkrc
line 765: 
line 766: " Hack
line 767: au BufRead,BufNewFile *.hack,*.hackpartial^I^I^Isetf hack
line 768: 
line 769: " Haml
line 770: au BufNewFile,BufRead *.haml^I^I^Isetf haml
line 771: 
line 772: " Hamster Classic | Playground files
line 773: au BufNewFile,BufRead *.hsm^I^I^Isetf hamster
line 774: 
line 775: " Handlebars
line 776: au BufNewFile,BufRead *.hbs^I^I^Isetf handlebars
line 777: 
line 778: " Haskell
line 779: au BufNewFile,BufRead *.hs,*.hsc,*.hs-boot,*.hsig setf haskell
line 780: au BufNewFile,BufRead *.lhs^I^I^Isetf lhaskell
line 781: au BufNewFile,BufRead *.chs^I^I^Isetf chaskell
line 782: au BufNewFile,BufRead cabal.project^I^Isetf cabalproject
line 783: au BufNewFile,BufRead $HOME/.cabal/config^Isetf cabalconfig
line 784: au BufNewFile,BufRead cabal.config^I^Isetf cabalconfig
line 785: 
line 786: " Haste
line 787: au BufNewFile,BufRead *.ht^I^I^Isetf haste
line 788: au BufNewFile,BufRead *.htpp^I^I^Isetf hastepreproc
line 789: 
line 790: " HCL
line 791: au BufRead,BufNewFile *.hcl^I^I^Isetf hcl
line 792: 
line 793: " Hercules
line 794: au BufNewFile,BufRead *.vc,*.ev,*.sum,*.errsum^Isetf hercules
line 795: 
line 796: " HEEx
line 797: au BufRead,BufNewFile *.heex^I^I^Isetf heex
line 798: 
line 799: " HEX (Intel)
line 800: au BufNewFile,BufRead *.hex,*.h32^I^Isetf hex
line 801: 
line 802: " Hjson
line 803: au BufNewFile,BufRead *.hjson^I^I^Isetf hjson
line 804: 
line 805: " Hollywood
line 806: au BufRead,BufNewFile *.hws^I^I^Isetf hollywood
line 807: 
line 808: " Tilde (must be before HTML)
line 809: au BufNewFile,BufRead *.t.html^I^I^Isetf tilde
line 810: 
line 811: " HTML (.shtml and .stm for server side)
line 812: au BufNewFile,BufRead *.html,*.htm,*.shtml,*.stm  call dist#ft#FThtml()
line 813: 
line 814: " HTML with Ruby - eRuby
line 815: au BufNewFile,BufRead *.erb,*.rhtml^I^Isetf eruby
line 816: 
line 817: " HTML with M4
line 818: au BufNewFile,BufRead *.html.m4^I^I^Isetf htmlm4
line 819: 
line 820: " Some template.  Used to be HTML Cheetah.
line 821: au BufNewFile,BufRead *.tmpl^I^I^Isetf template
line 822: 
line 823: " Host config
line 824: au BufNewFile,BufRead */etc/host.conf^I^Isetf hostconf
line 825: 
line 826: " Hosts access
line 827: au BufNewFile,BufRead */etc/hosts.allow,*/etc/hosts.deny  setf hostsaccess
line 828: 
line 829: " Hyper Builder
line 830: au BufNewFile,BufRead *.hb^I^I^Isetf hb
line 831: 
line 832: " Httest
line 833: au BufNewFile,BufRead *.htt,*.htb^I^Isetf httest
line 834: 
line 835: " i3 (and sway)
line 836: au BufNewFile,BufRead */i3/config,*/sway/config^I^Isetf i3config
line 837: au BufNewFile,BufRead */.i3/config,*/.sway/config^Isetf i3config
line 838: 
line 839: " Icon
line 840: au BufNewFile,BufRead *.icn^I^I^Isetf icon
line 841: 
line 842: " IDL (Interface Description Language)
line 843: au BufNewFile,BufRead *.idl^I^I^Icall dist#ft#FTidl()
line 844: 
line 845: " Microsoft IDL (Interface Description Language)  Also *.idl
line 846: " MOF = WMI (Windows Management Instrumentation) Managed Object Format
line 847: au BufNewFile,BufRead *.odl,*.mof^I^Isetf msidl
line 848: 
line 849: " Icewm menu
line 850: au BufNewFile,BufRead */.icewm/menu^I^Isetf icemenu
line 851: 
line 852: " Indent profile (must come before IDL *.pro!)
line 853: au BufNewFile,BufRead .indent.pro^I^Isetf indent
line 854: au BufNewFile,BufRead indent.pro^I^Icall dist#ft#ProtoCheck('indent')
line 855: 
line 856: " IDL (Interactive Data Language)
line 857: au BufNewFile,BufRead *.pro^I^I^Icall dist#ft#ProtoCheck('idlang')
line 858: 
line 859: " Indent RC
line 860: au BufNewFile,BufRead indentrc^I^I^Isetf indent
line 861: 
line 862: " Inform
line 863: au BufNewFile,BufRead *.inf,*.INF^I^Isetf inform
line 864: 
line 865: " Initng
line 866: au BufNewFile,BufRead */etc/initng/*/*.i,*.ii^Isetf initng
line 867: 
line 868: " Innovation Data Processing
line 869: au BufRead,BufNewFile upstream.dat\c,upstream.*.dat\c,*.upstream.dat\c^Isetf upstreamdat
line 870: au BufRead,BufNewFile fdrupstream.log,upstream.log\c,upstream.*.log\c,*.upstream.log\c,UPSTREAM-*.log\c^Isetf upstreamlog
line 871: au BufRead,BufNewFile upstreaminstall.log\c,upstreaminstall.*.log\c,*.upstreaminstall.log\c setf upstreaminstalllog
line 872: au BufRead,BufNewFile usserver.log\c,usserver.*.log\c,*.usserver.log\c^Isetf usserverlog
line 873: au BufRead,BufNewFile usw2kagt.log\c,usw2kagt.*.log\c,*.usw2kagt.log\c^Isetf usw2kagtlog
line 874: 
line 875: " Ipfilter
line 876: au BufNewFile,BufRead ipf.conf,ipf6.conf,ipf.rules^Isetf ipfilter
line 877: 
line 878: " Informix 4GL (source - canonical, include file, I4GL+M4 preproc.)
line 879: au BufNewFile,BufRead *.4gl,*.4gh,*.m4gl^Isetf fgl
line 880: 
line 881: " .INI file for MSDOS
line 882: au BufNewFile,BufRead *.ini^I^I^Isetf dosini
line 883: 
line 884: " SysV Inittab
line 885: au BufNewFile,BufRead inittab^I^I^Isetf inittab
line 886: 
line 887: " Inno Setup
line 888: au BufNewFile,BufRead *.iss^I^I^Isetf iss
line 889: 
line 890: " J
line 891: au BufNewFile,BufRead *.ijs^I^I^Isetf j
line 892: 
line 893: " JAL
line 894: au BufNewFile,BufRead *.jal,*.JAL^I^Isetf jal
line 895: 
line 896: " Jam
line 897: au BufNewFile,BufRead *.jpl,*.jpr^I^Isetf jam
line 898: 
line 899: " Java
line 900: au BufNewFile,BufRead *.java,*.jav^I^Isetf java
line 901: 
line 902: " JavaCC
line 903: au BufNewFile,BufRead *.jj,*.jjt^I^Isetf javacc
line 904: 
line 905: " JavaScript, ECMAScript, ES module script, CommonJS script
line 906: au BufNewFile,BufRead *.js,*.javascript,*.es,*.mjs,*.cjs   setf javascript
line 907: 
line 908: " JavaScript with React
line 909: au BufNewFile,BufRead *.jsx^I^I^Isetf javascriptreact
line 910: 
line 911: " Java Server Pages
line 912: au BufNewFile,BufRead *.jsp^I^I^Isetf jsp
line 913: 
line 914: " Java Properties resource file (note: doesn't catch font.properties.pl)
line 915: au BufNewFile,BufRead *.properties,*.properties_??,*.properties_??_??^Isetf jproperties
line 916: 
line 917: " Jess
line 918: au BufNewFile,BufRead *.clp^I^I^Isetf jess
line 919: 
line 920: " Jgraph
line 921: au BufNewFile,BufRead *.jgr^I^I^Isetf jgraph
line 922: 
line 923: " Jovial
line 924: au BufNewFile,BufRead *.jov,*.j73,*.jovial^Isetf jovial
line 925: 
line 926: " JSON
line 927: au BufNewFile,BufRead *.json,*.jsonp,*.webmanifest^Isetf json
line 928: 
line 929: " JSON5
line 930: au BufNewFile,BufRead *.json5^I^I^Isetf json5
line 931: 
line 932: " JSON Patch (RFC 6902)
line 933: au BufNewFile,BufRead *.json-patch^I^I^Isetf json
line 934: 
line 935: " Jupyter Notebook is also json
line 936: au BufNewFile,BufRead *.ipynb^I^I^I^Isetf json
line 937: 
line 938: " Other files that look like json
line 939: au BufNewFile,BufRead .babelrc,.eslintrc,.prettierrc,.firebaserc  setf json
line 940: 
line 941: " JSONC
line 942: au BufNewFile,BufRead *.jsonc^I^I^Isetf jsonc
line 943: 
line 944: " Julia
line 945: au BufNewFile,BufRead *.jl^I^I^Isetf julia
line 946: 
line 947: " Kixtart
line 948: au BufNewFile,BufRead *.kix^I^I^Isetf kix
line 949: 
line 950: " Kuka Robot Language
line 951: au BufNewFile,BufRead *.src\c^I^I^Icall dist#ft#FTsrc()
line 952: au BufNewFile,BufRead *.dat\c^I^I^Icall dist#ft#FTdat()
line 953: au BufNewFile,BufRead *.sub\c^I^I^Isetf krl
line 954: 
line 955: " Kimwitu[++]
line 956: au BufNewFile,BufRead *.k^I^I^Isetf kwt
line 957: 
line 958: " Kivy
line 959: au BufNewFile,BufRead *.kv^I^I^Isetf kivy
line 960: 
line 961: " Kotlin
line 962: au BufNewFile,BufRead *.kt,*.ktm,*.kts^I^Isetf kotlin
line 963: 
line 964: " KDE script
line 965: au BufNewFile,BufRead *.ks^I^I^Isetf kscript
line 966: 
line 967: " Kconfig
line 968: au BufNewFile,BufRead Kconfig,Kconfig.debug^Isetf kconfig
line 969: 
line 970: " Lace (ISE)
line 971: au BufNewFile,BufRead *.ace,*.ACE^I^Isetf lace
line 972: 
line 973: " Latte
line 974: au BufNewFile,BufRead *.latte,*.lte^I^Isetf latte
line 975: 
line 976: " Limits
line 977: au BufNewFile,BufRead */etc/limits,*/etc/*limits.conf,*/etc/*limits.d/*.conf^Isetf limits
line 978: 
line 979: " LambdaProlog (see dist#ft#FTmod for *.mod)
line 980: au BufNewFile,BufRead *.sig^I^I^Isetf lprolog
line 981: 
line 982: " LDAP LDIF
line 983: au BufNewFile,BufRead *.ldif^I^I^Isetf ldif
line 984: 
line 985: " Ld loader
line 986: au BufNewFile,BufRead *.ld^I^I^Isetf ld
line 987: 
line 988: " Ledger
line 989: au BufRead,BufNewFile *.ldg,*.ledger,*.journal^I^I^Isetf ledger
line 990: 
line 991: " Less
line 992: au BufNewFile,BufRead *.less^I^I^Isetf less
line 993: 
line 994: " Lex
line 995: au BufNewFile,BufRead *.lex,*.l,*.lxx,*.l++^Isetf lex
line 996: 
line 997: " Libao
line 998: au BufNewFile,BufRead */etc/libao.conf,*/.libao^Isetf libao
line 999: 
line 1000: " Libsensors
line 1001: au BufNewFile,BufRead */etc/sensors.conf,*/etc/sensors3.conf^Isetf sensors
line 1002: 
line 1003: " LFTP
line 1004: au BufNewFile,BufRead lftp.conf,.lftprc,*lftp/rc^Isetf lftp
line 1005: 
line 1006: " Lifelines (or Lex for C++!)
line 1007: au BufNewFile,BufRead *.ll^I^I^Isetf lifelines
line 1008: 
line 1009: " Lilo: Linux loader
line 1010: au BufNewFile,BufRead lilo.conf^I^I^Isetf lilo
line 1011: 
line 1012: " Lisp (*.el = ELisp, *.cl = Common Lisp)
line 1013: " *.jl was removed, it's also used for Julia, better skip than guess wrong.
line 1014: if has("fname_case")
line 1015:   au BufNewFile,BufRead *.lsp,*.lisp,*.asd,*.el,*.cl,*.L,.emacs,.sawfishrc setf lisp
line 1016: else
line 1017:   au BufNewFile,BufRead *.lsp,*.lisp,*.asd,*.el,*.cl,.emacs,.sawfishrc setf lisp
line 1018: endif
line 1019: 
line 1020: " SBCL implementation of Common Lisp
line 1021: au BufNewFile,BufRead sbclrc,.sbclrc^I^Isetf lisp
line 1022: 
line 1023: " Liquid
line 1024: au BufNewFile,BufRead *.liquid^I^I^Isetf liquid
line 1025: 
line 1026: " Lite
line 1027: au BufNewFile,BufRead *.lite,*.lt^I^Isetf lite
line 1028: 
line 1029: " LiteStep RC files
line 1030: au BufNewFile,BufRead */LiteStep/*/*.rc^I^Isetf litestep
line 1031: 
line 1032: " Login access
line 1033: au BufNewFile,BufRead */etc/login.access^Isetf loginaccess
line 1034: 
line 1035: " Login defs
line 1036: au BufNewFile,BufRead */etc/login.defs^I^Isetf logindefs
line 1037: 
line 1038: " Logtalk
line 1039: au BufNewFile,BufRead *.lgt^I^I^Isetf logtalk
line 1040: 
line 1041: " LOTOS
line 1042: au BufNewFile,BufRead *.lot,*.lotos^I^Isetf lotos
line 1043: 
line 1044: " Lout (also: *.lt)
line 1045: au BufNewFile,BufRead *.lou,*.lout^I^Isetf lout
line 1046: 
line 1047: " Lua
line 1048: au BufNewFile,BufRead *.lua^I^I^Isetf lua
line 1049: 
line 1050: " Luarocks
line 1051: au BufNewFile,BufRead *.rockspec^I^Isetf lua
line 1052: 
line 1053: " Linden Scripting Language (Second Life)
line 1054: au BufNewFile,BufRead *.lsl^I^I^Isetf lsl
line 1055: 
line 1056: " Lynx style file (or LotusScript!)
line 1057: au BufNewFile,BufRead *.lss^I^I^Isetf lss
line 1058: 
line 1059: " M4
line 1060: au BufNewFile,BufRead *.m4 if expand("<afile>") !~? 'html.m4$\|fvwm2rc' | setf m4 | endif
line 1062: 
line 1063: " MaGic Point
line 1064: au BufNewFile,BufRead *.mgp^I^I^Isetf mgp
line 1065: 
line 1066: " Mail (for Elm, trn, mutt, muttng, rn, slrn, neomutt)
line 1067: au BufNewFile,BufRead snd.\d\+,.letter,.letter.\d\+,.followup,.article,.article.\d\+,pico.\d\+,mutt{ng,}-*-\w\+,mutt[[:alnum:]_-]\\\{6\},neomutt-*-\w\+,neomutt[[:alnum:]_-]\\\{6\},ae\d\+.txt,/tmp/SLRN[0-9A-Z.]\+,*.eml setf mail
line 1068: 
line 1069: " Mail aliases
line 1070: au BufNewFile,BufRead */etc/mail/aliases,*/etc/aliases^Isetf mailaliases
line 1071: 
line 1072: " Mailcap configuration file
line 1073: au BufNewFile,BufRead .mailcap,mailcap^I^Isetf mailcap
line 1074: 
line 1075: " Makefile
line 1076: au BufNewFile,BufRead *[mM]akefile,*.mk,*.mak,*.dsp setf make
line 1077: 
line 1078: " MakeIndex
line 1079: au BufNewFile,BufRead *.ist,*.mst^I^Isetf ist
line 1080: 
line 1081: " Mallard
line 1082: au BufNewFile,BufRead *.page^I^I^Isetf mallard
line 1083: 
line 1084: " Manpage
line 1085: au BufNewFile,BufRead *.man^I^I^Isetf nroff
line 1086: 
line 1087: " Man config
line 1088: au BufNewFile,BufRead */etc/man.conf,man.config^Isetf manconf
line 1089: 
line 1090: " Maple V
line 1091: au BufNewFile,BufRead *.mv,*.mpl,*.mws^I^Isetf maple
line 1092: 
line 1093: " Map (UMN mapserver config file)
line 1094: au BufNewFile,BufRead *.map^I^I^Isetf map
line 1095: 
line 1096: " Markdown
line 1097: au BufNewFile,BufRead *.markdown,*.mdown,*.mkd,*.mkdn,*.mdwn,*.md  setf markdown
line 1098: 
line 1099: " Mason
line 1100: au BufNewFile,BufRead *.mason,*.mhtml,*.comp^Isetf mason
line 1101: 
line 1102: " Mathematica, Matlab, Murphi, Objective C or Octave
line 1103: au BufNewFile,BufRead *.m^I^I^Icall dist#ft#FTm()
line 1104: 
line 1105: " Mathematica notebook
line 1106: au BufNewFile,BufRead *.nb^I^I^Isetf mma
line 1107: 
line 1108: " Maya Extension Language
line 1109: au BufNewFile,BufRead *.mel^I^I^Isetf mel
line 1110: 
line 1111: " Mercurial (hg) commit file
line 1112: au BufNewFile,BufRead hg-editor-*.txt^I^Isetf hgcommit
line 1113: 
line 1114: " Mercurial config (looks like generic config file)
line 1115: au BufNewFile,BufRead *.hgrc,*hgrc^I^Isetf cfg
line 1116: 
line 1117: " Meson Build system config
line 1118: au BufNewFile,BufRead meson.build,meson_options.txt setf meson
line 1119: au BufNewFile,BufRead *.wrap^I^I^Isetf dosini
line 1120: 
line 1121: " Messages (logs mostly)
line 1122: au BufNewFile,BufRead */log/{auth,cron,daemon,debug,kern,lpr,mail,messages,news/news,syslog,user}{,.log,.err,.info,.warn,.crit,.notice}{,.[0-9]*,-[0-9]*} setf messages
line 1123: 
line 1124: " Metafont
line 1125: au BufNewFile,BufRead *.mf^I^I^Isetf mf
line 1126: 
line 1127: " MetaPost
line 1128: au BufNewFile,BufRead *.mp^I^I^Isetf mp
line 1129: 
line 1130: " MGL
line 1131: au BufNewFile,BufRead *.mgl^I^I^Isetf mgl
line 1132: 
line 1133: " MIX - Knuth assembly
line 1134: au BufNewFile,BufRead *.mix,*.mixal^I^Isetf mix
line 1135: 
line 1136: " MMIX or VMS makefile
line 1137: au BufNewFile,BufRead *.mms^I^I^Icall dist#ft#FTmms()
line 1138: 
line 1139: " Symbian meta-makefile definition (MMP)
line 1140: au BufNewFile,BufRead *.mmp^I^I^Isetf mmp
line 1141: 
line 1142: " ABB Rapid, Modula-2, Modsim III or LambdaProlog
line 1143: au BufNewFile,BufRead *.mod\c^I^I^Icall dist#ft#FTmod()
line 1144: 
line 1145: " Modula-2  (.md removed in favor of Markdown, see dist#ft#FTmod for *.MOD)
line 1146: au BufNewFile,BufRead *.m2,*.DEF,*.mi^I^Isetf modula2
line 1147: 
line 1148: " Modula-3 (.m3, .i3, .mg, .ig)
line 1149: au BufNewFile,BufRead *.[mi][3g]^I^Isetf modula3
line 1150: 
line 1151: " Monk
line 1152: au BufNewFile,BufRead *.isc,*.monk,*.ssc,*.tsc^Isetf monk
line 1153: 
line 1154: " MOO
line 1155: au BufNewFile,BufRead *.moo^I^I^Isetf moo
line 1156: 
line 1157: " Modconf
line 1158: au BufNewFile,BufRead */etc/modules.conf,*/etc/modules,*/etc/conf.modules setf modconf
line 1159: 
line 1160: " MPD is based on XML
line 1161: au BufNewFile,BufRead *.mpd^I^I^Isetf xml
line 1162: 
line 1163: " Mplayer config
line 1164: au BufNewFile,BufRead mplayer.conf,*/.mplayer/config^Isetf mplayerconf
line 1165: 
line 1166: " Motorola S record
line 1167: au BufNewFile,BufRead *.s19,*.s28,*.s37,*.mot,*.srec^Isetf srec
line 1168: 
line 1169: " Mrxvtrc
line 1170: au BufNewFile,BufRead mrxvtrc,.mrxvtrc^I^Isetf mrxvtrc
line 1171: 
line 1172: " Msql
line 1173: au BufNewFile,BufRead *.msql^I^I^Isetf msql
line 1174: 
line 1175: " Mysql
line 1176: au BufNewFile,BufRead *.mysql^I^I^Isetf mysql
line 1177: 
line 1178: " Tcl Shell RC file
line 1179: au BufNewFile,BufRead tclsh.rc^I^I^Isetf tcl
line 1180: 
line 1181: " M$ Resource files
line 1182: " /etc/Muttrc.d/file.rc is muttrc
line 1183: au BufNewFile,BufRead *.rc,*.rch if expand("<afile>") !~ "/etc/Muttrc.d/" |   setf rc | endif
line 1187: 
line 1188: " MuPAD source
line 1189: au BufRead,BufNewFile *.mu^I^I^Isetf mupad
line 1190: 
line 1191: " Mush
line 1192: au BufNewFile,BufRead *.mush^I^I^Isetf mush
line 1193: 
line 1194: " Mutt setup file (also for Muttng)
line 1195: au BufNewFile,BufRead Mutt{ng,}rc^I^Isetf muttrc
line 1196: 
line 1197: " N1QL
line 1198: au BufRead,BufNewfile *.n1ql,*.nql^I^Isetf n1ql
line 1199: 
line 1200: " Nano
line 1201: au BufNewFile,BufRead */etc/nanorc,*.nanorc^Isetf nanorc
line 1202: 
line 1203: " Nastran input/DMAP
line 1204: "au BufNewFile,BufRead *.dat^I^I^Isetf nastran
line 1205: 
line 1206: " Natural
line 1207: au BufNewFile,BufRead *.NS[ACGLMNPS]^I^Isetf natural
line 1208: 
line 1209: " Noemutt setup file
line 1210: au BufNewFile,BufRead Neomuttrc^I^I^Isetf neomuttrc
line 1211: 
line 1212: " Netrc
line 1213: au BufNewFile,BufRead .netrc^I^I^Isetf netrc
line 1214: 
line 1215: " Nginx
line 1216: au BufNewFile,BufRead *.nginx,nginx*.conf,*nginx.conf,*/etc/nginx/*,*/usr/local/nginx/conf/*,*/nginx/*.conf^I^I^Isetf nginx
line 1217: 
line 1218: " Ninja file
line 1219: au BufNewFile,BufRead *.ninja^I^I^Isetf ninja
line 1220: 
line 1221: " Nix
line 1222: au BufRead,BufNewFile *.nix^I^I^Isetf nix
line 1223: 
line 1224: " NPM RC file
line 1225: au BufNewFile,BufRead npmrc,.npmrc^I^Isetf dosini
line 1226: 
line 1227: " Novell netware batch files
line 1228: au BufNewFile,BufRead *.ncf^I^I^Isetf ncf
line 1229: 
line 1230: " Nroff/Troff (*.ms and *.t are checked below)
line 1231: au BufNewFile,BufRead *.me if expand("<afile>") != "read.me" && expand("<afile>") != "click.me" |   setf nroff | endif
line 1235: au BufNewFile,BufRead *.tr,*.nr,*.roff,*.tmac,*.mom^Isetf nroff
line 1236: au BufNewFile,BufRead *.[1-9]^I^I^Icall dist#ft#FTnroff()
line 1237: 
line 1238: " Nroff or Objective C++
line 1239: au BufNewFile,BufRead *.mm^I^I^Icall dist#ft#FTmm()
line 1240: 
line 1241: " Not Quite C
line 1242: au BufNewFile,BufRead *.nqc^I^I^Isetf nqc
line 1243: 
line 1244: " NSE - Nmap Script Engine - uses Lua syntax
line 1245: au BufNewFile,BufRead *.nse^I^I^Isetf lua
line 1246: 
line 1247: " NSIS
line 1248: au BufNewFile,BufRead *.nsi,*.nsh^I^Isetf nsis
line 1249: 
line 1250: " OCaml
line 1251: au BufNewFile,BufRead *.ml,*.mli,*.mll,*.mly,.ocamlinit,*.mlt,*.mlp,*.mlip,*.mli.cppo,*.ml.cppo setf ocaml
line 1252: 
line 1253: " Occam
line 1254: au BufNewFile,BufRead *.occ^I^I^Isetf occam
line 1255: 
line 1256: " Octave
line 1257: au BufNewFile,BufRead octave.conf,.octaverc,octaverc^Isetf octave
line 1258: 
line 1259: " Omnimark
line 1260: au BufNewFile,BufRead *.xom,*.xin^I^Isetf omnimark
line 1261: 
line 1262: " OPAM
line 1263: au BufNewFile,BufRead opam,*.opam,*.opam.template setf opam
line 1264: 
line 1265: " OpenFOAM
line 1266: au BufNewFile,BufRead [a-zA-Z0-9]*Dict\(.*\)\=,[a-zA-Z]*Properties\(.*\)\=,*Transport\(.*\),fvSchemes,fvSolution,fvConstrains,fvModels,*/constant/g,*/0\(\.orig\)\=/* call dist#ft#FTfoam()
line 1267: 
line 1268: " OpenROAD
line 1269: au BufNewFile,BufRead *.or^I^I^Isetf openroad
line 1270: 
line 1271: " OPL
line 1272: au BufNewFile,BufRead *.[Oo][Pp][Ll]^I^Isetf opl
line 1273: 
line 1274: " Oracle config file
line 1275: au BufNewFile,BufRead *.ora^I^I^Isetf ora
line 1276: 
line 1277: " Org
line 1278: au BufNewFile,BufRead *.org,*.org_archive^Isetf org
line 1279: 
line 1280: " Packet filter conf
line 1281: au BufNewFile,BufRead pf.conf^I^I^Isetf pf
line 1282: 
line 1283: " Pacman Config (close enough to dosini)
line 1284: au BufNewFile,BufRead */etc/pacman.conf^I^Isetf dosini
line 1285: 
line 1286: " Pacman hooks
line 1287: au BufNewFile,BufRead *.hook if getline(1) == '[Trigger]' |   setf dosini | endif
line 1291: 
line 1292: " Pam conf
line 1293: au BufNewFile,BufRead */etc/pam.conf^I^I^Isetf pamconf
line 1294: 
line 1295: " Pam environment
line 1296: au BufNewFile,BufRead pam_env.conf,.pam_environment^Isetf pamenv
line 1297: 
line 1298: " PApp
line 1299: au BufNewFile,BufRead *.papp,*.pxml,*.pxsl^Isetf papp
line 1300: 
line 1301: " Password file
line 1302: au BufNewFile,BufRead */etc/passwd,*/etc/passwd-,*/etc/passwd.edit,*/etc/shadow,*/etc/shadow-,*/etc/shadow.edit,*/var/backups/passwd.bak,*/var/backups/shadow.bak setf passwd
line 1303: 
line 1304: " Pascal (also *.p, *.pp, *.inc)
line 1305: au BufNewFile,BufRead *.pas^I^I^Isetf pascal
line 1306: 
line 1307: " Pascal or Puppet manifest
line 1308: au BufNewFile,BufRead *.pp^I^I^Icall dist#ft#FTpp()
line 1309: 
line 1310: " Delphi or Lazarus program file
line 1311: au BufNewFile,BufRead *.dpr,*.lpr^I^Isetf pascal
line 1312: 
line 1313: " Free Pascal makefile definition file
line 1314: au BufNewFile,BufRead *.fpc^I^I^Isetf fpcmake
line 1315: 
line 1316: " PDF
line 1317: au BufNewFile,BufRead *.pdf^I^I^Isetf pdf
line 1318: 
line 1319: " PCMK - HAE - crm configure edit
line 1320: au BufNewFile,BufRead *.pcmk^I^I^Isetf pcmk
line 1321: 
line 1322: " Perl
line 1323: if has("fname_case")
line 1324:   au BufNewFile,BufRead *.pl,*.PL^I^Icall dist#ft#FTpl()
line 1325: else
line 1326:   au BufNewFile,BufRead *.pl^I^I^Icall dist#ft#FTpl()
line 1327: endif
line 1328: au BufNewFile,BufRead *.plx,*.al,*.psgi^I^Isetf perl
line 1329: 
line 1330: " Perl, XPM or XPM2
line 1331: au BufNewFile,BufRead *.pm if getline(1) =~ "XPM2" |   setf xpm2 | elseif getline(1) =~ "XPM" |   setf xpm | else |   setf perl | endif
line 1339: 
line 1340: " Perl POD
line 1341: au BufNewFile,BufRead *.pod^I^I^Isetf pod
line 1342: 
line 1343: " Php, php3, php4, etc.
line 1344: " Also Phtml (was used for PHP 2 in the past).
line 1345: " Also .ctp for Cake template file.
line 1346: " Also .phpt for php tests.
line 1347: au BufNewFile,BufRead *.php,*.php\d,*.phtml,*.ctp,*.phpt^Isetf php
line 1348: 
line 1349: " PHP config
line 1350: au BufNewFile,BufRead php.ini-*^I^I^Isetf dosini
line 1351: 
line 1352: " Pike and Cmod
line 1353: au BufNewFile,BufRead *.pike,*.pmod^I^Isetf pike
line 1354: au BufNewFile,BufRead *.cmod^I^I^Isetf cmod
line 1355: 
line 1356: " Pinfo config
line 1357: au BufNewFile,BufRead */etc/pinforc,*/.pinforc^Isetf pinfo
line 1358: 
line 1359: " Palm Resource compiler
line 1360: au BufNewFile,BufRead *.rcp^I^I^Isetf pilrc
line 1361: 
line 1362: " Pine config
line 1363: au BufNewFile,BufRead .pinerc,pinerc,.pinercex,pinercex^I^Isetf pine
line 1364: 
line 1365: " Pipenv Pipfiles
line 1366: au BufNewFile,BufRead Pipfile^I^I^Isetf toml
line 1367: au BufNewFile,BufRead Pipfile.lock^I^Isetf json
line 1368: 
line 1369: " PL/1, PL/I
line 1370: au BufNewFile,BufRead *.pli,*.pl1^I^Isetf pli
line 1371: 
line 1372: " PL/M (also: *.inp)
line 1373: au BufNewFile,BufRead *.plm,*.p36,*.pac^I^Isetf plm
line 1374: 
line 1375: " PL/SQL
line 1376: au BufNewFile,BufRead *.pls,*.plsql^I^Isetf plsql
line 1377: 
line 1378: " PLP
line 1379: au BufNewFile,BufRead *.plp^I^I^Isetf plp
line 1380: 
line 1381: " PO and PO template (GNU gettext)
line 1382: au BufNewFile,BufRead *.po,*.pot^I^Isetf po
line 1383: 
line 1384: " Postfix main config
line 1385: au BufNewFile,BufRead main.cf^I^I^Isetf pfmain
line 1386: 
line 1387: " PostScript (+ font files, encapsulated PostScript, Adobe Illustrator)
line 1388: au BufNewFile,BufRead *.ps,*.pfa,*.afm,*.eps,*.epsf,*.epsi,*.ai^I  setf postscr
line 1389: 
line 1390: " PostScript Printer Description
line 1391: au BufNewFile,BufRead *.ppd^I^I^Isetf ppd
line 1392: 
line 1393: " Povray
line 1394: au BufNewFile,BufRead *.pov^I^I^Isetf pov
line 1395: 
line 1396: " Povray configuration
line 1397: au BufNewFile,BufRead .povrayrc^I^I^Isetf povini
line 1398: 
line 1399: " Povray, Pascal, PHP or assembly
line 1400: au BufNewFile,BufRead *.inc^I^I^Icall dist#ft#FTinc()
line 1401: 
line 1402: " PowerShell
line 1403: au BufNewFile,BufRead^I*.ps1,*.psd1,*.psm1,*.pssc^Isetf ps1
line 1404: au BufNewFile,BufRead^I*.ps1xml^I^I^Isetf ps1xml
line 1405: au BufNewFile,BufRead^I*.cdxml,*.psc1^I^I^Isetf xml
line 1406: 
line 1407: " Printcap and Termcap
line 1408: au BufNewFile,BufRead *printcap let b:ptcap_type = "print" | setf ptcap
line 1410: au BufNewFile,BufRead *termcap let b:ptcap_type = "term" | setf ptcap
line 1412: 
line 1413: " Prisma
line 1414: au BufRead,BufNewFile *.prisma^I^I^Isetf prisma
line 1415: 
line 1416: " PCCTS / ANTLR
line 1417: "au BufNewFile,BufRead *.g^I^I^Isetf antlr
line 1418: au BufNewFile,BufRead *.g^I^I^Isetf pccts
line 1419: 
line 1420: " PPWizard
line 1421: au BufNewFile,BufRead *.it,*.ih^I^I^Isetf ppwiz
line 1422: 
line 1423: " Pug
line 1424: au BufRead,BufNewFile *.pug^I^I^Isetf pug
line 1425: 
line 1426: " Puppet
line 1427: au BufNewFile,BufRead Puppetfile^I^Isetf ruby
line 1428: 
line 1429: " Embedded Puppet
line 1430: au BufNewFile,BufRead *.epp^I^I^Isetf epuppet
line 1431: 
line 1432: " Obj 3D file format
line 1433: " TODO: is there a way to avoid MS-Windows Object files?
line 1434: au BufNewFile,BufRead *.obj^I^I^Isetf obj
line 1435: 
line 1436: " Oracle Pro*C/C++
line 1437: au BufNewFile,BufRead *.pc^I^I^Isetf proc
line 1438: 
line 1439: " Privoxy actions file
line 1440: au BufNewFile,BufRead *.action^I^I^Isetf privoxy
line 1441: 
line 1442: " Procmail
line 1443: au BufNewFile,BufRead .procmail,.procmailrc^Isetf procmail
line 1444: 
line 1445: " Progress or CWEB
line 1446: au BufNewFile,BufRead *.w^I^I^Icall dist#ft#FTprogress_cweb()
line 1447: 
line 1448: " Progress or assembly
line 1449: au BufNewFile,BufRead *.i^I^I^Icall dist#ft#FTprogress_asm()
line 1450: 
line 1451: " Progress or Pascal
line 1452: au BufNewFile,BufRead *.p^I^I^Icall dist#ft#FTprogress_pascal()
line 1453: 
line 1454: " Software Distributor Product Specification File (POSIX 1387.2-1995)
line 1455: au BufNewFile,BufRead *.psf^I^I^Isetf psf
line 1456: au BufNewFile,BufRead INDEX,INFO if getline(1) =~ '^\s*\(distribution\|installed_software\|root\|bundle\|product\)\s*$' |   setf psf | endif
line 1460: 
line 1461: " Prolog
line 1462: au BufNewFile,BufRead *.pdb^I^I^Isetf prolog
line 1463: 
line 1464: " Promela
line 1465: au BufNewFile,BufRead *.pml^I^I^Isetf promela
line 1466: 
line 1467: " Property Specification Language (PSL)
line 1468: au BufNewFile,BufRead *.psl^I^I^Isetf psl
line 1469: 
line 1470: " Google protocol buffers
line 1471: au BufNewFile,BufRead *.proto^I^I^Isetf proto
line 1472: au BufNewFile,BufRead *.pbtxt^I^I^Isetf pbtxt
line 1473: 
line 1474: " Poke
line 1475: au BufNewFile,BufRead *.pk^I^I^Isetf poke
line 1476: 
line 1477: " Protocols
line 1478: au BufNewFile,BufRead */etc/protocols^I^Isetf protocols
line 1479: 
line 1480: " Pyret
line 1481: au BufNewFile,BufRead *.arr^I^I^Isetf pyret
line 1482: 
line 1483: " Pyrex
line 1484: au BufNewFile,BufRead *.pyx,*.pxd^I^Isetf pyrex
line 1485: 
line 1486: " Python, Python Shell Startup and Python Stub Files
line 1487: " Quixote (Python-based web framework)
line 1488: au BufNewFile,BufRead *.py,*.pyw,.pythonstartup,.pythonrc  setf python
line 1489: au BufNewFile,BufRead *.ptl,*.pyi,SConstruct^I^I   setf python
line 1490: 
line 1491: " QL
line 1492: au BufRead,BufNewFile *.ql,*.qll^I^Isetf ql
line 1493: 
line 1494: " Radiance
line 1495: au BufNewFile,BufRead *.rad,*.mat^I^Isetf radiance
line 1496: 
line 1497: " Raku (formerly Perl6)
line 1498: au BufNewFile,BufRead *.pm6,*.p6,*.t6,*.pod6,*.raku,*.rakumod,*.rakudoc,*.rakutest  setf raku
line 1499: 
line 1500: " Ratpoison config/command files
line 1501: au BufNewFile,BufRead .ratpoisonrc,ratpoisonrc^Isetf ratpoison
line 1502: 
line 1503: " RCS file
line 1504: au BufNewFile,BufRead *\,v^I^I^Isetf rcs
line 1505: 
line 1506: " Readline
line 1507: au BufNewFile,BufRead .inputrc,inputrc^I^Isetf readline
line 1508: 
line 1509: " Registry for MS-Windows
line 1510: au BufNewFile,BufRead *.reg if getline(1) =~? '^REGEDIT[0-9]*\s*$\|^Windows Registry Editor Version \d*\.\d*\s*$' | setf registry | endif
line 1512: 
line 1513: " Renderman Interface Bytestream
line 1514: au BufNewFile,BufRead *.rib^I^I^Isetf rib
line 1515: 
line 1516: " Rego Policy Language
line 1517: au BufNewFile,BufRead *.rego^I^I^Isetf rego
line 1518: 
line 1519: " Rexx
line 1520: au BufNewFile,BufRead *.rex,*.orx,*.rxo,*.rxj,*.jrexx,*.rexxj,*.rexx,*.testGroup,*.testUnit^Isetf rexx
line 1521: 
line 1522: " R Help file
line 1523: if has("fname_case")
line 1524:   au BufNewFile,BufRead *.rd,*.Rd^I^Isetf rhelp
line 1525: else
line 1526:   au BufNewFile,BufRead *.rd^I^I^Isetf rhelp
line 1527: endif
line 1528: 
line 1529: " R noweb file
line 1530: if has("fname_case")
line 1531:   au BufNewFile,BufRead *.Rnw,*.rnw,*.Snw,*.snw^I^Isetf rnoweb
line 1532: else
line 1533:   au BufNewFile,BufRead *.rnw,*.snw^I^I^Isetf rnoweb
line 1534: endif
line 1535: 
line 1536: " R Markdown file
line 1537: if has("fname_case")
line 1538:   au BufNewFile,BufRead *.Rmd,*.rmd,*.Smd,*.smd^I^Isetf rmd
line 1539: else
line 1540:   au BufNewFile,BufRead *.rmd,*.smd^I^I^Isetf rmd
line 1541: endif
line 1542: 
line 1543: " RSS looks like XML
line 1544: au BufNewFile,BufRead *.rss^I^I^I^Isetf xml
line 1545: 
line 1546: " R reStructuredText file
line 1547: if has("fname_case")
line 1548:   au BufNewFile,BufRead *.Rrst,*.rrst,*.Srst,*.srst^Isetf rrst
line 1549: else
line 1550:   au BufNewFile,BufRead *.rrst,*.srst^I^I^Isetf rrst
line 1551: endif
line 1552: 
line 1553: " Rexx, Rebol or R
line 1554: au BufNewFile,BufRead *.r,*.R^I^I^I^Icall dist#ft#FTr()
line 1555: 
line 1556: " Remind
line 1557: au BufNewFile,BufRead .reminders,*.remind,*.rem^I^Isetf remind
line 1558: 
line 1559: " ReScript
line 1560: au BufNewFile,BufRead *.res,*.resi^I^I^Isetf rescript
line 1561: 
line 1562: " Resolv.conf
line 1563: au BufNewFile,BufRead resolv.conf^I^Isetf resolv
line 1564: 
line 1565: " Relax NG Compact
line 1566: au BufNewFile,BufRead *.rnc^I^I^Isetf rnc
line 1567: 
line 1568: " Relax NG XML
line 1569: au BufNewFile,BufRead *.rng^I^I^Isetf rng
line 1570: 
line 1571: " RPL/2
line 1572: au BufNewFile,BufRead *.rpl^I^I^Isetf rpl
line 1573: 
line 1574: " Robots.txt
line 1575: au BufNewFile,BufRead robots.txt^I^Isetf robots
line 1576: 
line 1577: " Rpcgen
line 1578: au BufNewFile,BufRead *.x^I^I^Isetf rpcgen
line 1579: 
line 1580: " MikroTik RouterOS script
line 1581: au BufRead,BufNewFile *.rsc^I^I^Isetf routeros
line 1582: 
line 1583: " reStructuredText Documentation Format
line 1584: au BufNewFile,BufRead *.rst^I^I^Isetf rst
line 1585: 
line 1586: " RTF
line 1587: au BufNewFile,BufRead *.rtf^I^I^Isetf rtf
line 1588: 
line 1589: " Interactive Ruby shell
line 1590: au BufNewFile,BufRead .irbrc,irbrc^I^Isetf ruby
line 1591: 
line 1592: " Ruby
line 1593: au BufNewFile,BufRead *.rb,*.rbw^I^Isetf ruby
line 1594: 
line 1595: " RubyGems
line 1596: au BufNewFile,BufRead *.gemspec^I^I^Isetf ruby
line 1597: 
line 1598: " RBS (Ruby Signature)
line 1599: au BufNewFile,BufRead *.rbs^I^I^Isetf rbs
line 1600: 
line 1601: " Rackup
line 1602: au BufNewFile,BufRead *.ru^I^I^Isetf ruby
line 1603: 
line 1604: " Bundler
line 1605: au BufNewFile,BufRead Gemfile^I^I^Isetf ruby
line 1606: 
line 1607: " Ruby on Rails
line 1608: au BufNewFile,BufRead *.builder,*.rxml,*.rjs^Isetf ruby
line 1609: 
line 1610: " Rantfile and Rakefile is like Ruby
line 1611: au BufNewFile,BufRead [rR]antfile,*.rant,[rR]akefile,*.rake^Isetf ruby
line 1612: 
line 1613: " Rust
line 1614: au BufNewFile,BufRead *.rs^I^I^Isetf rust
line 1615: au BufNewFile,BufRead Cargo.lock,*/.cargo/config,*/.cargo/credentials^Isetf toml
line 1616: 
line 1617: " S-lang (or shader language, or SmallLisp)
line 1618: au BufNewFile,BufRead *.sl^I^I^Isetf slang
line 1619: 
line 1620: " Samba config
line 1621: au BufNewFile,BufRead smb.conf^I^I^Isetf samba
line 1622: 
line 1623: " SAS script
line 1624: au BufNewFile,BufRead *.sas^I^I^Isetf sas
line 1625: 
line 1626: " Sass
line 1627: au BufNewFile,BufRead *.sass^I^I^Isetf sass
line 1628: 
line 1629: " Sather
line 1630: au BufNewFile,BufRead *.sa^I^I^Isetf sather
line 1631: 
line 1632: " Scala
line 1633: au BufNewFile,BufRead *.scala^I^I^Isetf scala
line 1634: 
line 1635: " SBT - Scala Build Tool
line 1636: au BufNewFile,BufRead *.sbt^I^I^Isetf sbt
line 1637: 
line 1638: " SuperCollider
line 1639: au BufNewFile,BufRead *.sc^I^I^Icall dist#ft#FTsc()
line 1640: 
line 1641: au BufNewFile,BufRead *.quark^I^I^Isetf supercollider
line 1642: 
line 1643: " scdoc
line 1644: au BufNewFile,BufRead *.scd^I^I^Icall dist#ft#FTscd()
line 1645: 
line 1646: " Scilab
line 1647: au BufNewFile,BufRead *.sci,*.sce^I^Isetf scilab
line 1648: 
line 1649: 
line 1650: " SCSS
line 1651: au BufNewFile,BufRead *.scss^I^I^Isetf scss
line 1652: 
line 1653: " SD: Streaming Descriptors
line 1654: au BufNewFile,BufRead *.sd^I^I^Isetf sd
line 1655: 
line 1656: " SDL
line 1657: au BufNewFile,BufRead *.sdl,*.pr^I^Isetf sdl
line 1658: 
line 1659: " sed
line 1660: au BufNewFile,BufRead *.sed^I^I^Isetf sed
line 1661: 
line 1662: " svelte
line 1663: au BufNewFile,BufRead *.svelte^I^I^Isetf svelte
line 1664: 
line 1665: " Sieve (RFC 3028, 5228)
line 1666: au BufNewFile,BufRead *.siv,*.sieve^I^Isetf sieve
line 1667: 
line 1668: " Sendmail
line 1669: au BufNewFile,BufRead sendmail.cf^I^Isetf sm
line 1670: 
line 1671: " Sendmail .mc files are actually m4.  Could also be MS Message text file.
line 1672: au BufNewFile,BufRead *.mc^I^I^Icall dist#ft#McSetf()
line 1673: 
line 1674: " Services
line 1675: au BufNewFile,BufRead */etc/services^I^Isetf services
line 1676: 
line 1677: " Service Location config
line 1678: au BufNewFile,BufRead */etc/slp.conf^I^Isetf slpconf
line 1679: 
line 1680: " Service Location registration
line 1681: au BufNewFile,BufRead */etc/slp.reg^I^Isetf slpreg
line 1682: 
line 1683: " Service Location SPI
line 1684: au BufNewFile,BufRead */etc/slp.spi^I^Isetf slpspi
line 1685: 
line 1686: " Setserial config
line 1687: au BufNewFile,BufRead */etc/serial.conf^I^Isetf setserial
line 1688: 
line 1689: " SGML
line 1690: au BufNewFile,BufRead *.sgm,*.sgml if getline(1).getline(2).getline(3).getline(4).getline(5) =~? 'linuxdoc' |   setf sgmllnx | elseif getline(1) =~ '<!DOCTYPE.*DocBook' || getline(2) =~ '<!DOCTYPE.*DocBook' |   let b:docbk_type = "sgml" |   let b:docbk_ver = 4 |   setf docbk | else |   setf sgml | endif
line 1700: 
line 1701: " SGMLDECL
line 1702: au BufNewFile,BufRead *.decl,*.dcl,*.dec if getline(1).getline(2).getline(3) =~? '^<!SGML' |    setf sgmldecl | endif
line 1706: 
line 1707: " SGML catalog file
line 1708: au BufNewFile,BufRead catalog^I^I^Isetf catalog
line 1709: 
line 1710: " Shell scripts (sh, ksh, bash, bash2, csh); Allow .profile_foo etc.
line 1711: " Gentoo ebuilds, Arch Linux PKGBUILDs and Alpine Linux APKBUILDs are actually
line 1712: " bash scripts.
line 1713: " NOTE: Patterns ending in a star are further down, these have lower priority.
line 1714: au BufNewFile,BufRead .bashrc,bashrc,bash.bashrc,.bash[_-]profile,.bash[_-]logout,.bash[_-]aliases,bash-fc[-.],*.ebuild,*.bash,*.eclass,PKGBUILD,APKBUILD call dist#ft#SetFileTypeSH("bash")
line 1715: au BufNewFile,BufRead .kshrc,*.ksh call dist#ft#SetFileTypeSH("ksh")
line 1716: au BufNewFile,BufRead */etc/profile,.profile,*.sh,*.env call dist#ft#SetFileTypeSH(getline(1))
line 1717: 
line 1718: " Shell script (Arch Linux) or PHP file (Drupal)
line 1719: au BufNewFile,BufRead *.install if getline(1) =~ '<?php' |   setf php | else |   call dist#ft#SetFileTypeSH("bash") | endif
line 1725: 
line 1726: " tcsh scripts (patterns ending in a star further below)
line 1727: au BufNewFile,BufRead .tcshrc,*.tcsh,tcsh.tcshrc,tcsh.login^Icall dist#ft#SetFileTypeShell("tcsh")
line 1728: 
line 1729: " csh scripts, but might also be tcsh scripts (on some systems csh is tcsh)
line 1730: " (patterns ending in a start further below)
line 1731: au BufNewFile,BufRead .login,.cshrc,csh.cshrc,csh.login,csh.logout,*.csh,.alias  call dist#ft#CSH()
line 1732: 
line 1733: " Zig
line 1734: au BufNewFile,BufRead *.zig^I^I^Isetf zig
line 1735: 
line 1736: " Z-Shell script (patterns ending in a star further below)
line 1737: au BufNewFile,BufRead .zprofile,*/etc/zprofile,.zfbfmarks  setf zsh
line 1738: au BufNewFile,BufRead .zshrc,.zshenv,.zlogin,.zlogout,.zcompdump setf zsh
line 1739: au BufNewFile,BufRead *.zsh^I^I^Isetf zsh
line 1740: 
line 1741: " Scheme
line 1742: au BufNewFile,BufRead *.scm,*.ss,*.sld,*.rkt,*.rktd,*.rktl^Isetf scheme
line 1743: 
line 1744: " Screen RC
line 1745: au BufNewFile,BufRead .screenrc,screenrc^Isetf screen
line 1746: 
line 1747: " Sexplib
line 1748: au BufNewFile,BufRead *.sexp setf sexplib
line 1749: 
line 1750: " Simula
line 1751: au BufNewFile,BufRead *.sim^I^I^Isetf simula
line 1752: 
line 1753: " SINDA
line 1754: au BufNewFile,BufRead *.sin,*.s85^I^Isetf sinda
line 1755: 
line 1756: " SiSU
line 1757: au BufNewFile,BufRead *.sst,*.ssm,*.ssi,*.-sst,*._sst setf sisu
line 1758: au BufNewFile,BufRead *.sst.meta,*.-sst.meta,*._sst.meta setf sisu
line 1759: 
line 1760: " SKILL
line 1761: au BufNewFile,BufRead *.il,*.ils,*.cdf^I^Isetf skill
line 1762: 
line 1763: " SLRN
line 1764: au BufNewFile,BufRead .slrnrc^I^I^Isetf slrnrc
line 1765: au BufNewFile,BufRead *.score^I^I^Isetf slrnsc
line 1766: 
line 1767: " Smalltalk (and TeX)
line 1768: au BufNewFile,BufRead *.st^I^I^Isetf st
line 1769: au BufNewFile,BufRead *.cls if getline(1) =~ '^%' |  setf tex | elseif getline(1)[0] == '#' && getline(1) =~ 'rexx' |  setf rexx | else |  setf st | endif
line 1777: 
line 1778: " Smarty templates
line 1779: au BufNewFile,BufRead *.tpl^I^I^Isetf smarty
line 1780: 
line 1781: " SMIL or XML
line 1782: au BufNewFile,BufRead *.smil if getline(1) =~ '<?\s*xml.*?>' |   setf xml | else |   setf smil | endif
line 1788: 
line 1789: " SMIL or SNMP MIB file
line 1790: au BufNewFile,BufRead *.smi if getline(1) =~ '\<smil\>' |   setf smil | else |   setf mib | endif
line 1796: 
line 1797: " SMITH
line 1798: au BufNewFile,BufRead *.smt,*.smith^I^Isetf smith
line 1799: 
line 1800: " Snobol4 and spitbol
line 1801: au BufNewFile,BufRead *.sno,*.spt^I^Isetf snobol4
line 1802: 
line 1803: " SNMP MIB files
line 1804: au BufNewFile,BufRead *.mib,*.my^I^Isetf mib
line 1805: 
line 1806: " Snort Configuration
line 1807: au BufNewFile,BufRead *.hog,snort.conf,vision.conf^Isetf hog
line 1808: au BufNewFile,BufRead *.rules^I^I^Icall dist#ft#FTRules()
line 1809: 
line 1810: " Solidity
line 1811: au BufRead,BufNewFile *.sol^I^I^Isetf solidity
line 1812: 
line 1813: " SPARQL queries
line 1814: au BufNewFile,BufRead *.rq,*.sparql^I^Isetf sparql
line 1815: 
line 1816: " Spec (Linux RPM)
line 1817: au BufNewFile,BufRead *.spec^I^I^Isetf spec
line 1818: 
line 1819: " Speedup (AspenTech plant simulator)
line 1820: au BufNewFile,BufRead *.speedup,*.spdata,*.spd^Isetf spup
line 1821: 
line 1822: " Slice
line 1823: au BufNewFile,BufRead *.ice^I^I^Isetf slice
line 1824: 
line 1825: " Microsoft Visual Studio Solution
line 1826: au BufNewFile,BufRead *.sln^I^I^Isetf solution
line 1827: au BufNewFile,BufRead *.slnf^I^I^Isetf json
line 1828: 
line 1829: " Spice
line 1830: au BufNewFile,BufRead *.sp,*.spice^I^Isetf spice
line 1831: 
line 1832: " Spyce
line 1833: au BufNewFile,BufRead *.spy,*.spi^I^Isetf spyce
line 1834: 
line 1835: " Squid
line 1836: au BufNewFile,BufRead squid.conf^I^Isetf squid
line 1837: 
line 1838: " SQL for Oracle Designer
line 1839: au BufNewFile,BufRead *.tyb,*.typ,*.tyc,*.pkb,*.pks^Isetf sql
line 1840: 
line 1841: " SQL
line 1842: au BufNewFile,BufRead *.sql^I^I^Icall dist#ft#SQL()
line 1843: 
line 1844: " SQLJ
line 1845: au BufNewFile,BufRead *.sqlj^I^I^Isetf sqlj
line 1846: 
line 1847: " SQR
line 1848: au BufNewFile,BufRead *.sqr,*.sqi^I^Isetf sqr
line 1849: 
line 1850: " Squirrel
line 1851: au BufNewFile,BufRead *.nut^I^I^Isetf squirrel
line 1852: 
line 1853: " OpenSSH configuration
line 1854: au BufNewFile,BufRead ssh_config,*/.ssh/config,*/.ssh/*.conf^Isetf sshconfig
line 1855: au BufNewFile,BufRead */etc/ssh/ssh_config.d/*.conf^I^Isetf sshconfig
line 1856: 
line 1857: " OpenSSH server configuration
line 1858: au BufNewFile,BufRead sshd_config^I^I^Isetf sshdconfig
line 1859: au BufNewFile,BufRead */etc/ssh/sshd_config.d/*.conf^Isetf sshdconfig
line 1860: 
line 1861: " Stata
line 1862: au BufNewFile,BufRead *.ado,*.do,*.imata,*.mata^Isetf stata
line 1863: " Also *.class, but not when it's a Java bytecode file
line 1864: au BufNewFile,BufRead *.class if getline(1) !~ "^\xca\xfe\xba\xbe" | setf stata | endif
line 1866: 
line 1867: " SMCL
line 1868: au BufNewFile,BufRead *.hlp,*.ihlp,*.smcl^Isetf smcl
line 1869: 
line 1870: " Stored Procedures
line 1871: au BufNewFile,BufRead *.stp^I^I^Isetf stp
line 1872: 
line 1873: " Standard ML
line 1874: au BufNewFile,BufRead *.sml^I^I^Isetf sml
line 1875: 
line 1876: " Sratus VOS command macro
line 1877: au BufNewFile,BufRead *.cm^I^I^Isetf voscm
line 1878: 
line 1879: " Swift
line 1880: au BufNewFile,BufRead *.swift^I^I^Isetf swift
line 1881: au BufNewFile,BufRead *.swift.gyb^I^Isetf swiftgyb
line 1882: 
line 1883: " Swift Intermediate Language
line 1884: au BufNewFile,BufRead *.sil^I^I^Isetf sil
line 1885: 
line 1886: " Sysctl
line 1887: au BufNewFile,BufRead */etc/sysctl.conf,*/etc/sysctl.d/*.conf^Isetf sysctl
line 1888: 
line 1889: " Systemd unit files
line 1890: au BufNewFile,BufRead */systemd/*.{automount,dnssd,link,mount,netdev,network,nspawn,path,service,slice,socket,swap,target,timer}^Isetf systemd
line 1891: " Systemd overrides
line 1892: au BufNewFile,BufRead */etc/systemd/*.conf.d/*.conf^Isetf systemd
line 1893: au BufNewFile,BufRead */etc/systemd/system/*.d/*.conf^Isetf systemd
line 1894: au BufNewFile,BufRead */.config/systemd/user/*.d/*.conf^Isetf systemd
line 1895: " Systemd temp files
line 1896: au BufNewFile,BufRead */etc/systemd/system/*.d/.#*^Isetf systemd
line 1897: au BufNewFile,BufRead */etc/systemd/system/.#*^I^Isetf systemd
line 1898: au BufNewFile,BufRead */.config/systemd/user/*.d/.#*^Isetf systemd
line 1899: au BufNewFile,BufRead */.config/systemd/user/.#*^Isetf systemd
line 1900: 
line 1901: " Synopsys Design Constraints
line 1902: au BufNewFile,BufRead *.sdc^I^I^Isetf sdc
line 1903: 
line 1904: " Sudoers
line 1905: au BufNewFile,BufRead */etc/sudoers,sudoers.tmp^Isetf sudoers
line 1906: 
line 1907: " SVG (Scalable Vector Graphics)
line 1908: au BufNewFile,BufRead *.svg^I^I^Isetf svg
line 1909: 
line 1910: " Surface
line 1911: au BufRead,BufNewFile *.sface^I^I^Isetf surface
line 1912: 
line 1913: " Tads (or Nroff or Perl test file)
line 1914: au BufNewFile,BufRead *.t if !dist#ft#FTnroff() && !dist#ft#FTperl() | setf tads | endif
line 1916: 
line 1917: " Tags
line 1918: au BufNewFile,BufRead tags^I^I^Isetf tags
line 1919: 
line 1920: " TAK
line 1921: au BufNewFile,BufRead *.tak^I^I^Isetf tak
line 1922: 
line 1923: " Task
line 1924: au BufRead,BufNewFile {pending,completed,undo}.data  setf taskdata
line 1925: au BufRead,BufNewFile *.task^I^I^Isetf taskedit
line 1926: 
line 1927: " Tcl (JACL too)
line 1928: au BufNewFile,BufRead *.tcl,*.tm,*.tk,*.itcl,*.itk,*.jacl,.tclshrc,.wishrc^Isetf tcl
line 1929: 
line 1930: " Teal
line 1931: au BufRead,BufNewFile *.tl^I^I^Isetf teal
line 1932: 
line 1933: " TealInfo
line 1934: au BufNewFile,BufRead *.tli^I^I^Isetf tli
line 1935: 
line 1936: " Telix Salt
line 1937: au BufNewFile,BufRead *.slt^I^I^Isetf tsalt
line 1938: 
line 1939: " Tera Term Language or Turtle
line 1940: au BufRead,BufNewFile *.ttl if getline(1) =~ '^@\?\(prefix\|base\)' |   setf turtle | else |   setf teraterm | endif
line 1946: 
line 1947: " Terminfo
line 1948: au BufNewFile,BufRead *.ti^I^I^Isetf terminfo
line 1949: 
line 1950: " Terraform
line 1951: au BufRead,BufNewFile *.tfvars^I^I^Isetf terraform
line 1952: 
line 1953: " TeX
line 1954: au BufNewFile,BufRead *.latex,*.sty,*.dtx,*.ltx,*.bbl^Isetf tex
line 1955: au BufNewFile,BufRead *.tex^I^I^Icall dist#ft#FTtex()
line 1956: 
line 1957: " ConTeXt
line 1958: au BufNewFile,BufRead *.mkii,*.mkiv,*.mkvi,*.mkxl,*.mklx   setf context
line 1959: 
line 1960: " Texinfo
line 1961: au BufNewFile,BufRead *.texinfo,*.texi,*.txi^Isetf texinfo
line 1962: 
line 1963: " TeX configuration
line 1964: au BufNewFile,BufRead texmf.cnf^I^I^Isetf texmf
line 1965: 
line 1966: " Tidy config
line 1967: au BufNewFile,BufRead .tidyrc,tidyrc,tidy.conf^Isetf tidy
line 1968: 
line 1969: " TF mud client
line 1970: au BufNewFile,BufRead .tfrc,tfrc^I^Isetf tf
line 1971: 
line 1972: " TF mud client or terraform
line 1973: au BufNewFile,BufRead *.tf^I^I^Icall dist#ft#FTtf()
line 1974: 
line 1975: " TLA+
line 1976: au BufNewFile,BufRead *.tla^I^I^Isetf tla
line 1977: 
line 1978: " tmux configuration
line 1979: au BufNewFile,BufRead {.,}tmux*.conf^I^Isetf tmux
line 1980: 
line 1981: " TOML
line 1982: au BufNewFile,BufRead *.toml^I^I^Isetf toml
line 1983: 
line 1984: " TPP - Text Presentation Program
line 1985: au BufNewFile,BufRead *.tpp^I^I^Isetf tpp
line 1986: 
line 1987: " Treetop
line 1988: au BufRead,BufNewFile *.treetop^I^I^Isetf treetop
line 1989: 
line 1990: " Trustees
line 1991: au BufNewFile,BufRead trustees.conf^I^Isetf trustees
line 1992: 
line 1993: " TSS - Geometry
line 1994: au BufNewFile,BufReadPost *.tssgm^I^Isetf tssgm
line 1995: 
line 1996: " TSS - Optics
line 1997: au BufNewFile,BufReadPost *.tssop^I^Isetf tssop
line 1998: 
line 1999: " TSS - Command Line (temporary)
line 2000: au BufNewFile,BufReadPost *.tsscl^I^Isetf tsscl
line 2001: 
line 2002: " Tutor mode
line 2003: au BufNewFile,BufReadPost *.tutor^I^Isetf tutor
line 2004: 
line 2005: " TWIG files
line 2006: au BufNewFile,BufReadPost *.twig^I^Isetf twig
line 2007: 
line 2008: " Typescript or Qt translation file (which is XML)
line 2009: au BufNewFile,BufReadPost *.ts if getline(1) =~ '<?xml' |   setf xml | else |   setf typescript | endif
line 2015: 
line 2016: " TypeScript with React
line 2017: au BufNewFile,BufRead *.tsx^I^I^Isetf typescriptreact
line 2018: 
line 2019: " Motif UIT/UIL files
line 2020: au BufNewFile,BufRead *.uit,*.uil^I^Isetf uil
line 2021: 
line 2022: " Udev conf
line 2023: au BufNewFile,BufRead */etc/udev/udev.conf^Isetf udevconf
line 2024: 
line 2025: " Udev permissions
line 2026: au BufNewFile,BufRead */etc/udev/permissions.d/*.permissions setf udevperm
line 2027: "
line 2028: " Udev symlinks config
line 2029: au BufNewFile,BufRead */etc/udev/cdsymlinks.conf^Isetf sh
line 2030: 
line 2031: " UnrealScript
line 2032: au BufNewFile,BufRead *.uc^I^I^Isetf uc
line 2033: 
line 2034: " Updatedb
line 2035: au BufNewFile,BufRead */etc/updatedb.conf^Isetf updatedb
line 2036: 
line 2037: " Upstart (init(8)) config files
line 2038: au BufNewFile,BufRead */usr/share/upstart/*.conf^I       setf upstart
line 2039: au BufNewFile,BufRead */usr/share/upstart/*.override^I       setf upstart
line 2040: au BufNewFile,BufRead */etc/init/*.conf,*/etc/init/*.override  setf upstart
line 2041: au BufNewFile,BufRead */.init/*.conf,*/.init/*.override^I       setf upstart
line 2042: au BufNewFile,BufRead */.config/upstart/*.conf^I^I       setf upstart
line 2043: au BufNewFile,BufRead */.config/upstart/*.override^I       setf upstart
line 2044: 
line 2045: " Vala
line 2046: au BufNewFile,BufRead *.vala^I^I^Isetf vala
line 2047: 
line 2048: " Vera
line 2049: au BufNewFile,BufRead *.vr,*.vri,*.vrh^I^Isetf vera
line 2050: 
line 2051: " Vagrant (uses Ruby syntax)
line 2052: au BufNewFile,BufRead Vagrantfile^I^Isetf ruby
line 2053: 
line 2054: " Verilog HDL
line 2055: au BufNewFile,BufRead *.v^I^I^Isetf verilog
line 2056: 
line 2057: " Verilog-AMS HDL
line 2058: au BufNewFile,BufRead *.va,*.vams^I^Isetf verilogams
line 2059: 
line 2060: " SystemVerilog
line 2061: au BufNewFile,BufRead *.sv,*.svh^I^Isetf systemverilog
line 2062: 
line 2063: " VHDL
line 2064: au BufNewFile,BufRead *.hdl,*.vhd,*.vhdl,*.vbe,*.vst,*.vho  setf vhdl
line 2065: 
line 2066: " Vim script
line 2067: au BufNewFile,BufRead *.vim,*.vba,.exrc,_exrc^Isetf vim
line 2068: 
line 2069: " Viminfo file
line 2070: au BufNewFile,BufRead .viminfo,_viminfo^I^Isetf viminfo
line 2071: 
line 2072: " Virata Config Script File or Drupal module
line 2073: au BufRead,BufNewFile *.hw,*.module,*.pkg if getline(1) =~ '<?php' |   setf php | else |   setf virata | endif
line 2079: 
line 2080: " Visual Basic (also uses *.bas) or FORM
line 2081: au BufNewFile,BufRead *.frm^I^I^Icall dist#ft#FTfrm()
line 2082: 
line 2083: " SaxBasic is close to Visual Basic
line 2084: au BufNewFile,BufRead *.sba^I^I^Isetf vb
line 2085: 
line 2086: " Vgrindefs file
line 2087: au BufNewFile,BufRead vgrindefs^I^I^Isetf vgrindefs
line 2088: 
line 2089: " VRML V1.0c
line 2090: au BufNewFile,BufRead *.wrl^I^I^Isetf vrml
line 2091: 
line 2092: " Vroom (vim testing and executable documentation)
line 2093: au BufNewFile,BufRead *.vroom^I^I^Isetf vroom
line 2094: 
line 2095: " Vue.js Single File Component
line 2096: au BufNewFile,BufRead *.vue^I^I^Isetf vue
line 2097: 
line 2098: " WebAssembly
line 2099: au BufNewFile,BufRead *.wast,*.wat^I^Isetf wast
line 2100: 
line 2101: " Webmacro
line 2102: au BufNewFile,BufRead *.wm^I^I^Isetf webmacro
line 2103: 
line 2104: " Wget config
line 2105: au BufNewFile,BufRead .wgetrc,wgetrc^I^Isetf wget
line 2106: 
line 2107: " Website MetaLanguage
line 2108: au BufNewFile,BufRead *.wml^I^I^Isetf wml
line 2109: 
line 2110: " Winbatch
line 2111: au BufNewFile,BufRead *.wbt^I^I^Isetf winbatch
line 2112: 
line 2113: " WSML
line 2114: au BufNewFile,BufRead *.wsml^I^I^Isetf wsml
line 2115: 
line 2116: " WPL
line 2117: au BufNewFile,BufRead *.wpl^I^I^Isetf xml
line 2118: 
line 2119: " WvDial
line 2120: au BufNewFile,BufRead wvdial.conf,.wvdialrc^Isetf wvdial
line 2121: 
line 2122: " CVS RC file
line 2123: au BufNewFile,BufRead .cvsrc^I^I^Isetf cvsrc
line 2124: 
line 2125: " CVS commit file
line 2126: au BufNewFile,BufRead cvs\d\+^I^I^Isetf cvs
line 2127: 
line 2128: " WEB (*.web is also used for Winbatch: Guess, based on expecting "%" comment
line 2129: " lines in a WEB file).
line 2130: au BufNewFile,BufRead *.web if getline(1)[0].getline(2)[0].getline(3)[0].getline(4)[0].getline(5)[0] =~ "%" |   setf web | else |   setf winbatch | endif
line 2136: 
line 2137: " Windows Scripting Host and Windows Script Component
line 2138: au BufNewFile,BufRead *.ws[fc]^I^I^Isetf wsh
line 2139: 
line 2140: " XHTML
line 2141: au BufNewFile,BufRead *.xhtml,*.xht^I^Isetf xhtml
line 2142: 
line 2143: " X Pixmap (dynamically sets colors, this used to trigger on BufEnter to make
line 2144: " it work better, but that breaks setting 'filetype' manually)
line 2145: au BufNewFile,BufRead *.xpm if getline(1) =~ "XPM2" |   setf xpm2 | else |   setf xpm | endif
line 2151: au BufNewFile,BufRead *.xpm2^I^I^Isetf xpm2
line 2152: 
line 2153: " XFree86 config
line 2154: au BufNewFile,BufRead XF86Config if getline(1) =~ '\<XConfigurator\>' |   let b:xf86conf_xfree86_version = 3 | endif | setf xf86conf
line 2159: au BufNewFile,BufRead */xorg.conf.d/*.conf let b:xf86conf_xfree86_version = 4 | setf xf86conf
line 2162: 
line 2163: " Xorg config
line 2164: au BufNewFile,BufRead xorg.conf,xorg.conf-4^Ilet b:xf86conf_xfree86_version = 4 | setf xf86conf
line 2165: 
line 2166: " Xinetd conf
line 2167: au BufNewFile,BufRead */etc/xinetd.conf^I^Isetf xinetd
line 2168: 
line 2169: " XS Perl extension interface language
line 2170: au BufNewFile,BufRead *.xs^I^I^Isetf xs
line 2171: 
line 2172: " X resources file
line 2173: au BufNewFile,BufRead .Xdefaults,.Xpdefaults,.Xresources,xdm-config,*.ad setf xdefaults
line 2174: 
line 2175: " Xmath
line 2176: au BufNewFile,BufRead *.msc,*.msf^I^Isetf xmath
line 2177: au BufNewFile,BufRead *.ms if !dist#ft#FTnroff() | setf xmath | endif
line 2179: 
line 2180: " XML  specific variants: docbk and xbl
line 2181: au BufNewFile,BufRead *.xml^I^I^Icall dist#ft#FTxml()
line 2182: 
line 2183: " XMI (holding UML models) is also XML
line 2184: au BufNewFile,BufRead *.xmi^I^I^Isetf xml
line 2185: 
line 2186: " CSPROJ files are Visual Studio.NET's XML-based C# project config files
line 2187: au BufNewFile,BufRead *.csproj,*.csproj.user^Isetf xml
line 2188: 
line 2189: " FSPROJ files are Visual Studio.NET's XML-based F# project config files
line 2190: au BufNewFile,BufRead *.fsproj,*.fsproj.user^Isetf xml
line 2191: 
line 2192: " VBPROJ files are Visual Studio.NET's XML-based Visual Basic project config files
line 2193: au BufNewFile,BufRead *.vbproj,*.vbproj.user^Isetf xml
line 2194: 
line 2195: " Qt Linguist translation source and Qt User Interface Files are XML
line 2196: " However, for .ts Typescript is more common.
line 2197: au BufNewFile,BufRead *.ui^I^I^Isetf xml
line 2198: 
line 2199: " TPM's are RDF-based descriptions of TeX packages (Nikolai Weibull)
line 2200: au BufNewFile,BufRead *.tpm^I^I^Isetf xml
line 2201: 
line 2202: " Xdg menus
line 2203: au BufNewFile,BufRead */etc/xdg/menus/*.menu^Isetf xml
line 2204: 
line 2205: " ATI graphics driver configuration
line 2206: au BufNewFile,BufRead fglrxrc^I^I^Isetf xml
line 2207: 
line 2208: " Web Services Description Language (WSDL)
line 2209: au BufNewFile,BufRead *.wsdl^I^I^Isetf xml
line 2210: 
line 2211: " XLIFF (XML Localisation Interchange File Format) is also XML
line 2212: au BufNewFile,BufRead *.xlf^I^I^Isetf xml
line 2213: au BufNewFile,BufRead *.xliff^I^I^Isetf xml
line 2214: 
line 2215: " XML User Interface Language
line 2216: au BufNewFile,BufRead *.xul^I^I^Isetf xml
line 2217: 
line 2218: " X11 xmodmap (also see below)
line 2219: au BufNewFile,BufRead *Xmodmap^I^I^Isetf xmodmap
line 2220: 
line 2221: " Xquery
line 2222: au BufNewFile,BufRead *.xq,*.xql,*.xqm,*.xquery,*.xqy^Isetf xquery
line 2223: 
line 2224: " XSD
line 2225: au BufNewFile,BufRead *.xsd^I^I^Isetf xsd
line 2226: 
line 2227: " Xslt
line 2228: au BufNewFile,BufRead *.xsl,*.xslt^I^Isetf xslt
line 2229: 
line 2230: " Yacc
line 2231: au BufNewFile,BufRead *.yy,*.yxx,*.y++^I^Isetf yacc
line 2232: 
line 2233: " Yacc or racc
line 2234: au BufNewFile,BufRead *.y^I^I^Icall dist#ft#FTy()
line 2235: 
line 2236: " Yaml
line 2237: au BufNewFile,BufRead *.yaml,*.yml^I^Isetf yaml
line 2238: 
line 2239: " Raml
line 2240: au BufNewFile,BufRead *.raml^I^I^Isetf raml
line 2241: 
line 2242: " yum conf (close enough to dosini)
line 2243: au BufNewFile,BufRead */etc/yum.conf^I^Isetf dosini
line 2244: 
line 2245: " YANG
line 2246: au BufRead,BufNewFile *.yang^I^I^Isetf yang
line 2247: 
line 2248: " Zimbu
line 2249: au BufNewFile,BufRead *.zu^I^I^Isetf zimbu
line 2250: " Zimbu Templates
line 2251: au BufNewFile,BufRead *.zut^I^I^Isetf zimbutempl
line 2252: 
line 2253: " Zope
line 2254: "   dtml (zope dynamic template markup language), pt (zope page template),
line 2255: "   cpt (zope form controller page template)
line 2256: au BufNewFile,BufRead *.dtml,*.pt,*.cpt^I^Icall dist#ft#FThtml()
line 2257: "   zsql (zope sql method)
line 2258: au BufNewFile,BufRead *.zsql^I^I^Icall dist#ft#SQL()
line 2259: 
line 2260: " Z80 assembler asz80
line 2261: au BufNewFile,BufRead *.z8a^I^I^Isetf z8a
line 2262: 
line 2263: augroup END
line 2264: 
line 2265: 
line 2266: " Source the user-specified filetype file, for backwards compatibility with
line 2267: " Vim 5.x.
line 2268: if exists("myfiletypefile") && filereadable(expand(myfiletypefile))
line 2269:   execute "source " . myfiletypefile
line 2270: endif
line 2271: 
line 2272: 
line 2273: " Check for "*" after loading myfiletypefile, so that scripts.vim is only used
line 2274: " when there are no matching file name extensions.
line 2275: " Don't do this for compressed files.
line 2276: augroup filetypedetect
line 2277: au BufNewFile,BufRead * if !did_filetype() && expand("<amatch>") !~ g:ft_ignore_pat | runtime! scripts.vim | endif
line 2280: au StdinReadPost * if !did_filetype() | runtime! scripts.vim | endif
line 2281: 
line 2282: 
line 2283: " Plain text files, needs to be far down to not override others.  This avoids
line 2284: " the "conf" type being used if there is a line starting with '#'.
line 2285: " But before patterns matching everything in a directory.
line 2286: au BufNewFile,BufRead *.text,README,LICENSE,COPYING,AUTHORS^Isetf text
line 2287: 
line 2288: 
line 2289: " Extra checks for when no filetype has been detected now.  Mostly used for
line 2290: " patterns that end in "*".  E.g., "zsh*" matches "zsh.vim", but that's a Vim
line 2291: " script file.
line 2292: " Most of these should call s:StarSetf() to avoid names ending in .gz and the
line 2293: " like are used.
line 2294: 
line 2295: " More Apache style config files
line 2296: au BufNewFile,BufRead */etc/proftpd/*.conf*,*/etc/proftpd/conf.*/*^Icall s:StarSetf('apachestyle')
line 2297: au BufNewFile,BufRead proftpd.conf*^I^I^I^I^Icall s:StarSetf('apachestyle')
line 2298: 
line 2299: " More Apache config files
line 2300: au BufNewFile,BufRead access.conf*,apache.conf*,apache2.conf*,httpd.conf*,srm.conf*^Icall s:StarSetf('apache')
line 2301: au BufNewFile,BufRead */etc/apache2/*.conf*,*/etc/apache2/conf.*/*,*/etc/apache2/mods-*/*,*/etc/apache2/sites-*/*,*/etc/httpd/conf.*/*,*/etc/httpd/mods-*/*,*/etc/httpd/sites-*/*,*/etc/httpd/conf.d/*.conf*^I^Icall s:StarSetf('apache')
line 2302: 
line 2303: " APT config file
line 2304: au BufNewFile,BufRead */etc/apt/apt.conf.d/{[-_[:alnum:]]\+,[-_.[:alnum:]]\+.conf} call s:StarSetf('aptconf')
line 2305: 
line 2306: " Asterisk config file
line 2307: au BufNewFile,BufRead *asterisk/*.conf*^I^Icall s:StarSetf('asterisk')
line 2308: au BufNewFile,BufRead *asterisk*/*voicemail.conf* call s:StarSetf('asteriskvm')
line 2309: 
line 2310: " Bazaar version control
line 2311: au BufNewFile,BufRead bzr_log.*^I^I^Isetf bzr
line 2312: 
line 2313: " Bazel build file
line 2314: if !has("fname_case")
line 2315:   au BufNewFile,BufRead *.BUILD,BUILD^I^Isetf bzl
line 2316: endif
line 2317: 
line 2318: " BIND zone
line 2319: au BufNewFile,BufRead */named/db.*,*/bind/db.*^Icall s:StarSetf('bindzone')
line 2320: 
line 2321: au BufNewFile,BufRead cabal.project.*^I^Icall s:StarSetf('cabalproject')
line 2322: 
line 2323: " Calendar
line 2324: au BufNewFile,BufRead */.calendar/*,*/share/calendar/*/calendar.*,*/share/calendar/calendar.*^I^I^I^I^Icall s:StarSetf('calendar')
line 2327: 
line 2328: " Changelog
line 2329: au BufNewFile,BufRead [cC]hange[lL]og* if getline(1) =~ '; urgency='|  call s:StarSetf('debchangelog')|else|  call s:StarSetf('changelog')|endif
line 2335: 
line 2336: " Crontab
line 2337: au BufNewFile,BufRead crontab,crontab.*,*/etc/cron.d/*^I^Icall s:StarSetf('crontab')
line 2338: 
line 2339: " dnsmasq(8) configuration
line 2340: au BufNewFile,BufRead */etc/dnsmasq.d/*^I^Icall s:StarSetf('dnsmasq')
line 2341: 
line 2342: " Dockerfile
line 2343: au BufNewFile,BufRead Dockerfile.*,Containerfile.*^Icall s:StarSetf('dockerfile')
line 2344: 
line 2345: " Dracula
line 2346: au BufNewFile,BufRead drac.*^I^I^Icall s:StarSetf('dracula')
line 2347: 
line 2348: " Fvwm
line 2349: au BufNewFile,BufRead */.fvwm/*^I^I^Icall s:StarSetf('fvwm')
line 2350: au BufNewFile,BufRead *fvwmrc*,*fvwm95*.hook let b:fvwm_version = 1 | call s:StarSetf('fvwm')
line 2352: au BufNewFile,BufRead *fvwm2rc* if expand("<afile>:e") == "m4"|  call s:StarSetf('fvwm2m4')|else|  let b:fvwm_version = 2 | call s:StarSetf('fvwm')|endif
line 2358: 
line 2359: " Gedcom
line 2360: au BufNewFile,BufRead */tmp/lltmp*^I^Icall s:StarSetf('gedcom')
line 2361: 
line 2362: " Git
line 2363: au BufNewFile,BufRead */.gitconfig.d/*,/etc/gitconfig.d/*^Icall s:StarSetf('gitconfig')
line 2364: 
line 2365: " Gitolite
line 2366: au BufNewFile,BufRead */gitolite-admin/conf/*^Icall s:StarSetf('gitolite')
line 2367: 
line 2368: " GTK RC
line 2369: au BufNewFile,BufRead .gtkrc*,gtkrc*^I^Icall s:StarSetf('gtkrc')
line 2370: 
line 2371: " Jam
line 2372: au BufNewFile,BufRead Prl*.*,JAM*.*^I^Icall s:StarSetf('jam')
line 2373: 
line 2374: " Jargon
line 2375: au! BufNewFile,BufRead *jarg* if getline(1).getline(2).getline(3).getline(4).getline(5) =~? 'THIS IS THE JARGON FILE'|  call s:StarSetf('jargon')|endif
line 2379: 
line 2380: " Java Properties resource file (note: doesn't catch font.properties.pl)
line 2381: au BufNewFile,BufRead *.properties_??_??_*^Icall s:StarSetf('jproperties')
line 2382: 
line 2383: " Kconfig
line 2384: au BufNewFile,BufRead Kconfig.*^I^I^Icall s:StarSetf('kconfig')
line 2385: 
line 2386: " Lilo: Linux loader
line 2387: au BufNewFile,BufRead lilo.conf*^I^Icall s:StarSetf('lilo')
line 2388: 
line 2389: " Libsensors
line 2390: au BufNewFile,BufRead */etc/sensors.d/[^.]*^Icall s:StarSetf('sensors')
line 2391: 
line 2392: " Logcheck
line 2393: au BufNewFile,BufRead */etc/logcheck/*.d*/*^Icall s:StarSetf('logcheck')
line 2394: 
line 2395: " Makefile
line 2396: au BufNewFile,BufRead [mM]akefile*^I^Icall s:StarSetf('make')
line 2397: 
line 2398: " Ruby Makefile
line 2399: au BufNewFile,BufRead [rR]akefile*^I^Icall s:StarSetf('ruby')
line 2400: 
line 2401: " Mail (also matches muttrc.vim, so this is below the other checks)
line 2402: au BufNewFile,BufRead {neo,}mutt[[:alnum:]._-]\\\{6\}^Isetf mail
line 2403: 
line 2404: au BufNewFile,BufRead reportbug-*^I^Icall s:StarSetf('mail')
line 2405: 
line 2406: " Modconf
line 2407: au BufNewFile,BufRead */etc/modutils/* if executable(expand("<afile>")) != 1|  call s:StarSetf('modconf')|endif
line 2411: au BufNewFile,BufRead */etc/modprobe.*^I^Icall s:StarSetf('modconf')
line 2412: 
line 2413: " Mutt setup files (must be before catch *.rc)
line 2414: au BufNewFile,BufRead */etc/Muttrc.d/*^I^Icall s:StarSetf('muttrc')
line 2415: 
line 2416: " Mutt setup file
line 2417: au BufNewFile,BufRead .mutt{ng,}rc*,*/.mutt{ng,}/mutt{ng,}rc*^Icall s:StarSetf('muttrc')
line 2418: au BufNewFile,BufRead mutt{ng,}rc*,Mutt{ng,}rc*^I^Icall s:StarSetf('muttrc')
line 2419: 
line 2420: " Neomutt setup file
line 2421: au BufNewFile,BufRead .neomuttrc*,*/.neomutt/neomuttrc*^Icall s:StarSetf('neomuttrc')
line 2422: au BufNewFile,BufRead neomuttrc*,Neomuttrc*^I^Icall s:StarSetf('neomuttrc')
line 2423: 
line 2424: " Nroff macros
line 2425: au BufNewFile,BufRead tmac.*^I^I^Icall s:StarSetf('nroff')
line 2426: 
line 2427: " OpenBSD hostname.if
line 2428: au BufNewFile,BufRead /etc/hostname.*^I^Icall s:StarSetf('config')
line 2429: 
line 2430: " Pam conf
line 2431: au BufNewFile,BufRead */etc/pam.d/*^I^Icall s:StarSetf('pamconf')
line 2432: 
line 2433: " Printcap and Termcap
line 2434: au BufNewFile,BufRead *printcap* if !did_filetype()|  let b:ptcap_type = "print" | call s:StarSetf('ptcap')|endif
line 2438: au BufNewFile,BufRead *termcap* if !did_filetype()|  let b:ptcap_type = "term" | call s:StarSetf('ptcap')|endif
line 2442: 
line 2443: " ReDIF
line 2444: " Only used when the .rdf file was not detected to be XML.
line 2445: au BufRead,BufNewFile *.rdf^I^I^Icall dist#ft#Redif()
line 2446: 
line 2447: " Remind
line 2448: au BufNewFile,BufRead .reminders*^I^Icall s:StarSetf('remind')
line 2449: 
line 2450: " SGML catalog file
line 2451: au BufNewFile,BufRead sgml.catalog*^I^Icall s:StarSetf('catalog')
line 2452: 
line 2453: " avoid doc files being recognized a shell files
line 2454: au BufNewFile,BufRead */doc/{,.}bash[_-]completion{,.d,.sh}{,/*} setf text
line 2455: 
line 2456: " Shell scripts ending in a star
line 2457: au BufNewFile,BufRead .bashrc*,.bash[_-]profile*,.bash[_-]logout*,.bash[_-]aliases*,bash-fc[-.]*,PKGBUILD*,APKBUILD*,*/{,.}bash[_-]completion{,.d,.sh}{,/*} call dist#ft#SetFileTypeSH("bash")
line 2458: au BufNewFile,BufRead .kshrc* call dist#ft#SetFileTypeSH("ksh")
line 2459: au BufNewFile,BufRead .profile* call dist#ft#SetFileTypeSH(getline(1))
line 2460: 
line 2461: " Sudoers
line 2462: au BufNewFile,BufRead */etc/sudoers.d/*^I^Icall s:StarSetf('sudoers')
line 2463: 
line 2464: " tcsh scripts ending in a star
line 2465: au BufNewFile,BufRead .tcshrc*^Icall dist#ft#SetFileTypeShell("tcsh")
line 2466: 
line 2467: " csh scripts ending in a star
line 2468: au BufNewFile,BufRead .login*,.cshrc*  call dist#ft#CSH()
line 2469: 
line 2470: " tmux configuration with arbitrary extension
line 2471: au BufNewFile,BufRead {.,}tmux*.conf*^I^Isetf tmux
line 2472: 
line 2473: " VHDL
line 2474: au BufNewFile,BufRead *.vhdl_[0-9]*^I^Icall s:StarSetf('vhdl')
line 2475: 
line 2476: " Vim script
line 2477: au BufNewFile,BufRead *vimrc*^I^I^Icall s:StarSetf('vim')
line 2478: 
line 2479: " Subversion commit file
line 2480: au BufNewFile,BufRead svn-commit*.tmp^I^Isetf svn
line 2481: 
line 2482: " X resources file
line 2483: au BufNewFile,BufRead Xresources*,*/app-defaults/*,*/Xresources/* call s:StarSetf('xdefaults')
line 2484: 
line 2485: " XFree86 config
line 2486: au BufNewFile,BufRead XF86Config-4* let b:xf86conf_xfree86_version = 4 | call s:StarSetf('xf86conf')
line 2488: au BufNewFile,BufRead XF86Config* if getline(1) =~ '\<XConfigurator\>'|  let b:xf86conf_xfree86_version = 3|endif|call s:StarSetf('xf86conf')
line 2493: 
line 2494: " X11 xmodmap
line 2495: au BufNewFile,BufRead *xmodmap*^I^I^Icall s:StarSetf('xmodmap')
line 2496: 
line 2497: " Xinetd conf
line 2498: au BufNewFile,BufRead */etc/xinetd.d/*^I^Icall s:StarSetf('xinetd')
line 2499: 
line 2500: " yum conf (close enough to dosini)
line 2501: au BufNewFile,BufRead */etc/yum.repos.d/*^Icall s:StarSetf('dosini')
line 2502: 
line 2503: " Z-Shell script ending in a star
line 2504: au BufNewFile,BufRead .zsh*,.zlog*,.zcompdump*  call s:StarSetf('zsh')
line 2505: au BufNewFile,BufRead zsh*,zlog*^I^Icall s:StarSetf('zsh')
line 2506: 
line 2507: 
line 2508: " Help files match *.txt but should have a last line that is a modeline. 
line 2509: au BufNewFile,BufRead *.txt  if getline('$') !~ 'vim:.*ft=help'|   setf text| endif       
line 2513: 
line 2514: if !exists('g:did_load_ftdetect')
line 2515:   " Use the filetype detect plugins.  They may overrule any of the previously
line 2516:   " detected filetypes.
line 2517:   runtime! ftdetect/*.vim
Searching for "ftdetect/*.vim" in runtime path
Searching for "/Users/ablanken/.config/nvim/ftdetect/*.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/ftdetect/*.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/42header/ftdetect/*.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/auto-session/ftdetect/*.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/cheatsheet.nvim/ftdetect/*.vim"
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/cheatsheet.nvim/ftdetect)
chdir(/Users/ablanken/Sync/src/neovim-conf)
line 2517: sourcing "/Users/ablanken/.local/share/nvim/site/pack/packer/start/cheatsheet.nvim/ftdetect/cheatsheet.vim"
line 1: au BufNewFile,BufRead cheatsheet.txt,cheatsheet-*.txt set filetype=cheatsheet
finished sourcing /Users/ablanken/.local/share/nvim/site/pack/packer/start/cheatsheet.nvim/ftdetect/cheatsheet.vim
continuing in /Users/ablanken/.local/nvim-brew/Cellar/neovim/0.7.0/share/nvim/runtime/filetype.vim
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/coc-nvim-lua/ftdetect/*.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/coc.nvim/ftdetect/*.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/Comment.nvim/ftdetect/*.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/c_formatter_42.vim/ftdetect/*.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/FTerm.nvim/ftdetect/*.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/gentoo-syntax/ftdetect/*.vim"
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/gentoo-syntax/ftdetect)
chdir(/Users/ablanken/Sync/src/neovim-conf)
line 2517: sourcing "/Users/ablanken/.local/share/nvim/site/pack/packer/start/gentoo-syntax/ftdetect/gentoo.vim"
line 1: " Vim filetype detection file
line 2: " Language:^IGentoo Things
line 3: " Author:^ICiaran McCreesh <ciaranm@gentoo.org>
line 4: " Copyright:^ICopyright (c) 2004-2005 Ciaran McCreesh
line 5: " Licence:^IYou may redistribute this under the same terms as Vim itself
line 6: "
line 7: " This sets up syntax highlighting for Gentoo ebuilds, eclasses, GLEPs and
line 8: " Gentoo style ChangeLogs.
line 9: "
line 10: 
line 11: if &compatible || v:version < 603
line 12:     finish
line 13: endif
line 14: 
line 15: 
line 16: " ebuilds, eclasses
line 17: au BufNewFile,BufRead *.e{build,class}     set filetype=ebuild
line 19: 
line 20: " GLEPs
line 21: au BufNewFile,BufRead *.txt,*.rst if (getline(1) =~? "^GLEP: " || getline(2) =~? "^GLEP: ") |     set filetype=glep | endif
line 25: 
line 26: " ChangeLogs
line 27: au BufNewFile,BufRead ChangeLog* if (getline(2) =~? "^# Copyright \\d\\+-\\d\\+ Gentoo Foundation") |     set filetype=gentoo-changelog | endif
line 31: 
line 32: " /etc/init.d/ scripts
line 33: au BufNewFile,BufRead /etc/init.d/*     set filetype=gentoo-init-d.sh |
line 35: 
line 36: au BufNewFile,BufRead * if (getline(1) =~? "#!/sbin/\\(runscript\\|openrc-run\\)") |     set filetype=gentoo-init-d.sh | endif
line 40: 
line 41: " /etc/conf.d/ scripts
line 42: au BufNewFile,BufRead /etc/conf.d/*     set filetype=gentoo-conf-d.sh
line 44: 
line 45: " /etc/env.d/ scripts
line 46: au BufNewFile,BufRead /etc/env.d/*     set filetype=gentoo-env-d.sh
line 48: 
line 49: " /etc/cron.d/ scripts
line 50: au BufNewFile,BufRead /etc/cron.d/*     set filetype=crontab
line 52: 
line 53: " package.mask, package.unmask
line 54: au BufNewFile,BufRead {*/package.{un,}mask,*/portage/package.{un,}mask/*}     set filetype=gentoo-package-mask
line 56: 
line 57: " package.keywords
line 58: au BufNewFile,BufRead {*/package.{accept_,}keywords,*/portage/package.{accept_,}keywords/*}     set filetype=gentoo-package-keywords
line 60: 
line 61: " package.use
line 62: au BufNewFile,BufRead {*/package.use,*/portage/package.use/*,*/package.env,*/portage/package.env/*}     set filetype=gentoo-package-use
line 64: 
line 65: " package.license
line 66: au BufNewFile,BufRead {*/package.license,*/portage/package.license/*}     set filetype=gentoo-package-license
line 68: 
line 69: " package.properties
line 70: au BufNewFile,BufRead {*/package.properties,*/portage/package.properties/*}     set filetype=gentoo-package-properties
line 72: 
line 73: " thirdpartymirrors
line 74: au BufNewFile,BufRead {*/thirdpartymirrors,*/portage/mirrors}     set filetype=gentoo-mirrors
line 76: 
line 77: " make.conf
line 78: au BufNewFile,BufRead make.{conf,globals}     set filetype=gentoo-make-conf
line 80: 
line 81: " use.desc
line 82: au BufNewFile,BufRead use.{local.,}desc     set filetype=gentoo-use-desc
line 84: 
line 85: " metadata.xml
line 86: au BufNewFile,BufRead metadata.xml     set filetype=gentoo-metadata
line 88: 
line 89: " repos.conf
line 90: au BufNewFile,BufRead {*/portage/repos.conf,*/portage/repos.conf/*.conf}     set filetype=dosini
line 92: 
line 93: " portage/env/*
line 94: au BufNewFile,BufRead */portage/{env/*,bashrc}     set filetype=ebuild
line 96: 
line 97: " guidexml
line 98: au BufNewFile,BufRead *.xml     if getline(1) =~ "<!DOCTYPE \\(guide\\|news\\|mainpage\\|book\\|sections\\|dynamic\\|inserts\\) " ||        getline(2) =~ "<!DOCTYPE \\(guide\\|news\\|mainpage\\|book\\|sections\\|dynamic\\|inserts\\) " ||        getline(3) =~ "<!DOCTYPE \\(guide\\|news\\|mainpage\\|book\\|sections\\|dynamic\\|inserts\\) " ||        getline(4) =~ "<!DOCTYPE \\(guide\\|news\\|mainpage\\|book\\|sections\\|dynamic\\|inserts\\) " ||        getline(5) =~ "<!DOCTYPE \\(guide\\|news\\|mainpage\\|book\\|sections\\|dynamic\\|inserts\\) " ||        getline(6) =~ "<!DOCTYPE \\(guide\\|news\\|mainpage\\|book\\|sections\\|dynamic\\|inserts\\) " ||        getline(7) =~ "<!DOCTYPE \\(guide\\|news\\|mainpage\\|book\\|sections\\|dynamic\\|inserts\\) " ||        getline(8) =~ "<!DOCTYPE \\(guide\\|news\\|mainpage\\|book\\|sections\\|dynamic\\|inserts\\) " ||        getline(9) =~ "<!DOCTYPE \\(guide\\|news\\|mainpage\\|book\\|sections\\|dynamic\\|inserts\\) " |     set filetype=guidexml^I^I      |     endi
finished sourcing /Users/ablanken/.local/share/nvim/site/pack/packer/start/gentoo-syntax/ftdetect/gentoo.vim
continuing in /Users/ablanken/.local/nvim-brew/Cellar/neovim/0.7.0/share/nvim/runtime/filetype.vim
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/gitsigns.nvim/ftdetect/*.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/indent-blankline.nvim/ftdetect/*.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/lualine.nvim/ftdetect/*.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/neon/ftdetect/*.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/nvim-neoclip.lua/ftdetect/*.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/nvim-treesitter/ftdetect/*.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/nvim-web-devicons/ftdetect/*.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/packer.nvim/ftdetect/*.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/plenary.nvim/ftdetect/*.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/session-lens/ftdetect/*.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/sqlite.lua/ftdetect/*.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/suda.vim/ftdetect/*.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/telescope-file-browser.nvim/ftdetect/*.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/telescope-fzf-native.nvim/ftdetect/*.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/telescope-packer.nvim/ftdetect/*.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/telescope-repo.nvim/ftdetect/*.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/telescope-symbols.nvim/ftdetect/*.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/telescope.nvim/ftdetect/*.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/vim-fugitive/ftdetect/*.vim"
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/vim-fugitive/ftdetect)
chdir(/Users/ablanken/Sync/src/neovim-conf)
line 2517: sourcing "/Users/ablanken/.local/share/nvim/site/pack/packer/start/vim-fugitive/ftdetect/fugitive.vim"
line 1: autocmd BufReadPost *.fugitiveblame setfiletype fugitiveblame
finished sourcing /Users/ablanken/.local/share/nvim/site/pack/packer/start/vim-fugitive/ftdetect/fugitive.vim
continuing in /Users/ablanken/.local/nvim-brew/Cellar/neovim/0.7.0/share/nvim/runtime/filetype.vim
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/vim-polyglot/ftdetect/*.vim"
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/vim-polyglot/ftdetect)
chdir(/Users/ablanken/Sync/src/neovim-conf)
line 2517: sourcing "/Users/ablanken/.local/share/nvim/site/pack/packer/start/vim-polyglot/ftdetect/polyglot.vim"
line 1: call polyglot#init#init()
calling function polyglot#init#init()

line 1:   " A no-op as sourcing this file is enough
function polyglot#init#init returning #0

continuing in /Users/ablanken/.local/share/nvim/site/pack/packer/start/vim-polyglot/ftdetect/polyglot.vim

finished sourcing /Users/ablanken/.local/share/nvim/site/pack/packer/start/vim-polyglot/ftdetect/polyglot.vim
continuing in /Users/ablanken/.local/nvim-brew/Cellar/neovim/0.7.0/share/nvim/runtime/filetype.vim
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/vim-rooter/ftdetect/*.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/which-key.nvim/ftdetect/*.vim"
Searching for "/Users/ablanken/.local/nvim-brew/Cellar/neovim/0.7.0/share/nvim/runtime/ftdetect/*.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/Comment.nvim/after/ftdetect/*.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/vim-polyglot/after/ftdetect/*.vim"
line 2518:   runtime! ftdetect/*.lua
Searching for "ftdetect/*.lua" in runtime path
Searching for "/Users/ablanken/.config/nvim/ftdetect/*.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/ftdetect/*.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/42header/ftdetect/*.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/auto-session/ftdetect/*.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/cheatsheet.nvim/ftdetect/*.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/coc-nvim-lua/ftdetect/*.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/coc.nvim/ftdetect/*.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/Comment.nvim/ftdetect/*.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/c_formatter_42.vim/ftdetect/*.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/FTerm.nvim/ftdetect/*.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/gentoo-syntax/ftdetect/*.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/gitsigns.nvim/ftdetect/*.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/indent-blankline.nvim/ftdetect/*.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/lualine.nvim/ftdetect/*.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/neon/ftdetect/*.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/nvim-neoclip.lua/ftdetect/*.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/nvim-treesitter/ftdetect/*.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/nvim-web-devicons/ftdetect/*.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/packer.nvim/ftdetect/*.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/plenary.nvim/ftdetect/*.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/session-lens/ftdetect/*.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/sqlite.lua/ftdetect/*.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/suda.vim/ftdetect/*.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/telescope-file-browser.nvim/ftdetect/*.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/telescope-fzf-native.nvim/ftdetect/*.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/telescope-packer.nvim/ftdetect/*.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/telescope-repo.nvim/ftdetect/*.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/telescope-symbols.nvim/ftdetect/*.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/telescope.nvim/ftdetect/*.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/vim-fugitive/ftdetect/*.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/vim-polyglot/ftdetect/*.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/vim-rooter/ftdetect/*.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/which-key.nvim/ftdetect/*.lua"
Searching for "/Users/ablanken/.local/nvim-brew/Cellar/neovim/0.7.0/share/nvim/runtime/ftdetect/*.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/Comment.nvim/after/ftdetect/*.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/vim-polyglot/after/ftdetect/*.lua"
not found in runtime path: "ftdetect/*.lua"
line 2519: endif
line 2520: 
line 2521: " NOTE: The above command could have ended the filetypedetect autocmd group
line 2522: " and started another one. Let's make sure it has ended to get to a consistent
line 2523: " state.
line 2524: augroup END
line 2525: 
line 2526: " Generic configuration file. Use FALLBACK, it's just guessing!
line 2527: au filetypedetect BufNewFile,BufRead,StdinReadPost * if !did_filetype() && expand("<amatch>") !~ g:ft_ignore_pat    && (getline(1) =~ '^#' || getline(2) =~ '^#' || getline(3) =~ '^#'^I|| getline(4) =~ '^#' || getline(5) =~ '^#') |   setf FALLBACK conf | endif
line 2533: 
line 2534: 
line 2535: " If the GUI is already running, may still need to install the Syntax menu.
line 2536: " Don't do it when the 'M' flag is included in 'guioptions'.
line 2537: if has("menu") && has("gui_running") && !exists("did_install_syntax_menu") && &guioptions !~# "M"
line 2539:   source <sfile>:p:h/menu.vim
line 2540: endif
line 2541: 
line 2542: " Function called for testing all functions defined here.  These are
line 2543: " script-local, thus need to be executed here.
line 2544: " Returns a string with error messages (hopefully empty).
line 2545: func TestFiletypeFuncs(testlist)
line 2556: 
line 2557: " Restore 'cpoptions'
line 2558: let &cpo = s:cpo_save
line 2559: unlet s:cpo_save
finished sourcing /Users/ablanken/.local/nvim-brew/Cellar/neovim/0.7.0/share/nvim/runtime/filetype.vim
continuing in /Users/ablanken/.local/share/nvim/site/pack/packer/start/vim-polyglot/autoload/polyglot/init.vim
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/Comment.nvim/after/filetype.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/vim-polyglot/after/filetype.vim"
line 149:   runtime! ftdetect/*.vim
Searching for "ftdetect/*.vim" in runtime path
Searching for "/Users/ablanken/.config/nvim/ftdetect/*.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/ftdetect/*.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/42header/ftdetect/*.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/auto-session/ftdetect/*.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/cheatsheet.nvim/ftdetect/*.vim"
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/cheatsheet.nvim/ftdetect)
chdir(/Users/ablanken/Sync/src/neovim-conf)
line 149: sourcing "/Users/ablanken/.local/share/nvim/site/pack/packer/start/cheatsheet.nvim/ftdetect/cheatsheet.vim"
line 1: au BufNewFile,BufRead cheatsheet.txt,cheatsheet-*.txt set filetype=cheatsheet
finished sourcing /Users/ablanken/.local/share/nvim/site/pack/packer/start/cheatsheet.nvim/ftdetect/cheatsheet.vim
continuing in /Users/ablanken/.local/share/nvim/site/pack/packer/start/vim-polyglot/autoload/polyglot/init.vim
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/coc-nvim-lua/ftdetect/*.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/coc.nvim/ftdetect/*.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/Comment.nvim/ftdetect/*.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/c_formatter_42.vim/ftdetect/*.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/FTerm.nvim/ftdetect/*.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/gentoo-syntax/ftdetect/*.vim"
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/gentoo-syntax/ftdetect)
chdir(/Users/ablanken/Sync/src/neovim-conf)
line 149: sourcing "/Users/ablanken/.local/share/nvim/site/pack/packer/start/gentoo-syntax/ftdetect/gentoo.vim"
line 1: " Vim filetype detection file
line 2: " Language:^IGentoo Things
line 3: " Author:^ICiaran McCreesh <ciaranm@gentoo.org>
line 4: " Copyright:^ICopyright (c) 2004-2005 Ciaran McCreesh
line 5: " Licence:^IYou may redistribute this under the same terms as Vim itself
line 6: "
line 7: " This sets up syntax highlighting for Gentoo ebuilds, eclasses, GLEPs and
line 8: " Gentoo style ChangeLogs.
line 9: "
line 10: 
line 11: if &compatible || v:version < 603
line 12:     finish
line 13: endif
line 14: 
line 15: 
line 16: " ebuilds, eclasses
line 17: au BufNewFile,BufRead *.e{build,class}     set filetype=ebuild
line 19: 
line 20: " GLEPs
line 21: au BufNewFile,BufRead *.txt,*.rst if (getline(1) =~? "^GLEP: " || getline(2) =~? "^GLEP: ") |     set filetype=glep | endif
line 25: 
line 26: " ChangeLogs
line 27: au BufNewFile,BufRead ChangeLog* if (getline(2) =~? "^# Copyright \\d\\+-\\d\\+ Gentoo Foundation") |     set filetype=gentoo-changelog | endif
line 31: 
line 32: " /etc/init.d/ scripts
line 33: au BufNewFile,BufRead /etc/init.d/*     set filetype=gentoo-init-d.sh |
line 35: 
line 36: au BufNewFile,BufRead * if (getline(1) =~? "#!/sbin/\\(runscript\\|openrc-run\\)") |     set filetype=gentoo-init-d.sh | endif
line 40: 
line 41: " /etc/conf.d/ scripts
line 42: au BufNewFile,BufRead /etc/conf.d/*     set filetype=gentoo-conf-d.sh
line 44: 
line 45: " /etc/env.d/ scripts
line 46: au BufNewFile,BufRead /etc/env.d/*     set filetype=gentoo-env-d.sh
line 48: 
line 49: " /etc/cron.d/ scripts
line 50: au BufNewFile,BufRead /etc/cron.d/*     set filetype=crontab
line 52: 
line 53: " package.mask, package.unmask
line 54: au BufNewFile,BufRead {*/package.{un,}mask,*/portage/package.{un,}mask/*}     set filetype=gentoo-package-mask
line 56: 
line 57: " package.keywords
line 58: au BufNewFile,BufRead {*/package.{accept_,}keywords,*/portage/package.{accept_,}keywords/*}     set filetype=gentoo-package-keywords
line 60: 
line 61: " package.use
line 62: au BufNewFile,BufRead {*/package.use,*/portage/package.use/*,*/package.env,*/portage/package.env/*}     set filetype=gentoo-package-use
line 64: 
line 65: " package.license
line 66: au BufNewFile,BufRead {*/package.license,*/portage/package.license/*}     set filetype=gentoo-package-license
line 68: 
line 69: " package.properties
line 70: au BufNewFile,BufRead {*/package.properties,*/portage/package.properties/*}     set filetype=gentoo-package-properties
line 72: 
line 73: " thirdpartymirrors
line 74: au BufNewFile,BufRead {*/thirdpartymirrors,*/portage/mirrors}     set filetype=gentoo-mirrors
line 76: 
line 77: " make.conf
line 78: au BufNewFile,BufRead make.{conf,globals}     set filetype=gentoo-make-conf
line 80: 
line 81: " use.desc
line 82: au BufNewFile,BufRead use.{local.,}desc     set filetype=gentoo-use-desc
line 84: 
line 85: " metadata.xml
line 86: au BufNewFile,BufRead metadata.xml     set filetype=gentoo-metadata
line 88: 
line 89: " repos.conf
line 90: au BufNewFile,BufRead {*/portage/repos.conf,*/portage/repos.conf/*.conf}     set filetype=dosini
line 92: 
line 93: " portage/env/*
line 94: au BufNewFile,BufRead */portage/{env/*,bashrc}     set filetype=ebuild
line 96: 
line 97: " guidexml
line 98: au BufNewFile,BufRead *.xml     if getline(1) =~ "<!DOCTYPE \\(guide\\|news\\|mainpage\\|book\\|sections\\|dynamic\\|inserts\\) " ||        getline(2) =~ "<!DOCTYPE \\(guide\\|news\\|mainpage\\|book\\|sections\\|dynamic\\|inserts\\) " ||        getline(3) =~ "<!DOCTYPE \\(guide\\|news\\|mainpage\\|book\\|sections\\|dynamic\\|inserts\\) " ||        getline(4) =~ "<!DOCTYPE \\(guide\\|news\\|mainpage\\|book\\|sections\\|dynamic\\|inserts\\) " ||        getline(5) =~ "<!DOCTYPE \\(guide\\|news\\|mainpage\\|book\\|sections\\|dynamic\\|inserts\\) " ||        getline(6) =~ "<!DOCTYPE \\(guide\\|news\\|mainpage\\|book\\|sections\\|dynamic\\|inserts\\) " ||        getline(7) =~ "<!DOCTYPE \\(guide\\|news\\|mainpage\\|book\\|sections\\|dynamic\\|inserts\\) " ||        getline(8) =~ "<!DOCTYPE \\(guide\\|news\\|mainpage\\|book\\|sections\\|dynamic\\|inserts\\) " ||        getline(9) =~ "<!DOCTYPE \\(guide\\|news\\|mainpage\\|book\\|sections\\|dynamic\\|inserts\\) " |     set filetype=guidexml^I^I      |     endi
finished sourcing /Users/ablanken/.local/share/nvim/site/pack/packer/start/gentoo-syntax/ftdetect/gentoo.vim
continuing in /Users/ablanken/.local/share/nvim/site/pack/packer/start/vim-polyglot/autoload/polyglot/init.vim
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/gitsigns.nvim/ftdetect/*.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/indent-blankline.nvim/ftdetect/*.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/lualine.nvim/ftdetect/*.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/neon/ftdetect/*.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/nvim-neoclip.lua/ftdetect/*.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/nvim-treesitter/ftdetect/*.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/nvim-web-devicons/ftdetect/*.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/packer.nvim/ftdetect/*.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/plenary.nvim/ftdetect/*.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/session-lens/ftdetect/*.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/sqlite.lua/ftdetect/*.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/suda.vim/ftdetect/*.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/telescope-file-browser.nvim/ftdetect/*.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/telescope-fzf-native.nvim/ftdetect/*.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/telescope-packer.nvim/ftdetect/*.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/telescope-repo.nvim/ftdetect/*.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/telescope-symbols.nvim/ftdetect/*.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/telescope.nvim/ftdetect/*.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/vim-fugitive/ftdetect/*.vim"
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/vim-fugitive/ftdetect)
chdir(/Users/ablanken/Sync/src/neovim-conf)
line 149: sourcing "/Users/ablanken/.local/share/nvim/site/pack/packer/start/vim-fugitive/ftdetect/fugitive.vim"
line 1: autocmd BufReadPost *.fugitiveblame setfiletype fugitiveblame
finished sourcing /Users/ablanken/.local/share/nvim/site/pack/packer/start/vim-fugitive/ftdetect/fugitive.vim
continuing in /Users/ablanken/.local/share/nvim/site/pack/packer/start/vim-polyglot/autoload/polyglot/init.vim
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/vim-polyglot/ftdetect/*.vim"
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/vim-polyglot/ftdetect)
chdir(/Users/ablanken/Sync/src/neovim-conf)
line 149: sourcing "/Users/ablanken/.local/share/nvim/site/pack/packer/start/vim-polyglot/ftdetect/polyglot.vim"
line 1: call polyglot#init#init()
calling function polyglot#init#init()

line 1:   " A no-op as sourcing this file is enough
function polyglot#init#init returning #0

continuing in /Users/ablanken/.local/share/nvim/site/pack/packer/start/vim-polyglot/ftdetect/polyglot.vim

finished sourcing /Users/ablanken/.local/share/nvim/site/pack/packer/start/vim-polyglot/ftdetect/polyglot.vim
continuing in /Users/ablanken/.local/share/nvim/site/pack/packer/start/vim-polyglot/autoload/polyglot/init.vim
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/vim-rooter/ftdetect/*.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/which-key.nvim/ftdetect/*.vim"
Searching for "/Users/ablanken/.local/nvim-brew/Cellar/neovim/0.7.0/share/nvim/runtime/ftdetect/*.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/Comment.nvim/after/ftdetect/*.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/vim-polyglot/after/ftdetect/*.vim"
line 150: augroup END
line 151: 
line 152: 
line 153: augroup filetypedetect
line 154: 
line 155: " Switch to compatible mode for the time being
line 156: let s:cpo_save = &cpo
line 157: set cpo&vim
line 158: 
line 159: if !has_key(g:polyglot_is_disabled, 'ftdetect')
line 160: 
line 161: " It can happen vim filetype.vim loads first, then we need a reset
line 162: if exists("did_load_filetypes")
line 163:   au! filetypedetect
line 164: endif
line 165: 
line 166: " Prevent filetype.vim of vim from loading again
line 167: let did_load_filetypes = 1
line 168: 
line 169: 
line 170: " DO NOT EDIT CODE BELOW, IT IS GENERATED WITH MAKEFILE
line 171: 
line 172: if !has_key(g:polyglot_is_disabled, 'bicep')
line 173:   au BufNewFile,BufRead *.bicep setf bicep
line 174: endif
line 175: 
line 176: if !has_key(g:polyglot_is_disabled, 'org')
line 177:   au BufNewFile,BufRead *.org setf org
line 178: endif
line 179: 
line 180: if !has_key(g:polyglot_is_disabled, 'mermaid')
line 181:   au BufNewFile,BufRead *.mermaid,*.mm,*.mmd setf mermaid
line 182: endif
line 183: 
line 184: if !has_key(g:polyglot_is_disabled, 'openscad')
line 185:   au BufNewFile,BufRead *.scad setf openscad
line 186: endif
line 187: 
line 188: if !has_key(g:polyglot_is_disabled, 'nftables')
line 189:   au BufNewFile,BufRead *.nft,*/nftables.conf setf nftables
line 190: endif
line 191: 
line 192: if !has_key(g:polyglot_is_disabled, 'just')
line 193:   au BufNewFile,BufRead *.just,justfile setf just
line 194: endif
line 195: 
line 196: if !has_key(g:polyglot_is_disabled, 'sway')
line 197:   au BufNewFile,BufRead *.sway.config,*.swayconfig,*sway/config,swayconfig setf swayconfig
line 198: endif
line 199: 
line 200: if !has_key(g:polyglot_is_disabled, 'hjson')
line 201:   au BufNewFile,BufRead *.hjson setf hjson
line 202: endif
line 203: 
line 204: if !has_key(g:polyglot_is_disabled, 'gleam')
line 205:   au BufNewFile,BufRead *.gleam setf gleam
line 206: endif
line 207: 
line 208: if !has_key(g:polyglot_is_disabled, 'jsonc')
line 209:   au BufNewFile,BufRead *.cjson,*.jsonc,{.,}babelrc,{.,}eslintrc.json,{.,}jshintrc,{.,}jslintrc,{.,}mocharc.json,coc-settings.json,coffeelint.json,jsconfig.json,tsconfig.json setf jsonc
line 210: endif
line 211: 
line 212: if !has_key(g:polyglot_is_disabled, 'mint')
line 213:   au BufNewFile,BufRead *.mint setf mint
line 214: endif
line 215: 
line 216: if !has_key(g:polyglot_is_disabled, 'context')
line 217:   au BufNewFile,BufRead *.mkii,*.mkiv,*.mkvi setf context
line 218: endif
line 219: 
line 220: if !has_key(g:polyglot_is_disabled, 'xpm2')
line 221:   au BufNewFile,BufRead *.xpm2 setf xpm2
line 222: endif
line 223: 
line 224: if !has_key(g:polyglot_is_disabled, 'xpm')
line 225:   au! BufNewFile,BufRead,BufWritePost *.pm call polyglot#detect#Pm()
line 226:   au BufNewFile,BufRead *.xpm setf xpm
line 227: endif
line 228: 
line 229: if !has_key(g:polyglot_is_disabled, 'xf86conf')
line 230:   au BufNewFile,BufRead */xorg.conf.d/*.conf,xorg.conf,xorg.conf-4 setf xf86conf
line 231:   au BufNewFile,BufRead XF86Config-4* call s:StarSetf('xf86conf')
line 232:   au BufNewFile,BufRead XF86Config* call s:StarSetf('xf86conf')
line 233: endif
line 234: 
line 235: if !has_key(g:polyglot_is_disabled, 'text')
line 236:   au BufNewFile,BufRead *.text,README setf text
line 237: endif
line 238: 
line 239: if !has_key(g:polyglot_is_disabled, 'svn')
line 240:   au BufNewFile,BufRead svn-commit*.tmp setf svn
line 241: endif
line 242: 
line 243: if !has_key(g:polyglot_is_disabled, 'logcheck')
line 244:   au BufNewFile,BufRead */etc/logcheck/*.d*/* call s:StarSetf('logcheck')
line 245: endif
line 246: 
line 247: if !has_key(g:polyglot_is_disabled, 'fvwm')
line 248:   au BufNewFile,BufRead */.fvwm/* call s:StarSetf('fvwm')
line 249: endif
line 250: 
line 251: if !has_key(g:polyglot_is_disabled, 'crontab')
line 252:   au BufNewFile,BufRead crontab setf crontab
line 253:   au BufNewFile,BufRead crontab.* call s:StarSetf('crontab')
line 254:   au BufNewFile,BufRead */etc/cron.d/* call s:StarSetf('crontab')
line 255: endif
line 256: 
line 257: if !has_key(g:polyglot_is_disabled, 'bzr')
line 258:   au BufNewFile,BufRead bzr_log.* call s:StarSetf('bzr')
line 259: endif
line 260: 
line 261: if !has_key(g:polyglot_is_disabled, 'asteriskvm')
line 262:   au BufNewFile,BufRead *asterisk*/*voicemail.conf* call s:StarSetf('asteriskvm')
line 263: endif
line 264: 
line 265: if !has_key(g:polyglot_is_disabled, 'asterisk')
line 266:   au BufNewFile,BufRead *asterisk/*.conf* call s:StarSetf('asterisk')
line 267: endif
line 268: 
line 269: if !has_key(g:polyglot_is_disabled, 'apachestyle')
line 270:   au BufNewFile,BufRead proftpd.conf* call s:StarSetf('apachestyle')
line 271:   au BufNewFile,BufRead */etc/proftpd/conf.*/* call s:StarSetf('apachestyle')
line 272:   au BufNewFile,BufRead */etc/proftpd/*.conf* call s:StarSetf('apachestyle')
line 273: endif
line 274: 
line 275: if !has_key(g:polyglot_is_disabled, 'z8a')
line 276:   au BufNewFile,BufRead *.z8a setf z8a
line 277: endif
line 278: 
line 279: if !has_key(g:polyglot_is_disabled, 'zimbu')
line 280:   au BufNewFile,BufRead *.zu setf zimbu
line 281: endif
line 282: 
line 283: if !has_key(g:polyglot_is_disabled, 'yacc')
line 284:   au BufNewFile,BufRead *.y++,*.yxx,*.yy setf yacc
line 285: endif
line 286: 
line 287: if !has_key(g:polyglot_is_disabled, 'xslt')
line 288:   au BufNewFile,BufRead *.xsl,*.xslt setf xslt
line 289: endif
line 290: 
line 291: if !has_key(g:polyglot_is_disabled, 'xsd')
line 292:   au BufNewFile,BufRead *.xsd setf xsd
line 293: endif
line 294: 
line 295: if !has_key(g:polyglot_is_disabled, 'xquery')
line 296:   au BufNewFile,BufRead *.xq,*.xql,*.xqm,*.xquery,*.xqy setf xquery
line 297: endif
line 298: 
line 299: if !has_key(g:polyglot_is_disabled, 'xmodmap')
line 300:   au BufNewFile,BufRead *Xmodmap setf xmodmap
line 301:   au BufNewFile,BufRead *xmodmap* call s:StarSetf('xmodmap')
line 302: endif
line 303: 
line 304: if !has_key(g:polyglot_is_disabled, 'xmath')
line 305:   au BufNewFile,BufRead *.msc,*.msf setf xmath
line 306: endif
line 307: 
line 308: if !has_key(g:polyglot_is_disabled, 'xdefaults')
line 309:   au BufNewFile,BufRead *.ad,{.,}Xdefaults,{.,}Xpdefaults,{.,}Xresources,xdm-config setf xdefaults
line 310:   au BufNewFile,BufRead Xresources* call s:StarSetf('xdefaults')
line 311:   au BufNewFile,BufRead */app-defaults/* call s:StarSetf('xdefaults')
line 312:   au BufNewFile,BufRead */Xresources/* call s:StarSetf('xdefaults')
line 313: endif
line 314: 
line 315: if !has_key(g:polyglot_is_disabled, 'xinetd')
line 316:   au BufNewFile,BufRead */etc/xinetd.conf setf xinetd
line 317:   au BufNewFile,BufRead */etc/xinetd.d/* call s:StarSetf('xinetd')
line 318: endif
line 319: 
line 320: if !has_key(g:polyglot_is_disabled, 'xhtml')
line 321:   au BufNewFile,BufRead *.xht,*.xhtml setf xhtml
line 322: endif
line 323: 
line 324: if !has_key(g:polyglot_is_disabled, 'wsh')
line 325:   au BufNewFile,BufRead *.ws[fc] setf wsh
line 326: endif
line 327: 
line 328: if !has_key(g:polyglot_is_disabled, 'cvs')
line 329:   au BufNewFile,BufRead cvs\d\+ setf cvs
line 330: endif
line 331: 
line 332: if !has_key(g:polyglot_is_disabled, 'cvsrc')
line 333:   au BufNewFile,BufRead {.,}cvsrc setf cvsrc
line 334: endif
line 335: 
line 336: if !has_key(g:polyglot_is_disabled, 'wvdial')
line 337:   au BufNewFile,BufRead {.,}wvdialrc,wvdial.conf setf wvdial
line 338: endif
line 339: 
line 340: if !has_key(g:polyglot_is_disabled, 'wsml')
line 341:   au BufNewFile,BufRead *.wsml setf wsml
line 342: endif
line 343: 
line 344: if !has_key(g:polyglot_is_disabled, 'winbatch')
line 345:   au BufNewFile,BufRead *.wbt setf winbatch
line 346: endif
line 347: 
line 348: if !has_key(g:polyglot_is_disabled, 'wml')
line 349:   au BufNewFile,BufRead *.wml setf wml
line 350: endif
line 351: 
line 352: if !has_key(g:polyglot_is_disabled, 'wget')
line 353:   au BufNewFile,BufRead {.,}wgetrc,wgetrc setf wget
line 354: endif
line 355: 
line 356: if !has_key(g:polyglot_is_disabled, 'webmacro')
line 357:   au BufNewFile,BufRead *.wm setf webmacro
line 358: endif
line 359: 
line 360: if !has_key(g:polyglot_is_disabled, 'wast')
line 361:   au BufNewFile,BufRead *.wast,*.wat setf wast
line 362: endif
line 363: 
line 364: if !has_key(g:polyglot_is_disabled, 'vroom')
line 365:   au BufNewFile,BufRead *.vroom setf vroom
line 366: endif
line 367: 
line 368: if !has_key(g:polyglot_is_disabled, 'vrml')
line 369:   au BufNewFile,BufRead *.wrl setf vrml
line 370: endif
line 371: 
line 372: if !has_key(g:polyglot_is_disabled, 'vgrindefs')
line 373:   au BufNewFile,BufRead vgrindefs setf vgrindefs
line 374: endif
line 375: 
line 376: if !has_key(g:polyglot_is_disabled, 'viminfo')
line 377:   au BufNewFile,BufRead {.,}viminfo,_viminfo setf viminfo
line 378: endif
line 379: 
line 380: if !has_key(g:polyglot_is_disabled, 'vim')
line 381:   au BufNewFile,BufRead *.vba,*.vim,{.,}exrc,_exrc setf vim
line 382:   au BufNewFile,BufRead *vimrc* call s:StarSetf('vim')
line 383: endif
line 384: 
line 385: if !has_key(g:polyglot_is_disabled, 'vhdl')
line 386:   au BufNewFile,BufRead *.hdl,*.vbe,*.vhd,*.vhdl,*.vho,*.vst setf vhdl
line 387:   au BufNewFile,BufRead *.vhdl_[0-9]* call s:StarSetf('vhdl')
line 388: endif
line 389: 
line 390: if !has_key(g:polyglot_is_disabled, 'systemverilog')
line 391:   au BufNewFile,BufRead *.sv,*.svh setf systemverilog
line 392: endif
line 393: 
line 394: if !has_key(g:polyglot_is_disabled, 'verilogams')
line 395:   au BufNewFile,BufRead *.va,*.vams setf verilogams
line 396: endif
line 397: 
line 398: if !has_key(g:polyglot_is_disabled, 'verilog')
line 399:   au BufNewFile,BufRead *.v setf verilog
line 400: endif
line 401: 
line 402: if !has_key(g:polyglot_is_disabled, 'vera')
line 403:   au BufNewFile,BufRead *.vr,*.vrh,*.vri setf vera
line 404: endif
line 405: 
line 406: if !has_key(g:polyglot_is_disabled, 'upstart')
line 407:   au BufNewFile,BufRead */.config/upstart/*.conf,*/.config/upstart/*.override,*/.init/*.conf,*/.init/*.override,*/etc/init/*.conf,*/etc/init/*.override,*/usr/share/upstart/*.conf,*/usr/share/upstart/*.override setf upstart
line 408: endif
line 409: 
line 410: if !has_key(g:polyglot_is_disabled, 'updatedb')
line 411:   au BufNewFile,BufRead */etc/updatedb.conf setf updatedb
line 412: endif
line 413: 
line 414: if !has_key(g:polyglot_is_disabled, 'uc')
line 415:   au BufNewFile,BufRead *.uc setf uc
line 416: endif
line 417: 
line 418: if !has_key(g:polyglot_is_disabled, 'udevperm')
line 419:   au BufNewFile,BufRead */etc/udev/permissions.d/*.permissions setf udevperm
line 420: endif
line 421: 
line 422: if !has_key(g:polyglot_is_disabled, 'udevconf')
line 423:   au BufNewFile,BufRead */etc/udev/udev.conf setf udevconf
line 424: endif
line 425: 
line 426: if !has_key(g:polyglot_is_disabled, 'uil')
line 427:   au BufNewFile,BufRead *.uil,*.uit setf uil
line 428: endif
line 429: 
line 430: if !has_key(g:polyglot_is_disabled, 'tsscl')
line 431:   au BufNewFile,BufRead *.tsscl setf tsscl
line 432: endif
line 433: 
line 434: if !has_key(g:polyglot_is_disabled, 'tssop')
line 435:   au BufNewFile,BufRead *.tssop setf tssop
line 436: endif
line 437: 
line 438: if !has_key(g:polyglot_is_disabled, 'tssgm')
line 439:   au BufNewFile,BufRead *.tssgm setf tssgm
line 440: endif
line 441: 
line 442: if !has_key(g:polyglot_is_disabled, 'trustees')
line 443:   au BufNewFile,BufRead trustees.conf setf trustees
line 444: endif
line 445: 
line 446: if !has_key(g:polyglot_is_disabled, 'treetop')
line 447:   au BufNewFile,BufRead *.treetop setf treetop
line 448: endif
line 449: 
line 450: if !has_key(g:polyglot_is_disabled, 'tpp')
line 451:   au BufNewFile,BufRead *.tpp setf tpp
line 452: endif
line 453: 
line 454: if !has_key(g:polyglot_is_disabled, 'tidy')
line 455:   au BufNewFile,BufRead {.,}tidyrc,tidy.conf,tidyrc setf tidy
line 456: endif
line 457: 
line 458: if !has_key(g:polyglot_is_disabled, 'texmf')
line 459:   au BufNewFile,BufRead texmf.cnf setf texmf
line 460: endif
line 461: 
line 462: if !has_key(g:polyglot_is_disabled, 'texinfo')
line 463:   au BufNewFile,BufRead *.texi,*.texinfo,*.txi setf texinfo
line 464: endif
line 465: 
line 466: if !has_key(g:polyglot_is_disabled, 'tex')
line 467:   au BufNewFile,BufRead *.bbl,*.dtx,*.latex,*.ltx,*.sty setf tex
line 468: endif
line 469: 
line 470: if !has_key(g:polyglot_is_disabled, 'terminfo')
line 471:   au BufNewFile,BufRead *.ti setf terminfo
line 472: endif
line 473: 
line 474: if !has_key(g:polyglot_is_disabled, 'teraterm')
line 475:   au BufNewFile,BufRead *.ttl setf teraterm
line 476: endif
line 477: 
line 478: if !has_key(g:polyglot_is_disabled, 'tsalt')
line 479:   au BufNewFile,BufRead *.slt setf tsalt
line 480: endif
line 481: 
line 482: if !has_key(g:polyglot_is_disabled, 'tli')
line 483:   au BufNewFile,BufRead *.tli setf tli
line 484: endif
line 485: 
line 486: if !has_key(g:polyglot_is_disabled, 'tcl')
line 487:   au BufNewFile,BufRead *.itcl,*.itk,*.jacl,*.tcl,*.tk setf tcl
line 488: endif
line 489: 
line 490: if !has_key(g:polyglot_is_disabled, 'taskedit')
line 491:   au BufNewFile,BufRead *.task setf taskedit
line 492: endif
line 493: 
line 494: if !has_key(g:polyglot_is_disabled, 'taskdata')
line 495:   au BufNewFile,BufRead {pending,completed,undo}.data setf taskdata
line 496: endif
line 497: 
line 498: if !has_key(g:polyglot_is_disabled, 'tak')
line 499:   au BufNewFile,BufRead *.tak setf tak
line 500: endif
line 501: 
line 502: if !has_key(g:polyglot_is_disabled, 'tags')
line 503:   au BufNewFile,BufRead tags setf tags
line 504: endif
line 505: 
line 506: if !has_key(g:polyglot_is_disabled, 'sudoers')
line 507:   au BufNewFile,BufRead */etc/sudoers,sudoers.tmp setf sudoers
line 508: endif
line 509: 
line 510: if !has_key(g:polyglot_is_disabled, 'sdc')
line 511:   au BufNewFile,BufRead *.sdc setf sdc
line 512: endif
line 513: 
line 514: if !has_key(g:polyglot_is_disabled, 'sysctl')
line 515:   au BufNewFile,BufRead */etc/sysctl.conf,*/etc/sysctl.d/*.conf setf sysctl
line 516: endif
line 517: 
line 518: if !has_key(g:polyglot_is_disabled, 'sil')
line 519:   au BufNewFile,BufRead *.sil setf sil
line 520: endif
line 521: 
line 522: if !has_key(g:polyglot_is_disabled, 'swiftgyb')
line 523:   au BufNewFile,BufRead *.swift.gyb setf swiftgyb
line 524: endif
line 525: 
line 526: if !has_key(g:polyglot_is_disabled, 'voscm')
line 527:   au BufNewFile,BufRead *.cm setf voscm
line 528: endif
line 529: 
line 530: if !has_key(g:polyglot_is_disabled, 'sml')
line 531:   au BufNewFile,BufRead *.sml setf sml
line 532: endif
line 533: 
line 534: if !has_key(g:polyglot_is_disabled, 'stp')
line 535:   au BufNewFile,BufRead *.stp setf stp
line 536: endif
line 537: 
line 538: if !has_key(g:polyglot_is_disabled, 'smcl')
line 539:   au BufNewFile,BufRead *.hlp,*.ihlp,*.smcl setf smcl
line 540: endif
line 541: 
line 542: if !has_key(g:polyglot_is_disabled, 'stata')
line 543:   au BufNewFile,BufRead *.ado,*.do,*.imata,*.mata setf stata
line 544: endif
line 545: 
line 546: if !has_key(g:polyglot_is_disabled, 'sshdconfig')
line 547:   au BufNewFile,BufRead */etc/ssh/sshd_config.d/*.conf,sshd_config setf sshdconfig
line 548: endif
line 549: 
line 550: if !has_key(g:polyglot_is_disabled, 'sshconfig')
line 551:   au BufNewFile,BufRead */.ssh/config,*/etc/ssh/ssh_config.d/*.conf,ssh_config setf sshconfig
line 552: endif
line 553: 
line 554: if !has_key(g:polyglot_is_disabled, 'sqr')
line 555:   au BufNewFile,BufRead *.sqi,*.sqr setf sqr
line 556: endif
line 557: 
line 558: if !has_key(g:polyglot_is_disabled, 'sqlj')
line 559:   au BufNewFile,BufRead *.sqlj setf sqlj
line 560: endif
line 561: 
line 562: if !has_key(g:polyglot_is_disabled, 'squid')
line 563:   au BufNewFile,BufRead squid.conf setf squid
line 564: endif
line 565: 
line 566: if !has_key(g:polyglot_is_disabled, 'spice')
line 567:   au BufNewFile,BufRead *.sp,*.spice setf spice
line 568: endif
line 569: 
line 570: if !has_key(g:polyglot_is_disabled, 'slice')
line 571:   au BufNewFile,BufRead *.ice setf slice
line 572: endif
line 573: 
line 574: if !has_key(g:polyglot_is_disabled, 'spup')
line 575:   au BufNewFile,BufRead *.spd,*.spdata,*.speedup setf spup
line 576: endif
line 577: 
line 578: if !has_key(g:polyglot_is_disabled, 'hog')
line 579:   au BufNewFile,BufRead *.hog,snort.conf,vision.conf setf hog
line 580: endif
line 581: 
line 582: if !has_key(g:polyglot_is_disabled, 'mib')
line 583:   au BufNewFile,BufRead *.mib,*.my setf mib
line 584: endif
line 585: 
line 586: if !has_key(g:polyglot_is_disabled, 'snobol4')
line 587:   au BufNewFile,BufRead *.sno,*.spt setf snobol4
line 588: endif
line 589: 
line 590: if !has_key(g:polyglot_is_disabled, 'smith')
line 591:   au BufNewFile,BufRead *.smith,*.smt setf smith
line 592: endif
line 593: 
line 594: if !has_key(g:polyglot_is_disabled, 'st')
line 595:   au BufNewFile,BufRead *.st setf st
line 596: endif
line 597: 
line 598: if !has_key(g:polyglot_is_disabled, 'slrnsc')
line 599:   au BufNewFile,BufRead *.score setf slrnsc
line 600: endif
line 601: 
line 602: if !has_key(g:polyglot_is_disabled, 'slrnrc')
line 603:   au BufNewFile,BufRead {.,}slrnrc setf slrnrc
line 604: endif
line 605: 
line 606: if !has_key(g:polyglot_is_disabled, 'skill')
line 607:   au BufNewFile,BufRead *.cdf,*.il,*.ils setf skill
line 608: endif
line 609: 
line 610: if !has_key(g:polyglot_is_disabled, 'sisu')
line 611:   au BufNewFile,BufRead *.-sst,*.-sst.meta,*._sst,*._sst.meta,*.ssi,*.ssm,*.sst,*.sst.meta setf sisu
line 612: endif
line 613: 
line 614: if !has_key(g:polyglot_is_disabled, 'sinda')
line 615:   au BufNewFile,BufRead *.s85,*.sin setf sinda
line 616: endif
line 617: 
line 618: if !has_key(g:polyglot_is_disabled, 'simula')
line 619:   au BufNewFile,BufRead *.sim setf simula
line 620: endif
line 621: 
line 622: if !has_key(g:polyglot_is_disabled, 'screen')
line 623:   au BufNewFile,BufRead {.,}screenrc,screenrc setf screen
line 624: endif
line 625: 
line 626: if !has_key(g:polyglot_is_disabled, 'scheme')
line 627:   au BufNewFile,BufRead *.scm,*.ss setf scheme
line 628: endif
line 629: 
line 630: if !has_key(g:polyglot_is_disabled, 'catalog')
line 631:   au BufNewFile,BufRead catalog setf catalog
line 632:   au BufNewFile,BufRead sgml.catalog* call s:StarSetf('catalog')
line 633: endif
line 634: 
line 635: if !has_key(g:polyglot_is_disabled, 'setserial')
line 636:   au BufNewFile,BufRead */etc/serial.conf setf setserial
line 637: endif
line 638: 
line 639: if !has_key(g:polyglot_is_disabled, 'slpspi')
line 640:   au BufNewFile,BufRead */etc/slp.spi setf slpspi
line 641: endif
line 642: 
line 643: if !has_key(g:polyglot_is_disabled, 'spyce')
line 644:   au BufNewFile,BufRead *.spi,*.spy setf spyce
line 645: endif
line 646: 
line 647: if !has_key(g:polyglot_is_disabled, 'slpreg')
line 648:   au BufNewFile,BufRead */etc/slp.reg setf slpreg
line 649: endif
line 650: 
line 651: if !has_key(g:polyglot_is_disabled, 'slpconf')
line 652:   au BufNewFile,BufRead */etc/slp.conf setf slpconf
line 653: endif
line 654: 
line 655: if !has_key(g:polyglot_is_disabled, 'services')
line 656:   au BufNewFile,BufRead */etc/services setf services
line 657: endif
line 658: 
line 659: if !has_key(g:polyglot_is_disabled, 'sm')
line 660:   au BufNewFile,BufRead sendmail.cf setf sm
line 661: endif
line 662: 
line 663: if !has_key(g:polyglot_is_disabled, 'sieve')
line 664:   au BufNewFile,BufRead *.sieve,*.siv setf sieve
line 665: endif
line 666: 
line 667: if !has_key(g:polyglot_is_disabled, 'sdl')
line 668:   au BufNewFile,BufRead *.pr,*.sdl setf sdl
line 669: endif
line 670: 
line 671: if !has_key(g:polyglot_is_disabled, 'sd')
line 672:   au BufNewFile,BufRead *.sd setf sd
line 673: endif
line 674: 
line 675: if !has_key(g:polyglot_is_disabled, 'scilab')
line 676:   au BufNewFile,BufRead *.sce,*.sci setf scilab
line 677: endif
line 678: 
line 679: if !has_key(g:polyglot_is_disabled, 'sbt')
line 680:   au BufNewFile,BufRead *.sbt setf sbt
line 681: endif
line 682: 
line 683: if !has_key(g:polyglot_is_disabled, 'sather')
line 684:   au BufNewFile,BufRead *.sa setf sather
line 685: endif
line 686: 
line 687: if !has_key(g:polyglot_is_disabled, 'sass')
line 688:   au BufNewFile,BufRead *.sass setf sass
line 689: endif
line 690: 
line 691: if !has_key(g:polyglot_is_disabled, 'sas')
line 692:   au BufNewFile,BufRead *.sas setf sas
line 693: endif
line 694: 
line 695: if !has_key(g:polyglot_is_disabled, 'samba')
line 696:   au BufNewFile,BufRead smb.conf setf samba
line 697: endif
line 698: 
line 699: if !has_key(g:polyglot_is_disabled, 'slang')
line 700:   au BufNewFile,BufRead *.sl setf slang
line 701: endif
line 702: 
line 703: if !has_key(g:polyglot_is_disabled, 'rtf')
line 704:   au BufNewFile,BufRead *.rtf setf rtf
line 705: endif
line 706: 
line 707: if !has_key(g:polyglot_is_disabled, 'rpcgen')
line 708:   au BufNewFile,BufRead *.x setf rpcgen
line 709: endif
line 710: 
line 711: if !has_key(g:polyglot_is_disabled, 'robots')
line 712:   au BufNewFile,BufRead robots.txt setf robots
line 713: endif
line 714: 
line 715: if !has_key(g:polyglot_is_disabled, 'rpl')
line 716:   au BufNewFile,BufRead *.rpl setf rpl
line 717: endif
line 718: 
line 719: if !has_key(g:polyglot_is_disabled, 'rng')
line 720:   au BufNewFile,BufRead *.rng setf rng
line 721: endif
line 722: 
line 723: if !has_key(g:polyglot_is_disabled, 'rnc')
line 724:   au BufNewFile,BufRead *.rnc setf rnc
line 725: endif
line 726: 
line 727: if !has_key(g:polyglot_is_disabled, 'resolv')
line 728:   au BufNewFile,BufRead resolv.conf setf resolv
line 729: endif
line 730: 
line 731: if !has_key(g:polyglot_is_disabled, 'remind')
line 732:   au BufNewFile,BufRead *.rem,*.remind,{.,}reminders setf remind
line 733:   au BufNewFile,BufRead .reminders* call s:StarSetf('remind')
line 734: endif
line 735: 
line 736: if !has_key(g:polyglot_is_disabled, 'rrst')
line 737:   au BufNewFile,BufRead *.rrst,*.srst setf rrst
line 738: endif
line 739: 
line 740: if !has_key(g:polyglot_is_disabled, 'rmd')
line 741:   au BufNewFile,BufRead *.rmd,*.smd setf rmd
line 742: endif
line 743: 
line 744: if !has_key(g:polyglot_is_disabled, 'rnoweb')
line 745:   au BufNewFile,BufRead *.rnw,*.snw setf rnoweb
line 746: endif
line 747: 
line 748: if !has_key(g:polyglot_is_disabled, 'rexx')
line 749:   au BufNewFile,BufRead *.jrexx,*.orx,*.rex,*.rexx,*.rexxj,*.rxj,*.rxo,*.testGroup,*.testUnit setf rexx
line 750: endif
line 751: 
line 752: if !has_key(g:polyglot_is_disabled, 'rego')
line 753:   au BufNewFile,BufRead *.rego setf rego
line 754: endif
line 755: 
line 756: if !has_key(g:polyglot_is_disabled, 'rib')
line 757:   au BufNewFile,BufRead *.rib setf rib
line 758: endif
line 759: 
line 760: if !has_key(g:polyglot_is_disabled, 'readline')
line 761:   au BufNewFile,BufRead {.,}inputrc,inputrc setf readline
line 762: endif
line 763: 
line 764: if !has_key(g:polyglot_is_disabled, 'rcs')
line 765:   au BufNewFile,BufRead *\,v setf rcs
line 766: endif
line 767: 
line 768: if !has_key(g:polyglot_is_disabled, 'ratpoison')
line 769:   au BufNewFile,BufRead {.,}ratpoisonrc,ratpoisonrc setf ratpoison
line 770: endif
line 771: 
line 772: if !has_key(g:polyglot_is_disabled, 'radiance')
line 773:   au BufNewFile,BufRead *.mat,*.rad setf radiance
line 774: endif
line 775: 
line 776: if !has_key(g:polyglot_is_disabled, 'pyrex')
line 777:   au BufNewFile,BufRead *.pxd,*.pyx setf pyrex
line 778: endif
line 779: 
line 780: if !has_key(g:polyglot_is_disabled, 'protocols')
line 781:   au BufNewFile,BufRead */etc/protocols setf protocols
line 782: endif
line 783: 
line 784: if !has_key(g:polyglot_is_disabled, 'promela')
line 785:   au BufNewFile,BufRead *.pml setf promela
line 786: endif
line 787: 
line 788: if !has_key(g:polyglot_is_disabled, 'psf')
line 789:   au BufNewFile,BufRead *.psf setf psf
line 790: endif
line 791: 
line 792: if !has_key(g:polyglot_is_disabled, 'procmail')
line 793:   au BufNewFile,BufRead {.,}procmail,{.,}procmailrc setf procmail
line 794: endif
line 795: 
line 796: if !has_key(g:polyglot_is_disabled, 'privoxy')
line 797:   au BufNewFile,BufRead *.action setf privoxy
line 798: endif
line 799: 
line 800: if !has_key(g:polyglot_is_disabled, 'obj')
line 801:   au BufNewFile,BufRead *.obj setf obj
line 802: endif
line 803: 
line 804: if !has_key(g:polyglot_is_disabled, 'ppwiz')
line 805:   au BufNewFile,BufRead *.ih,*.it setf ppwiz
line 806: endif
line 807: 
line 808: if !has_key(g:polyglot_is_disabled, 'pccts')
line 809:   au BufNewFile,BufRead *.g setf pccts
line 810: endif
line 811: 
line 812: if !has_key(g:polyglot_is_disabled, 'povini')
line 813:   au BufNewFile,BufRead {.,}povrayrc setf povini
line 814: endif
line 815: 
line 816: if !has_key(g:polyglot_is_disabled, 'pov')
line 817:   au BufNewFile,BufRead *.pov setf pov
line 818: endif
line 819: 
line 820: if !has_key(g:polyglot_is_disabled, 'ppd')
line 821:   au BufNewFile,BufRead *.ppd setf ppd
line 822: endif
line 823: 
line 824: if !has_key(g:polyglot_is_disabled, 'postscr')
line 825:   au BufNewFile,BufRead *.afm,*.ai,*.eps,*.epsf,*.epsi,*.pfa,*.ps setf postscr
line 826: endif
line 827: 
line 828: if !has_key(g:polyglot_is_disabled, 'pfmain')
line 829:   au BufNewFile,BufRead main.cf setf pfmain
line 830: endif
line 831: 
line 832: if !has_key(g:polyglot_is_disabled, 'po')
line 833:   au BufNewFile,BufRead *.po,*.pot setf po
line 834: endif
line 835: 
line 836: if !has_key(g:polyglot_is_disabled, 'plp')
line 837:   au BufNewFile,BufRead *.plp setf plp
line 838: endif
line 839: 
line 840: if !has_key(g:polyglot_is_disabled, 'plsql')
line 841:   au BufNewFile,BufRead *.pls,*.plsql setf plsql
line 842: endif
line 843: 
line 844: if !has_key(g:polyglot_is_disabled, 'plm')
line 845:   au BufNewFile,BufRead *.p36,*.pac,*.plm setf plm
line 846: endif
line 847: 
line 848: if !has_key(g:polyglot_is_disabled, 'pli')
line 849:   au BufNewFile,BufRead *.pl1,*.pli setf pli
line 850: endif
line 851: 
line 852: if !has_key(g:polyglot_is_disabled, 'pine')
line 853:   au BufNewFile,BufRead {.,}pinerc,{.,}pinercex,pinerc,pinercex setf pine
line 854: endif
line 855: 
line 856: if !has_key(g:polyglot_is_disabled, 'pilrc')
line 857:   au BufNewFile,BufRead *.rcp setf pilrc
line 858: endif
line 859: 
line 860: if !has_key(g:polyglot_is_disabled, 'pinfo')
line 861:   au BufNewFile,BufRead */.pinforc,*/etc/pinforc setf pinfo
line 862: endif
line 863: 
line 864: if !has_key(g:polyglot_is_disabled, 'cmod')
line 865:   au BufNewFile,BufRead *.cmod setf cmod
line 866: endif
line 867: 
line 868: if !has_key(g:polyglot_is_disabled, 'pike')
line 869:   au BufNewFile,BufRead *.pike,*.pmod setf pike
line 870: endif
line 871: 
line 872: if !has_key(g:polyglot_is_disabled, 'pdf')
line 873:   au BufNewFile,BufRead *.pdf setf pdf
line 874: endif
line 875: 
line 876: if !has_key(g:polyglot_is_disabled, 'pascal')
line 877:   au BufNewFile,BufRead *.dpr,*.lpr,*.pas,*.pp setf pascal
line 878: endif
line 879: 
line 880: if !has_key(g:polyglot_is_disabled, 'passwd')
line 881:   au BufNewFile,BufRead */etc/passwd,*/etc/passwd-,*/etc/passwd.edit,*/etc/shadow,*/etc/shadow-,*/etc/shadow.edit,*/var/backups/passwd.bak,*/var/backups/shadow.bak setf passwd
line 882: endif
line 883: 
line 884: if !has_key(g:polyglot_is_disabled, 'papp')
line 885:   au BufNewFile,BufRead *.papp,*.pxml,*.pxsl setf papp
line 886: endif
line 887: 
line 888: if !has_key(g:polyglot_is_disabled, 'pamenv')
line 889:   au BufNewFile,BufRead {.,}pam_environment,pam_env.conf setf pamenv
line 890: endif
line 891: 
line 892: if !has_key(g:polyglot_is_disabled, 'pamconf')
line 893:   au BufNewFile,BufRead */etc/pam.conf setf pamconf
line 894:   au BufNewFile,BufRead */etc/pam.d/* call s:StarSetf('pamconf')
line 895: endif
line 896: 
line 897: if !has_key(g:polyglot_is_disabled, 'pf')
line 898:   au BufNewFile,BufRead pf.conf setf pf
line 899: endif
line 900: 
line 901: if !has_key(g:polyglot_is_disabled, 'ora')
line 902:   au BufNewFile,BufRead *.ora setf ora
line 903: endif
line 904: 
line 905: if !has_key(g:polyglot_is_disabled, 'opl')
line 906:   au BufNewFile,BufRead *.[Oo][Pp][Ll] setf opl
line 907: endif
line 908: 
line 909: if !has_key(g:polyglot_is_disabled, 'openroad')
line 910:   au BufNewFile,BufRead *.or setf openroad
line 911: endif
line 912: 
line 913: if !has_key(g:polyglot_is_disabled, 'omnimark')
line 914:   au BufNewFile,BufRead *.xin,*.xom setf omnimark
line 915: endif
line 916: 
line 917: if !has_key(g:polyglot_is_disabled, 'occam')
line 918:   au BufNewFile,BufRead *.occ setf occam
line 919: endif
line 920: 
line 921: if !has_key(g:polyglot_is_disabled, 'nsis')
line 922:   au BufNewFile,BufRead *.nsh,*.nsi setf nsis
line 923: endif
line 924: 
line 925: if !has_key(g:polyglot_is_disabled, 'nqc')
line 926:   au BufNewFile,BufRead *.nqc setf nqc
line 927: endif
line 928: 
line 929: if !has_key(g:polyglot_is_disabled, 'nroff')
line 930:   au BufNewFile,BufRead *.1,*.1in,*.1m,*.1x,*.2,*.3,*.3in,*.3m,*.3p,*.3pm,*.3qt,*.3x,*.4,*.5,*.6,*.7,*.8,*.9,*.man,*.mdoc setf nroff
line 931:   au BufNewFile,BufRead *.mom,*.nr,*.roff,*.tmac,*.tr setf nroff
line 932:   au BufNewFile,BufRead tmac.* call s:StarSetf('nroff')
line 933: endif
line 934: 
line 935: if !has_key(g:polyglot_is_disabled, 'ncf')
line 936:   au BufNewFile,BufRead *.ncf setf ncf
line 937: endif
line 938: 
line 939: if !has_key(g:polyglot_is_disabled, 'ninja')
line 940:   au BufNewFile,BufRead *.ninja setf ninja
line 941: endif
line 942: 
line 943: if !has_key(g:polyglot_is_disabled, 'netrc')
line 944:   au BufNewFile,BufRead {.,}netrc setf netrc
line 945: endif
line 946: 
line 947: if !has_key(g:polyglot_is_disabled, 'neomuttrc')
line 948:   au BufNewFile,BufRead Neomuttrc setf neomuttrc
line 949:   au BufNewFile,BufRead neomuttrc* call s:StarSetf('neomuttrc')
line 950:   au BufNewFile,BufRead Neomuttrc* call s:StarSetf('neomuttrc')
line 951:   au BufNewFile,BufRead .neomuttrc* call s:StarSetf('neomuttrc')
line 952:   au BufNewFile,BufRead */.neomutt/neomuttrc* call s:StarSetf('neomuttrc')
line 953: endif
line 954: 
line 955: if !has_key(g:polyglot_is_disabled, 'natural')
line 956:   au BufNewFile,BufRead *.NS[ACGLMNPS] setf natural
line 957: endif
line 958: 
line 959: if !has_key(g:polyglot_is_disabled, 'nanorc')
line 960:   au BufNewFile,BufRead *.nanorc,*/etc/nanorc setf nanorc
line 961: endif
line 962: 
line 963: if !has_key(g:polyglot_is_disabled, 'n1ql')
line 964:   au BufNewFile,BufRead *.n1ql,*.nql setf n1ql
line 965: endif
line 966: 
line 967: if !has_key(g:polyglot_is_disabled, 'mush')
line 968:   au BufNewFile,BufRead *.mush setf mush
line 969: endif
line 970: 
line 971: if !has_key(g:polyglot_is_disabled, 'mupad')
line 972:   au BufNewFile,BufRead *.mu setf mupad
line 973: endif
line 974: 
line 975: if !has_key(g:polyglot_is_disabled, 'muttrc')
line 976:   au BufNewFile,BufRead Mutt{ng,}rc setf muttrc
line 977:   au BufNewFile,BufRead mutt{ng,}rc* call s:StarSetf('muttrc')
line 978:   au BufNewFile,BufRead Mutt{ng,}rc* call s:StarSetf('muttrc')
line 979:   au BufNewFile,BufRead .mutt{ng,}rc* call s:StarSetf('muttrc')
line 980:   au BufNewFile,BufRead */etc/Muttrc.d/* call s:StarSetf('muttrc')
line 981:   au BufNewFile,BufRead */.mutt{ng,}/mutt{ng,}rc* call s:StarSetf('muttrc')
line 982: endif
line 983: 
line 984: if !has_key(g:polyglot_is_disabled, 'msql')
line 985:   au BufNewFile,BufRead *.msql setf msql
line 986: endif
line 987: 
line 988: if !has_key(g:polyglot_is_disabled, 'mrxvtrc')
line 989:   au BufNewFile,BufRead {.,}mrxvtrc,mrxvtrc setf mrxvtrc
line 990: endif
line 991: 
line 992: if !has_key(g:polyglot_is_disabled, 'srec')
line 993:   au BufNewFile,BufRead *.mot,*.s19,*.s28,*.s37,*.srec setf srec
line 994: endif
line 995: 
line 996: if !has_key(g:polyglot_is_disabled, 'mplayerconf')
line 997:   au BufNewFile,BufRead */.mplayer/config,mplayer.conf setf mplayerconf
line 998: endif
line 999: 
line 1000: if !has_key(g:polyglot_is_disabled, 'modconf')
line 1001:   au BufNewFile,BufRead */etc/conf.modules,*/etc/modules,*/etc/modules.conf setf modconf
line 1002:   au BufNewFile,BufRead */etc/modprobe.* call s:StarSetf('modconf')
line 1003: endif
line 1004: 
line 1005: if !has_key(g:polyglot_is_disabled, 'moo')
line 1006:   au BufNewFile,BufRead *.moo setf moo
line 1007: endif
line 1008: 
line 1009: if !has_key(g:polyglot_is_disabled, 'monk')
line 1010:   au BufNewFile,BufRead *.isc,*.monk,*.ssc,*.tsc setf monk
line 1011: endif
line 1012: 
line 1013: if !has_key(g:polyglot_is_disabled, 'modula3')
line 1014:   au BufNewFile,BufRead *.[mi][3g] setf modula3
line 1015: endif
line 1016: 
line 1017: if !has_key(g:polyglot_is_disabled, 'modula2')
line 1018:   au BufNewFile,BufRead *.DEF,*.MOD,*.m2,*.mi setf modula2
line 1019: endif
line 1020: 
line 1021: if !has_key(g:polyglot_is_disabled, 'mmp')
line 1022:   au BufNewFile,BufRead *.mmp setf mmp
line 1023: endif
line 1024: 
line 1025: if !has_key(g:polyglot_is_disabled, 'mix')
line 1026:   au BufNewFile,BufRead *.mix,*.mixal setf mix
line 1027: endif
line 1028: 
line 1029: if !has_key(g:polyglot_is_disabled, 'mgl')
line 1030:   au BufNewFile,BufRead *.mgl setf mgl
line 1031: endif
line 1032: 
line 1033: if !has_key(g:polyglot_is_disabled, 'mp')
line 1034:   au BufNewFile,BufRead *.mp setf mp
line 1035: endif
line 1036: 
line 1037: if !has_key(g:polyglot_is_disabled, 'mf')
line 1038:   au BufNewFile,BufRead *.mf setf mf
line 1039: endif
line 1040: 
line 1041: if !has_key(g:polyglot_is_disabled, 'messages')
line 1042:   au BufNewFile,BufRead */log/{auth,cron,daemon,debug,kern,lpr,mail,messages,news/news,syslog,user}{,.log,.err,.info,.warn,.crit,.notice}{,.[0-9]*,-[0-9]*} setf messages
line 1043: endif
line 1044: 
line 1045: if !has_key(g:polyglot_is_disabled, 'hgcommit')
line 1046:   au BufNewFile,BufRead hg-editor-*.txt setf hgcommit
line 1047: endif
line 1048: 
line 1049: if !has_key(g:polyglot_is_disabled, 'mel')
line 1050:   au BufNewFile,BufRead *.mel setf mel
line 1051: endif
line 1052: 
line 1053: if !has_key(g:polyglot_is_disabled, 'maple')
line 1054:   au BufNewFile,BufRead *.mpl,*.mv,*.mws setf maple
line 1055: endif
line 1056: 
line 1057: if !has_key(g:polyglot_is_disabled, 'manconf')
line 1058:   au BufNewFile,BufRead */etc/man.conf,man.config setf manconf
line 1059: endif
line 1060: 
line 1061: if !has_key(g:polyglot_is_disabled, 'mallard')
line 1062:   au BufNewFile,BufRead *.page setf mallard
line 1063: endif
line 1064: 
line 1065: if !has_key(g:polyglot_is_disabled, 'ist')
line 1066:   au BufNewFile,BufRead *.ist,*.mst setf ist
line 1067: endif
line 1068: 
line 1069: if !has_key(g:polyglot_is_disabled, 'mailcap')
line 1070:   au BufNewFile,BufRead {.,}mailcap,mailcap setf mailcap
line 1071: endif
line 1072: 
line 1073: if !has_key(g:polyglot_is_disabled, 'mailaliases')
line 1074:   au BufNewFile,BufRead */etc/aliases,*/etc/mail/aliases setf mailaliases
line 1075: endif
line 1076: 
line 1077: if !has_key(g:polyglot_is_disabled, 'mail')
line 1078:   au BufNewFile,BufRead *.eml,{.,}article,{.,}article.\d\+,{.,}followup,{.,}letter,{.,}letter.\d\+,/tmp/SLRN[0-9A-Z.]\+,ae\d\+.txt,mutt[[:alnum:]_-]\\\{6\},mutt{ng,}-*-\w\+,neomutt-*-\w\+,neomutt[[:alnum:]_-]\\\{6\},pico.\d\+,snd.\d\+,{neo,}mutt[[:alnum:]._-]\\\{6\} setf mail
line 1079:   au BufNewFile,BufRead reportbug-* call s:StarSetf('mail')
line 1080: endif
line 1081: 
line 1082: if !has_key(g:polyglot_is_disabled, 'mgp')
line 1083:   au BufNewFile,BufRead *.mgp setf mgp
line 1084: endif
line 1085: 
line 1086: if !has_key(g:polyglot_is_disabled, 'lss')
line 1087:   au BufNewFile,BufRead *.lss setf lss
line 1088: endif
line 1089: 
line 1090: if !has_key(g:polyglot_is_disabled, 'lsl')
line 1091:   au BufNewFile,BufRead *.lsl setf lsl
line 1092: endif
line 1093: 
line 1094: if !has_key(g:polyglot_is_disabled, 'lout')
line 1095:   au BufNewFile,BufRead *.lou,*.lout setf lout
line 1096: endif
line 1097: 
line 1098: if !has_key(g:polyglot_is_disabled, 'lotos')
line 1099:   au BufNewFile,BufRead *.lot,*.lotos setf lotos
line 1100: endif
line 1101: 
line 1102: if !has_key(g:polyglot_is_disabled, 'logtalk')
line 1103:   au BufNewFile,BufRead *.lgt setf logtalk
line 1104: endif
line 1105: 
line 1106: if !has_key(g:polyglot_is_disabled, 'logindefs')
line 1107:   au BufNewFile,BufRead */etc/login.defs setf logindefs
line 1108: endif
line 1109: 
line 1110: if !has_key(g:polyglot_is_disabled, 'loginaccess')
line 1111:   au BufNewFile,BufRead */etc/login.access setf loginaccess
line 1112: endif
line 1113: 
line 1114: if !has_key(g:polyglot_is_disabled, 'litestep')
line 1115:   au BufNewFile,BufRead */LiteStep/*/*.rc setf litestep
line 1116: endif
line 1117: 
line 1118: if !has_key(g:polyglot_is_disabled, 'lite')
line 1119:   au BufNewFile,BufRead *.lite,*.lt setf lite
line 1120: endif
line 1121: 
line 1122: if !has_key(g:polyglot_is_disabled, 'liquid')
line 1123:   au BufNewFile,BufRead *.liquid setf liquid
line 1124: endif
line 1125: 
line 1126: if !has_key(g:polyglot_is_disabled, 'lisp')
line 1127:   au BufNewFile,BufRead *.cl,*.el,*.lisp,*.lsp,{.,}emacs,{.,}sawfishrc,{.,}sbclrc,sbclrc setf lisp
line 1128: endif
line 1129: 
line 1130: if !has_key(g:polyglot_is_disabled, 'lilo')
line 1131:   au BufNewFile,BufRead lilo.conf setf lilo
line 1132:   au BufNewFile,BufRead lilo.conf* call s:StarSetf('lilo')
line 1133: endif
line 1134: 
line 1135: if !has_key(g:polyglot_is_disabled, 'lifelines')
line 1136:   au BufNewFile,BufRead *.ll setf lifelines
line 1137: endif
line 1138: 
line 1139: if !has_key(g:polyglot_is_disabled, 'lftp')
line 1140:   au BufNewFile,BufRead *lftp/rc,{.,}lftprc,lftp.conf setf lftp
line 1141: endif
line 1142: 
line 1143: if !has_key(g:polyglot_is_disabled, 'sensors')
line 1144:   au BufNewFile,BufRead */etc/sensors.conf,*/etc/sensors3.conf setf sensors
line 1145: endif
line 1146: 
line 1147: if !has_key(g:polyglot_is_disabled, 'libao')
line 1148:   au BufNewFile,BufRead */.libao,*/etc/libao.conf setf libao
line 1149: endif
line 1150: 
line 1151: if !has_key(g:polyglot_is_disabled, 'lex')
line 1152:   au BufNewFile,BufRead *.l,*.l++,*.lex,*.lxx setf lex
line 1153: endif
line 1154: 
line 1155: if !has_key(g:polyglot_is_disabled, 'ld')
line 1156:   au BufNewFile,BufRead *.ld setf ld
line 1157: endif
line 1158: 
line 1159: if !has_key(g:polyglot_is_disabled, 'ldif')
line 1160:   au BufNewFile,BufRead *.ldif setf ldif
line 1161: endif
line 1162: 
line 1163: if !has_key(g:polyglot_is_disabled, 'lprolog')
line 1164:   au BufNewFile,BufRead *.sig setf lprolog
line 1165: endif
line 1166: 
line 1167: if !has_key(g:polyglot_is_disabled, 'limits')
line 1168:   au BufNewFile,BufRead */etc/*limits.conf,*/etc/*limits.d/*.conf,*/etc/limits setf limits
line 1169: endif
line 1170: 
line 1171: if !has_key(g:polyglot_is_disabled, 'latte')
line 1172:   au BufNewFile,BufRead *.latte,*.lte setf latte
line 1173: endif
line 1174: 
line 1175: if !has_key(g:polyglot_is_disabled, 'lace')
line 1176:   au BufNewFile,BufRead *.ACE,*.ace setf lace
line 1177: endif
line 1178: 
line 1179: if !has_key(g:polyglot_is_disabled, 'kconfig')
line 1180:   au BufNewFile,BufRead Kconfig,Kconfig.debug setf kconfig
line 1181:   au BufNewFile,BufRead Kconfig.* call s:StarSetf('kconfig')
line 1182: endif
line 1183: 
line 1184: if !has_key(g:polyglot_is_disabled, 'kscript')
line 1185:   au BufNewFile,BufRead *.ks setf kscript
line 1186: endif
line 1187: 
line 1188: if !has_key(g:polyglot_is_disabled, 'kivy')
line 1189:   au BufNewFile,BufRead *.kv setf kivy
line 1190: endif
line 1191: 
line 1192: if !has_key(g:polyglot_is_disabled, 'kwt')
line 1193:   au BufNewFile,BufRead *.k setf kwt
line 1194: endif
line 1195: 
line 1196: if !has_key(g:polyglot_is_disabled, 'kix')
line 1197:   au BufNewFile,BufRead *.kix setf kix
line 1198: endif
line 1199: 
line 1200: if !has_key(g:polyglot_is_disabled, 'jovial')
line 1201:   au BufNewFile,BufRead *.j73,*.jov,*.jovial setf jovial
line 1202: endif
line 1203: 
line 1204: if !has_key(g:polyglot_is_disabled, 'jgraph')
line 1205:   au BufNewFile,BufRead *.jgr setf jgraph
line 1206: endif
line 1207: 
line 1208: if !has_key(g:polyglot_is_disabled, 'jess')
line 1209:   au BufNewFile,BufRead *.clp setf jess
line 1210: endif
line 1211: 
line 1212: if !has_key(g:polyglot_is_disabled, 'jproperties')
line 1213:   au BufNewFile,BufRead *.properties,*.properties_??,*.properties_??_?? setf jproperties
line 1214:   au BufNewFile,BufRead *.properties_??_??_* call s:StarSetf('jproperties')
line 1215: endif
line 1216: 
line 1217: if !has_key(g:polyglot_is_disabled, 'jsp')
line 1218:   au BufNewFile,BufRead *.jsp setf jsp
line 1219: endif
line 1220: 
line 1221: if !has_key(g:polyglot_is_disabled, 'javacc')
line 1222:   au BufNewFile,BufRead *.jj,*.jjt setf javacc
line 1223: endif
line 1224: 
line 1225: if !has_key(g:polyglot_is_disabled, 'java')
line 1226:   au BufNewFile,BufRead *.jav,*.java setf java
line 1227: endif
line 1228: 
line 1229: if !has_key(g:polyglot_is_disabled, 'jam')
line 1230:   au BufNewFile,BufRead *.jpl,*.jpr setf jam
line 1231:   au BufNewFile,BufRead Prl*.* call s:StarSetf('jam')
line 1232:   au BufNewFile,BufRead JAM*.* call s:StarSetf('jam')
line 1233: endif
line 1234: 
line 1235: if !has_key(g:polyglot_is_disabled, 'jal')
line 1236:   au BufNewFile,BufRead *.JAL,*.jal setf jal
line 1237: endif
line 1238: 
line 1239: if !has_key(g:polyglot_is_disabled, 'j')
line 1240:   au BufNewFile,BufRead *.ijs setf j
line 1241: endif
line 1242: 
line 1243: if !has_key(g:polyglot_is_disabled, 'iss')
line 1244:   au BufNewFile,BufRead *.iss setf iss
line 1245: endif
line 1246: 
line 1247: if !has_key(g:polyglot_is_disabled, 'inittab')
line 1248:   au BufNewFile,BufRead inittab setf inittab
line 1249: endif
line 1250: 
line 1251: if !has_key(g:polyglot_is_disabled, 'fgl')
line 1252:   au BufNewFile,BufRead *.4gh,*.4gl,*.m4gl setf fgl
line 1253: endif
line 1254: 
line 1255: if !has_key(g:polyglot_is_disabled, 'ipfilter')
line 1256:   au BufNewFile,BufRead ipf.conf,ipf.rules,ipf6.conf setf ipfilter
line 1257: endif
line 1258: 
line 1259: if !has_key(g:polyglot_is_disabled, 'usw2kagtlog')
line 1260:   au BufNewFile,BufRead *.usw2kagt.log\c,usw2kagt.*.log\c,usw2kagt.log\c setf usw2kagtlog
line 1261: endif
line 1262: 
line 1263: if !has_key(g:polyglot_is_disabled, 'usserverlog')
line 1264:   au BufNewFile,BufRead *.usserver.log\c,usserver.*.log\c,usserver.log\c setf usserverlog
line 1265: endif
line 1266: 
line 1267: if !has_key(g:polyglot_is_disabled, 'upstreaminstalllog')
line 1268:   au BufNewFile,BufRead *.upstreaminstall.log\c,upstreaminstall.*.log\c,upstreaminstall.log\c setf upstreaminstalllog
line 1269: endif
line 1270: 
line 1271: if !has_key(g:polyglot_is_disabled, 'upstreamlog')
line 1272:   au BufNewFile,BufRead *.upstream.log\c,UPSTREAM-*.log\c,fdrupstream.log,upstream.*.log\c,upstream.log\c setf upstreamlog
line 1273: endif
line 1274: 
line 1275: if !has_key(g:polyglot_is_disabled, 'upstreamdat')
line 1276:   au BufNewFile,BufRead *.upstream.dat\c,upstream.*.dat\c,upstream.dat\c setf upstreamdat
line 1277: endif
line 1278: 
line 1279: if !has_key(g:polyglot_is_disabled, 'initng')
line 1280:   au BufNewFile,BufRead *.ii,*/etc/initng/*/*.i setf initng
line 1281: endif
line 1282: 
line 1283: if !has_key(g:polyglot_is_disabled, 'inform')
line 1284:   au BufNewFile,BufRead *.INF,*.inf setf inform
line 1285: endif
line 1286: 
line 1287: if !has_key(g:polyglot_is_disabled, 'indent')
line 1288:   au BufNewFile,BufRead {.,}indent.pro,indentrc setf indent
line 1289: endif
line 1290: 
line 1291: if !has_key(g:polyglot_is_disabled, 'icemenu')
line 1292:   au BufNewFile,BufRead */.icewm/menu setf icemenu
line 1293: endif
line 1294: 
line 1295: if !has_key(g:polyglot_is_disabled, 'msidl')
line 1296:   au BufNewFile,BufRead *.mof,*.odl setf msidl
line 1297: endif
line 1298: 
line 1299: if !has_key(g:polyglot_is_disabled, 'icon')
line 1300:   au BufNewFile,BufRead *.icn setf icon
line 1301: endif
line 1302: 
line 1303: if !has_key(g:polyglot_is_disabled, 'hb')
line 1304:   au BufNewFile,BufRead *.hb setf hb
line 1305: endif
line 1306: 
line 1307: if !has_key(g:polyglot_is_disabled, 'hostsaccess')
line 1308:   au BufNewFile,BufRead */etc/hosts.allow,*/etc/hosts.deny setf hostsaccess
line 1309: endif
line 1310: 
line 1311: if !has_key(g:polyglot_is_disabled, 'hostconf')
line 1312:   au BufNewFile,BufRead */etc/host.conf setf hostconf
line 1313: endif
line 1314: 
line 1315: if !has_key(g:polyglot_is_disabled, 'template')
line 1316:   au BufNewFile,BufRead *.tmpl setf template
line 1317: endif
line 1318: 
line 1319: if !has_key(g:polyglot_is_disabled, 'htmlm4')
line 1320:   au BufNewFile,BufRead *.html.m4 setf htmlm4
line 1321: endif
line 1322: 
line 1323: if !has_key(g:polyglot_is_disabled, 'tilde')
line 1324:   au BufNewFile,BufRead *.t.html setf tilde
line 1325: endif
line 1326: 
line 1327: if !has_key(g:polyglot_is_disabled, 'hollywood')
line 1328:   au BufNewFile,BufRead *.hws setf hollywood
line 1329: endif
line 1330: 
line 1331: if !has_key(g:polyglot_is_disabled, 'hex')
line 1332:   au BufNewFile,BufRead *.h32,*.hex setf hex
line 1333: endif
line 1334: 
line 1335: if !has_key(g:polyglot_is_disabled, 'hastepreproc')
line 1336:   au BufNewFile,BufRead *.htpp setf hastepreproc
line 1337: endif
line 1338: 
line 1339: if !has_key(g:polyglot_is_disabled, 'haste')
line 1340:   au BufNewFile,BufRead *.ht setf haste
line 1341: endif
line 1342: 
line 1343: if !has_key(g:polyglot_is_disabled, 'chaskell')
line 1344:   au BufNewFile,BufRead *.chs setf chaskell
line 1345: endif
line 1346: 
line 1347: if !has_key(g:polyglot_is_disabled, 'lhaskell')
line 1348:   au BufNewFile,BufRead *.lhs setf lhaskell
line 1349: endif
line 1350: 
line 1351: if !has_key(g:polyglot_is_disabled, 'gtkrc')
line 1352:   au BufNewFile,BufRead {.,}gtkrc,gtkrc setf gtkrc
line 1353:   au BufNewFile,BufRead gtkrc* call s:StarSetf('gtkrc')
line 1354:   au BufNewFile,BufRead .gtkrc* call s:StarSetf('gtkrc')
line 1355: endif
line 1356: 
line 1357: if !has_key(g:polyglot_is_disabled, 'group')
line 1358:   au BufNewFile,BufRead */etc/group,*/etc/group-,*/etc/group.edit,*/etc/gshadow,*/etc/gshadow-,*/etc/gshadow.edit,*/var/backups/group.bak,*/var/backups/gshadow.bak setf group
line 1359: endif
line 1360: 
line 1361: if !has_key(g:polyglot_is_disabled, 'gsp')
line 1362:   au BufNewFile,BufRead *.gsp setf gsp
line 1363: endif
line 1364: 
line 1365: if !has_key(g:polyglot_is_disabled, 'gretl')
line 1366:   au BufNewFile,BufRead *.gretl setf gretl
line 1367: endif
line 1368: 
line 1369: if !has_key(g:polyglot_is_disabled, 'grads')
line 1370:   au BufNewFile,BufRead *.gs setf grads
line 1371: endif
line 1372: 
line 1373: if !has_key(g:polyglot_is_disabled, 'gitolite')
line 1374:   au BufNewFile,BufRead gitolite.conf setf gitolite
line 1375:   au BufNewFile,BufRead */gitolite-admin/conf/* call s:StarSetf('gitolite')
line 1376: endif
line 1377: 
line 1378: if !has_key(g:polyglot_is_disabled, 'gnash')
line 1379:   au BufNewFile,BufRead {.,}gnashpluginrc,{.,}gnashrc,gnashpluginrc,gnashrc setf gnash
line 1380: endif
line 1381: 
line 1382: if !has_key(g:polyglot_is_disabled, 'gpg')
line 1383:   au BufNewFile,BufRead */.gnupg/gpg.conf,*/.gnupg/options,*/usr/*/gnupg/options.skel setf gpg
line 1384: endif
line 1385: 
line 1386: if !has_key(g:polyglot_is_disabled, 'gp')
line 1387:   au BufNewFile,BufRead *.gp,{.,}gprc setf gp
line 1388: endif
line 1389: 
line 1390: if !has_key(g:polyglot_is_disabled, 'gkrellmrc')
line 1391:   au BufNewFile,BufRead gkrellmrc,gkrellmrc_? setf gkrellmrc
line 1392: endif
line 1393: 
line 1394: if !has_key(g:polyglot_is_disabled, 'gedcom')
line 1395:   au BufNewFile,BufRead *.ged,lltxxxxx.txt setf gedcom
line 1396:   au BufNewFile,BufRead */tmp/lltmp* call s:StarSetf('gedcom')
line 1397: endif
line 1398: 
line 1399: if !has_key(g:polyglot_is_disabled, 'gdmo')
line 1400:   au BufNewFile,BufRead *.gdmo,*.mo setf gdmo
line 1401: endif
line 1402: 
line 1403: if !has_key(g:polyglot_is_disabled, 'gdb')
line 1404:   au BufNewFile,BufRead {.,}gdbinit setf gdb
line 1405: endif
line 1406: 
line 1407: if !has_key(g:polyglot_is_disabled, 'fstab')
line 1408:   au BufNewFile,BufRead fstab,mtab setf fstab
line 1409: endif
line 1410: 
line 1411: if !has_key(g:polyglot_is_disabled, 'framescript')
line 1412:   au BufNewFile,BufRead *.fsl setf framescript
line 1413: endif
line 1414: 
line 1415: if !has_key(g:polyglot_is_disabled, 'fortran')
line 1416:   au BufNewFile,BufRead *.f,*.f03,*.f08,*.f77,*.f90,*.f95,*.for,*.fortran,*.fpp,*.ftn setf fortran
line 1417: endif
line 1418: 
line 1419: if !has_key(g:polyglot_is_disabled, 'reva')
line 1420:   au BufNewFile,BufRead *.frt setf reva
line 1421: endif
line 1422: 
line 1423: if !has_key(g:polyglot_is_disabled, 'focexec')
line 1424:   au BufNewFile,BufRead *.fex,*.focexec setf focexec
line 1425: endif
line 1426: 
line 1427: if !has_key(g:polyglot_is_disabled, 'fetchmail')
line 1428:   au BufNewFile,BufRead {.,}fetchmailrc setf fetchmail
line 1429: endif
line 1430: 
line 1431: if !has_key(g:polyglot_is_disabled, 'fan')
line 1432:   au BufNewFile,BufRead *.fan,*.fwt setf fan
line 1433: endif
line 1434: 
line 1435: if !has_key(g:polyglot_is_disabled, 'falcon')
line 1436:   au BufNewFile,BufRead *.fal setf falcon
line 1437: endif
line 1438: 
line 1439: if !has_key(g:polyglot_is_disabled, 'exports')
line 1440:   au BufNewFile,BufRead exports setf exports
line 1441: endif
line 1442: 
line 1443: if !has_key(g:polyglot_is_disabled, 'expect')
line 1444:   au BufNewFile,BufRead *.exp setf expect
line 1445: endif
line 1446: 
line 1447: if !has_key(g:polyglot_is_disabled, 'exim')
line 1448:   au BufNewFile,BufRead exim.conf setf exim
line 1449: endif
line 1450: 
line 1451: if !has_key(g:polyglot_is_disabled, 'csc')
line 1452:   au BufNewFile,BufRead *.csc setf csc
line 1453: endif
line 1454: 
line 1455: if !has_key(g:polyglot_is_disabled, 'esterel')
line 1456:   au BufNewFile,BufRead *.strl setf esterel
line 1457: endif
line 1458: 
line 1459: if !has_key(g:polyglot_is_disabled, 'esqlc')
line 1460:   au BufNewFile,BufRead *.EC,*.ec setf esqlc
line 1461: endif
line 1462: 
line 1463: if !has_key(g:polyglot_is_disabled, 'esmtprc')
line 1464:   au BufNewFile,BufRead *esmtprc setf esmtprc
line 1465: endif
line 1466: 
line 1467: if !has_key(g:polyglot_is_disabled, 'elmfilt')
line 1468:   au BufNewFile,BufRead filter-rules setf elmfilt
line 1469: endif
line 1470: 
line 1471: if !has_key(g:polyglot_is_disabled, 'elinks')
line 1472:   au BufNewFile,BufRead elinks.conf setf elinks
line 1473: endif
line 1474: 
line 1475: if !has_key(g:polyglot_is_disabled, 'ecd')
line 1476:   au BufNewFile,BufRead *.ecd setf ecd
line 1477: endif
line 1478: 
line 1479: if !has_key(g:polyglot_is_disabled, 'edif')
line 1480:   au BufNewFile,BufRead *.ed\(f\|if\|o\) setf edif
line 1481: endif
line 1482: 
line 1483: if !has_key(g:polyglot_is_disabled, 'dts')
line 1484:   au BufNewFile,BufRead *.dts,*.dtsi setf dts
line 1485: endif
line 1486: 
line 1487: if !has_key(g:polyglot_is_disabled, 'dtd')
line 1488:   au BufNewFile,BufRead *.dtd setf dtd
line 1489: endif
line 1490: 
line 1491: if !has_key(g:polyglot_is_disabled, 'dsl')
line 1492:   au BufNewFile,BufRead *.dsl setf dsl
line 1493: endif
line 1494: 
line 1495: if !has_key(g:polyglot_is_disabled, 'datascript')
line 1496:   au BufNewFile,BufRead *.ds setf datascript
line 1497: endif
line 1498: 
line 1499: if !has_key(g:polyglot_is_disabled, 'dracula')
line 1500:   au BufNewFile,BufRead *.drac,*.drc,*lpe,*lvs setf dracula
line 1501:   au BufNewFile,BufRead drac.* call s:StarSetf('dracula')
line 1502: endif
line 1503: 
line 1504: if !has_key(g:polyglot_is_disabled, 'def')
line 1505:   au BufNewFile,BufRead *.def setf def
line 1506: endif
line 1507: 
line 1508: if !has_key(g:polyglot_is_disabled, 'dylan')
line 1509:   au BufNewFile,BufRead *.dylan setf dylan
line 1510: endif
line 1511: 
line 1512: if !has_key(g:polyglot_is_disabled, 'dylanintr')
line 1513:   au BufNewFile,BufRead *.intr setf dylanintr
line 1514: endif
line 1515: 
line 1516: if !has_key(g:polyglot_is_disabled, 'dylanlid')
line 1517:   au BufNewFile,BufRead *.lid setf dylanlid
line 1518: endif
line 1519: 
line 1520: if !has_key(g:polyglot_is_disabled, 'dot')
line 1521:   au BufNewFile,BufRead *.dot,*.gv setf dot
line 1522: endif
line 1523: 
line 1524: if !has_key(g:polyglot_is_disabled, 'dircolors')
line 1525:   au BufNewFile,BufRead */etc/DIR_COLORS,{.,}dir_colors,{.,}dircolors setf dircolors
line 1526: endif
line 1527: 
line 1528: if !has_key(g:polyglot_is_disabled, 'diff')
line 1529:   au BufNewFile,BufRead *.diff,*.rej setf diff
line 1530: endif
line 1531: 
line 1532: if !has_key(g:polyglot_is_disabled, 'dictdconf')
line 1533:   au BufNewFile,BufRead dictd.conf setf dictdconf
line 1534: endif
line 1535: 
line 1536: if !has_key(g:polyglot_is_disabled, 'dictconf')
line 1537:   au BufNewFile,BufRead {.,}dictrc,dict.conf setf dictconf
line 1538: endif
line 1539: 
line 1540: if !has_key(g:polyglot_is_disabled, 'desktop')
line 1541:   au BufNewFile,BufRead *.desktop,*.directory setf desktop
line 1542: endif
line 1543: 
line 1544: if !has_key(g:polyglot_is_disabled, 'desc')
line 1545:   au BufNewFile,BufRead *.desc setf desc
line 1546: endif
line 1547: 
line 1548: if !has_key(g:polyglot_is_disabled, 'dnsmasq')
line 1549:   au BufNewFile,BufRead */etc/dnsmasq.conf setf dnsmasq
line 1550:   au BufNewFile,BufRead */etc/dnsmasq.d/* call s:StarSetf('dnsmasq')
line 1551: endif
line 1552: 
line 1553: if !has_key(g:polyglot_is_disabled, 'denyhosts')
line 1554:   au BufNewFile,BufRead denyhosts.conf setf denyhosts
line 1555: endif
line 1556: 
line 1557: if !has_key(g:polyglot_is_disabled, 'debsources')
line 1558:   au BufNewFile,BufRead */etc/apt/sources.list,*/etc/apt/sources.list.d/*.list setf debsources
line 1559: endif
line 1560: 
line 1561: if !has_key(g:polyglot_is_disabled, 'debcopyright')
line 1562:   au BufNewFile,BufRead */debian/copyright setf debcopyright
line 1563: endif
line 1564: 
line 1565: if !has_key(g:polyglot_is_disabled, 'debcontrol')
line 1566:   au BufNewFile,BufRead */debian/control setf debcontrol
line 1567: endif
line 1568: 
line 1569: if !has_key(g:polyglot_is_disabled, 'cuplsim')
line 1570:   au BufNewFile,BufRead *.si setf cuplsim
line 1571: endif
line 1572: 
line 1573: if !has_key(g:polyglot_is_disabled, 'cupl')
line 1574:   au BufNewFile,BufRead *.pld setf cupl
line 1575: endif
line 1576: 
line 1577: if !has_key(g:polyglot_is_disabled, 'csp')
line 1578:   au BufNewFile,BufRead *.csp,*.fdr setf csp
line 1579: endif
line 1580: 
line 1581: if !has_key(g:polyglot_is_disabled, 'quake')
line 1582:   au BufNewFile,BufRead *baseq[2-3]/*.cfg,*id1/*.cfg,*quake[1-3]/*.cfg setf quake
line 1583: endif
line 1584: 
line 1585: if !has_key(g:polyglot_is_disabled, 'lynx')
line 1586:   au BufNewFile,BufRead lynx.cfg setf lynx
line 1587: endif
line 1588: 
line 1589: if !has_key(g:polyglot_is_disabled, 'eterm')
line 1590:   au BufNewFile,BufRead *Eterm/*.cfg setf eterm
line 1591: endif
line 1592: 
line 1593: if !has_key(g:polyglot_is_disabled, 'dcd')
line 1594:   au BufNewFile,BufRead *.dcd setf dcd
line 1595: endif
line 1596: 
line 1597: if !has_key(g:polyglot_is_disabled, 'dockerfile')
line 1598:   au BufNewFile,BufRead *.Dockerfile,*.dock,Containerfile,Dockerfile,dockerfile setf dockerfile
line 1599:   au BufNewFile,BufRead Dockerfile* call s:StarSetf('dockerfile')
line 1600: endif
line 1601: 
line 1602: if !has_key(g:polyglot_is_disabled, 'cuda')
line 1603:   au BufNewFile,BufRead *.cu,*.cuh setf cuda
line 1604: endif
line 1605: 
line 1606: if !has_key(g:polyglot_is_disabled, 'config')
line 1607:   au BufNewFile,BufRead Pipfile,configure.ac,configure.in setf config
line 1608:   au BufNewFile,BufRead /etc/hostname.* call s:StarSetf('config')
line 1609: endif
line 1610: 
line 1611: if !has_key(g:polyglot_is_disabled, 'cf')
line 1612:   au BufNewFile,BufRead *.cfc,*.cfi,*.cfm setf cf
line 1613: endif
line 1614: 
line 1615: if !has_key(g:polyglot_is_disabled, 'coco')
line 1616:   au BufNewFile,BufRead *.atg setf coco
line 1617: endif
line 1618: 
line 1619: if !has_key(g:polyglot_is_disabled, 'cobol')
line 1620:   au BufNewFile,BufRead *.cbl,*.cob,*.lib setf cobol
line 1621: endif
line 1622: 
line 1623: if !has_key(g:polyglot_is_disabled, 'cmusrc')
line 1624:   au BufNewFile,BufRead */.cmus/{autosave,rc,command-history,*.theme},*/cmus/{rc,*.theme} setf cmusrc
line 1625: endif
line 1626: 
line 1627: if !has_key(g:polyglot_is_disabled, 'cl')
line 1628:   au BufNewFile,BufRead *.eni setf cl
line 1629: endif
line 1630: 
line 1631: if !has_key(g:polyglot_is_disabled, 'clean')
line 1632:   au BufNewFile,BufRead *.dcl,*.icl setf clean
line 1633: endif
line 1634: 
line 1635: if !has_key(g:polyglot_is_disabled, 'chordpro')
line 1636:   au BufNewFile,BufRead *.cho,*.chopro,*.chordpro,*.crd,*.crdpro setf chordpro
line 1637: endif
line 1638: 
line 1639: if !has_key(g:polyglot_is_disabled, 'chill')
line 1640:   au BufNewFile,BufRead *..ch setf chill
line 1641: endif
line 1642: 
line 1643: if !has_key(g:polyglot_is_disabled, 'debchangelog')
line 1644:   au BufNewFile,BufRead */debian/changelog,NEWS.Debian,NEWS.dch,changelog.Debian,changelog.dch setf debchangelog
line 1645: endif
line 1646: 
line 1647: if !has_key(g:polyglot_is_disabled, 'cterm')
line 1648:   au BufNewFile,BufRead *.con setf cterm
line 1649: endif
line 1650: 
line 1651: if !has_key(g:polyglot_is_disabled, 'css')
line 1652:   au BufNewFile,BufRead *.css setf css
line 1653: endif
line 1654: 
line 1655: if !has_key(g:polyglot_is_disabled, 'ch')
line 1656:   au BufNewFile,BufRead *.chf setf ch
line 1657: endif
line 1658: 
line 1659: if !has_key(g:polyglot_is_disabled, 'cynpp')
line 1660:   au BufNewFile,BufRead *.cyn setf cynpp
line 1661: endif
line 1662: 
line 1663: if !has_key(g:polyglot_is_disabled, 'crm')
line 1664:   au BufNewFile,BufRead *.crm setf crm
line 1665: endif
line 1666: 
line 1667: if !has_key(g:polyglot_is_disabled, 'conaryrecipe')
line 1668:   au BufNewFile,BufRead *.recipe setf conaryrecipe
line 1669: endif
line 1670: 
line 1671: if !has_key(g:polyglot_is_disabled, 'cdl')
line 1672:   au BufNewFile,BufRead *.cdl setf cdl
line 1673: endif
line 1674: 
line 1675: if !has_key(g:polyglot_is_disabled, 'chaiscript')
line 1676:   au BufNewFile,BufRead *.chai setf chaiscript
line 1677: endif
line 1678: 
line 1679: if !has_key(g:polyglot_is_disabled, 'cdrdaoconf')
line 1680:   au BufNewFile,BufRead */etc/cdrdao.conf,*/etc/default/cdrdao,*/etc/defaults/cdrdao,{.,}cdrdao setf cdrdaoconf
line 1681: endif
line 1682: 
line 1683: if !has_key(g:polyglot_is_disabled, 'cdrtoc')
line 1684:   au BufNewFile,BufRead *.toc setf cdrtoc
line 1685: endif
line 1686: 
line 1687: if !has_key(g:polyglot_is_disabled, 'cabal')
line 1688:   au BufNewFile,BufRead *.cabal setf cabal
line 1689: endif
line 1690: 
line 1691: if !has_key(g:polyglot_is_disabled, 'csdl')
line 1692:   au BufNewFile,BufRead *.csdl setf csdl
line 1693: endif
line 1694: 
line 1695: if !has_key(g:polyglot_is_disabled, 'cs')
line 1696:   au BufNewFile,BufRead *.cs setf cs
line 1697: endif
line 1698: 
line 1699: if !has_key(g:polyglot_is_disabled, 'calendar')
line 1700:   au BufNewFile,BufRead calendar setf calendar
line 1701:   au BufNewFile,BufRead */share/calendar/calendar.* call s:StarSetf('calendar')
line 1702:   au BufNewFile,BufRead */share/calendar/*/calendar.* call s:StarSetf('calendar')
line 1703:   au BufNewFile,BufRead */.calendar/* call s:StarSetf('calendar')
line 1704: endif
line 1705: 
line 1706: if !has_key(g:polyglot_is_disabled, 'lpc')
line 1707:   au BufNewFile,BufRead *.lpc,*.ulpc setf lpc
line 1708: endif
line 1709: 
line 1710: if !has_key(g:polyglot_is_disabled, 'bsdl')
line 1711:   au BufNewFile,BufRead *.bsdl,*bsd setf bsdl
line 1712: endif
line 1713: 
line 1714: if !has_key(g:polyglot_is_disabled, 'blank')
line 1715:   au BufNewFile,BufRead *.bl setf blank
line 1716: endif
line 1717: 
line 1718: if !has_key(g:polyglot_is_disabled, 'bindzone')
line 1719:   au BufNewFile,BufRead named.root setf bindzone
line 1720:   au BufNewFile,BufRead */named/db.* call s:StarSetf('bindzone')
line 1721:   au BufNewFile,BufRead */bind/db.* call s:StarSetf('bindzone')
line 1722: endif
line 1723: 
line 1724: if !has_key(g:polyglot_is_disabled, 'named')
line 1725:   au BufNewFile,BufRead named*.conf,rndc*.conf,rndc*.key setf named
line 1726: endif
line 1727: 
line 1728: if !has_key(g:polyglot_is_disabled, 'bst')
line 1729:   au BufNewFile,BufRead *.bst setf bst
line 1730: endif
line 1731: 
line 1732: if !has_key(g:polyglot_is_disabled, 'bib')
line 1733:   au BufNewFile,BufRead *.bib setf bib
line 1734: endif
line 1735: 
line 1736: if !has_key(g:polyglot_is_disabled, 'bdf')
line 1737:   au BufNewFile,BufRead *.bdf setf bdf
line 1738: endif
line 1739: 
line 1740: if !has_key(g:polyglot_is_disabled, 'bc')
line 1741:   au BufNewFile,BufRead *.bc setf bc
line 1742: endif
line 1743: 
line 1744: if !has_key(g:polyglot_is_disabled, 'dosbatch')
line 1745:   au BufNewFile,BufRead *.bat,*.sys setf dosbatch
line 1746: endif
line 1747: 
line 1748: if !has_key(g:polyglot_is_disabled, 'hamster')
line 1749:   au BufNewFile,BufRead *.hsc,*.hsm setf hamster
line 1750: endif
line 1751: 
line 1752: if !has_key(g:polyglot_is_disabled, 'freebasic')
line 1753:   au BufNewFile,BufRead *.bi,*.fb setf freebasic
line 1754: endif
line 1755: 
line 1756: if !has_key(g:polyglot_is_disabled, 'ibasic')
line 1757:   au BufNewFile,BufRead *.iba,*.ibi setf ibasic
line 1758: endif
line 1759: 
line 1760: if !has_key(g:polyglot_is_disabled, 'b')
line 1761:   au BufNewFile,BufRead *.imp,*.mch,*.ref setf b
line 1762: endif
line 1763: 
line 1764: if !has_key(g:polyglot_is_disabled, 'sql')
line 1765:   au BufNewFile,BufRead *.bdy,*.ddl,*.fnc,*.pck,*.pkb,*.pks,*.plb,*.pls,*.plsql,*.prc,*.spc,*.sql,*.tpb,*.tps,*.trg,*.tyb,*.tyc,*.typ,*.vw setf sql
line 1766: endif
line 1767: 
line 1768: if !has_key(g:polyglot_is_disabled, 'gitignore')
line 1769:   au BufNewFile,BufRead *.git/info/exclude,*/.config/git/ignore,{.,}gitignore setf gitignore
line 1770: endif
line 1771: 
line 1772: if !has_key(g:polyglot_is_disabled, 'prolog')
line 1773:   au! BufNewFile,BufRead,BufWritePost *.pl call polyglot#detect#Pl()
line 1774:   au BufNewFile,BufRead *.pdb,*.pro,*.prolog,*.yap setf prolog
line 1775: endif
line 1776: 
line 1777: if !has_key(g:polyglot_is_disabled, 'bzl')
line 1778:   au BufNewFile,BufRead *.BUILD,*.bazel,*.bzl,BUCK,BUILD,BUILD.bazel,Tiltfile,WORKSPACE setf bzl
line 1779: endif
line 1780: 
line 1781: if !has_key(g:polyglot_is_disabled, 'odin')
line 1782:   au BufNewFile,BufRead *.odin setf odin
line 1783: endif
line 1784: 
line 1785: if !has_key(g:polyglot_is_disabled, 'dosini')
line 1786:   au BufNewFile,BufRead *.dof,*.ini,*.lektorproject,*.prefs,*.pro,*.properties,*.url,*/etc/pacman.conf,*/etc/yum.conf,{.,}editorconfig,{.,}flake8,{.,}npmrc,buildozer.spec setf dosini
line 1787:   au BufNewFile,BufRead php.ini-* call s:StarSetf('dosini')
line 1788:   au BufNewFile,BufRead */etc/yum.repos.d/* call s:StarSetf('dosini')
line 1789: endif
line 1790: 
line 1791: if !has_key(g:polyglot_is_disabled, 'spec')
line 1792:   au BufNewFile,BufRead *.spec setf spec
line 1793: endif
line 1794: 
line 1795: if !has_key(g:polyglot_is_disabled, 'visual-basic')
line 1796:   au! BufNewFile,BufRead,BufWritePost *.bas call polyglot#detect#Bas()
line 1797:   au BufNewFile,BufRead *.cls,*.ctl,*.dsm,*.frm,*.frx,*.sba,*.vba,*.vbs setf vb
line 1798: endif
line 1799: 
line 1800: if !has_key(g:polyglot_is_disabled, 'basic')
line 1801:   au BufNewFile,BufRead *.basic setf basic
line 1802: endif
line 1803: 
line 1804: if !has_key(g:polyglot_is_disabled, 'trasys')
line 1805:   au! BufNewFile,BufRead,BufWritePost *.inp call polyglot#detect#Inp()
line 1806: endif
line 1807: 
line 1808: if !has_key(g:polyglot_is_disabled, 'zig')
line 1809:   au BufNewFile,BufRead *.zir setf zir
line 1810:   au BufNewFile,BufRead *.zig,*.zir setf zig
line 1811: endif
line 1812: 
line 1813: if !has_key(g:polyglot_is_disabled, 'zephir')
line 1814:   au BufNewFile,BufRead *.zep setf zephir
line 1815: endif
line 1816: 
line 1817: if !has_key(g:polyglot_is_disabled, 'help')
line 1818:   au BufNewFile,BufRead $VIMRUNTIME/doc/*.txt setf help
line 1819: endif
line 1820: 
line 1821: if !has_key(g:polyglot_is_disabled, 'helm')
line 1822:   au BufNewFile,BufRead */templates/*.tpl,*/templates/*.yaml setf helm
line 1823: endif
line 1824: 
line 1825: if !has_key(g:polyglot_is_disabled, 'smarty')
line 1826:   au BufNewFile,BufRead *.tpl setf smarty
line 1827: endif
line 1828: 
line 1829: if !has_key(g:polyglot_is_disabled, 'ansible')
line 1830:   au BufNewFile,BufRead handlers.*.y{a,}ml,local.y{a,}ml,main.y{a,}ml,playbook.y{a,}ml,requirements.y{a,}ml,roles.*.y{a,}ml,site.y{a,}ml,tasks.*.y{a,}ml setf yaml.ansible
line 1831:   au BufNewFile,BufRead host_vars/* call s:StarSetf('yaml.ansible')
line 1832:   au BufNewFile,BufRead group_vars/* call s:StarSetf('yaml.ansible')
line 1833: endif
line 1834: 
line 1835: if !has_key(g:polyglot_is_disabled, 'xsl')
line 1836:   au BufNewFile,BufRead *.xsl,*.xslt setf xsl
line 1837: endif
line 1838: 
line 1839: if !has_key(g:polyglot_is_disabled, 'xdc')
line 1840:   au BufNewFile,BufRead *.xdc setf xdc
line 1841: endif
line 1842: 
line 1843: if !has_key(g:polyglot_is_disabled, 'vue')
line 1844:   au BufNewFile,BufRead *.vue,*.wpy setf vue
line 1845: endif
line 1846: 
line 1847: if !has_key(g:polyglot_is_disabled, 'vmasm')
line 1848:   au BufNewFile,BufRead *.mar setf vmasm
line 1849: endif
line 1850: 
line 1851: if !has_key(g:polyglot_is_disabled, 'velocity')
line 1852:   au BufNewFile,BufRead *.vm setf velocity
line 1853: endif
line 1854: 
line 1855: if !has_key(g:polyglot_is_disabled, 'vcl')
line 1856:   au BufNewFile,BufRead *.vcl setf vcl
line 1857: endif
line 1858: 
line 1859: if !has_key(g:polyglot_is_disabled, 'vbnet')
line 1860:   au BufNewFile,BufRead *.vb,*.vbhtml setf vbnet
line 1861: endif
line 1862: 
line 1863: if !has_key(g:polyglot_is_disabled, 'vala')
line 1864:   au BufNewFile,BufRead *.vala,*.valadoc,*.vapi setf vala
line 1865: endif
line 1866: 
line 1867: if !has_key(g:polyglot_is_disabled, 'v')
line 1868:   au BufNewFile,BufRead *.v,*.vsh,*.vv setf vlang
line 1869: endif
line 1870: 
line 1871: if !has_key(g:polyglot_is_disabled, 'unison')
line 1872:   au BufNewFile,BufRead *.u,*.uu setf unison
line 1873: endif
line 1874: 
line 1875: if !has_key(g:polyglot_is_disabled, 'typescript')
line 1876:   au BufNewFile,BufRead *.ts setf typescript
line 1877:   au BufNewFile,BufRead *.tsx setf typescriptreact
line 1878: endif
line 1879: 
line 1880: if !has_key(g:polyglot_is_disabled, 'twig')
line 1881:   au BufNewFile,BufRead *.twig setf html.twig
line 1882:   au BufNewFile,BufRead *.xml.twig setf xml.twig
line 1883: endif
line 1884: 
line 1885: if !has_key(g:polyglot_is_disabled, 'tutor')
line 1886:   au BufNewFile,BufRead *.tutor setf tutor
line 1887: endif
line 1888: 
line 1889: if !has_key(g:polyglot_is_disabled, 'tptp')
line 1890:   au BufNewFile,BufRead *.ax,*.p,*.tptp setf tptp
line 1891: endif
line 1892: 
line 1893: if !has_key(g:polyglot_is_disabled, 'toml')
line 1894:   au BufNewFile,BufRead *.toml,*/.cargo/config,*/.cargo/credentials,Cargo.lock,Gopkg.lock,Pipfile,poetry.lock setf toml
line 1895: endif
line 1896: 
line 1897: if !has_key(g:polyglot_is_disabled, 'tmux')
line 1898:   au BufNewFile,BufRead {.,}tmux*.conf setf tmux
line 1899: endif
line 1900: 
line 1901: if !has_key(g:polyglot_is_disabled, 'thrift')
line 1902:   au BufNewFile,BufRead *.thrift setf thrift
line 1903: endif
line 1904: 
line 1905: if !has_key(g:polyglot_is_disabled, 'textile')
line 1906:   au BufNewFile,BufRead *.textile setf textile
line 1907: endif
line 1908: 
line 1909: if !has_key(g:polyglot_is_disabled, 'terraform')
line 1910:   au BufNewFile,BufRead *.tf,*.tfvars setf terraform
line 1911:   au BufNewFile,BufRead *.hcl,*.nomad,*.workflow,{.,}terraformrc,Appfile,terraform.rc setf hcl
line 1912: endif
line 1913: 
line 1914: if !has_key(g:polyglot_is_disabled, 'tf')
line 1915:   au BufNewFile,BufRead *.tf,{.,}tfrc,tfrc setf tf
line 1916: endif
line 1917: 
line 1918: if !has_key(g:polyglot_is_disabled, 'systemd')
line 1919:   au BufNewFile,BufRead *.automount,*.dnssd,*.link,*.mount,*.netdev,*.network,*.nspawn,*.path,*.service,*.slice,*.socket,*.swap,*.target,*.timer,*/systemd/*.conf setf systemd
line 1920:   au BufNewFile,BufRead *.#* call s:StarSetf('systemd')
line 1921: endif
line 1922: 
line 1923: if !has_key(g:polyglot_is_disabled, 'sxhkd')
line 1924:   au BufNewFile,BufRead *.sxhkdrc,sxhkdrc setf sxhkdrc
line 1925: endif
line 1926: 
line 1927: if !has_key(g:polyglot_is_disabled, 'swift')
line 1928:   au BufNewFile,BufRead *.swift setf swift
line 1929: endif
line 1930: 
line 1931: if !has_key(g:polyglot_is_disabled, 'svg')
line 1932:   au BufNewFile,BufRead *.svg setf svg
line 1933: endif
line 1934: 
line 1935: if !has_key(g:polyglot_is_disabled, 'svelte')
line 1936:   au BufNewFile,BufRead *.svelte setf svelte
line 1937: endif
line 1938: 
line 1939: if !has_key(g:polyglot_is_disabled, 'stylus')
line 1940:   au BufNewFile,BufRead *.styl,*.stylus setf stylus
line 1941: endif
line 1942: 
line 1943: if !has_key(g:polyglot_is_disabled, 'solidity')
line 1944:   au BufNewFile,BufRead *.sol setf solidity
line 1945: endif
line 1946: 
line 1947: if !has_key(g:polyglot_is_disabled, 'smt2')
line 1948:   au BufNewFile,BufRead *.smt,*.smt2 setf smt2
line 1949: endif
line 1950: 
line 1951: if !has_key(g:polyglot_is_disabled, 'slime')
line 1952:   au BufNewFile,BufRead *.slime setf slime
line 1953: endif
line 1954: 
line 1955: if !has_key(g:polyglot_is_disabled, 'slim')
line 1956:   au BufNewFile,BufRead *.slim setf slim
line 1957: endif
line 1958: 
line 1959: if !has_key(g:polyglot_is_disabled, 'sh')
line 1960:   au BufNewFile,BufRead *.bash,*.bats,*.cgi,*.command,*.env,*.fcgi,*.ksh,*.sh,*.sh.in,*.tmux,*.tool,*.zsh-theme,*/etc/udev/cdsymlinks.conf,{.,}bash_aliases,{.,}bash_history,{.,}bash_logout,{.,}bash_profile,{.,}bashrc,{.,}cshrc,{.,}env,{.,}env.example,{.,}flaskenv,{.,}kshrc,{.,}login,{.,}profile,9fs,PKGBUILD,bash_aliases,bash_logout,bash_profile,bashrc,cshrc,gradlew,kshrc,login,man,profile setf sh
line 1961:   au BufNewFile,BufRead *.zsh,*/etc/zprofile,{.,}zfbfmarks,{.,}zlogin,{.,}zlogout,{.,}zprofile,{.,}zshenv,{.,}zshrc setf zsh
line 1962:   au BufNewFile,BufRead .zsh* call s:StarSetf('zsh')
line 1963:   au BufNewFile,BufRead .zlog* call s:StarSetf('zsh')
line 1964:   au BufNewFile,BufRead .zcompdump* call s:StarSetf('zsh')
line 1965: endif
line 1966: 
line 1967: if !has_key(g:polyglot_is_disabled, 'scss')
line 1968:   au BufNewFile,BufRead *.scss setf scss
line 1969: endif
line 1970: 
line 1971: if !has_key(g:polyglot_is_disabled, 'scala')
line 1972:   au BufNewFile,BufRead *.kojo,*.sc,*.scala setf scala
line 1973: endif
line 1974: 
line 1975: if !has_key(g:polyglot_is_disabled, 'rust')
line 1976:   au BufNewFile,BufRead *.rs,*.rs.in setf rust
line 1977: endif
line 1978: 
line 1979: if !has_key(g:polyglot_is_disabled, 'brewfile')
line 1980:   au BufNewFile,BufRead Brewfile setf brewfile
line 1981: endif
line 1982: 
line 1983: if !has_key(g:polyglot_is_disabled, 'rspec')
line 1984:   au BufNewFile,BufRead *_spec.rb set ft=ruby syntax=rspec
line 1985: endif
line 1986: 
line 1987: if !has_key(g:polyglot_is_disabled, 'ruby')
line 1988:   au BufNewFile,BufRead *.axlsx,*.builder,*.cap,*.eye,*.fcgi,*.gemspec,*.god,*.jbuilder,*.mspec,*.opal,*.pluginspec,*.podspec,*.prawn,*.rabl,*.rake,*.rant,*.rb,*.rbi,*.rbuild,*.rbw,*.rbx,*.rjs,*.ru,*.ruby,*.rxml,*.spec,*.thor,*.watchr,{.,}Brewfile,{.,}Guardfile,{.,}autotest,{.,}irbrc,{.,}pryrc,{.,}simplecov,Appraisals,Berksfile,Buildfile,Capfile,Cheffile,Dangerfile,Deliverfile,Fastfile,Gemfile,Guardfile,Jarfile,KitchenSink,Mavenfile,Podfile,Puppetfile,Rakefile,Routefile,Snapfile,Steepfile,Thorfile,Vagrantfile,[Rr]antfile,buildfile,vagrantfile setf ruby
line 1989:   au BufNewFile,BufRead [Rr]akefile* call s:StarSetf('ruby')
line 1990:   au BufNewFile,BufRead *.erb,*.erb.deface,*.rhtml setf eruby
line 1991: endif
line 1992: 
line 1993: if !has_key(g:polyglot_is_disabled, 'rst')
line 1994:   au BufNewFile,BufRead *.rest,*.rest.txt,*.rst,*.rst.txt setf rst
line 1995: endif
line 1996: 
line 1997: if !has_key(g:polyglot_is_disabled, 'reason')
line 1998:   au! BufNewFile,BufRead,BufWritePost *.re call polyglot#detect#Re()
line 1999:   au BufNewFile,BufRead *.rei setf reason
line 2000: endif
line 2001: 
line 2002: if !has_key(g:polyglot_is_disabled, 'razor')
line 2003:   au BufNewFile,BufRead *.cshtml,*.razor setf razor
line 2004: endif
line 2005: 
line 2006: if !has_key(g:polyglot_is_disabled, 'raml')
line 2007:   au BufNewFile,BufRead *.raml setf raml
line 2008: endif
line 2009: 
line 2010: if !has_key(g:polyglot_is_disabled, 'ragel')
line 2011:   au BufNewFile,BufRead *.rl setf ragel
line 2012: endif
line 2013: 
line 2014: if !has_key(g:polyglot_is_disabled, 'racket')
line 2015:   au BufNewFile,BufRead *.rkt,*.rktd,*.rktl,*.scrbl setf racket
line 2016: endif
line 2017: 
line 2018: if !has_key(g:polyglot_is_disabled, 'r-lang')
line 2019:   au BufNewFile,BufRead *.S,*.r,*.rsx,*.s,{.,}Rprofile,expr-dist setf r
line 2020:   au BufNewFile,BufRead *.rd setf rhelp
line 2021: endif
line 2022: 
line 2023: if !has_key(g:polyglot_is_disabled, 'qml')
line 2024:   au BufNewFile,BufRead *.qbs,*.qml setf qml
line 2025: endif
line 2026: 
line 2027: if !has_key(g:polyglot_is_disabled, 'qmake')
line 2028:   au BufNewFile,BufRead *.pri,*.pro setf qmake
line 2029: endif
line 2030: 
line 2031: if !has_key(g:polyglot_is_disabled, 'requirements')
line 2032:   au BufNewFile,BufRead *.pip,*require.{txt,in},*requirements.{txt,in},constraints.{txt,in} setf requirements
line 2033: endif
line 2034: 
line 2035: if !has_key(g:polyglot_is_disabled, 'python')
line 2036:   au BufNewFile,BufRead *.cgi,*.fcgi,*.gyp,*.gypi,*.lmi,*.ptl,*.py,*.py3,*.pyde,*.pyi,*.pyp,*.pyt,*.pyw,*.rpy,*.smk,*.spec,*.tac,*.wsgi,*.xpy,{.,}gclient,{.,}pythonrc,{.,}pythonstartup,DEPS,SConscript,SConstruct,Snakefile,wscript setf python
line 2037: endif
line 2038: 
line 2039: if !has_key(g:polyglot_is_disabled, 'purescript')
line 2040:   au BufNewFile,BufRead *.purs setf purescript
line 2041: endif
line 2042: 
line 2043: if !has_key(g:polyglot_is_disabled, 'puppet')
line 2044:   au BufNewFile,BufRead *.pp,Modulefile setf puppet
line 2045:   au BufNewFile,BufRead *.epp setf embeddedpuppet
line 2046: endif
line 2047: 
line 2048: if !has_key(g:polyglot_is_disabled, 'pug')
line 2049:   au BufNewFile,BufRead *.jade,*.pug setf pug
line 2050: endif
line 2051: 
line 2052: if !has_key(g:polyglot_is_disabled, 'protobuf')
line 2053:   au BufNewFile,BufRead *.proto setf proto
line 2054: endif
line 2055: 
line 2056: if !has_key(g:polyglot_is_disabled, 'powershell')
line 2057:   au BufNewFile,BufRead *.ps1,*.psd1,*.psm1,*.pssc setf ps1
line 2058:   au BufNewFile,BufRead *.ps1xml setf ps1xml
line 2059: endif
line 2060: 
line 2061: if !has_key(g:polyglot_is_disabled, 'pony')
line 2062:   au BufNewFile,BufRead *.pony setf pony
line 2063: endif
line 2064: 
line 2065: if !has_key(g:polyglot_is_disabled, 'plantuml')
line 2066:   au BufNewFile,BufRead *.iuml,*.plantuml,*.pu,*.puml,*.uml setf plantuml
line 2067: endif
line 2068: 
line 2069: if !has_key(g:polyglot_is_disabled, 'pest')
line 2070:   au BufNewFile,BufRead *.pest setf pest
line 2071: endif
line 2072: 
line 2073: if !has_key(g:polyglot_is_disabled, 'blade')
line 2074:   au BufNewFile,BufRead *.blade,*.blade.php setf blade
line 2075: endif
line 2076: 
line 2077: if !has_key(g:polyglot_is_disabled, 'php')
line 2078:   au BufNewFile,BufRead *.aw,*.ctp,*.fcgi,*.inc,*.php,*.php3,*.php4,*.php5,*.php9,*.phps,*.phpt,*.phtml,{.,}php,{.,}php_cs,{.,}php_cs.dist,Phakefile setf php
line 2079: endif
line 2080: 
line 2081: if !has_key(g:polyglot_is_disabled, 'cql')
line 2082:   au BufNewFile,BufRead *.cql setf cql
line 2083: endif
line 2084: 
line 2085: if !has_key(g:polyglot_is_disabled, 'pgsql')
line 2086:   au BufNewFile,BufRead *.pgsql let b:sql_type_override='pgsql' | set ft=sql
line 2087: endif
line 2088: 
line 2089: if !has_key(g:polyglot_is_disabled, 'opencl')
line 2090:   au BufNewFile,BufRead *.cl,*.opencl setf opencl
line 2091: endif
line 2092: 
line 2093: if !has_key(g:polyglot_is_disabled, 'octave')
line 2094:   au! BufNewFile,BufRead,BufWritePost *.m call polyglot#detect#M()
line 2095:   au BufNewFile,BufRead *.oct setf octave
line 2096: endif
line 2097: 
line 2098: if !has_key(g:polyglot_is_disabled, 'ocaml')
line 2099:   au BufNewFile,BufRead *.eliom,*.eliomi,*.ml,*.ml.cppo,*.ml4,*.mli,*.mli.cppo,*.mlip,*.mll,*.mlp,*.mlt,*.mly,{.,}ocamlinit setf ocaml
line 2100:   au BufNewFile,BufRead *.om,OMakefile,OMakeroot,OMakeroot.in setf omake
line 2101:   au BufNewFile,BufRead *.opam,*.opam.template,opam setf opam
line 2102:   au BufNewFile,BufRead _oasis setf oasis
line 2103:   au BufNewFile,BufRead dune,dune-project,dune-workspace,jbuild setf dune
line 2104:   au BufNewFile,BufRead _tags setf ocamlbuild_tags
line 2105:   au BufNewFile,BufRead *.ocp setf ocpbuild
line 2106:   au BufNewFile,BufRead *.root setf ocpbuildroot
line 2107:   au BufNewFile,BufRead *.sexp setf sexplib
line 2108: endif
line 2109: 
line 2110: if !has_key(g:polyglot_is_disabled, 'objc')
line 2111:   au! BufNewFile,BufRead,BufWritePost *.m call polyglot#detect#M()
line 2112:   au! BufNewFile,BufRead,BufWritePost *.h call polyglot#detect#H()
line 2113: endif
line 2114: 
line 2115: if !has_key(g:polyglot_is_disabled, 'nix')
line 2116:   au BufNewFile,BufRead *.nix setf nix
line 2117: endif
line 2118: 
line 2119: if !has_key(g:polyglot_is_disabled, 'nim')
line 2120:   au BufNewFile,BufRead *.nim,*.nim.cfg,*.nimble,*.nimrod,*.nims,nim.cfg setf nim
line 2121: endif
line 2122: 
line 2123: if !has_key(g:polyglot_is_disabled, 'nginx')
line 2124:   au BufNewFile,BufRead *.nginx,*.nginxconf,*.vhost,*/nginx/*.conf,*nginx.conf,nginx*.conf,nginx.conf setf nginx
line 2125:   au BufNewFile,BufRead */usr/local/nginx/conf/* call s:StarSetf('nginx')
line 2126:   au BufNewFile,BufRead */etc/nginx/* call s:StarSetf('nginx')
line 2127: endif
line 2128: 
line 2129: if !has_key(g:polyglot_is_disabled, 'murphi')
line 2130:   au! BufNewFile,BufRead,BufWritePost *.m call polyglot#detect#M()
line 2131: endif
line 2132: 
line 2133: if !has_key(g:polyglot_is_disabled, 'moonscript')
line 2134:   au BufNewFile,BufRead *.moon setf moon
line 2135: endif
line 2136: 
line 2137: if !has_key(g:polyglot_is_disabled, 'meson')
line 2138:   au BufNewFile,BufRead meson.build,meson_options.txt setf meson
line 2139:   au BufNewFile,BufRead *.wrap setf dosini
line 2140: endif
line 2141: 
line 2142: if !has_key(g:polyglot_is_disabled, 'mdx')
line 2143:   au BufNewFile,BufRead *.mdx setf markdown.mdx
line 2144: endif
line 2145: 
line 2146: if !has_key(g:polyglot_is_disabled, 'mathematica')
line 2147:   au! BufNewFile,BufRead,BufWritePost *.m call polyglot#detect#M()
line 2148:   au BufNewFile,BufRead *.cdf,*.ma,*.mathematica,*.mma,*.mt,*.nb,*.nbp,*.wl,*.wls,*.wlt setf mma
line 2149: endif
line 2150: 
line 2151: if !has_key(g:polyglot_is_disabled, 'mako')
line 2152:   au BufNewFile,BufRead *.mako,*.mao setf mako
line 2153:   au BufReadPre *.*.mao execute "do BufRead filetypedetect " . expand("<afile>:r") | let b:mako_outer_lang = &filetype
line 2154:   au BufNewFile *.*.mao execute "do BufNewFile filetypedetect " . expand("<afile>:r") | let b:mako_outer_lang = &filetype
line 2155:   au BufReadPre *.*.mako execute "do BufRead filetypedetect " . expand("<afile>:r") | let b:mako_outer_lang = &filetype
line 2156:   au BufNewFile *.*.mako execute "do BufNewFile filetypedetect " . expand("<afile>:r") | let b:mako_outer_lang = &filetype
line 2157: endif
line 2158: 
line 2159: if !has_key(g:polyglot_is_disabled, 'm4')
line 2160:   au BufNewFile,BufRead *.at,*.m4,*.mc setf m4
line 2161: endif
line 2162: 
line 2163: if !has_key(g:polyglot_is_disabled, 'lua')
line 2164:   au BufNewFile,BufRead *.fcgi,*.lua,*.nse,*.p8,*.pd_lua,*.rbxs,*.rockspec,*.wlua,{.,}luacheckrc setf lua
line 2165: endif
line 2166: 
line 2167: if !has_key(g:polyglot_is_disabled, 'log')
line 2168:   au BufNewFile,BufRead *.LOG,*.log,*_LOG,*_log setf log
line 2169: endif
line 2170: 
line 2171: if !has_key(g:polyglot_is_disabled, 'llvm')
line 2172:   au BufNewFile,BufRead *.ll setf llvm
line 2173:   au BufNewFile,BufRead *.td setf tablegen
line 2174: endif
line 2175: 
line 2176: if !has_key(g:polyglot_is_disabled, 'livescript')
line 2177:   au BufNewFile,BufRead *._ls,*.ls,Slakefile setf ls
line 2178: endif
line 2179: 
line 2180: if !has_key(g:polyglot_is_disabled, 'lilypond')
line 2181:   au BufNewFile,BufRead *.ily,*.ly setf lilypond
line 2182: endif
line 2183: 
line 2184: if !has_key(g:polyglot_is_disabled, 'less')
line 2185:   au BufNewFile,BufRead *.less setf less
line 2186: endif
line 2187: 
line 2188: if !has_key(g:polyglot_is_disabled, 'ledger')
line 2189:   au BufNewFile,BufRead *.journal,*.ldg,*.ledger setf ledger
line 2190: endif
line 2191: 
line 2192: if !has_key(g:polyglot_is_disabled, 'kotlin')
line 2193:   au BufNewFile,BufRead *.kt,*.ktm,*.kts setf kotlin
line 2194: endif
line 2195: 
line 2196: if !has_key(g:polyglot_is_disabled, 'julia')
line 2197:   au BufNewFile,BufRead *.jl setf julia
line 2198: endif
line 2199: 
line 2200: if !has_key(g:polyglot_is_disabled, 'jst')
line 2201:   au BufNewFile,BufRead *.ect,*.ejs,*.ejs.t,*.jst setf jst
line 2202: endif
line 2203: 
line 2204: if !has_key(g:polyglot_is_disabled, 'tads')
line 2205:   au! BufNewFile,BufRead,BufWritePost *.t call polyglot#detect#T()
line 2206: endif
line 2207: 
line 2208: if !has_key(g:polyglot_is_disabled, 'raku')
line 2209:   au! BufNewFile,BufRead,BufWritePost *.t call polyglot#detect#T()
line 2210:   au! BufNewFile,BufRead,BufWritePost *.pm call polyglot#detect#Pm()
line 2211:   au! BufNewFile,BufRead,BufWritePost *.pl call polyglot#detect#Pl()
line 2212:   au BufNewFile,BufRead *.6pl,*.6pm,*.nqp,*.p6,*.p6l,*.p6m,*.pl6,*.pm6,*.pod6,*.raku,*.rakudoc,*.rakumod,*.rakutest,*.t6 setf raku
line 2213: endif
line 2214: 
line 2215: if !has_key(g:polyglot_is_disabled, 'perl')
line 2216:   au! BufNewFile,BufRead,BufWritePost *.t call polyglot#detect#T()
line 2217:   au! BufNewFile,BufRead,BufWritePost *.pm call polyglot#detect#Pm()
line 2218:   au! BufNewFile,BufRead,BufWritePost *.pl call polyglot#detect#Pl()
line 2219:   au BufNewFile,BufRead *.al,*.cgi,*.fcgi,*.perl,*.ph,*.plx,*.psgi,{.,}gitolite.rc,Makefile.PL,Rexfile,ack,cpanfile,example.gitolite.rc setf perl
line 2220:   au BufNewFile,BufRead *.pod setf pod
line 2221:   au BufNewFile,BufRead *.comp,*.mason,*.mhtml setf mason
line 2222:   au! BufNewFile,BufRead,BufWritePost *.tt2 call polyglot#detect#Tt2()
line 2223:   au! BufNewFile,BufRead,BufWritePost *.tt2 call polyglot#detect#Tt2()
line 2224:   au BufNewFile,BufRead *.xs setf xs
line 2225: endif
line 2226: 
line 2227: if !has_key(g:polyglot_is_disabled, 'rc')
line 2228:   au BufNewFile,BufRead *.rc,*.rch setf rc
line 2229: endif
line 2230: 
line 2231: if !has_key(g:polyglot_is_disabled, 'jsonnet')
line 2232:   au BufNewFile,BufRead *.jsonnet,*.libsonnet setf jsonnet
line 2233: endif
line 2234: 
line 2235: if !has_key(g:polyglot_is_disabled, 'json')
line 2236:   au BufNewFile,BufRead *.JSON-tmLanguage,*.avsc,*.geojson,*.gltf,*.har,*.ice,*.json,*.jsonl,*.jsonp,*.mcmeta,*.template,*.tfstate,*.tfstate.backup,*.topojson,*.webapp,*.webmanifest,*.yy,*.yyp,{.,}arcconfig,{.,}auto-changelog,{.,}c8rc,{.,}htmlhintrc,{.,}imgbotconfig,{.,}nycrc,{.,}tern-config,{.,}tern-project,{.,}watchmanconfig,Pipfile.lock,composer.lock,mcmod.info setf json
line 2237: endif
line 2238: 
line 2239: if !has_key(g:polyglot_is_disabled, 'json5')
line 2240:   au BufNewFile,BufRead *.json5 setf json5
line 2241: endif
line 2242: 
line 2243: if !has_key(g:polyglot_is_disabled, 'jq')
line 2244:   au BufNewFile,BufRead *.jq,{.,}jqrc setf jq
line 2245:   au BufNewFile,BufRead .jqrc* call s:StarSetf('jq')
line 2246: endif
line 2247: 
line 2248: if !has_key(g:polyglot_is_disabled, 'htmldjango')
line 2249:   au BufNewFile,BufRead *.j2,*.jinja,*.jinja2 setf htmldjango
line 2250: endif
line 2251: 
line 2252: if !has_key(g:polyglot_is_disabled, 'jenkins')
line 2253:   au BufNewFile,BufRead *.Jenkinsfile,*.jenkinsfile,Jenkinsfile setf Jenkinsfile
line 2254:   au BufNewFile,BufRead Jenkinsfile* call s:StarSetf('Jenkinsfile')
line 2255: endif
line 2256: 
line 2257: if !has_key(g:polyglot_is_disabled, 'ion')
line 2258:   au BufNewFile,BufRead *.ion,~/.config/ion/initrc setf ion
line 2259: endif
line 2260: 
line 2261: if !has_key(g:polyglot_is_disabled, 'idris2')
line 2262:   au! BufNewFile,BufRead,BufWritePost *.idr call polyglot#detect#Idr()
line 2263:   au BufNewFile,BufRead *.ipkg,idris-response setf idris2
line 2264:   au! BufNewFile,BufRead,BufWritePost *.lidr call polyglot#detect#Lidr()
line 2265: endif
line 2266: 
line 2267: if !has_key(g:polyglot_is_disabled, 'idris')
line 2268:   au! BufNewFile,BufRead,BufWritePost *.lidr call polyglot#detect#Lidr()
line 2269:   au! BufNewFile,BufRead,BufWritePost *.idr call polyglot#detect#Idr()
line 2270:   au BufNewFile,BufRead idris-response setf idris
line 2271: endif
line 2272: 
line 2273: if !has_key(g:polyglot_is_disabled, 'icalendar')
line 2274:   au BufNewFile,BufRead *.ics setf icalendar
line 2275: endif
line 2276: 
line 2277: if !has_key(g:polyglot_is_disabled, 'hive')
line 2278:   au BufNewFile,BufRead *.hql,*.q,*.ql setf hive
line 2279: endif
line 2280: 
line 2281: if !has_key(g:polyglot_is_disabled, 'haxe')
line 2282:   au BufNewFile,BufRead *.hx,*.hxsl setf haxe
line 2283:   au BufNewFile,BufRead *.hxml setf hxml
line 2284:   au BufNewFile,BufRead *.hss setf hss
line 2285: endif
line 2286: 
line 2287: if !has_key(g:polyglot_is_disabled, 'haskell')
line 2288:   au BufNewFile,BufRead *.bpk,*.hs,*.hs-boot,*.hsc,*.hsig setf haskell
line 2289: endif
line 2290: 
line 2291: if !has_key(g:polyglot_is_disabled, 'haproxy')
line 2292:   au BufNewFile,BufRead haproxy*.conf* call s:StarSetf('haproxy')
line 2293:   au BufNewFile,BufRead haproxy*.cfg* call s:StarSetf('haproxy')
line 2294: endif
line 2295: 
line 2296: if !has_key(g:polyglot_is_disabled, 'handlebars')
line 2297:   au BufNewFile,BufRead *.hjs,*.hogan,*.hulk,*.mustache setf html.mustache
line 2298:   au BufNewFile,BufRead *.handlebars,*.hb,*.hbs,*.hdbs setf html.handlebars
line 2299: endif
line 2300: 
line 2301: if !has_key(g:polyglot_is_disabled, 'haml')
line 2302:   au BufNewFile,BufRead *.haml,*.haml.deface,*.hamlbars,*.hamlc setf haml
line 2303: endif
line 2304: 
line 2305: if !has_key(g:polyglot_is_disabled, 'grub')
line 2306:   au BufNewFile,BufRead */boot/grub/grub.conf,*/boot/grub/menu.lst,*/etc/grub.conf setf grub
line 2307: endif
line 2308: 
line 2309: if !has_key(g:polyglot_is_disabled, 'groovy')
line 2310:   au BufNewFile,BufRead *.gradle,*.groovy,*.grt,*.gtpl,*.gvy,Jenkinsfile setf groovy
line 2311: endif
line 2312: 
line 2313: if !has_key(g:polyglot_is_disabled, 'graphql')
line 2314:   au BufNewFile,BufRead *.gql,*.graphql,*.graphqls setf graphql
line 2315: endif
line 2316: 
line 2317: if !has_key(g:polyglot_is_disabled, 'jsx')
line 2318:   au BufNewFile,BufRead *.jsx setf javascriptreact
line 2319: endif
line 2320: 
line 2321: if !has_key(g:polyglot_is_disabled, 'javascript')
line 2322:   au! BufNewFile,BufRead,BufWritePost *.frag call polyglot#detect#Frag()
line 2323:   au BufNewFile,BufRead *._js,*.bones,*.cjs,*.es,*.es6,*.gs,*.jake,*.javascript,*.js,*.jsb,*.jscad,*.jsfl,*.jslib,*.jsm,*.jspre,*.jss,*.jsx,*.mjs,*.njs,*.pac,*.sjs,*.ssjs,*.xsjs,*.xsjslib,Jakefile setf javascript
line 2324:   au BufNewFile,BufRead *.flow setf flow
line 2325: endif
line 2326: 
line 2327: if !has_key(g:polyglot_is_disabled, 'go')
line 2328:   au BufNewFile,BufRead *.go setf go
line 2329:   au BufNewFile,BufRead go.mod setf gomod
line 2330:   au BufNewFile,BufRead go.sum setf gosum
line 2331:   au BufNewFile,BufRead go.work setf gowork
line 2332:   au BufNewFile,BufRead *.tmpl setf gohtmltmpl
line 2333: endif
line 2334: 
line 2335: if !has_key(g:polyglot_is_disabled, 'hercules')
line 2336:   au BufNewFile,BufRead *.errsum,*.ev,*.sum,*.vc setf hercules
line 2337: endif
line 2338: 
line 2339: if !has_key(g:polyglot_is_disabled, 'gnuplot')
line 2340:   au BufNewFile,BufRead *.gnu,*.gnuplot,*.gp,*.gpi,*.p,*.plot,*.plt setf gnuplot
line 2341: endif
line 2342: 
line 2343: if !has_key(g:polyglot_is_disabled, 'gmpl')
line 2344:   au BufNewFile,BufRead *.mod setf gmpl
line 2345: endif
line 2346: 
line 2347: if !has_key(g:polyglot_is_disabled, 'glsl')
line 2348:   au! BufNewFile,BufRead,BufWritePost *.fs call polyglot#detect#Fs()
line 2349:   au! BufNewFile,BufRead,BufWritePost *.frag call polyglot#detect#Frag()
line 2350:   au BufNewFile,BufRead *.comp,*.fp,*.frg,*.fsh,*.fshader,*.geo,*.geom,*.glsl,*.glslf,*.glslv,*.gs,*.gshader,*.rchit,*.rmiss,*.shader,*.tesc,*.tese,*.vert,*.vrx,*.vsh,*.vshader setf glsl
line 2351: endif
line 2352: 
line 2353: if !has_key(g:polyglot_is_disabled, 'git')
line 2354:   au BufNewFile,BufRead *.gitconfig,*.git/config,*.git/modules/*/config,*/.config/git/config,*/git/config,{.,}gitconfig,{.,}gitmodules setf gitconfig
line 2355:   au BufNewFile,BufRead */{.,}gitconfig.d/* call s:StarSetf('gitconfig')
line 2356:   au BufNewFile,BufRead git-rebase-todo setf gitrebase
line 2357:   au BufNewFile,BufRead .gitsendemail.* call s:StarSetf('gitsendemail')
line 2358:   au BufNewFile,BufRead COMMIT_EDITMSG,MERGE_MSG,TAG_EDITMSG setf gitcommit
line 2359: endif
line 2360: 
line 2361: if !has_key(g:polyglot_is_disabled, 'gdscript')
line 2362:   au BufNewFile,BufRead *.gd setf gdscript3
line 2363: endif
line 2364: 
line 2365: if !has_key(g:polyglot_is_disabled, 'fsharp')
line 2366:   au! BufNewFile,BufRead,BufWritePost *.fs call polyglot#detect#Fs()
line 2367:   au BufNewFile,BufRead *.fsi,*.fsx setf fsharp
line 2368: endif
line 2369: 
line 2370: if !has_key(g:polyglot_is_disabled, 'forth')
line 2371:   au! BufNewFile,BufRead,BufWritePost *.fs call polyglot#detect#Fs()
line 2372:   au BufNewFile,BufRead *.ft,*.fth setf forth
line 2373: endif
line 2374: 
line 2375: if !has_key(g:polyglot_is_disabled, 'flatbuffers')
line 2376:   au BufNewFile,BufRead *.fbs setf fbs
line 2377: endif
line 2378: 
line 2379: if !has_key(g:polyglot_is_disabled, 'fish')
line 2380:   au BufNewFile,BufRead *.fish setf fish
line 2381: endif
line 2382: 
line 2383: if !has_key(g:polyglot_is_disabled, 'ferm')
line 2384:   au BufNewFile,BufRead *.ferm,ferm.conf setf ferm
line 2385: endif
line 2386: 
line 2387: if !has_key(g:polyglot_is_disabled, 'fennel')
line 2388:   au BufNewFile,BufRead *.fnl setf fennel
line 2389: endif
line 2390: 
line 2391: if !has_key(g:polyglot_is_disabled, 'erlang')
line 2392:   au BufNewFile,BufRead *.app,*.app.src,*.erl,*.es,*.escript,*.hrl,*.xrl,*.yaws,*.yrl,Emakefile,rebar.config,rebar.config.lock,rebar.lock setf erlang
line 2393: endif
line 2394: 
line 2395: if !has_key(g:polyglot_is_disabled, 'emblem')
line 2396:   au BufNewFile,BufRead *.em,*.emblem setf emblem
line 2397: endif
line 2398: 
line 2399: if !has_key(g:polyglot_is_disabled, 'emberscript')
line 2400:   au BufNewFile,BufRead *.em,*.emberscript setf ember-script
line 2401: endif
line 2402: 
line 2403: if !has_key(g:polyglot_is_disabled, 'elm')
line 2404:   au BufNewFile,BufRead *.elm setf elm
line 2405: endif
line 2406: 
line 2407: if !has_key(g:polyglot_is_disabled, 'elixir')
line 2408:   au BufNewFile,BufRead *.ex,*.exs,mix.lock setf elixir
line 2409:   au BufNewFile,BufRead *.eex,*.html.heex,*.html.leex,*.leex setf eelixir
line 2410: endif
line 2411: 
line 2412: if !has_key(g:polyglot_is_disabled, 'docker-compose')
line 2413:   au BufNewFile,BufRead docker-compose*.yaml,docker-compose*.yml setf yaml.docker-compose
line 2414: endif
line 2415: 
line 2416: if !has_key(g:polyglot_is_disabled, 'yaml')
line 2417:   au BufNewFile,BufRead *.mir,*.reek,*.rviz,*.sublime-syntax,*.syntax,*.yaml,*.yaml-tmlanguage,*.yaml.sed,*.yml,*.yml.mysql,{.,}clang-format,{.,}clang-tidy,{.,}gemrc,CITATION.cff,fish_history,fish_read_history,glide.lock,yarn.lock setf yaml
line 2418: endif
line 2419: 
line 2420: if !has_key(g:polyglot_is_disabled, 'mysql')
line 2421:   au BufNewFile,BufRead *.mysql setf mysql
line 2422: endif
line 2423: 
line 2424: if !has_key(g:polyglot_is_disabled, 'sed')
line 2425:   au BufNewFile,BufRead *.sed setf sed
line 2426: endif
line 2427: 
line 2428: if !has_key(g:polyglot_is_disabled, 'dlang')
line 2429:   au BufNewFile,BufRead *.d,*.di setf d
line 2430:   au BufNewFile,BufRead *.lst setf dcov
line 2431:   au BufNewFile,BufRead *.dd setf dd
line 2432:   au BufNewFile,BufRead *.ddoc setf ddoc
line 2433:   au BufNewFile,BufRead *.sdl setf dsdl
line 2434: endif
line 2435: 
line 2436: if !has_key(g:polyglot_is_disabled, 'dhall')
line 2437:   au BufNewFile,BufRead *.dhall setf dhall
line 2438: endif
line 2439: 
line 2440: if !has_key(g:polyglot_is_disabled, 'dart')
line 2441:   au BufNewFile,BufRead *.dart,*.drt setf dart
line 2442: endif
line 2443: 
line 2444: if !has_key(g:polyglot_is_disabled, 'cue')
line 2445:   au BufNewFile,BufRead *.cue setf cuesheet
line 2446: endif
line 2447: 
line 2448: if !has_key(g:polyglot_is_disabled, 'cucumber')
line 2449:   au BufNewFile,BufRead *.feature,*.story setf cucumber
line 2450: endif
line 2451: 
line 2452: if !has_key(g:polyglot_is_disabled, 'crystal')
line 2453:   au BufNewFile,BufRead *.cr,Projectfile setf crystal
line 2454:   au BufNewFile,BufRead *.ecr setf ecrystal
line 2455: endif
line 2456: 
line 2457: if !has_key(g:polyglot_is_disabled, 'cryptol')
line 2458:   au BufNewFile,BufRead *.cry,*.cyl,*.lcry,*.lcyl setf cryptol
line 2459: endif
line 2460: 
line 2461: if !has_key(g:polyglot_is_disabled, 'coffee-script')
line 2462:   au BufNewFile,BufRead *._coffee,*.cake,*.cjsx,*.coffee,*.coffeekup,*.cson,*.iced,Cakefile setf coffee
line 2463:   au BufNewFile,BufRead *.coffee.md,*.litcoffee setf litcoffee
line 2464: endif
line 2465: 
line 2466: if !has_key(g:polyglot_is_disabled, 'markdown')
line 2467:   au BufNewFile,BufRead *.markdown,*.md,*.mdown,*.mdwn,*.mkd,*.mkdn,*.mkdown,*.ronn,*.scd,*.workbook,contents.lr setf markdown
line 2468: endif
line 2469: 
line 2470: if !has_key(g:polyglot_is_disabled, 'cmake')
line 2471:   au BufNewFile,BufRead *.cmake,*.cmake.in,CMakeLists.txt setf cmake
line 2472: endif
line 2473: 
line 2474: if !has_key(g:polyglot_is_disabled, 'clojure')
line 2475:   au BufNewFile,BufRead *.boot,*.cl2,*.clj,*.cljc,*.cljs,*.cljs.hl,*.cljscm,*.cljx,*.edn,*.hic,build.boot,profile.boot,riemann.config setf clojure
line 2476: endif
line 2477: 
line 2478: if !has_key(g:polyglot_is_disabled, 'carp')
line 2479:   au BufNewFile,BufRead *.carp setf carp
line 2480: endif
line 2481: 
line 2482: if !has_key(g:polyglot_is_disabled, 'caddyfile')
line 2483:   au BufNewFile,BufRead Caddyfile setf caddyfile
line 2484: endif
line 2485: 
line 2486: if !has_key(g:polyglot_is_disabled, 'awk')
line 2487:   au BufNewFile,BufRead *.awk,*.gawk setf awk
line 2488: endif
line 2489: 
line 2490: if !has_key(g:polyglot_is_disabled, 'ave')
line 2491:   au BufNewFile,BufRead *.ave setf ave
line 2492: endif
line 2493: 
line 2494: if !has_key(g:polyglot_is_disabled, 'autoit')
line 2495:   au BufNewFile,BufRead *.au3 setf autoit
line 2496: endif
line 2497: 
line 2498: if !has_key(g:polyglot_is_disabled, 'atlas')
line 2499:   au BufNewFile,BufRead *.as,*.atl setf atlas
line 2500: endif
line 2501: 
line 2502: if !has_key(g:polyglot_is_disabled, 'aspperl')
line 2503:   au! BufNewFile,BufRead,BufWritePost *.asp call polyglot#detect#Asp()
line 2504: endif
line 2505: 
line 2506: if !has_key(g:polyglot_is_disabled, 'aspvbs')
line 2507:   au! BufNewFile,BufRead,BufWritePost *.asp call polyglot#detect#Asp()
line 2508:   au! BufNewFile,BufRead,BufWritePost *.asa call polyglot#detect#Asa()
line 2509: endif
line 2510: 
line 2511: if !has_key(g:polyglot_is_disabled, 'asn')
line 2512:   au BufNewFile,BufRead *.asn,*.asn1 setf asn
line 2513: endif
line 2514: 
line 2515: if !has_key(g:polyglot_is_disabled, 'automake')
line 2516:   au BufNewFile,BufRead GNUmakefile.am,[mM]akefile.am setf automake
line 2517: endif
line 2518: 
line 2519: if !has_key(g:polyglot_is_disabled, 'elf')
line 2520:   au BufNewFile,BufRead *.am setf elf
line 2521: endif
line 2522: 
line 2523: if !has_key(g:polyglot_is_disabled, 'make')
line 2524:   au BufNewFile,BufRead *.dsp,*.mak,*.mk,*[mM]akefile setf make
line 2525: endif
line 2526: 
line 2527: if !has_key(g:polyglot_is_disabled, 'autohotkey')
line 2528:   au BufNewFile,BufRead *.ahk,*.ahkl setf autohotkey
line 2529: endif
line 2530: 
line 2531: if !has_key(g:polyglot_is_disabled, 'asciidoc')
line 2532:   au BufNewFile,BufRead *.adoc,*.asc,*.asciidoc setf asciidoc
line 2533: endif
line 2534: 
line 2535: if !has_key(g:polyglot_is_disabled, 'art')
line 2536:   au BufNewFile,BufRead *.art setf art
line 2537: endif
line 2538: 
line 2539: if !has_key(g:polyglot_is_disabled, 'arduino')
line 2540:   au BufNewFile,BufRead *.ino,*.pde setf arduino
line 2541: endif
line 2542: 
line 2543: if !has_key(g:polyglot_is_disabled, 'c/c++')
line 2544:   au! BufNewFile,BufRead,BufWritePost *.h call polyglot#detect#H()
line 2545:   au BufNewFile,BufRead *.c++,*.cc,*.cp,*.cpp,*.cxx,*.h++,*.hh,*.hpp,*.hxx,*.inc,*.inl,*.ipp,*.ixx,*.moc,*.tcc,*.tlh,*.tpp setf cpp
line 2546:   au! BufNewFile,BufRead,BufWritePost *.h call polyglot#detect#H()
line 2547:   au BufNewFile,BufRead *.c,*.cats,*.idc,*.qc,*enlightenment/*.cfg setf c
line 2548: endif
line 2549: 
line 2550: if !has_key(g:polyglot_is_disabled, 'arch')
line 2551:   au BufNewFile,BufRead {.,}arch-inventory,=tagging-method setf arch
line 2552: endif
line 2553: 
line 2554: if !has_key(g:polyglot_is_disabled, 'aptconf')
line 2555:   au BufNewFile,BufRead */.aptitude/config,*/etc/apt/apt.conf.d/*.conf,apt.conf setf aptconf
line 2556:   au BufNewFile,BufRead */etc/apt/apt.conf.d/[^.]* call s:StarSetf('aptconf')
line 2557: endif
line 2558: 
line 2559: if !has_key(g:polyglot_is_disabled, 'applescript')
line 2560:   au BufNewFile,BufRead *.applescript,*.scpt setf applescript
line 2561: endif
line 2562: 
line 2563: if !has_key(g:polyglot_is_disabled, 'apiblueprint')
line 2564:   au BufNewFile,BufRead *.apib setf apiblueprint
line 2565: endif
line 2566: 
line 2567: if !has_key(g:polyglot_is_disabled, 'apache')
line 2568:   au BufNewFile,BufRead */etc/apache2/sites-*/*.com,*/etc/httpd/*.conf,{.,}htaccess setf apache
line 2569:   au BufNewFile,BufRead srm.conf* call s:StarSetf('apache')
line 2570:   au BufNewFile,BufRead httpd.conf* call s:StarSetf('apache')
line 2571:   au BufNewFile,BufRead apache2.conf* call s:StarSetf('apache')
line 2572:   au BufNewFile,BufRead apache.conf* call s:StarSetf('apache')
line 2573:   au BufNewFile,BufRead access.conf* call s:StarSetf('apache')
line 2574:   au BufNewFile,BufRead */etc/httpd/conf.d/*.conf* call s:StarSetf('apache')
line 2575:   au BufNewFile,BufRead */etc/apache2/sites-*/* call s:StarSetf('apache')
line 2576:   au BufNewFile,BufRead */etc/apache2/mods-*/* call s:StarSetf('apache')
line 2577:   au BufNewFile,BufRead */etc/apache2/conf.*/* call s:StarSetf('apache')
line 2578:   au BufNewFile,BufRead */etc/apache2/*.conf* call s:StarSetf('apache')
line 2579: endif
line 2580: 
line 2581: if !has_key(g:polyglot_is_disabled, 'ant')
line 2582:   au BufNewFile,BufRead build.xml setf ant
line 2583: endif
line 2584: 
line 2585: if !has_key(g:polyglot_is_disabled, 'xml')
line 2586:   au BufNewFile,BufRead *.adml,*.admx,*.ant,*.axaml,*.axml,*.builds,*.ccproj,*.ccxml,*.cdxml,*.clixml,*.cproject,*.cscfg,*.csdef,*.csl,*.csproj,*.csproj.user,*.ct,*.depproj,*.dita,*.ditamap,*.ditaval,*.dll.config,*.dotsettings,*.filters,*.fsproj,*.fxml,*.glade,*.gml,*.gmx,*.grxml,*.gst,*.hzp,*.iml,*.ivy,*.jelly,*.jsproj,*.kml,*.launch,*.mdpolicy,*.mjml,*.mod,*.mxml,*.natvis,*.ncl,*.ndproj,*.nproj,*.nuspec,*.odd,*.osm,*.pkgproj,*.pluginspec,*.proj,*.props,*.psc1,*.pt,*.rdf,*.res,*.resx,*.rss,*.sch,*.scxml,*.sfproj,*.shproj,*.srdf,*.storyboard,*.sublime-snippet,*.targets,*.tml,*.tpm,*.ui,*.urdf,*.ux,*.vbproj,*.vcxproj,*.vsixmanifest,*.vssettings,*.vstemplate,*.vxml,*.wixproj,*.workflow,*.wpl,*.wsdl,*.wsf,*.wxi,*.wxl,*.wxs,*.x3d,*.xacro,*.xaml,*.xib,*.xlf,*.xliff,*.xmi,*.xml,*.xml.dist,*.xmp,*.xproj,*.xsd,*.xspec,*.xul,*.zcml,*/etc/blkid.tab,*/etc/blkid.tab.old,*/etc/xdg/menus/*.menu,*fglrxrc,{.,}classpath,{.,}cproject,{.,}project,App.config,NuGet.config,Settings.StyleCop,Web.Debug.config,Web.Release.
line 2587: endif
line 2588: 
line 2589: if !has_key(g:polyglot_is_disabled, 'csv')
line 2590:   au BufNewFile,BufRead *.csv,*.tab,*.tsv setf csv
line 2591: endif
line 2592: 
line 2593: if !has_key(g:polyglot_is_disabled, 'ampl')
line 2594:   " AMPL
line 2595:   au BufNewFile,BufRead *.run setf ampl
line 2596: endif
line 2597: 
line 2598: if !has_key(g:polyglot_is_disabled, 'aml')
line 2599:   au BufNewFile,BufRead *.aml setf aml
line 2600: endif
line 2601: 
line 2602: if !has_key(g:polyglot_is_disabled, 'alsaconf')
line 2603:   au BufNewFile,BufRead */etc/asound.conf,*/usr/share/alsa/alsa.conf,{.,}asoundrc setf alsaconf
line 2604: endif
line 2605: 
line 2606: if !has_key(g:polyglot_is_disabled, 'conf')
line 2607:   au BufNewFile,BufRead *.conf,*/etc/hosts,auto.master,config setf conf
line 2608: endif
line 2609: 
line 2610: if !has_key(g:polyglot_is_disabled, 'master')
line 2611:   au BufNewFile,BufRead *.mas,*.master setf master
line 2612: endif
line 2613: 
line 2614: if !has_key(g:polyglot_is_disabled, 'aidl')
line 2615:   " AIDL
line 2616:   au BufNewFile,BufRead *.aidl setf aidl
line 2617: endif
line 2618: 
line 2619: if !has_key(g:polyglot_is_disabled, 'ahdl')
line 2620:   " AHDL
line 2621:   au BufNewFile,BufRead *.tdf setf ahdl
line 2622: endif
line 2623: 
line 2624: if !has_key(g:polyglot_is_disabled, 'ada')
line 2625:   " Ada (83, 9X, 95)
line 2626:   au BufNewFile,BufRead *.ada,*.ada_m,*.adb,*.adc,*.ads,*.gpr setf ada
line 2627: endif
line 2628: 
line 2629: if !has_key(g:polyglot_is_disabled, 'acpiasl')
line 2630:   au BufNewFile,BufRead *.asl,*.dsl setf asl
line 2631: endif
line 2632: 
line 2633: if !has_key(g:polyglot_is_disabled, 'acedb')
line 2634:   " AceDB
line 2635:   au BufNewFile,BufRead *.wrm setf acedb
line 2636: endif
line 2637: 
line 2638: if !has_key(g:polyglot_is_disabled, 'abel')
line 2639:   " ABEL
line 2640:   au BufNewFile,BufRead *.abl setf abel
line 2641: endif
line 2642: 
line 2643: if !has_key(g:polyglot_is_disabled, 'abc')
line 2644:   " ABC music notation
line 2645:   au BufNewFile,BufRead *.abc setf abc
line 2646: endif
line 2647: 
line 2648: if !has_key(g:polyglot_is_disabled, 'abaqus')
line 2649:   au! BufNewFile,BufRead,BufWritePost *.inp call polyglot#detect#Inp()
line 2650: endif
line 2651: 
line 2652: if !has_key(g:polyglot_is_disabled, 'abap')
line 2653:   " ABAB/4
line 2654:   au BufNewFile,BufRead *.abap setf abap
line 2655: endif
line 2656: 
line 2657: if !has_key(g:polyglot_is_disabled, 'aap')
line 2658:   " A-A-P recipe
line 2659:   au BufNewFile,BufRead *.aap setf aap
line 2660: endif
line 2661: 
line 2662: if !has_key(g:polyglot_is_disabled, 'a65')
line 2663:   " XA65 MOS6510 cross assembler
line 2664:   au BufNewFile,BufRead *.a65 setf a65
line 2665: endif
line 2666: 
line 2667: if !has_key(g:polyglot_is_disabled, 'a2ps')
line 2668:   au BufNewFile,BufRead */etc/a2ps.cfg,*/etc/a2ps/*.cfg,{.,}a2psrc,a2psrc setf a2ps
line 2669: endif
line 2670: 
line 2671: if !has_key(g:polyglot_is_disabled, 'cfg')
line 2672:   au BufNewFile,BufRead *.cfg,*.hgrc,*hgrc setf cfg
line 2673: endif
line 2674: 
line 2675: if !has_key(g:polyglot_is_disabled, '8th')
line 2676:   " 8th (Firth-derivative)
line 2677:   au BufNewFile,BufRead *.8th setf 8th
line 2678: endif
line 2679: 
line 2680: 
line 2681: " DO NOT EDIT CODE ABOVE, IT IS GENERATED WITH MAKEFILE
line 2682: 
line 2683: let s:detect_func = 'shebang#Detect'
line 2684: 
line 2685: func! s:PolyglotObserve(fn)
line 2688: 
line 2689: func! s:Observe()
line 2695: 
line 2696: au BufNewFile,BufRead,StdinReadPost,BufWritePost * if (&ft == "" || &ft == "conf") && expand("<afile>:e") == "" | call polyglot#shebang#Detect() | endif
line 2698: 
line 2699: au BufWinEnter * if &ft == "" && expand("<afile>:e") == "" | call s:Observe() | endif
line 2701: 
line 2702: au BufWritePost * au! polyglot-observer
line 2703: 
line 2704: augroup END
line 2705: 
line 2706: endif
line 2707: 
line 2708: if !has_key(g:polyglot_is_disabled, 'sensible')
line 2709:   " Use 2-spaces tab indentation by default
line 2710:   if &tabstop == 8
line 2711:     let &tabstop = 2
line 2712:   endif
line 2713: 
line 2714:   " Set shiftwidth to proper value as users often mix it with tabstop
line 2715:   if &shiftwidth > &tabstop
line 2716:     let &shiftwidth = &tabstop
line 2717:   endif
line 2718: 
line 2719:   " Use utf-8 encoding by default
line 2720:   set encoding=utf-8
line 2721: 
line 2722:   " Reload unchanged files automatically.
line 2723:   set autoread
line 2724: 
line 2725:   " This is needed to avoid swapfile warning when auto-reloading
line 2726:   set shortmess+=A
line 2727: 
line 2728:   " Avoids swapfiles in current directory
line 2729:   if &directory =~# '^\.,'
line 2730:     if !empty($HOME)
line 2731:       if has('win32')
line 2732:         let &directory = expand('$HOME/vimfiles') . '//,' . &directory
line 2733:       else
line 2734:         let &directory = expand('$HOME/.vim') . '//,' . &directory
line 2735:       endif
line 2736:     endif
line 2737:     if !empty($XDG_DATA_HOME)
line 2738:       let &directory = expand('$XDG_DATA_HOME') . '//,' . &directory
line 2739:     endif
line 2740:     if has('macunix')
line 2741:       let &directory = expand('$HOME/Library/Autosave Information') . '//,' . &directory
line 2742:     endif
line 2743:   endif
line 2744: 
line 2745:   " Autoindent when starting new line, or using `o` or `O`.
line 2746:   set autoindent
line 2747: endif
line 2748: 
line 2749: if !has_key(g:polyglot_is_disabled, 'autoindent')
line 2750:   " Code below re-implements sleuth for vim-polyglot
line 2751:   let g:loaded_sleuth = 1
line 2752: 
line 2753:   let s:default_shiftwidth = &shiftwidth
line 2754: 
line 2755:   func! s:get_shiftwidth(indents) abort
line 2776: 
line 2777:   func! s:guess(lines) abort
line 2909: 
line 2910:   func! s:detect_indent() abort
line 2960: 
line 2961:   set smarttab
line 2962: 
line 2963:   func! SleuthIndicator() abort
line 2973: 
line 2974:   augroup polyglot-sleuth
line 2975:     au!
line 2976:     au BufEnter * call s:detect_indent()
line 2977:     au User Flags call Hoist('buffer', 5, 'SleuthIndicator')
line 2978:   augroup END
line 2979: 
line 2980:   command! -bar -bang Sleuth call s:detect_indent()
line 2981: endif
line 2982: 
line 2983: augroup filetypedetect
line 2984: 
line 2985: " Ignored extensions
line 2986: if exists("*fnameescape")
line 2987: au BufNewFile,BufRead ?\+.orig,?\+.bak,?\+.old,?\+.new,?\+.dpkg-dist,?\+.dpkg-old,?\+.dpkg-new,?\+.dpkg-bak,?\+.rpmsave,?\+.rpmnew,?\+.pacsave,?\+.pacnew exe "doau filetypedetect BufRead " . fnameescape(expand("<afile>:r"))
line 2989: au BufNewFile,BufRead *~ let s:name = expand("<afile>") | let s:short = substitute(s:name, '\~$', '', '') | if s:name != s:short && s:short != "" |   exe "doau filetypedetect BufRead " . fnameescape(s:short) | endif | unlet! s:name s:short
line 2996: au BufNewFile,BufRead ?\+.in if expand("<afile>:t") != "configure.in" |   exe "doau filetypedetect BufRead " . fnameescape(expand("<afile>:r")) | endif
line 3000: elseif &verbose > 0
line 3001:   echomsg "Warning: some filetypes will not be recognized because this version of Vim does not have fnameescape()"
line 3002: endif
line 3003: 
line 3004: " Pattern used to match file names which should not be inspected.
line 3005: " Currently finds compressed files.
line 3006: if !exists("g:ft_ignore_pat")
line 3007:   let g:ft_ignore_pat = '\.\(Z\|gz\|bz2\|zip\|tgz\)$'
line 3008: endif
line 3009: 
line 3010: " *.cmd is close to a Batch file, but on OS/2 Rexx files also use *.cmd.
line 3011: au BufNewFile,BufRead *.cmd if getline(1) =~ '^/\*' | setf rexx | else | setf dosbatch | endif
line 3013: 
line 3014: " Batch file for 4DOS
line 3015: au BufNewFile,BufRead *.btm^I^I^Icall polyglot#ft#FTbtm()
line 3016: 
line 3017: " BIND zone
line 3018: au BufNewFile,BufRead *.db^I^I^Icall polyglot#ft#BindzoneCheck('')
line 3019: 
line 3020: " C or lpc
line 3021: au BufNewFile,BufRead *.c^I^I^Icall polyglot#ft#FTlpc()
line 3022: 
line 3023: " Cynlib
line 3024: " .cc and .cpp files can be C++ or Cynlib.
line 3025: au BufNewFile,BufRead *.cpp if exists("cynlib_syntax_for_cpp")|setf cynlib|else|setf cpp|endif
line 3026: 
line 3027: au BufNewFile,BufRead *.h^I^I^Icall polyglot#ft#FTheader()
line 3028: 
line 3029: au BufNewFile,BufRead [cC]hange[lL]og  if getline(1) =~ '; urgency='|   setf debchangelog| else|   setf changelog| endif
line 3035: 
line 3036: au BufNewFile,BufRead NEWS  if getline(1) =~ '; urgency='|   setf debchangelog| endif
line 3040: 
line 3041: " Changes for WEB and CWEB or CHILL
line 3042: au BufNewFile,BufRead *.ch^I^I^Icall polyglot#ft#FTchange()
line 3043: 
line 3044: " Clever or dtd
line 3045: au BufNewFile,BufRead *.ent^I^I^Icall polyglot#ft#FTent()
line 3046: 
line 3047: " Clipper (or FoxPro; could also be eviews)
line 3048: au BufNewFile,BufRead *.prg if exists("g:filetype_prg") |   exe "setf " . g:filetype_prg | else |   setf clipper | endif
line 3054: 
line 3055: au BufNewFile,BufRead *.cpy if getline(1) =~ '^##' |   setf python | else |   setf cobol | endif
line 3061: 
line 3062: " Euphoria 3 or 4
line 3063: au BufNewFile,BufRead *.eu,*.ew,*.ex,*.exu,*.exw  call polyglot#ft#EuphoriaCheck()
line 3064: if has("fname_case")
line 3065:    au BufNewFile,BufRead *.EU,*.EW,*.EX,*.EXU,*.EXW  call polyglot#ft#EuphoriaCheck()
line 3066: endif
line 3067: 
line 3068: au BufNewFile,BufRead control  if getline(1) =~ '^Source:'|   setf debcontrol| endif
line 3072: 
line 3073: au BufNewFile,BufRead copyright  if getline(1) =~ '^Format:'|   setf debcopyright| endif
line 3077: 
line 3078: " the D language or dtrace
line 3079: au BufNewFile,BufRead *.d^I^I^Icall polyglot#ft#DtraceCheck()
line 3080: 
line 3081: au BufNewFile,BufRead *.patch if getline(1) =~ '^From [0-9a-f]\{40\} Mon Sep 17 00:00:00 2001$' |   setf gitsendemail | else |   setf diff | endif
line 3087: 
line 3088: " Diva (with Skill) or InstallShield
line 3089: au BufNewFile,BufRead *.rul if getline(1).getline(2).getline(3).getline(4).getline(5).getline(6) =~? 'InstallShield' |   setf ishd | else |   setf diva | endif
line 3095: 
line 3096: " DCL (Digital Command Language - vms) or DNS zone file
line 3097: au BufNewFile,BufRead *.com^I^I^Icall polyglot#ft#BindzoneCheck('dcl')
line 3098: 
line 3099: au BufNewFile,BufRead *.edn if getline(1) =~ '^\s*(\s*edif\>' |   setf edif | else |   setf clojure | endif
line 3105: 
line 3106: " Eiffel or Specman or Euphoria
line 3107: au BufNewFile,BufRead *.e,*.E^I^I^Icall polyglot#ft#FTe()
line 3108: 
line 3109: if !empty($XDG_CONFIG_HOME)
line 3110:   au BufNewFile,BufRead $XDG_CONFIG_HOME/git/config^I^Isetf gitconfig
line 3111: endif
line 3112: 
line 3113: au BufNewFile,BufRead .msg.[0-9]* if getline(1) =~ '^From.*# This line is ignored.$' |   setf gitsendemail | endif
line 3117: au BufNewFile,BufRead *.git/* if getline(1) =~ '^\x\{40\}\>\|^ref: ' |   setf git | endif
line 3121: 
line 3122: if !empty($GNUPGHOME)
line 3123:   au BufNewFile,BufRead $GNUPGHOME/options^Isetf gpg
line 3124:   au BufNewFile,BufRead $GNUPGHOME/gpg.conf^Isetf gpg
line 3125: endif
line 3126: 
line 3127: " HTML (.shtml and .stm for server side)
line 3128: au BufNewFile,BufRead *.html,*.htm,*.shtml,*.stm  call polyglot#ft#FThtml()
line 3129: 
line 3130: " IDL (Interface Description Language)
line 3131: au BufNewFile,BufRead *.idl^I^I^Icall polyglot#ft#FTidl()
line 3132: 
line 3133: au BufNewFile,BufRead indent.pro^I^Icall polyglot#ft#ProtoCheck('indent')
line 3134: 
line 3135: " IDL (Interactive Data Language)
line 3136: au BufNewFile,BufRead *.pro^I^I^Icall polyglot#ft#ProtoCheck('idlang')
line 3137: 
line 3138: " M4
line 3139: au BufNewFile,BufRead *.m4 if expand("<afile>") !~? 'html.m4$\|fvwm2rc' | setf m4 | endif
line 3141: 
line 3142: " Mathematica, Matlab, Murphi or Objective C
line 3143: au BufNewFile,BufRead *.m^I^I^Icall polyglot#ft#FTm()
line 3144: 
line 3145: " MMIX or VMS makefile
line 3146: au BufNewFile,BufRead *.mms^I^I^Icall polyglot#ft#FTmms()
line 3147: 
line 3148: " Modsim III (or LambdaProlog)
line 3149: au BufNewFile,BufRead *.mod if getline(1) =~ '\<module\>' |   setf lprolog | else |   setf modsim3 | endif
line 3155: 
line 3156: " Mutt setup files (must be before catch *.rc)
line 3157: au BufNewFile,BufRead */etc/Muttrc.d/*^I^Icall s:StarSetf('muttrc')
line 3158: 
line 3159: " Nroff/Troff (*.ms and *.t are checked below)
line 3160: au BufNewFile,BufRead *.me if expand("<afile>") != "read.me" && expand("<afile>") != "click.me" |   setf nroff | endif
line 3164: au BufNewFile,BufRead *.[1-9]^I^I^Icall polyglot#ft#FTnroff()
line 3165: 
line 3166: " Nroff or Objective C++
line 3167: au BufNewFile,BufRead *.mm^I^I^Icall polyglot#ft#FTmm()
line 3168: 
line 3169: " Pacman hooks
line 3170: au BufNewFile,BufRead *.hook if getline(1) == '[Trigger]' |   setf dosini | endif
line 3174: 
line 3175: " Perl
line 3176: au BufNewFile,BufRead *.pl^I^I^Icall polyglot#ft#FTpl()
line 3177: 
line 3178: " Perl, XPM or XPM2
line 3179: au BufNewFile,BufRead *.pm if getline(1) =~ "XPM2" |   setf xpm2 | elseif getline(1) =~ "XPM" |   setf xpm | else |   setf perl | endif
line 3187: 
line 3188: " Povray, PHP or assembly
line 3189: au BufNewFile,BufRead *.inc^I^I^Icall polyglot#ft#FTinc()
line 3190: 
line 3191: " Printcap and Termcap
line 3192: au BufNewFile,BufRead *printcap let b:ptcap_type = "print" | setf ptcap
line 3194: au BufNewFile,BufRead *termcap let b:ptcap_type = "term" | setf ptcap
line 3196: 
line 3197: " Progress or CWEB
line 3198: au BufNewFile,BufRead *.w^I^I^Icall polyglot#ft#FTprogress_cweb()
line 3199: 
line 3200: " Progress or assembly
line 3201: au BufNewFile,BufRead *.i^I^I^Icall polyglot#ft#FTprogress_asm()
line 3202: 
line 3203: " Progress or Pascal
line 3204: au BufNewFile,BufRead *.p^I^I^Icall polyglot#ft#FTprogress_pascal()
line 3205: 
line 3206: " Software Distributor Product Specification File (POSIX 1387.2-1995)
line 3207: au BufNewFile,BufRead INDEX,INFO if getline(1) =~ '^\s*\(distribution\|installed_software\|root\|bundle\|product\)\s*$' |   setf psf | endif
line 3211: 
line 3212: " Registry for MS-Windows
line 3213: au BufNewFile,BufRead *.reg if getline(1) =~? '^REGEDIT[0-9]*\s*$\|^Windows Registry Editor Version \d*\.\d*\s*$' | setf registry | endif
line 3215: 
line 3216: " Rexx, Rebol or R
line 3217: au BufNewFile,BufRead *.r,*.R^I^I^I^Icall polyglot#ft#FTr()
line 3218: 
line 3219: " Sendmail .mc files are actually m4.  Could also be MS Message text file.
line 3220: au BufNewFile,BufRead *.mc^I^I^Icall polyglot#ft#McSetf()
line 3221: 
line 3222: " SGML
line 3223: au BufNewFile,BufRead *.sgm,*.sgml if getline(1).getline(2).getline(3).getline(4).getline(5) =~? 'linuxdoc' |   setf sgmllnx | elseif getline(1) =~ '<!DOCTYPE.*DocBook' || getline(2) =~ '<!DOCTYPE.*DocBook' |   let b:docbk_type = "sgml" |   let b:docbk_ver = 4 |   setf docbk | else |   setf sgml | endif
line 3233: 
line 3234: " SGMLDECL
line 3235: au BufNewFile,BufRead *.decl,*.dcl,*.dec if getline(1).getline(2).getline(3) =~? '^<!SGML' |    setf sgmldecl | endif
line 3239: 
line 3240: " Shell scripts (sh, ksh, bash, bash2, csh); Allow .profile_foo etc.
line 3241: " Gentoo ebuilds and Arch Linux PKGBUILDs are actually bash scripts
line 3242: " NOTE: Patterns ending in a star are further down, these have lower priority.
line 3243: au BufNewFile,BufRead .bashrc,bashrc,bash.bashrc,.bash[_-]profile,.bash[_-]logout,.bash[_-]aliases,bash-fc[-.],*.bash,*/{,.}bash[_-]completion{,.d,.sh}{,/*},*.ebuild,*.eclass,PKGBUILD call polyglot#ft#SetFileTypeSH("bash")
line 3244: au BufNewFile,BufRead .kshrc,*.ksh call polyglot#ft#SetFileTypeSH("ksh")
line 3245: au BufNewFile,BufRead */etc/profile,.profile,*.sh,*.env call polyglot#ft#SetFileTypeSH(getline(1))
line 3246: 
line 3247: 
line 3248: " Shell script (Arch Linux) or PHP file (Drupal)
line 3249: au BufNewFile,BufRead *.install if getline(1) =~ '<?php' |   setf php | else |   call polyglot#ft#SetFileTypeSH("bash") | endif
line 3255: 
line 3256: " tcsh scripts (patterns ending in a star further below)
line 3257: au BufNewFile,BufRead .tcshrc,*.tcsh,tcsh.tcshrc,tcsh.login^Icall polyglot#ft#SetFileTypeShell("tcsh")
line 3258: 
line 3259: " csh scripts, but might also be tcsh scripts (on some systems csh is tcsh)
line 3260: " (patterns ending in a start further below)
line 3261: au BufNewFile,BufRead .login,.cshrc,csh.cshrc,csh.login,csh.logout,*.csh,.alias  call polyglot#ft#CSH()
line 3262: 
line 3263: au BufNewFile,BufRead *.cls if getline(1) =~ '^%' |  setf tex | elseif getline(1)[0] == '#' && getline(1) =~ 'rexx' |  setf rexx | else |  setf st | endif
line 3271: 
line 3272: " SMIL or XML
line 3273: au BufNewFile,BufRead *.smil if getline(1) =~ '<?\s*xml.*?>' |   setf xml | else |   setf smil | endif
line 3279: 
line 3280: " SMIL or SNMP MIB file
line 3281: au BufNewFile,BufRead *.smi if getline(1) =~ '\<smil\>' |   setf smil | else |   setf mib | endif
line 3287: 
line 3288: au BufNewFile,BufRead *.rules^I^I^Icall polyglot#ft#FTRules()
line 3289: 
line 3290: " SQL
line 3291: au BufNewFile,BufRead *.sql^I^I^Icall polyglot#ft#SQL()
line 3292: 
line 3293: " Also *.class, but not when it's a Java bytecode file
line 3294: au BufNewFile,BufRead *.class if getline(1) !~ "^\xca\xfe\xba\xbe" | setf stata | endif
line 3296: 
line 3297: au BufNewFile,BufRead *.tex^I^I^Icall polyglot#ft#FTtex()
line 3298: 
line 3299: " Virata Config Script File or Drupal module
line 3300: au BufRead,BufNewFile *.hw,*.module,*.pkg if getline(1) =~ '<?php' |   setf php | else |   setf virata | endif
line 3306: 
line 3307: " Visual Basic (also uses *.bas) or FORM
line 3308: au BufNewFile,BufRead *.frm^I^I^Icall polyglot#ft#FTVB("form")
line 3309: 
line 3310: " WEB (*.web is also used for Winbatch: Guess, based on expecting "%" comment
line 3311: " lines in a WEB file).
line 3312: au BufNewFile,BufRead *.web if getline(1)[0].getline(2)[0].getline(3)[0].getline(4)[0].getline(5)[0] =~ "%" |   setf web | else |   setf winbatch | endif
line 3318: 
line 3319: " X Pixmap (dynamically sets colors, use BufEnter to make it work better)
line 3320: au BufEnter *.xpm if getline(1) =~ "XPM2" |   setf xpm2 | else |   setf xpm | endif
line 3326: 
line 3327: " XFree86 config
line 3328: au BufNewFile,BufRead XF86Config if getline(1) =~ '\<XConfigurator\>' |   let b:xf86conf_xfree86_version = 3 | endif | setf xf86conf
line 3333: au BufNewFile,BufRead */xorg.conf.d/*.conf let b:xf86conf_xfree86_version = 4 | setf xf86conf
line 3336: 
line 3337: " Xorg config
line 3338: au BufNewFile,BufRead xorg.conf,xorg.conf-4^Ilet b:xf86conf_xfree86_version = 4 | setf xf86conf
line 3339: 
line 3340: au BufNewFile,BufRead *.ms if !polyglot#ft#FTnroff() | setf xmath | endif
line 3342: 
line 3343: " XML  specific variants: docbk and xbl
line 3344: au BufNewFile,BufRead *.xml^I^I^Icall polyglot#ft#FTxml()
line 3345: 
line 3346: " Yacc or racc
line 3347: au BufNewFile,BufRead *.y^I^I^Icall polyglot#ft#FTy()
line 3348: 
line 3349: " Zope
line 3350: "   dtml (zope dynamic template markup language), pt (zope page template),
line 3351: "   cpt (zope form controller page template)
line 3352: au BufNewFile,BufRead *.dtml,*.pt,*.cpt^I^Icall polyglot#ft#FThtml()
line 3353: "   zsql (zope sql method)
line 3354: au BufNewFile,BufRead *.zsql^I^I^Icall polyglot#ft#SQL()
line 3355: 
line 3356: augroup END
line 3357: 
line 3358: 
line 3359: " Source the user-specified filetype file, for backwards compatibility with
line 3360: " Vim 5.x.
line 3361: if exists("myfiletypefile") && filereadable(expand(myfiletypefile))
line 3362:   execute "source " . myfiletypefile
line 3363: endif
line 3364: 
line 3365: 
line 3366: " Check for "*" after loading myfiletypefile, so that scripts.vim is only used
line 3367: " when there are no matching file name extensions.
line 3368: " Don't do this for compressed files.
line 3369: augroup filetypedetect
line 3370: au BufNewFile,BufRead * if !did_filetype() && expand("<amatch>") !~ g:ft_ignore_pat | runtime! scripts.vim | endif
line 3373: au StdinReadPost * if !did_filetype() | runtime! scripts.vim | endif
line 3374: 
line 3375: 
line 3376: " Extra checks for when no filetype has been detected now.  Mostly used for
line 3377: " patterns that end in "*".  E.g., "zsh*" matches "zsh.vim", but that's a Vim
line 3378: " script file.
line 3379: " Most of these should call s:StarSetf() to avoid names ending in .gz and the
line 3380: " like are used.
line 3381: 
line 3382: " More Apache style config files
line 3383: au BufNewFile,BufRead */etc/proftpd/*.conf*,*/etc/proftpd/conf.*/*^Icall s:StarSetf('apachestyle')
line 3384: au BufNewFile,BufRead proftpd.conf*^I^I^I^I^Icall s:StarSetf('apachestyle')
line 3385: 
line 3386: " More Apache config files
line 3387: au BufNewFile,BufRead access.conf*,apache.conf*,apache2.conf*,httpd.conf*,srm.conf*^Icall s:StarSetf('apache')
line 3388: au BufNewFile,BufRead */etc/apache2/*.conf*,*/etc/apache2/conf.*/*,*/etc/apache2/mods-*/*,*/etc/apache2/sites-*/*,*/etc/httpd/conf.d/*.conf*^I^Icall s:StarSetf('apache')
line 3389: 
line 3390: " Asterisk config file
line 3391: au BufNewFile,BufRead *asterisk/*.conf*^I^Icall s:StarSetf('asterisk')
line 3392: au BufNewFile,BufRead *asterisk*/*voicemail.conf* call s:StarSetf('asteriskvm')
line 3393: 
line 3394: " BIND zone
line 3395: au BufNewFile,BufRead */named/db.*,*/bind/db.*^Icall s:StarSetf('bindzone')
line 3396: 
line 3397: " Calendar
line 3398: au BufNewFile,BufRead */.calendar/*,*/share/calendar/*/calendar.*,*/share/calendar/calendar.*^I^I^I^I^Icall s:StarSetf('calendar')
line 3401: 
line 3402: " Changelog
line 3403: au BufNewFile,BufRead [cC]hange[lL]og* if getline(1) =~ '; urgency='|  call s:StarSetf('debchangelog')|else|  call s:StarSetf('changelog')|endif
line 3409: 
line 3410: " Crontab
line 3411: au BufNewFile,BufRead crontab,crontab.*,*/etc/cron.d/*^I^Icall s:StarSetf('crontab')
line 3412: 
line 3413: " dnsmasq(8) configuration
line 3414: au BufNewFile,BufRead */etc/dnsmasq.d/*^I^Icall s:StarSetf('dnsmasq')
line 3415: 
line 3416: " Dracula
line 3417: au BufNewFile,BufRead drac.*^I^I^Icall s:StarSetf('dracula')
line 3418: 
line 3419: " Fvwm
line 3420: au BufNewFile,BufRead */.fvwm/*^I^I^Icall s:StarSetf('fvwm')
line 3421: au BufNewFile,BufRead *fvwmrc*,*fvwm95*.hook let b:fvwm_version = 1 | call s:StarSetf('fvwm')
line 3423: au BufNewFile,BufRead *fvwm2rc* if expand("<afile>:e") == "m4"|  call s:StarSetf('fvwm2m4')|else|  let b:fvwm_version = 2 | call s:StarSetf('fvwm')|endif
line 3429: 
line 3430: " Gedcom
line 3431: au BufNewFile,BufRead */tmp/lltmp*^I^Icall s:StarSetf('gedcom')
line 3432: 
line 3433: " Git
line 3434: au BufNewFile,BufRead */.gitconfig.d/*,/etc/gitconfig.d/*^Icall s:StarSetf('gitconfig')
line 3435: 
line 3436: " Gitolite
line 3437: au BufNewFile,BufRead */gitolite-admin/conf/*^Icall s:StarSetf('gitolite')
line 3438: 
line 3439: " GTK RC
line 3440: au BufNewFile,BufRead .gtkrc*,gtkrc*^I^Icall s:StarSetf('gtkrc')
line 3441: 
line 3442: " Jam
line 3443: au BufNewFile,BufRead Prl*.*,JAM*.*^I^Icall s:StarSetf('jam')
line 3444: 
line 3445: " Jargon
line 3446: au! BufNewFile,BufRead *jarg* if getline(1).getline(2).getline(3).getline(4).getline(5) =~? 'THIS IS THE JARGON FILE'|  call s:StarSetf('jargon')|endif
line 3450: 
line 3451: " Java Properties resource file (note: doesn't catch font.properties.pl)
line 3452: au BufNewFile,BufRead *.properties_??_??_*^Icall s:StarSetf('jproperties')
line 3453: 
line 3454: " Kconfig
line 3455: au BufNewFile,BufRead Kconfig.*^I^I^Icall s:StarSetf('kconfig')
line 3456: 
line 3457: " Lilo: Linux loader
line 3458: au BufNewFile,BufRead lilo.conf*^I^Icall s:StarSetf('lilo')
line 3459: 
line 3460: " Logcheck
line 3461: au BufNewFile,BufRead */etc/logcheck/*.d*/*^Icall s:StarSetf('logcheck')
line 3462: 
line 3463: " Makefile
line 3464: au BufNewFile,BufRead [mM]akefile*^I^Icall s:StarSetf('make')
line 3465: 
line 3466: " Ruby Makefile
line 3467: au BufNewFile,BufRead [rR]akefile*^I^Icall s:StarSetf('ruby')
line 3468: 
line 3469: " Mail (also matches muttrc.vim, so this is below the other checks)
line 3470: au BufNewFile,BufRead {neo,}mutt[[:alnum:]._-]\\\{6\}^Isetf mail
line 3471: 
line 3472: au BufNewFile,BufRead reportbug-*^I^Icall s:StarSetf('mail')
line 3473: 
line 3474: " Modconf
line 3475: au BufNewFile,BufRead */etc/modutils/* if executable(expand("<afile>")) != 1|  call s:StarSetf('modconf')|endif
line 3479: au BufNewFile,BufRead */etc/modprobe.*^I^Icall s:StarSetf('modconf')
line 3480: 
line 3481: " Mutt setup file
line 3482: au BufNewFile,BufRead .mutt{ng,}rc*,*/.mutt{ng,}/mutt{ng,}rc*^Icall s:StarSetf('muttrc')
line 3483: au BufNewFile,BufRead mutt{ng,}rc*,Mutt{ng,}rc*^I^Icall s:StarSetf('muttrc')
line 3484: 
line 3485: " Neomutt setup file
line 3486: au BufNewFile,BufRead .neomuttrc*,*/.neomutt/neomuttrc*^Icall s:StarSetf('neomuttrc')
line 3487: au BufNewFile,BufRead neomuttrc*,Neomuttrc*^I^Icall s:StarSetf('neomuttrc')
line 3488: 
line 3489: " Nroff macros
line 3490: au BufNewFile,BufRead tmac.*^I^I^Icall s:StarSetf('nroff')
line 3491: 
line 3492: " OpenBSD hostname.if
line 3493: au BufNewFile,BufRead /etc/hostname.*^I^Icall s:StarSetf('config')
line 3494: 
line 3495: " Pam conf
line 3496: au BufNewFile,BufRead */etc/pam.d/*^I^Icall s:StarSetf('pamconf')
line 3497: 
line 3498: " Printcap and Termcap
line 3499: au BufNewFile,BufRead *printcap* if !did_filetype()|  let b:ptcap_type = "print" | call s:StarSetf('ptcap')|endif
line 3503: au BufNewFile,BufRead *termcap* if !did_filetype()|  let b:ptcap_type = "term" | call s:StarSetf('ptcap')|endif
line 3507: 
line 3508: " ReDIF
line 3509: " Only used when the .rdf file was not detected to be XML.
line 3510: au BufRead,BufNewFile *.rdf^I^I^Icall polyglot#ft#Redif()
line 3511: 
line 3512: " Remind
line 3513: au BufNewFile,BufRead .reminders*^I^Icall s:StarSetf('remind')
line 3514: 
line 3515: " SGML catalog file
line 3516: au BufNewFile,BufRead sgml.catalog*^I^Icall s:StarSetf('catalog')
line 3517: 
line 3518: " Shell scripts ending in a star
line 3519: au BufNewFile,BufRead .bashrc*,.bash[_-]profile*,.bash[_-]logout*,.bash[_-]aliases*,bash-fc[-.]*,PKGBUILD* call polyglot#ft#SetFileTypeSH("bash")
line 3520: au BufNewFile,BufRead .kshrc* call polyglot#ft#SetFileTypeSH("ksh")
line 3521: au BufNewFile,BufRead .profile* call polyglot#ft#SetFileTypeSH(getline(1))
line 3522: 
line 3523: " tcsh scripts ending in a star
line 3524: au BufNewFile,BufRead .tcshrc*^Icall polyglot#ft#SetFileTypeShell("tcsh")
line 3525: 
line 3526: " csh scripts ending in a star
line 3527: au BufNewFile,BufRead .login*,.cshrc*  call polyglot#ft#CSH()
line 3528: 
line 3529: " VHDL
line 3530: au BufNewFile,BufRead *.vhdl_[0-9]*^I^Icall s:StarSetf('vhdl')
line 3531: 
line 3532: " Vim script
line 3533: au BufNewFile,BufRead *vimrc*^I^I^Icall s:StarSetf('vim')
line 3534: 
line 3535: " Subversion commit file
line 3536: au BufNewFile,BufRead svn-commit*.tmp^I^Isetf svn
line 3537: 
line 3538: " X resources file
line 3539: au BufNewFile,BufRead Xresources*,*/app-defaults/*,*/Xresources/* call s:StarSetf('xdefaults')
line 3540: 
line 3541: " XFree86 config
line 3542: au BufNewFile,BufRead XF86Config-4* let b:xf86conf_xfree86_version = 4 | call s:StarSetf('xf86conf')
line 3544: au BufNewFile,BufRead XF86Config* if getline(1) =~ '\<XConfigurator\>'|  let b:xf86conf_xfree86_version = 3|endif|call s:StarSetf('xf86conf')
line 3549: 
line 3550: " X11 xmodmap
line 3551: au BufNewFile,BufRead *xmodmap*^I^I^Icall s:StarSetf('xmodmap')
line 3552: 
line 3553: " Xinetd conf
line 3554: au BufNewFile,BufRead */etc/xinetd.d/*^I^Icall s:StarSetf('xinetd')
line 3555: 
line 3556: " yum conf (close enough to dosini)
line 3557: au BufNewFile,BufRead */etc/yum.repos.d/*^Icall s:StarSetf('dosini')
line 3558: 
line 3559: " Z-Shell script ending in a star
line 3560: au BufNewFile,BufRead .zsh*,.zlog*,.zcompdump*  call s:StarSetf('zsh')
line 3561: au BufNewFile,BufRead zsh*,zlog*^I^Icall s:StarSetf('zsh')
line 3562: 
line 3563: 
line 3564: " Help files match *.txt but should have a last line that is a modeline.
line 3565: au BufNewFile,BufRead *.txt  if getline('$') !~ 'vim:.*ft=help'|   setf text| endif
line 3569: 
line 3570: 
line 3571: " NOTE: The above command could have ended the filetypedetect autocmd group
line 3572: " and started another one. Let's make sure it has ended to get to a consistent
line 3573: " state.
line 3574: augroup END
line 3575: 
line 3576: " Use the filetype detect plugins.  They may overrule any of the previously
line 3577: " detected filetypes. No need to load if everything is enabled
line 3578: if exists("did_load_filetypes") && exists("g:polyglot_disabled")
line 3579:   unlet did_load_filetypes
line 3580:   runtime! extras/filetype.vim
line 3581: endif
line 3582: 
line 3583: let s:runtime = resolve($VIMRUNTIME)
line 3584: let s:base = resolve(expand('<sfile>:p:h:h:h'))
line 3585: 
line 3586: func! s:process_rtp(rtp)
line 3628: 
line 3629: " We want vim-polyglot files to load only as fallback
line 3630: let &rtp = join(s:process_rtp(split(&rtp, ',')), ',')
calling function <SNR>15_process_rtp(['/Users/ablanken/.config/nvim', '/etc..., '/Users/ablanken/.config/nvim/after'])

line 1:   " Remove vim-polyglot from paths and make everything absolute
line 2:   let rtp = []
line 3:   for path in a:rtp[1:-2]
line 4:     let abspath = resolve(path)
line 5:     if stridx(abspath, s:base) != 0
line 6:       call add(rtp, abspath)
line 7:     endif
line 8:   endfor
line 3:   for path in a:rtp[1:-2]
line 4:     let abspath = resolve(path)
line 5:     if stridx(abspath, s:base) != 0
line 6:       call add(rtp, abspath)
line 7:     endif
line 8:   endfor
line 3:   for path in a:rtp[1:-2]
line 4:     let abspath = resolve(path)
line 5:     if stridx(abspath, s:base) != 0
line 6:       call add(rtp, abspath)
line 7:     endif
line 8:   endfor
line 3:   for path in a:rtp[1:-2]
line 4:     let abspath = resolve(path)
line 5:     if stridx(abspath, s:base) != 0
line 6:       call add(rtp, abspath)
line 7:     endif
line 8:   endfor
line 3:   for path in a:rtp[1:-2]
line 4:     let abspath = resolve(path)
line 5:     if stridx(abspath, s:base) != 0
line 6:       call add(rtp, abspath)
line 7:     endif
line 8:   endfor
line 3:   for path in a:rtp[1:-2]
line 4:     let abspath = resolve(path)
line 5:     if stridx(abspath, s:base) != 0
line 6:       call add(rtp, abspath)
line 7:     endif
line 8:   endfor
line 3:   for path in a:rtp[1:-2]
line 4:     let abspath = resolve(path)
line 5:     if stridx(abspath, s:base) != 0
line 6:       call add(rtp, abspath)
line 7:     endif
line 8:   endfor
line 3:   for path in a:rtp[1:-2]
line 4:     let abspath = resolve(path)
line 5:     if stridx(abspath, s:base) != 0
line 6:       call add(rtp, abspath)
line 7:     endif
line 8:   endfor
line 3:   for path in a:rtp[1:-2]
line 4:     let abspath = resolve(path)
line 5:     if stridx(abspath, s:base) != 0
line 6:       call add(rtp, abspath)
line 7:     endif
line 8:   endfor
line 3:   for path in a:rtp[1:-2]
line 4:     let abspath = resolve(path)
line 5:     if stridx(abspath, s:base) != 0
line 6:       call add(rtp, abspath)
line 7:     endif
line 8:   endfor
line 3:   for path in a:rtp[1:-2]
line 4:     let abspath = resolve(path)
line 5:     if stridx(abspath, s:base) != 0
line 6:       call add(rtp, abspath)
line 7:     endif
line 8:   endfor
line 9:   let result = [a:rtp[0]]
line 10:   " Then all other stuff (until vimruntime)
line 11:   let i = 0
line 12:   for path in rtp[0:len(rtp)-1]
line 13:     if path == s:runtime
line 14:       break
line 15:     endif
line 16:     call add(result, path)
line 17:     let i = i + 1
line 18:   endfor
line 12:   for path in rtp[0:len(rtp)-1]
line 13:     if path == s:runtime
line 14:       break
line 15:     endif
line 16:     call add(result, path)
line 17:     let i = i + 1
line 18:   endfor
line 12:   for path in rtp[0:len(rtp)-1]
line 13:     if path == s:runtime
line 14:       break
line 15:     endif
line 16:     call add(result, path)
line 17:     let i = i + 1
line 18:   endfor
line 12:   for path in rtp[0:len(rtp)-1]
line 13:     if path == s:runtime
line 14:       break
line 15:     endif
line 16:     call add(result, path)
line 17:     let i = i + 1
line 18:   endfor
line 12:   for path in rtp[0:len(rtp)-1]
line 13:     if path == s:runtime
line 14:       break
line 15:     endif
line 16:     call add(result, path)
line 17:     let i = i + 1
line 18:   endfor
line 19:   " Then vim-polyglot
line 20:   call add(result, s:base)
line 21:   " Then all other files, until after-files
line 22:   while i < len(rtp)
line 23:     let path = rtp[i]
line 24:     if match(path, '[/\\]after$') > -1
line 25:       break
line 26:     endif
line 27:     call add(result, path)
line 28:     let i = i + 1
line 29:   endwhile
line 22:   while i < len(rtp)
line 23:     let path = rtp[i]
line 24:     if match(path, '[/\\]after$') > -1
line 25:       break
line 26:     endif
line 27:     call add(result, path)
line 28:     let i = i + 1
line 29:   endwhile
line 22:   while i < len(rtp)
line 23:     let path = rtp[i]
line 24:     if match(path, '[/\\]after$') > -1
line 25:       break
line 26:     endif
line 27:     call add(result, path)
line 28:     let i = i + 1
line 29:   endwhile
line 30:   " Then vim-polyglot after path
line 31:   call add(result, s:base . '/after')
line 32:   " Then all other after paths
line 33:   while i < len(rtp)
line 34:     let path = rtp[i]
line 35:     call add(result, path)
line 36:     let i = i + 1
line 37:   endwhile
line 33:   while i < len(rtp)
line 34:     let path = rtp[i]
line 35:     call add(result, path)
line 36:     let i = i + 1
line 37:   endwhile
line 33:   while i < len(rtp)
line 34:     let path = rtp[i]
line 35:     call add(result, path)
line 36:     let i = i + 1
line 37:   endwhile
line 33:   while i < len(rtp)
line 34:     let path = rtp[i]
line 35:     call add(result, path)
line 36:     let i = i + 1
line 37:   endwhile
line 33:   while i < len(rtp)
line 34:     let path = rtp[i]
line 35:     call add(result, path)
line 36:     let i = i + 1
line 37:   endwhile
line 38:   " User's after directory is always last
line 39:   call add(result, a:rtp[len(a:rtp)-1])
line 40:   return result
function <SNR>15_process_rtp returning ['/Users/ablanken/.config/nvim', '/pri..., '/Users/ablanken/.config/nvim/after']

continuing in /Users/ablanken/.local/share/nvim/site/pack/packer/start/vim-polyglot/autoload/polyglot/init.vim

line 3631: 
line 3632: " Restore 'cpoptions'
line 3633: let &cpo = s:cpo_save
line 3634: unlet s:cpo_save
finished sourcing /Users/ablanken/.local/share/nvim/site/pack/packer/start/vim-polyglot/autoload/polyglot/init.vim
continuing in /Users/ablanken/.local/share/nvim/site/pack/packer/start/vim-polyglot/filetype.vim
calling function polyglot#init#init()

line 1:   " A no-op as sourcing this file is enough
function polyglot#init#init returning #0

continuing in /Users/ablanken/.local/share/nvim/site/pack/packer/start/vim-polyglot/filetype.vim

finished sourcing /Users/ablanken/.local/share/nvim/site/pack/packer/start/vim-polyglot/filetype.vim
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/vim-rooter/filetype.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/vim-rooter/filetype.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/which-key.nvim/filetype.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/which-key.nvim/filetype.vim"
Searching for "/Users/ablanken/.local/nvim-brew/Cellar/neovim/0.7.0/share/nvim/runtime/filetype.lua"
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/nvim-brew/Cellar/neovim/0.7.0/share/nvim/runtime)
chdir(/Users/ablanken/Sync/src/neovim-conf)
sourcing "/Users/ablanken/.local/nvim-brew/Cellar/neovim/0.7.0/share/nvim/runtime/filetype.lua"
finished sourcing /Users/ablanken/.local/nvim-brew/Cellar/neovim/0.7.0/share/nvim/runtime/filetype.lua
Searching for "/Users/ablanken/.local/nvim-brew/Cellar/neovim/0.7.0/share/nvim/runtime/filetype.vim"
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/nvim-brew/Cellar/neovim/0.7.0/share/nvim/runtime)
chdir(/Users/ablanken/Sync/src/neovim-conf)
sourcing "/Users/ablanken/.local/nvim-brew/Cellar/neovim/0.7.0/share/nvim/runtime/filetype.vim"
line 1: " Vim support file to detect file types
line 2: "
line 3: " Maintainer:^IBram Moolenaar <Bram@vim.org>
line 4: " Last Change:^I2022 Apr 07
line 5: 
line 6: " Listen very carefully, I will say this only once
line 7: if exists("did_load_filetypes")
line 8:   finish
finished sourcing /Users/ablanken/.local/nvim-brew/Cellar/neovim/0.7.0/share/nvim/runtime/filetype.vim
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/Comment.nvim/after/filetype.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/Comment.nvim/after/filetype.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/vim-polyglot/after/filetype.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/vim-polyglot/after/filetype.vim"
Executing: so $VIMRUNTIME/syntax/syntax.vim
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/nvim-brew/Cellar/neovim/0.7.0/share/nvim/runtime/syntax)
chdir(/Users/ablanken/Sync/src/neovim-conf)
sourcing "/Users/ablanken/.local/nvim-brew/Cellar/neovim/0.7.0/share/nvim/runtime/syntax/syntax.vim"
line 1: " Vim syntax support file
line 2: " Maintainer:^IBram Moolenaar <Bram@vim.org>
line 3: " Last Change:^I2001 Sep 04
line 4: 
line 5: " This file is used for ":syntax on".
line 6: " It installs the autocommands and starts highlighting for all buffers.
line 7: 
line 8: if !has("syntax")
line 9:   finish
line 10: endif
line 11: 
line 12: " If Syntax highlighting appears to be on already, turn it off first, so that
line 13: " any leftovers are cleared.
line 14: if exists("syntax_on") || exists("syntax_manual")
line 15:   so <sfile>:p:h/nosyntax.vim
line 16: endif
line 17: 
line 18: " Load the Syntax autocommands and set the default methods for highlighting.
line 19: runtime syntax/synload.vim
Searching for "syntax/synload.vim" in runtime path
Searching for "/Users/ablanken/.config/nvim/syntax/synload.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/syntax/synload.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/42header/syntax/synload.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/auto-session/syntax/synload.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/cheatsheet.nvim/syntax/synload.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/coc-nvim-lua/syntax/synload.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/coc.nvim/syntax/synload.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/Comment.nvim/syntax/synload.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/c_formatter_42.vim/syntax/synload.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/FTerm.nvim/syntax/synload.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/gentoo-syntax/syntax/synload.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/gitsigns.nvim/syntax/synload.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/indent-blankline.nvim/syntax/synload.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/lualine.nvim/syntax/synload.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/neon/syntax/synload.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/nvim-neoclip.lua/syntax/synload.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/nvim-treesitter/syntax/synload.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/nvim-web-devicons/syntax/synload.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/packer.nvim/syntax/synload.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/plenary.nvim/syntax/synload.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/session-lens/syntax/synload.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/sqlite.lua/syntax/synload.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/suda.vim/syntax/synload.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/telescope-file-browser.nvim/syntax/synload.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/telescope-fzf-native.nvim/syntax/synload.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/telescope-packer.nvim/syntax/synload.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/telescope-repo.nvim/syntax/synload.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/telescope-symbols.nvim/syntax/synload.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/telescope.nvim/syntax/synload.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/vim-fugitive/syntax/synload.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/vim-polyglot/syntax/synload.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/vim-rooter/syntax/synload.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/which-key.nvim/syntax/synload.vim"
Searching for "/Users/ablanken/.local/nvim-brew/Cellar/neovim/0.7.0/share/nvim/runtime/syntax/synload.vim"
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/nvim-brew/Cellar/neovim/0.7.0/share/nvim/runtime/syntax)
chdir(/Users/ablanken/Sync/src/neovim-conf)
line 19: sourcing "/Users/ablanken/.local/nvim-brew/Cellar/neovim/0.7.0/share/nvim/runtime/syntax/synload.vim"
line 1: " Vim syntax support file
line 2: " Maintainer:^IBram Moolenaar <Bram@vim.org>
line 3: " Last Change:^I2020 Apr 13
line 4: 
line 5: " This file sets up for syntax highlighting.
line 6: " It is loaded from "syntax.vim" and "manual.vim".
line 7: " 1. Set the default highlight groups.
line 8: " 2. Install Syntax autocommands for all the available syntax files.
line 9: 
line 10: if !has("syntax")
line 11:   finish
line 12: endif
line 13: 
line 14: " let others know that syntax has been switched on
line 15: let syntax_on = 1
line 16: 
line 17: " Line continuation is used here, remove 'C' from 'cpoptions'
line 18: let s:cpo_save = &cpo
line 19: set cpo&vim
line 20: 
line 21: " First remove all old syntax autocommands.
line 22: au! Syntax
line 23: 
line 24: au Syntax *^I^Icall s:SynSet()
line 25: 
line 26: fun! s:SynSet()
line 57: 
line 58: 
line 59: " Handle adding doxygen to other languages (C, C++, C#, IDL, java, php, DataScript)
line 60: au Syntax c,cpp,cs,idl,java,php,datascript if (exists('b:load_doxygen_syntax') && b:load_doxygen_syntax)^I|| (exists('g:load_doxygen_syntax') && g:load_doxygen_syntax)   | runtime! syntax/doxygen.vim | endif
line 65: 
line 66: 
line 67: " Source the user-specified syntax highlighting file
line 68: if exists("mysyntaxfile")
line 69:   let s:fname = expand(mysyntaxfile)
line 70:   if filereadable(s:fname)
line 71:     execute "source " . fnameescape(s:fname)
line 72:   endif
line 73: endif
line 74: 
line 75: " Restore 'cpoptions'
line 76: let &cpo = s:cpo_save
line 77: unlet s:cpo_save
finished sourcing /Users/ablanken/.local/nvim-brew/Cellar/neovim/0.7.0/share/nvim/runtime/syntax/synload.vim
continuing in /Users/ablanken/.local/nvim-brew/Cellar/neovim/0.7.0/share/nvim/runtime/syntax/syntax.vim
line 20: 
line 21: " Load the FileType autocommands if not done yet.
line 22: if exists("did_load_filetypes")
line 23:   let s:did_ft = 1
line 24: else
line 25:   filetype on
line 26:   let s:did_ft = 0
line 27: endif
line 28: 
line 29: " Set up the connection between FileType and Syntax autocommands.
line 30: " This makes the syntax automatically set when the file type is detected.
line 31: augroup syntaxset
line 32:   au! FileType *^Iexe "set syntax=" . expand("<amatch>")
line 33: augroup END
line 34: 
line 35: 
line 36: " Execute the syntax autocommands for the each buffer.
line 37: " If the filetype wasn't detected yet, do that now.
line 38: " Always do the syntaxset autocommands, for buffers where the 'filetype'
line 39: " already was set manually (e.g., help buffers).
line 40: doautoall syntaxset FileType
Executing FileType Autocommands for "*"
autocommand exe "set syntax=" . expand("<amatch>")

Executing: exe "set syntax=" . expand("<amatch>")
Executing: set syntax=
Executing Syntax Autocommands for "*"
autocommand call s:SynSet()

Executing: call s:SynSet()
calling function <SNR>23_SynSet()

line 1:   " clear syntax for :set syntax=OFF  and any syntax name that doesn't exist
line 2:   syn clear
line 3:   if exists("b:current_syntax")
line 4:     unlet b:current_syntax
line 5:   endif
line 6: 
line 7:   let s = expand("<amatch>")
line 8:   if s == "ON"
line 9:     " :set syntax=ON
line 10:     if &filetype == ""
line 11:       echohl ErrorMsg
line 12:       echo "filetype unknown"
line 13:       echohl None
line 14:     endif
line 15:     let s = &filetype
line 16:   elseif s == "OFF"
line 17:     let s = ""
line 18:   endif
line 19: 
line 20:   if s != ""
line 21:     " Load the syntax file(s).  When there are several, separated by dots,
line 22:     " load each in sequence.  Skip empty entries.
line 23:     for name in split(s, '\.')
line 24:       if !empty(name)
line 25:         exe "runtime! syntax/" . name . ".vim syntax/" . name . "/*.vim"
line 26:         exe "runtime! syntax/" . name . ".lua syntax/" . name . "/*.lua"
line 27:       endif
line 28:     endfor
line 29:   endif
function <SNR>23_SynSet returning #0

continuing in Syntax Autocommands for "*"

line 41: if !s:did_ft
line 42:   doautoall filetypedetect BufRead
line 43: endif
finished sourcing /Users/ablanken/.local/nvim-brew/Cellar/neovim/0.7.0/share/nvim/runtime/syntax/syntax.vim
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.config/nvim)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/private/etc/xdg/nvim)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site)
chdir(/Users/ablanken/Sync/src/neovim-conf)
Searching for "plugin/**/*.vim" in "/Users/ablanken/.config/nvim,/private/etc/xdg/nvim,/Users/ablanken/.local/share/nvim/site,/usr/local/share/nvim/site,/usr/share/nvim/site,/Users/ablanken/.local/share/nvim/site/pack/packer/start/vim-polyglot,/Users/ablanken/.local/nvim-brew/Cellar/neovim/0.7.0/share/nvim/runtime,/Users/ablanken/.local/nvim-brew/Cellar/neovim/0.7.0/lib/nvim,/Users/ablanken/.local/share/nvim/site/pack/packer/start/vim-polyglot/after,/usr/share/nvim/site/after,/usr/local/share/nvim/site/after,/Users/ablanken/.local/share/nvim/site/after,/private/etc/xdg/nvim/after,/Users/ablanken/.config/nvim/after"
Searching for "/Users/ablanken/.config/nvim/plugin/**/*.vim"
Searching for "/private/etc/xdg/nvim/plugin/**/*.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/plugin/**/*.vim"
Searching for "/usr/local/share/nvim/site/plugin/**/*.vim"
Searching for "/usr/share/nvim/site/plugin/**/*.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/vim-polyglot/plugin/**/*.vim"
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/vim-polyglot/plugin)
chdir(/Users/ablanken/Sync/src/neovim-conf)
sourcing "/Users/ablanken/.local/share/nvim/site/pack/packer/start/vim-polyglot/plugin/polyglot.vim"
line 1: call polyglot#init#init()
calling function polyglot#init#init()

line 1:   " A no-op as sourcing this file is enough
function polyglot#init#init returning #0

continuing in /Users/ablanken/.local/share/nvim/site/pack/packer/start/vim-polyglot/plugin/polyglot.vim

line 2: 
line 3: " Turn on filetype plugins (:help filetype-plugin).
line 4: if has('autocmd') && !(exists("did_load_filetypes") && exists("did_indent_on"))
line 5:   filetype plugin indent on
line 6: endif
line 7: 
line 8: " Enable syntax highlighting.
line 9: if has('syntax') && !exists('g:syntax_on')
line 10:   syntax enable
line 11: endif
line 12: 
line 13: " No need to duplicate work
line 14: if exists('g:loaded_sensible')
line 15:   finish
line 16: endif
line 17: 
line 18: " Code taken from https://github.com/tpope/vim-sensible
line 19: " and (mostly comments) from https://github.com/sheerun/vimrc
line 20: "
line 21: " Only settings that matter for proper editing are left
line 22: if !has_key(g:polyglot_is_disabled, 'sensible')
line 23:   " Allow backspace in insert mode.
line 24:   if &backspace == ""
line 25:     set backspace=indent,eol,start
line 26:   endif
line 27: 
line 28:   " Allow for mappings including `Esc`, while preserving
line 29:   " zero timeout after pressing it manually.
line 30:   " (only vim needs a fix for this)
line 31:   if !has('nvim') && &ttimeoutlen == -1
line 32:     set ttimeout
line 33:     set ttimeoutlen=100
line 34:   endif
line 35: 
line 36:   " Set default whitespace characters when using `:set list`
line 37:   if &listchars ==# 'eol:$'
line 38:     set listchars=tab:>\ ,trail:-,extends:>,precedes:<,nbsp:+
line 39:   endif
line 40: 
line 41:   " Delete comment character when joining commented lines
line 42:   if v:version > 703 || v:version == 703 && has("patch541")
line 43:     set formatoptions+=j
line 44:   endif
line 45: 
line 46:   " Search upwards for tags file instead only locally
line 47:   if has('path_extra')
line 48:     setglobal tags-=./tags tags-=./tags; tags^=./tags;
line 49:   endif
line 50: 
line 51:   " Fix issues with fish shell
line 52:   " https://github.com/tpope/vim-sensible/issues/50
line 53:   if &shell =~# 'fish$' && (v:version < 704 || v:version == 704 && !has('patch276'))
line 54:     set shell=/usr/bin/env\ bash
line 55:   endif
line 56: 
line 57:   " Increase history size to 1000 items.
line 58:   if &history < 1000
line 59:     set history=1000
line 60:   endif
line 61: 
line 62:   " Allow for up to 50 opened tabs on Vim start.
line 63:   if &tabpagemax < 50
line 64:     set tabpagemax=50
line 65:   endif
line 66: 
line 67:   " Reduce updatetime from 4000 to 300 to avoid issues with coc.nvim
line 68:   if &updatetime == 4000
line 69:     set updatetime=300
line 70:   endif
line 71: 
line 72:   " Automatically reload file if changed somewhere else
line 73:   redir => capture
line 74:   silent autocmd CursorHold
--- Autocommands ---
line 75:   redir END
line 76:   if match(capture, 'checktime') == -1
line 77:     augroup polyglot-sensible
line 78:       au!
line 79:       au CursorHold * silent! checktime
line 80:     augroup END
line 81:   endif
line 82: 
line 83:   " Always save upper case variables to viminfo file.
line 84:   if !empty(&viminfo)
line 85:     set viminfo^=!
line 86:   endif
line 87: 
line 88:   " Don't save options in sessions and views
line 89:   set sessionoptions-=options
line 90:   set viewoptions-=options
line 91: 
line 92:   " Allow color schemes to do bright colors without forcing bold.
line 93:   if &t_Co == 8 && $TERM !~# '^Eterm'
line 94:     set t_Co=16
line 95:   endif
line 96: 
line 97:   " Load matchit.vim, but only if the user hasn't installed a newer version.
line 98:   if !exists('g:loaded_matchit') && findfile('plugin/matchit.vim', &rtp) ==# ''
line 99:     runtime! macros/matchit.vim
line 100:   endif
line 101: 
line 102:   " `Ctrl-U` in insert mode deletes a lot. Use `Ctrl-G` u to first break undo,
line 103:   " so that you can undo `Ctrl-U` without undoing what you typed before it.
line 104:   if empty(mapcheck('<C-U>', 'i'))
line 105:     inoremap <C-U> <C-G>u<C-U>
line 106:   endif
line 107: 
line 108:   if empty(mapcheck('<C-W>', 'i'))
line 109:     inoremap <C-W> <C-G>u<C-W>
line 110:   endif
line 111: endif
finished sourcing /Users/ablanken/.local/share/nvim/site/pack/packer/start/vim-polyglot/plugin/polyglot.vim
Searching for "/Users/ablanken/.local/nvim-brew/Cellar/neovim/0.7.0/share/nvim/runtime/plugin/**/*.vim"
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/nvim-brew/Cellar/neovim/0.7.0/share/nvim/runtime/plugin)
chdir(/Users/ablanken/Sync/src/neovim-conf)
sourcing "/Users/ablanken/.local/nvim-brew/Cellar/neovim/0.7.0/share/nvim/runtime/plugin/gzip.vim"
line 1: " Vim plugin for editing compressed files.
line 2: " Maintainer: Bram Moolenaar <Bram@vim.org>
line 3: " Last Change: 2016 Oct 30
line 4: 
line 5: " Exit quickly when:
line 6: " - this plugin was already loaded
line 7: " - when 'compatible' is set
line 8: " - some autocommands are already taking care of compressed files
line 9: if exists("loaded_gzip") || &cp || exists("#BufReadPre#*.gz")
line 10:   finish
line 11: endif
line 12: let loaded_gzip = 1
line 13: 
line 14: augroup gzip
line 15:   " Remove all gzip autocommands
line 16:   au!
line 17: 
line 18:   " Enable editing of gzipped files.
line 19:   " The functions are defined in autoload/gzip.vim.
line 20:   "
line 21:   " Set binary mode before reading the file.
line 22:   " Use "gzip -d", gunzip isn't always available.
line 23:   autocmd BufReadPre,FileReadPre^I*.gz,*.bz2,*.Z,*.lzma,*.xz,*.lz,*.zst,*.br,*.lzo setlocal bin
line 24:   autocmd BufReadPost,FileReadPost^I*.gz  call gzip#read("gzip -dn")
line 25:   autocmd BufReadPost,FileReadPost^I*.bz2 call gzip#read("bzip2 -d")
line 26:   autocmd BufReadPost,FileReadPost^I*.Z   call gzip#read("uncompress")
line 27:   autocmd BufReadPost,FileReadPost^I*.lzma call gzip#read("lzma -d")
line 28:   autocmd BufReadPost,FileReadPost^I*.xz  call gzip#read("xz -d")
line 29:   autocmd BufReadPost,FileReadPost^I*.lz  call gzip#read("lzip -d")
line 30:   autocmd BufReadPost,FileReadPost^I*.zst call gzip#read("zstd -d --rm")
line 31:   autocmd BufReadPost,FileReadPost^I*.br call gzip#read("brotli -d --rm")
line 32:   autocmd BufReadPost,FileReadPost^I*.lzo call gzip#read("lzop -d -U")
line 33:   autocmd BufWritePost,FileWritePost^I*.gz  call gzip#write("gzip")
line 34:   autocmd BufWritePost,FileWritePost^I*.bz2 call gzip#write("bzip2")
line 35:   autocmd BufWritePost,FileWritePost^I*.Z   call gzip#write("compress -f")
line 36:   autocmd BufWritePost,FileWritePost^I*.lzma call gzip#write("lzma -z")
line 37:   autocmd BufWritePost,FileWritePost^I*.xz  call gzip#write("xz -z")
line 38:   autocmd BufWritePost,FileWritePost^I*.lz  call gzip#write("lzip")
line 39:   autocmd BufWritePost,FileWritePost^I*.zst  call gzip#write("zstd --rm")
line 40:   autocmd BufWritePost,FileWritePost^I*.br  call gzip#write("brotli --rm")
line 41:   autocmd BufWritePost,FileWritePost^I*.lzo  call gzip#write("lzop -U")
line 42:   autocmd FileAppendPre^I^I^I*.gz  call gzip#appre("gzip -dn")
line 43:   autocmd FileAppendPre^I^I^I*.bz2 call gzip#appre("bzip2 -d")
line 44:   autocmd FileAppendPre^I^I^I*.Z   call gzip#appre("uncompress")
line 45:   autocmd FileAppendPre^I^I^I*.lzma call gzip#appre("lzma -d")
line 46:   autocmd FileAppendPre^I^I^I*.xz   call gzip#appre("xz -d")
line 47:   autocmd FileAppendPre^I^I^I*.lz   call gzip#appre("lzip -d")
line 48:   autocmd FileAppendPre^I^I^I*.zst call gzip#appre("zstd -d --rm")
line 49:   autocmd FileAppendPre^I^I^I*.br call gzip#appre("brotli -d --rm")
line 50:   autocmd FileAppendPre^I^I^I*.lzo call gzip#appre("lzop -d -U")
line 51:   autocmd FileAppendPost^I^I*.gz  call gzip#write("gzip")
line 52:   autocmd FileAppendPost^I^I*.bz2 call gzip#write("bzip2")
line 53:   autocmd FileAppendPost^I^I*.Z   call gzip#write("compress -f")
line 54:   autocmd FileAppendPost^I^I*.lzma call gzip#write("lzma -z")
line 55:   autocmd FileAppendPost^I^I*.xz call gzip#write("xz -z")
line 56:   autocmd FileAppendPost^I^I*.lz call gzip#write("lzip")
line 57:   autocmd FileAppendPost^I^I*.zst call gzip#write("zstd --rm")
line 58:   autocmd FileAppendPost^I^I*.br call gzip#write("brotli --rm")
line 59:   autocmd FileAppendPost^I^I*.lzo call gzip#write("lzop -U")
line 60: augroup END
finished sourcing /Users/ablanken/.local/nvim-brew/Cellar/neovim/0.7.0/share/nvim/runtime/plugin/gzip.vim
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/nvim-brew/Cellar/neovim/0.7.0/share/nvim/runtime/plugin)
chdir(/Users/ablanken/Sync/src/neovim-conf)
sourcing "/Users/ablanken/.local/nvim-brew/Cellar/neovim/0.7.0/share/nvim/runtime/plugin/health.vim"
line 1: autocmd CmdUndefined CheckHealth checkhealth
finished sourcing /Users/ablanken/.local/nvim-brew/Cellar/neovim/0.7.0/share/nvim/runtime/plugin/health.vim
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/nvim-brew/Cellar/neovim/0.7.0/share/nvim/runtime/plugin)
chdir(/Users/ablanken/Sync/src/neovim-conf)
sourcing "/Users/ablanken/.local/nvim-brew/Cellar/neovim/0.7.0/share/nvim/runtime/plugin/man.vim"
line 1: " Maintainer: Anmol Sethi <hi@nhooyr.io>
line 2: 
line 3: if exists('g:loaded_man')
line 4:   finish
line 5: endif
line 6: let g:loaded_man = 1
line 7: 
line 8: command! -bang -bar -addr=other -complete=customlist,man#complete -nargs=* Man if <bang>0 | call man#init_pager() | else | call man#open_page(<count>, <q-mods>, <f-args>) | endif
line 11: 
line 12: augroup man
line 13:   autocmd!
line 14:   autocmd BufReadCmd man://* call man#read_page(matchstr(expand('<amatch>'), 'man://\zs.*'))
line 15: augroup END
finished sourcing /Users/ablanken/.local/nvim-brew/Cellar/neovim/0.7.0/share/nvim/runtime/plugin/man.vim
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/nvim-brew/Cellar/neovim/0.7.0/share/nvim/runtime/plugin)
chdir(/Users/ablanken/Sync/src/neovim-conf)
sourcing "/Users/ablanken/.local/nvim-brew/Cellar/neovim/0.7.0/share/nvim/runtime/plugin/matchit.vim"
line 1: " Nvim: load the matchit plugin by default.
line 2: if !exists("g:loaded_matchit") && stridx(&packpath, $VIMRUNTIME) >= 0
line 3:   packadd matchit
Searching for "pack/*/start/matchit" in "/Users/ablanken/.config/nvim,/etc/xdg/nvim,/Users/ablanken/.local/share/nvim/site,/usr/local/share/nvim/site,/usr/share/nvim/site,/Users/ablanken/.local/nvim-brew/Cellar/neovim/0.7.0/share/nvim/runtime,/Users/ablanken/.local/nvim-brew/Cellar/neovim/0.7.0/lib/nvim,/usr/share/nvim/site/after,/usr/local/share/nvim/site/after,/Users/ablanken/.local/share/nvim/site/after,/etc/xdg/nvim/after,/Users/ablanken/.config/nvim/after"
Searching for "/Users/ablanken/.config/nvim/pack/*/start/matchit"
Searching for "/etc/xdg/nvim/pack/*/start/matchit"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/*/start/matchit"
Searching for "/usr/local/share/nvim/site/pack/*/start/matchit"
Searching for "/usr/share/nvim/site/pack/*/start/matchit"
Searching for "/Users/ablanken/.local/nvim-brew/Cellar/neovim/0.7.0/share/nvim/runtime/pack/*/start/matchit"
Searching for "/Users/ablanken/.local/nvim-brew/Cellar/neovim/0.7.0/lib/nvim/pack/*/start/matchit"
Searching for "/usr/share/nvim/site/after/pack/*/start/matchit"
Searching for "/usr/local/share/nvim/site/after/pack/*/start/matchit"
Searching for "/Users/ablanken/.local/share/nvim/site/after/pack/*/start/matchit"
Searching for "/etc/xdg/nvim/after/pack/*/start/matchit"
Searching for "/Users/ablanken/.config/nvim/after/pack/*/start/matchit"
not found in 'packpath': "pack/*/start/matchit"
Searching for "pack/*/opt/matchit" in "/Users/ablanken/.config/nvim,/etc/xdg/nvim,/Users/ablanken/.local/share/nvim/site,/usr/local/share/nvim/site,/usr/share/nvim/site,/Users/ablanken/.local/nvim-brew/Cellar/neovim/0.7.0/share/nvim/runtime,/Users/ablanken/.local/nvim-brew/Cellar/neovim/0.7.0/lib/nvim,/usr/share/nvim/site/after,/usr/local/share/nvim/site/after,/Users/ablanken/.local/share/nvim/site/after,/etc/xdg/nvim/after,/Users/ablanken/.config/nvim/after"
Searching for "/Users/ablanken/.config/nvim/pack/*/opt/matchit"
Searching for "/etc/xdg/nvim/pack/*/opt/matchit"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/*/opt/matchit"
Searching for "/usr/local/share/nvim/site/pack/*/opt/matchit"
Searching for "/usr/share/nvim/site/pack/*/opt/matchit"
Searching for "/Users/ablanken/.local/nvim-brew/Cellar/neovim/0.7.0/share/nvim/runtime/pack/*/opt/matchit"
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/nvim-brew/Cellar/neovim/0.7.0/share/nvim/runtime)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.config/nvim)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/private/etc/xdg/nvim)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/*/start/*)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/usr/local/share/nvim/site)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/usr/share/nvim/site)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/vim-polyglot)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/nvim-brew/Cellar/neovim/0.7.0/share/nvim/runtime)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/nvim-brew/Cellar/neovim/0.7.0/share/nvim/runtime/pack/dist/opt)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/nvim-brew/Cellar/neovim/0.7.0/share/nvim/runtime/pack/dist/opt/matchit/plugin)
chdir(/Users/ablanken/Sync/src/neovim-conf)
line 3: sourcing "/Users/ablanken/.local/nvim-brew/Cellar/neovim/0.7.0/share/nvim/runtime/pack/dist/opt/matchit/plugin/matchit.vim"
line 1: "  matchit.vim: (global plugin) Extended "%" matching
line 2: "  Maintainer:  Christian Brabandt
line 3: "  Version:     1.18
line 4: "  Last Change: 2020 Dec 23
line 5: "  Repository:  https://github.com/chrisbra/matchit
line 6: "  Previous URL:http://www.vim.org/script.php?script_id=39
line 7: "  Previous Maintainer:  Benji Fisher PhD   <benji@member.AMS.org>
line 8: 
line 9: " Documentation:
line 10: "  The documentation is in a separate file: ../doc/matchit.txt
line 11: 
line 12: " Credits:
line 13: "  Vim editor by Bram Moolenaar (Thanks, Bram!)
line 14: "  Original script and design by Raul Segura Acevedo
line 15: "  Support for comments by Douglas Potts
line 16: "  Support for back references and other improvements by Benji Fisher
line 17: "  Support for many languages by Johannes Zellner
line 18: "  Suggestions for improvement, bug reports, and support for additional
line 19: "  languages by Jordi-Albert Batalla, Neil Bird, Servatius Brandt, Mark
line 20: "  Collett, Stephen Wall, Dany St-Amant, Yuheng Xie, and Johannes Zellner.
line 21: 
line 22: " Debugging:
line 23: "  If you'd like to try the built-in debugging commands...
line 24: "   :MatchDebug      to activate debugging for the current buffer
line 25: "  This saves the values of several key script variables as buffer-local
line 26: "  variables.  See the MatchDebug() function, below, for details.
line 27: 
line 28: " TODO:  I should think about multi-line patterns for b:match_words.
line 29: "   This would require an option:  how many lines to scan (default 1).
line 30: "   This would be useful for Python, maybe also for *ML.
line 31: " TODO:  Maybe I should add a menu so that people will actually use some of
line 32: "   the features that I have implemented.
line 33: " TODO:  Eliminate the MultiMatch function.  Add yet another argument to
line 34: "   Match_wrapper() instead.
line 35: " TODO:  Allow :let b:match_words = '\(\(foo\)\(bar\)\):\3\2:end\1'
line 36: " TODO:  Make backrefs safer by using '\V' (very no-magic).
line 37: " TODO:  Add a level of indirection, so that custom % scripts can use my
line 38: "   work but extend it.
line 39: 
line 40: " Allow user to prevent loading and prevent duplicate loading.
line 41: if exists("g:loaded_matchit") || &cp
line 42:   finish
line 43: endif
line 44: let g:loaded_matchit = 1
line 45: 
line 46: let s:save_cpo = &cpo
line 47: set cpo&vim
line 48: 
line 49: nnoremap <silent> <Plug>(MatchitNormalForward)     :<C-U>call matchit#Match_wrapper('',1,'n')<CR>
line 50: nnoremap <silent> <Plug>(MatchitNormalBackward)    :<C-U>call matchit#Match_wrapper('',0,'n')<CR>
line 51: xnoremap <silent> <Plug>(MatchitVisualForward)     :<C-U>call matchit#Match_wrapper('',1,'v')<CR>:if col("''") != col("$") \| exe ":normal! m'" \| endif<cr>gv``
line 53: xnoremap <silent> <Plug>(MatchitVisualBackward)    :<C-U>call matchit#Match_wrapper('',0,'v')<CR>m'gv``
line 54: onoremap <silent> <Plug>(MatchitOperationForward)  :<C-U>call matchit#Match_wrapper('',1,'o')<CR>
line 55: onoremap <silent> <Plug>(MatchitOperationBackward) :<C-U>call matchit#Match_wrapper('',0,'o')<CR>
line 56: 
line 57: " Analogues of [{ and ]} using matching patterns:
line 58: nnoremap <silent> <Plug>(MatchitNormalMultiBackward)    :<C-U>call matchit#MultiMatch("bW", "n")<CR>
line 59: nnoremap <silent> <Plug>(MatchitNormalMultiForward)     :<C-U>call matchit#MultiMatch("W",  "n")<CR>
line 60: xnoremap <silent> <Plug>(MatchitVisualMultiBackward)    :<C-U>call matchit#MultiMatch("bW", "n")<CR>m'gv``
line 61: xnoremap <silent> <Plug>(MatchitVisualMultiForward)     :<C-U>call matchit#MultiMatch("W",  "n")<CR>m'gv``
line 62: onoremap <silent> <Plug>(MatchitOperationMultiBackward) :<C-U>call matchit#MultiMatch("bW", "o")<CR>
line 63: onoremap <silent> <Plug>(MatchitOperationMultiForward)  :<C-U>call matchit#MultiMatch("W",  "o")<CR>
line 64: 
line 65: " text object:
line 66: xmap <silent> <Plug>(MatchitVisualTextObject) <Plug>(MatchitVisualMultiBackward)o<Plug>(MatchitVisualMultiForward)
line 67: 
line 68: if !exists("g:no_plugin_maps")
line 69:   nmap <silent> %  <Plug>(MatchitNormalForward)
line 70:   nmap <silent> g% <Plug>(MatchitNormalBackward)
line 71:   xmap <silent> %  <Plug>(MatchitVisualForward)
line 72:   xmap <silent> g% <Plug>(MatchitVisualBackward)
line 73:   omap <silent> %  <Plug>(MatchitOperationForward)
line 74:   omap <silent> g% <Plug>(MatchitOperationBackward)
line 75: 
line 76:   " Analogues of [{ and ]} using matching patterns:
line 77:   nmap <silent> [% <Plug>(MatchitNormalMultiBackward)
line 78:   nmap <silent> ]% <Plug>(MatchitNormalMultiForward)
line 79:   xmap <silent> [% <Plug>(MatchitVisualMultiBackward)
line 80:   xmap <silent> ]% <Plug>(MatchitVisualMultiForward)
line 81:   omap <silent> [% <Plug>(MatchitOperationMultiBackward)
line 82:   omap <silent> ]% <Plug>(MatchitOperationMultiForward)
line 83: 
line 84:   " Text object
line 85:   xmap a% <Plug>(MatchitVisualTextObject)
line 86: endif
line 87: 
line 88: " Call this function to turn on debugging information.  Every time the main
line 89: " script is run, buffer variables will be saved.  These can be used directly
line 90: " or viewed using the menu items below.
line 91: if !exists(":MatchDebug")
line 92:   command! -nargs=0 MatchDebug call matchit#Match_debug()
line 93: endif
line 94: 
line 95: let &cpo = s:save_cpo
line 96: unlet s:save_cpo
line 97: 
line 98: " vim:sts=2:sw=2:et:
finished sourcing /Users/ablanken/.local/nvim-brew/Cellar/neovim/0.7.0/share/nvim/runtime/pack/dist/opt/matchit/plugin/matchit.vim
continuing in /Users/ablanken/.local/nvim-brew/Cellar/neovim/0.7.0/share/nvim/runtime/plugin/matchit.vim
line 3: augroup filetypedetect
line 3: augroup END
Searching for "/Users/ablanken/.local/nvim-brew/Cellar/neovim/0.7.0/lib/nvim/pack/*/opt/matchit"
Searching for "/usr/share/nvim/site/after/pack/*/opt/matchit"
Searching for "/usr/local/share/nvim/site/after/pack/*/opt/matchit"
Searching for "/Users/ablanken/.local/share/nvim/site/after/pack/*/opt/matchit"
Searching for "/etc/xdg/nvim/after/pack/*/opt/matchit"
Searching for "/Users/ablanken/.config/nvim/after/pack/*/opt/matchit"
line 4: endif
finished sourcing /Users/ablanken/.local/nvim-brew/Cellar/neovim/0.7.0/share/nvim/runtime/plugin/matchit.vim
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/nvim-brew/Cellar/neovim/0.7.0/share/nvim/runtime/plugin)
chdir(/Users/ablanken/Sync/src/neovim-conf)
sourcing "/Users/ablanken/.local/nvim-brew/Cellar/neovim/0.7.0/share/nvim/runtime/plugin/matchparen.vim"
line 1: " Vim plugin for showing matching parens
line 2: " Maintainer:  Bram Moolenaar <Bram@vim.org>
line 3: " Last Change: 2021 Apr 08
line 4: 
line 5: " Exit quickly when:
line 6: " - this plugin was already loaded (or disabled)
line 7: " - when 'compatible' is set
line 8: " - the "CursorMoved" autocmd event is not available.
line 9: if exists("g:loaded_matchparen") || &cp || !exists("##CursorMoved")
line 10:   finish
line 11: endif
line 12: let g:loaded_matchparen = 1
line 13: 
line 14: if !exists("g:matchparen_timeout")
line 15:   let g:matchparen_timeout = 300
line 16: endif
line 17: if !exists("g:matchparen_insert_timeout")
line 18:   let g:matchparen_insert_timeout = 60
line 19: endif
line 20: 
line 21: augroup matchparen
line 22:   " Replace all matchparen autocommands
line 23:   autocmd! CursorMoved,CursorMovedI,WinEnter * call s:Highlight_Matching_Pair()
line 24:   autocmd! WinLeave * call s:Remove_Matches()
line 25:   if exists('##TextChanged')
line 26:     autocmd! TextChanged,TextChangedI * call s:Highlight_Matching_Pair()
line 27:   endif
line 28: augroup END
line 29: 
line 30: " Skip the rest if it was already done.
line 31: if exists("*s:Highlight_Matching_Pair")
line 32:   finish
line 33: endif
line 34: 
line 35: let s:cpo_save = &cpo
line 36: set cpo-=C
line 37: 
line 38: " The function that is invoked (very often) to define a ":match" highlighting
line 39: " for any matching paren.
line 40: func s:Highlight_Matching_Pair()
line 196: 
line 197: func s:Remove_Matches()
line 203: 
line 204: 
line 205: " Define commands that will disable and enable the plugin.
line 206: command DoMatchParen call s:DoMatchParen()
line 207: command NoMatchParen call s:NoMatchParen()
line 208: 
line 209: func s:NoMatchParen()
line 216: 
line 217: func s:DoMatchParen()
line 223: 
line 224: let &cpo = s:cpo_save
line 225: unlet s:cpo_save
finished sourcing /Users/ablanken/.local/nvim-brew/Cellar/neovim/0.7.0/share/nvim/runtime/plugin/matchparen.vim
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/nvim-brew/Cellar/neovim/0.7.0/share/nvim/runtime/plugin)
chdir(/Users/ablanken/Sync/src/neovim-conf)
sourcing "/Users/ablanken/.local/nvim-brew/Cellar/neovim/0.7.0/share/nvim/runtime/plugin/netrwPlugin.vim"
line 1: " netrwPlugin.vim: Handles file transfer and remote directory listing across a network
line 2: "            PLUGIN SECTION
line 3: " Date:^I^IFeb 09, 2021
line 4: " Maintainer:^ICharles E Campbell <NcampObell@SdrPchip.AorgM-NOSPAM>
line 5: " GetLatestVimScripts: 1075 1 :AutoInstall: netrw.vim
line 6: " Copyright:    Copyright (C) 1999-2021 Charles E. Campbell {{{1
line 7: "               Permission is hereby granted to use and distribute this code,
line 8: "               with or without modifications, provided that this copyright
line 9: "               notice is copied with it. Like anything else that's free,
line 10: "               netrw.vim, netrwPlugin.vim, and netrwSettings.vim are provided
line 11: "               *as is* and comes with no warranty of any kind, either
line 12: "               expressed or implied. By using this plugin, you agree that
line 13: "               in no event will the copyright holder be liable for any damages
line 14: "               resulting from the use of this software.
line 15: "
line 16: "  But be doers of the Word, and not only hearers, deluding your own selves {{{1
line 17: "  (James 1:22 RSV)
line 18: " =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
line 19: " Load Once: {{{1
line 20: if &cp || exists("g:loaded_netrwPlugin")
line 21:  finish
line 22: endif
line 23: let g:loaded_netrwPlugin = "v171"
line 24: let s:keepcpo = &cpo
line 25: set cpo&vim
line 26: "DechoRemOn
line 27: 
line 28: " ---------------------------------------------------------------------
line 29: " Public Interface: {{{1
line 30: 
line 31: " Local Browsing Autocmds: {{{2
line 32: augroup FileExplorer
line 33:  au!
line 34:  au BufLeave *  if &ft != "netrw"|let w:netrw_prvfile= expand("%:p")|endif
line 35:  au BufEnter *^Isil call s:LocalBrowse(expand("<amatch>"))
line 36:  au VimEnter *^Isil call s:VimEnter(expand("<amatch>"))
line 37:  if has("win32") || has("win95") || has("win64") || has("win16")
line 38:   au BufEnter .* sil call s:LocalBrowse(expand("<amatch>"))
line 39:  endif
line 40: augroup END
line 41: 
line 42: " Network Browsing Reading Writing: {{{2
line 43: augroup Network
line 44:  au!
line 45:  au BufReadCmd   file://*^I^I^I^I^I^I^I^I^I^I^Icall netrw#FileUrlEdit(expand("<amatch>"))
line 46:  au BufReadCmd   ftp://*,rcp://*,scp://*,http://*,https://*,dav://*,davs://*,rsync://*,sftp://*^Iexe "sil doau BufReadPre ".fnameescape(expand("<amatch>"))|call netrw#Nread(2,expand("<amatch>"))|exe "sil doau BufReadPost ".fnameescape(expand("<amatch>"))
line 47:  au FileReadCmd  ftp://*,rcp://*,scp://*,http://*,file://*,https://*,dav://*,davs://*,rsync://*,sftp://*^Iexe "sil doau FileReadPre ".fnameescape(expand("<amatch>"))|call netrw#Nread(1,expand("<amatch>"))|exe "sil doau FileReadPost ".fnameescape(expand("<amatch>"))
line 48:  au BufWriteCmd  ftp://*,rcp://*,scp://*,http://*,file://*,dav://*,davs://*,rsync://*,sftp://*^I^I^Iexe "sil doau BufWritePre ".fnameescape(expand("<amatch>"))|exe 'Nwrite '.fnameescape(expand("<amatch>"))|exe "sil doau BufWritePost ".fnameescape(expand("<amatch>"))
line 49:  au FileWriteCmd ftp://*,rcp://*,scp://*,http://*,file://*,dav://*,davs://*,rsync://*,sftp://*^I^I^Iexe "sil doau FileWritePre ".fnameescape(expand("<amatch>"))|exe "'[,']".'Nwrite '.fnameescape(expand("<amatch>"))|exe "sil doau FileWritePost ".fnameescape(expand("<amatch>"))
line 50:  try
line 51:   au SourceCmd   ftp://*,rcp://*,scp://*,http://*,file://*,https://*,dav://*,davs://*,rsync://*,sftp://*^Iexe 'Nsource '.fnameescape(expand("<amatch>"))
line 52:  catch /^Vim\%((\a\+)\)\=:E216/
line 53:   au SourcePre   ftp://*,rcp://*,scp://*,http://*,file://*,https://*,dav://*,davs://*,rsync://*,sftp://*^Iexe 'Nsource '.fnameescape(expand("<amatch>"))
line 54:  endtry
line 55: augroup END
line 56: 
line 57: " Commands: :Nread, :Nwrite, :NetUserPass {{{2
line 58: com! -count=1 -nargs=*^INread^I^Ilet s:svpos= winsaveview()<bar>call netrw#NetRead(<count>,<f-args>)<bar>call winrestview(s:svpos)
line 59: com! -range=% -nargs=*^INwrite^I^Ilet s:svpos= winsaveview()<bar><line1>,<line2>call netrw#NetWrite(<f-args>)<bar>call winrestview(s:svpos)
line 60: com! -nargs=*^I^INetUserPass^Icall NetUserPass(<f-args>)
line 61: com! -nargs=*^I        Nsource^I^Ilet s:svpos= winsaveview()<bar>call netrw#NetSource(<f-args>)<bar>call winrestview(s:svpos)
line 62: com! -nargs=?^I^INtree^I^Icall netrw#SetTreetop(1,<q-args>)
line 63: 
line 64: " Commands: :Explore, :Sexplore, Hexplore, Vexplore, Lexplore {{{2
line 65: com! -nargs=* -bar -bang -count=0 -complete=dir^IExplore^I^Icall netrw#Explore(<count>,0,0+<bang>0,<q-args>)
line 66: com! -nargs=* -bar -bang -count=0 -complete=dir^ISexplore^Icall netrw#Explore(<count>,1,0+<bang>0,<q-args>)
line 67: com! -nargs=* -bar -bang -count=0 -complete=dir^IHexplore^Icall netrw#Explore(<count>,1,2+<bang>0,<q-args>)
line 68: com! -nargs=* -bar -bang -count=0 -complete=dir^IVexplore^Icall netrw#Explore(<count>,1,4+<bang>0,<q-args>)
line 69: com! -nargs=* -bar       -count=0 -complete=dir^ITexplore^Icall netrw#Explore(<count>,0,6        ,<q-args>)
line 70: com! -nargs=* -bar -bang^I^I^INexplore^Icall netrw#Explore(-1,0,0,<q-args>)
line 71: com! -nargs=* -bar -bang^I^I^IPexplore^Icall netrw#Explore(-2,0,0,<q-args>)
line 72: com! -nargs=* -bar -bang -count=0 -complete=dir Lexplore^Icall netrw#Lexplore(<count>,<bang>0,<q-args>)
line 73: 
line 74: " Commands: NetrwSettings {{{2
line 75: com! -nargs=0^INetrwSettings^Icall netrwSettings#NetrwSettings()
line 76: com! -bang^INetrwClean^Icall netrw#Clean(<bang>0)
line 77: 
line 78: " Maps:
line 79: if !exists("g:netrw_nogx")
line 80:  if maparg('gx','n') == ""
line 81:   if !hasmapto('<Plug>NetrwBrowseX')
line 82:    nmap <unique> gx <Plug>NetrwBrowseX
line 83:   endif
line 84:   nno <silent> <Plug>NetrwBrowseX :call netrw#BrowseX(netrw#GX(),netrw#CheckIfRemote(netrw#GX()))<cr>
line 85:  endif
line 86:  if maparg('gx','x') == ""
line 87:   if !hasmapto('<Plug>NetrwBrowseXVis')
line 88:    xmap <unique> gx <Plug>NetrwBrowseXVis
line 89:   endif
line 90:   xno <silent> <Plug>NetrwBrowseXVis :<c-u>call netrw#BrowseXVis()<cr>
line 91:  endif
line 92: endif
line 93: if exists("g:netrw_usetab") && g:netrw_usetab
line 94:  if maparg('<c-tab>','n') == ""
line 95:   nmap <unique> <c-tab> <Plug>NetrwShrink
line 96:  endif
line 97:  nno <silent> <Plug>NetrwShrink :call netrw#Shrink()<cr>
line 98: endif
line 99: 
line 100: " ---------------------------------------------------------------------
line 101: " LocalBrowse: invokes netrw#LocalBrowseCheck() on directory buffers {{{2
line 102: fun! s:LocalBrowse(dirname)
line 146: 
line 147: " ---------------------------------------------------------------------
line 148: " s:VimEnter: after all vim startup stuff is done, this function is called. {{{2
line 149: "             Its purpose: to look over all windows and run s:LocalBrowse() on
line 150: "             them, which checks if they're directories and will create a directory
line 151: "             listing when appropriate.
line 152: "             It also sets s:vimentered, letting s:LocalBrowse() know that s:VimEnter()
line 153: "             has already been called.
line 154: fun! s:VimEnter(dirname)
line 174: 
line 175: " ---------------------------------------------------------------------
line 176: " NetrwStatusLine: {{{1
line 177: fun! NetrwStatusLine()
line 188: 
line 189: " ------------------------------------------------------------------------
line 190: " NetUserPass: set username and password for subsequent ftp transfer {{{1
line 191: "   Usage:  :call NetUserPass()^I^I^I-- will prompt for userid and password
line 192: "^I    :call NetUserPass("uid")^I^I-- will prompt for password
line 193: "^I    :call NetUserPass("uid","password") -- sets global userid and password
line 194: fun! NetUserPass(...)
line 218: 
line 219: " ------------------------------------------------------------------------
line 220: " Modelines And Restoration: {{{1
line 221: let &cpo= s:keepcpo
line 222: unlet s:keepcpo
line 223: " vim:ts=8 fdm=marker
finished sourcing /Users/ablanken/.local/nvim-brew/Cellar/neovim/0.7.0/share/nvim/runtime/plugin/netrwPlugin.vim
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/nvim-brew/Cellar/neovim/0.7.0/share/nvim/runtime/plugin)
chdir(/Users/ablanken/Sync/src/neovim-conf)
sourcing "/Users/ablanken/.local/nvim-brew/Cellar/neovim/0.7.0/share/nvim/runtime/plugin/rplugin.vim"
line 1: if exists('g:loaded_remote_plugins')
line 2:   finish
line 3: endif
line 4: let g:loaded_remote_plugins = '/path/to/manifest'
line 5: 
line 6: " Get the path to the rplugin manifest file.
line 7: function! s:GetManifestPath() abort
line 24: 
line 25: " Old manifest file based on known script locations.
line 26: function! s:GetOldManifestPaths() abort
line 41: 
line 42: function! s:GetManifest() abort
line 55: 
line 56: function! s:LoadRemotePlugins() abort
line 62: 
line 63: command! -bar UpdateRemotePlugins call remote#host#UpdateRemotePlugins()
line 64: 
line 65: call s:LoadRemotePlugins()
calling function <SNR>32_LoadRemotePlugins()

line 1:   let g:loaded_remote_plugins = s:GetManifest()
calling function <SNR>32_LoadRemotePlugins[1]..<SNR>32_GetManifest()

line 1:   let manifest = s:GetManifestPath()
calling function <SNR>32_LoadRemotePlugins[1]..<SNR>32_GetManifest[1]..<SNR>32_GetManifestPath()

line 1:   let manifest_base = ''
line 2: 
line 3:   if exists('$NVIM_RPLUGIN_MANIFEST')
line 4:     return fnamemodify($NVIM_RPLUGIN_MANIFEST, ':p')
line 5:   endif
line 6: 
line 7:   let dest = stdpath('data')
line 8:   if !empty(dest)
line 9:     if !isdirectory(dest)
line 10:       call mkdir(dest, 'p', 0700)
line 11:     endif
line 12:     let manifest_base = dest
line 13:   endif
line 14: 
line 15:   return manifest_base.'/rplugin.vim'
function <SNR>32_LoadRemotePlugins[1]..<SNR>32_GetManifest[1]..<SNR>32_GetManifestPath returning '/Users/ablanken/.local/share/nvim/rplugin.vim'

continuing in function <SNR>32_LoadRemotePlugins[1]..<SNR>32_GetManifest

line 2:   if !filereadable(manifest)
line 3:     " Check if an old manifest file exists and move it to the new location.
line 4:     for old_manifest in s:GetOldManifestPaths()
line 5:       if filereadable(old_manifest)
line 6:         call rename(old_manifest, manifest)
line 7:         break
line 8:       endif
line 9:     endfor
line 10:   endif
line 11:   return manifest
function <SNR>32_LoadRemotePlugins[1]..<SNR>32_GetManifest returning '/Users/ablanken/.local/share/nvim/rplugin.vim'

continuing in function <SNR>32_LoadRemotePlugins

line 2:   if filereadable(g:loaded_remote_plugins)
line 3:     execute 'source' fnameescape(g:loaded_remote_plugins)
line 3: source /Users/ablanken/.local/share/nvim/rplugin.vim
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim)
chdir(/Users/ablanken/Sync/src/neovim-conf)
line 3: sourcing "/Users/ablanken/.local/share/nvim/rplugin.vim"
line 1: " perl plugins
line 2: 
line 3: 
line 4: " node plugins
line 5: 
line 6: 
line 7: " python3 plugins
line 8: 
line 9: 
line 10: " ruby plugins
line 11: 
line 12: 
line 13: " python plugins
line 14: 
line 15: 
finished sourcing /Users/ablanken/.local/share/nvim/rplugin.vim
continuing in function <SNR>32_LoadRemotePlugins
line 4:   endif
function <SNR>32_LoadRemotePlugins returning #0

continuing in /Users/ablanken/.local/nvim-brew/Cellar/neovim/0.7.0/share/nvim/runtime/plugin/rplugin.vim

finished sourcing /Users/ablanken/.local/nvim-brew/Cellar/neovim/0.7.0/share/nvim/runtime/plugin/rplugin.vim
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/nvim-brew/Cellar/neovim/0.7.0/share/nvim/runtime/plugin)
chdir(/Users/ablanken/Sync/src/neovim-conf)
sourcing "/Users/ablanken/.local/nvim-brew/Cellar/neovim/0.7.0/share/nvim/runtime/plugin/shada.vim"
line 1: if exists('g:loaded_shada_plugin')
line 2:   finish
line 3: endif
line 4: let g:loaded_shada_plugin = 1
line 5: 
line 6: augroup ShaDaCommands
line 7:   autocmd!
line 8:   autocmd BufReadCmd *.shada,*.shada.tmp.[a-z] :if !empty(v:cmdarg)|throw '++opt not supported'|endif |call setline('.', shada#get_strings(readfile(expand('<afile>'),'b'))) |setlocal filetype=shada
line 12:   autocmd FileReadCmd *.shada,*.shada.tmp.[a-z] :if !empty(v:cmdarg)|throw '++opt not supported'|endif |call append("'[", shada#get_strings(readfile(expand('<afile>'), 'b')))
line 15:   autocmd BufWriteCmd *.shada,*.shada.tmp.[a-z] :if !empty(v:cmdarg)|throw '++opt not supported'|endif |if writefile(shada#get_binstrings(getline(1, '$')),expand('<afile>'), 'b') == 0 |  let &l:modified = (expand('<afile>') is# bufname(+expand('<abuf>'))? 0: stridx(&cpoptions, '+') != -1) |endif
line 23:   autocmd FileWriteCmd *.shada,*.shada.tmp.[a-z] :if !empty(v:cmdarg)|throw '++opt not supported'|endif |call writefile(shada#get_binstrings(getline(min([line("'["), line("']")]),max([line("'["), line("']")]))),expand('<afile>'),'b')
line 30:   autocmd FileAppendCmd *.shada,*.shada.tmp.[a-z] :if !empty(v:cmdarg)|throw '++opt not supported'|endif |call writefile(shada#get_binstrings(getline(min([line("'["), line("']")]),max([line("'["), line("']")]))),expand('<afile>'),'ab')
line 37:   autocmd SourceCmd *.shada,*.shada.tmp.[a-z] :execute 'rshada' fnameescape(expand('<afile>'))
line 39: augroup END
finished sourcing /Users/ablanken/.local/nvim-brew/Cellar/neovim/0.7.0/share/nvim/runtime/plugin/shada.vim
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/nvim-brew/Cellar/neovim/0.7.0/share/nvim/runtime/plugin)
chdir(/Users/ablanken/Sync/src/neovim-conf)
sourcing "/Users/ablanken/.local/nvim-brew/Cellar/neovim/0.7.0/share/nvim/runtime/plugin/spellfile.vim"
line 1: " Vim plugin for downloading spell files
line 2: 
line 3: if exists("loaded_spellfile_plugin") || &cp || exists("#SpellFileMissing")
line 4:   finish
line 5: endif
line 6: let loaded_spellfile_plugin = 1
line 7: 
line 8: autocmd SpellFileMissing * call spellfile#LoadFile(expand('<amatch>'))
finished sourcing /Users/ablanken/.local/nvim-brew/Cellar/neovim/0.7.0/share/nvim/runtime/plugin/spellfile.vim
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/nvim-brew/Cellar/neovim/0.7.0/share/nvim/runtime/plugin)
chdir(/Users/ablanken/Sync/src/neovim-conf)
sourcing "/Users/ablanken/.local/nvim-brew/Cellar/neovim/0.7.0/share/nvim/runtime/plugin/tarPlugin.vim"
line 1: " tarPlugin.vim -- a Vim plugin for browsing tarfiles
line 2: " Original was copyright (c) 2002, Michael C. Toren <mct@toren.net>
line 3: " Modified by Charles E. Campbell
line 4: " Distributed under the GNU General Public License.
line 5: "
line 6: " Updates are available from <http://michael.toren.net/code/>.  If you
line 7: " find this script useful, or have suggestions for improvements, please
line 8: " let me know.
line 9: " Also look there for further comments and documentation.
line 10: "
line 11: " This part only sets the autocommands.  The functions are in autoload/tar.vim.
line 12: " ---------------------------------------------------------------------
line 13: "  Load Once: {{{1
line 14: if &cp || exists("g:loaded_tarPlugin")
line 15:  finish
line 16: endif
line 17: let g:loaded_tarPlugin = "v32"
line 18: let s:keepcpo          = &cpo
line 19: set cpo&vim
line 20: 
line 21: " ---------------------------------------------------------------------
line 22: "  Public Interface: {{{1
line 23: augroup tar
line 24:   au!
line 25:   au BufReadCmd   tarfile::*^Icall tar#Read(expand("<amatch>"), 1)
line 26:   au FileReadCmd  tarfile::*^Icall tar#Read(expand("<amatch>"), 0)
line 27:   au BufWriteCmd  tarfile::*^Icall tar#Write(expand("<amatch>"))
line 28:   au FileWriteCmd tarfile::*^Icall tar#Write(expand("<amatch>"))
line 29: 
line 30:   if has("unix")
line 31:    au BufReadCmd   tarfile::*/*^Icall tar#Read(expand("<amatch>"), 1)
line 32:    au FileReadCmd  tarfile::*/*^Icall tar#Read(expand("<amatch>"), 0)
line 33:    au BufWriteCmd  tarfile::*/*^Icall tar#Write(expand("<amatch>"))
line 34:    au FileWriteCmd tarfile::*/*^Icall tar#Write(expand("<amatch>"))
line 35:   endif
line 36: 
line 37:   au BufReadCmd   *.tar.gz^I^Icall tar#Browse(expand("<amatch>"))
line 38:   au BufReadCmd   *.tar^I^I^Icall tar#Browse(expand("<amatch>"))
line 39:   au BufReadCmd   *.lrp^I^I^Icall tar#Browse(expand("<amatch>"))
line 40:   au BufReadCmd   *.tar.bz2^I^Icall tar#Browse(expand("<amatch>"))
line 41:   au BufReadCmd   *.tar.Z^I^Icall tar#Browse(expand("<amatch>"))
line 42:   au BufReadCmd   *.tbz^I^I^Icall tar#Browse(expand("<amatch>"))
line 43:   au BufReadCmd   *.tgz^I^I^Icall tar#Browse(expand("<amatch>"))
line 44:   au BufReadCmd   *.tar.lzma^Icall tar#Browse(expand("<amatch>"))
line 45:   au BufReadCmd   *.tar.xz^I^Icall tar#Browse(expand("<amatch>"))
line 46:   au BufReadCmd   *.txz^I^I^Icall tar#Browse(expand("<amatch>"))
line 47:   au BufReadCmd   *.tar.zst^I^Icall tar#Browse(expand("<amatch>"))
line 48:   au BufReadCmd   *.tzs^I^I^Icall tar#Browse(expand("<amatch>"))
line 49: augroup END
line 50: com! -nargs=? -complete=file Vimuntar call tar#Vimuntar(<q-args>)
line 51: 
line 52: " ---------------------------------------------------------------------
line 53: " Restoration And Modelines: {{{1
line 54: " vim: fdm=marker
line 55: let &cpo= s:keepcpo
line 56: unlet s:keepcpo
finished sourcing /Users/ablanken/.local/nvim-brew/Cellar/neovim/0.7.0/share/nvim/runtime/plugin/tarPlugin.vim
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/nvim-brew/Cellar/neovim/0.7.0/share/nvim/runtime/plugin)
chdir(/Users/ablanken/Sync/src/neovim-conf)
sourcing "/Users/ablanken/.local/nvim-brew/Cellar/neovim/0.7.0/share/nvim/runtime/plugin/tohtml.vim"
line 1: " Vim plugin for converting a syntax highlighted file to HTML.
line 2: " Maintainer: Ben Fritz <fritzophrenic@gmail.com>
line 3: " Last Change: 2019 Nov 13
line 4: "
line 5: " The core of the code is in $VIMRUNTIME/autoload/tohtml.vim and
line 6: " $VIMRUNTIME/syntax/2html.vim
line 7: "
line 8: if exists('g:loaded_2html_plugin')
line 9:   finish
line 10: endif
line 11: let g:loaded_2html_plugin = 'vim8.1_v2'
line 12: 
line 13: "
line 14: " Changelog: {{{
line 15: "   8.1_v2  (this version): - Fix Bitbucket issue #19: fix calculation of tab
line 16: "                             stop position to use in expanding a tab, when that
line 17: "                             tab occurs after a syntax match which in turn
line 18: "                             comes after previously expanded tabs.
line 19: "                           - Set eventignore while splitting a window for the
line 20: "                             destination file to ignore FileType events;
line 21: "                             speeds up processing when the destination file
line 22: "                             already exists and HTML highlight takes too long.
line 23: "                           - Fix Bitbucket issue #20: progress bar could not be
line 24: "                             seen when DiffDelete background color matched
line 25: "                             StatusLine background color. Added TOhtmlProgress
line 26: "                             highlight group for manual user override, but
line 27: "                             calculate it to be visible compared to StatusLine
line 28: "                             by default.
line 29: "                           - Fix Bitbucket issue #1: Remove workaround for old
line 30: "                             browsers which don't support 'ch' CSS unit, since
line 31: "                             all modern browsers, including IE>=9, support it.
line 32: "                           - Fix Bitbucket issue #10: support termguicolors
line 33: "                           - Fix Bitbucket issue #21: default to using
line 34: "                             generated content instead of <input> tags for
line 35: "                             uncopyable text, so that text is correctly
line 36: "                             prevented from being copied in chrome. Use
line 37: "                             g:html_use_input_for_pc option to control the
line 38: "                             method used.
line 39: "                           - Switch to HTML5 to allow using vnu as a validator
line 40: "                             in unit test.
line 41: "                           - Fix fallback sizing of <input> tags for browsers
line 42: "                             without "ch" support.
line 43: "                           - Fix cursor on unselectable diff filler text.
line 44: "   8.1_v1  (Vim 8.1.0528): - Fix Bitbucket issue #6: Don't generate empty
line 45: "                             script tag.
line 46: "                           - Fix Bitbucket issue #5: javascript should
line 47: "                             declare variables with "var".
line 48: "                           - Fix Bitbucket issue #13: errors thrown sourcing
line 49: "                             2html.vim directly when plugins not loaded.
line 50: "                           - Fix Bitbucket issue #16: support 'vartabstop'.
line 51: "
line 52: "   7.4 updates: {{{
line 53: "   7.4_v2  (Vim 7.4.0899): Fix error raised when converting a diff containing
line 54: "                           an empty buffer. Jan Stocker: allow g:html_font to
line 55: "                           take a list so it is easier to specfiy fallback
line 56: "                           fonts in the generated CSS.
line 57: "   7.4_v1  (Vim 7.4.0000): Fix modeline mangling for new "Vim:" format, and
line 58: "^I^I^I    also for version-specific modelines like "vim>703:".
line 59: "}}}
line 60: "
line 61: "   7.3 updates: {{{
line 62: "   7.3_v14 (Vim 7.3.1246): Allow suppressing line number anchors using
line 63: "^I^I^I    g:html_line_ids=0. Allow customizing
line 64: "^I^I^I    important IDs (like line IDs and fold IDs) using
line 65: "^I^I^I    g:html_id_expr evaluated when the buffer conversion
line 66: "^I^I^I    is started.
line 67: "   7.3_v13 (Vim 7.3.1088): Keep foldmethod at manual in the generated file and
line 68: "^I^I^I    insert modeline to set it to manual.
line 69: "^I^I^I    Fix bug: diff mode with 2 unsaved buffers creates a
line 70: "^I^I^I    duplicate of one buffer instead of including both.
line 71: "^I^I^I    Add anchors to each line so you can put '#L123'
line 72: "^I^I^I    or '#123' at the end of the URL to jump to line 123
line 73: "^I^I^I    (idea by Andy Spencer). Add javascript to open folds
line 74: "^I^I^I    to show the anchor being jumped to if it is hidden.
line 75: "^I^I^I    Fix XML validation error: &nsbp; not part of XML.
line 76: "^I^I^I    Allow TOhtml to chain together with other commands
line 77: "^I^I^I    using |.
line 78: "   7.3_v12 (Vim 7.3.0616): Fix modeline mangling to also work for when multiple
line 79: "^I^I^I    highlight groups make up the start-of-modeline text.
line 80: "^I^I^I    Improve render time of page with uncopyable regions
line 81: "^I^I^I    by not using one-input-per-char. Change name of
line 82: "^I^I^I    uncopyable option from html_unselectable to
line 83: "^I^I^I    html_prevent_copy. Added html_no_invalid option and
line 84: "^I^I^I    default to inserting invalid markup for uncopyable
line 85: "^I^I^I    regions to prevent MS Word from pasting undeletable
line 86: "^I^I^I    <input> elements. Fix 'cpo' handling (Thilo Six).
line 87: "^I^I 7.3_v12b1: Add html_unselectable option. Rework logic to
line 88: "^I^I^I    eliminate post-processing substitute commands in
line 89: "^I^I^I    favor of doing the work up front. Remove unnecessary
line 90: "^I^I^I    special treatment of 'LineNr' highlight group. Minor
line 91: "^I^I^I    speed improvements. Fix modeline mangling in
line 92: "^I^I^I    generated output so it works for text in the first
line 93: "^I^I^I    column. Fix missing line number and fold column in
line 94: "^I^I^I    diff filler lines. Fix that some fonts have a 1px
line 95: "^I^I^I    gap (using a dirty hack, improvements welcome). Add
line 96: "^I^I^I    "colorscheme" meta tag. Does NOT include support for
line 97: "^I^I^I    the new default foldtext added in v11, as the patch
line 98: "^I^I^I    adding it has not yet been included in Vim.
line 99: "   7.3_v11 ( unreleased ): Support new default foldtext from patch by Christian
line 100: "^I^I^I    Brabandt in
line 101: "^I^I^I    http://groups.google.com/d/topic/vim_dev/B6FSGfq9VoI/discussion.
line 102: "^I^I^I    This patch has not yet been included in Vim, thus
line 103: "^I^I^I    these changes are removed in the next version.
line 104: "   7.3_v10 (Vim 7.3.0227): Fix error E684 when converting a range wholly inside
line 105: "^I^I^I    multiple nested folds with dynamic folding on.
line 106: "^I^I^I    Also fix problem with foldtext in this situation.
line 107: "   7.3_v9  (Vim 7.3.0170): Add html_pre_wrap option active with html_use_css
line 108: "^I^I^I    and without html_no_pre, default value same as
line 109: "^I^I^I    'wrap' option, (Andy Spencer). Don't use
line 110: "^I^I^I    'fileencoding' for converted document encoding if
line 111: "^I^I^I    'buftype' indicates a special buffer which isn't
line 112: "^I^I^I    written.
line 113: "   7.3_v8  (Vim 7.3.0100): Add html_expand_tabs option to allow leaving tab
line 114: "^I^I^I    characters in generated output (Andy Spencer).
line 115: "^I^I^I    Escape text that looks like a modeline so Vim
line 116: "^I^I^I    doesn't use anything in the converted HTML as a
line 117: "^I^I^I    modeline. Bugfixes: Fix folding when a fold starts
line 118: "^I^I^I    before the conversion range. Remove fold column when
line 119: "^I^I^I    there are no folds.
line 120: "   7.3_v7  (Vim 7-3-0063): see betas released on vim_dev below:
line 121: "^I^I  7.3_v7b3: Fixed bug, convert Unicode to UTF-8 all the way.
line 122: "^I^I  7.3_v7b2: Remove automatic detection of encodings that are not
line 123: "^I^I^I    supported by all major browsers according to
line 124: "^I^I^I    http://wiki.whatwg.org/wiki/Web_Encodings and
line 125: "^I^I^I    convert to UTF-8 for all Unicode encodings. Make
line 126: "^I^I^I    HTML encoding to Vim encoding detection be
line 127: "^I^I^I    case-insensitive for built-in pairs.
line 128: "^I^I  7.3_v7b1: Remove use of setwinvar() function which cannot be
line 129: "^I^I^I    called in restricted mode (Andy Spencer). Use
line 130: "^I^I^I    'fencoding' instead of 'encoding' to determine by
line 131: "^I^I^I    charset, and make sure the 'fenc' of the generated
line 132: "^I^I^I    file matches its indicated charset. Add charsets for
line 133: "^I^I^I    all of Vim's natively supported encodings.
line 134: "   7.3_v6  (Vim 7.3.0000): Really fix bug with 'nowrapscan', 'magic' and other
line 135: "^I^I^I    user settings interfering with diff mode generation,
line 136: "^I^I^I    trailing whitespace (e.g. line number column) when
line 137: "^I^I^I    using html_no_pre, and bugs when using
line 138: "^I^I^I    html_hover_unfold.
line 139: "   7.3_v5  ( unreleased ): Fix bug with 'nowrapscan' and also with out-of-sync
line 140: "^I^I^I    folds in diff mode when first line was folded.
line 141: "   7.3_v4  (Vim 7.3.0000): Bugfixes, especially for xhtml markup, and diff mode
line 142: "   7.3_v3  (Vim 7.3.0000): Refactor option handling and make html_use_css
line 143: "^I^I^I    default to true when not set to anything. Use strict
line 144: "^I^I^I    doctypes where possible. Rename use_xhtml option to
line 145: "^I^I^I    html_use_xhtml for consistency. Use .xhtml extension
line 146: "^I^I^I    when using this option. Add meta tag for settings.
line 147: "   7.3_v2  (Vim 7.3.0000): Fix syntax highlighting in diff mode to use both the
line 148: "^I^I^I    diff colors and the normal syntax colors
line 149: "   7.3_v1  (Vim 7.3.0000): Add conceal support and meta tags in output
line 150: "}}}
line 151: "}}}
line 152: 
line 153: " TODO: {{{
line 154: "   * Check the issue tracker:
line 155: "     https://bitbucket.org/fritzophrenic/vim-tohtml/issues?status=new&status=open
line 156: "   * Options for generating the CSS in external style sheets. New :TOcss
line 157: "     command to convert the current color scheme into a (mostly) generic CSS
line 158: "     stylesheet which can be re-used. Alternate stylesheet support? Good start
line 159: "     by Erik Falor
line 160: "     ( https://groups.google.com/d/topic/vim_use/7XTmC4D22dU/discussion ).
line 161: "   * Add optional argument to :TOhtml command to specify mode (gui, cterm,
line 162: "     term) to use for the styling. Suggestion by "nacitar".
line 163: "   * Add way to override or specify which RGB colors map to the color numbers
line 164: "     in cterm. Get better defaults than just guessing? Suggestion by "nacitar".
line 165: "   * Disable filetype detection until after all processing is done.
line 166: "   * Add option for not generating the hyperlink on stuff that looks like a
line 167: "     URL? Or just color the link to fit with the colorscheme (and only special
line 168: "     when hovering)?
line 169: "   * Bug: Opera does not allow printing more than one page if uncopyable
line 170: "     regions is turned on. Possible solution: Add normal text line numbers with
line 171: "     display:none, set to display:inline for print style sheets, and hide
line 172: "     <input> elements for print, to allow Opera printing multiple pages (and
line 173: "     other uncopyable areas?). May need to make the new text invisible to IE
line 174: "     with conditional comments to prevent copying it, IE for some reason likes
line 175: "     to copy hidden text. Other browsers too?
line 176: "   * Bug: still a 1px gap throughout the fold column when html_prevent_copy is
line 177: "     "fn" in some browsers. Specifically, in Chromium on Ubuntu (but not Chrome
line 178: "     on Windows). Perhaps it is font related?
line 179: "   * Bug: still some gaps in the fold column when html_prevent_copy contains
line 180: "     'd' and showing the whole diff (observed in multiple browsers). Only gaps
line 181: "     on diff lines though.
line 182: "   * Undercurl support via CSS3, with fallback to dotted or something:
line 183: "^Ihttps://groups.google.com/d/topic/vim_use/BzXA6He1pHg/discussion
line 184: "   * Redo updates for modified default foldtext (v11) when/if the patch is
line 185: "     accepted to modify it.
line 186: "   * Test case +diff_one_file-dynamic_folds+expand_tabs-hover_unfold
line 187: "^I^I+ignore_conceal-ignore_folding+no_foldcolumn+no_pre+no_progress
line 188: "^I^I+number_lines-pre_wrap-use_css+use_xhtml+whole_filler.xhtml
line 189: "     does not show the whole diff filler as it is supposed to?
line 190: "   * Bug: when 'isprint' is wrong for the current encoding, will generate
line 191: "     invalid content. Can/should anything be done about this? Maybe a separate
line 192: "     plugin to correct 'isprint' based on encoding?
line 193: "   * Check to see if the windows-125\d encodings actually work in Unix without
line 194: "     the 8bit- prefix. Add prefix to autoload dictionaries for Unix if not.
line 195: "   * Font auto-detection similar to
line 196: "     http://www.vim.org/scripts/script.php?script_id=2384 but for a variety of
line 197: "     platforms.
line 198: "   * Pull in code from http://www.vim.org/scripts/script.php?script_id=3113 :
line 199: "^I- listchars support
line 200: "^I- full-line background highlight
line 201: "^I- other?
line 202: "   * Make it so deleted lines in a diff don't create side-scrolling (get it
line 203: "     free with full-line background highlight above).
line 204: "   * Restore open/closed folds and cursor position after processing each file
line 205: "     with option not to restore for speed increase.
line 206: "   * Add extra meta info (generation time, etc.)?
line 207: "   * Tidy up so we can use strict doctype in even more situations
line 208: "   * Implementation detail: add threshold for writing the lines to the html
line 209: "     buffer before we're done (5000 or so lines should do it)
line 210: "   * TODO comments for code cleanup scattered throughout
line 211: "}}}
line 212: 
line 213: " Define the :TOhtml command when:
line 214: " - 'compatible' is not set
line 215: " - this plugin or user override was not already loaded
line 216: " - user commands are available. {{{
line 217: if !&cp && !exists(":TOhtml") && has("user_commands")
line 218:   command -range=% -bar TOhtml :call tohtml#Convert2HTML(<line1>, <line2>)
line 219: endif "}}}
line 220: 
line 221: " Make sure any patches will probably use consistent indent
line 222: "   vim: ts=8 sw=2 sts=2 noet fdm=marker
finished sourcing /Users/ablanken/.local/nvim-brew/Cellar/neovim/0.7.0/share/nvim/runtime/plugin/tohtml.vim
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/nvim-brew/Cellar/neovim/0.7.0/share/nvim/runtime/plugin)
chdir(/Users/ablanken/Sync/src/neovim-conf)
sourcing "/Users/ablanken/.local/nvim-brew/Cellar/neovim/0.7.0/share/nvim/runtime/plugin/tutor.vim"
line 1: if exists('g:loaded_tutor_mode_plugin') || &compatible
line 2:     finish
line 3: endif
line 4: let g:loaded_tutor_mode_plugin = 1
line 5: 
line 6: command! -nargs=? -complete=custom,tutor#TutorCmdComplete Tutor call tutor#TutorCmd(<q-args>)
finished sourcing /Users/ablanken/.local/nvim-brew/Cellar/neovim/0.7.0/share/nvim/runtime/plugin/tutor.vim
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/nvim-brew/Cellar/neovim/0.7.0/share/nvim/runtime/plugin)
chdir(/Users/ablanken/Sync/src/neovim-conf)
sourcing "/Users/ablanken/.local/nvim-brew/Cellar/neovim/0.7.0/share/nvim/runtime/plugin/zipPlugin.vim"
line 1: " zipPlugin.vim: Handles browsing zipfiles
line 2: "            PLUGIN PORTION
line 3: " Date:^I^I^IJan 07, 2020
line 4: " Maintainer:^ICharles E Campbell <NcampObell@SdrPchip.AorgM-NOSPAM>
line 5: " License:^I^IVim License  (see vim's :help license)
line 6: " Copyright:    Copyright (C) 2005-2016 Charles E. Campbell {{{1
line 7: "               Permission is hereby granted to use and distribute this code,
line 8: "               with or without modifications, provided that this copyright
line 9: "               notice is copied with it. Like anything else that's free,
line 10: "               zipPlugin.vim is provided *as is* and comes with no warranty
line 11: "               of any kind, either expressed or implied. By using this
line 12: "               plugin, you agree that in no event will the copyright
line 13: "               holder be liable for any damages resulting from the use
line 14: "               of this software.
line 15: "
line 16: " (James 4:8 WEB) Draw near to God, and he will draw near to you.
line 17: " Cleanse your hands, you sinners; and purify your hearts, you double-minded.
line 18: " ---------------------------------------------------------------------
line 19: " Load Once: {{{1
line 20: if &cp || exists("g:loaded_zipPlugin")
line 21:  finish
line 22: endif
line 23: let g:loaded_zipPlugin = "v32"
line 24: let s:keepcpo          = &cpo
line 25: set cpo&vim
line 26: 
line 27: " ---------------------------------------------------------------------
line 28: " Options: {{{1
line 29: if !exists("g:zipPlugin_ext")
line 30:  let g:zipPlugin_ext='*.aar,*.apk,*.celzip,*.crtx,*.docm,*.docx,*.dotm,*.dotx,*.ear,*.epub,*.gcsx,*.glox,*.gqsx,*.ja,*.jar,*.kmz,*.odb,*.odc,*.odf,*.odg,*.odi,*.odm,*.odp,*.ods,*.odt,*.otc,*.otf,*.otg,*.oth,*.oti,*.otp,*.ots,*.ott,*.oxt,*.potm,*.potx,*.ppam,*.ppsm,*.ppsx,*.pptm,*.pptx,*.sldx,*.thmx,*.vdw,*.war,*.wsz,*.xap,*.xlam,*.xlam,*.xlsb,*.xlsm,*.xlsx,*.xltm,*.xltx,*.xpi,*.zip'
line 31: endif
line 32: 
line 33: " ---------------------------------------------------------------------
line 34: " Public Interface: {{{1
line 35: augroup zip
line 36:  au!
line 37:  au BufReadCmd   zipfile:*^Icall zip#Read(expand("<amatch>"), 1)
line 38:  au FileReadCmd  zipfile:*^Icall zip#Read(expand("<amatch>"), 0)
line 39:  au BufWriteCmd  zipfile:*^Icall zip#Write(expand("<amatch>"))
line 40:  au FileWriteCmd zipfile:*^Icall zip#Write(expand("<amatch>"))
line 41: 
line 42:  if has("unix")
line 43:   au BufReadCmd   zipfile:*/*^Icall zip#Read(expand("<amatch>"), 1)
line 44:   au FileReadCmd  zipfile:*/*^Icall zip#Read(expand("<amatch>"), 0)
line 45:   au BufWriteCmd  zipfile:*/*^Icall zip#Write(expand("<amatch>"))
line 46:   au FileWriteCmd zipfile:*/*^Icall zip#Write(expand("<amatch>"))
line 47:  endif
line 48: 
line 49:  exe "au BufReadCmd ".g:zipPlugin_ext.' call zip#Browse(expand("<amatch>"))'
line 49: au BufReadCmd *.aar,*.apk,*.celzip,*.crtx,*.docm,*.docx,*.dotm,*.dotx,*.ear,*.epub,*.gcsx,*.glox,*.gqsx,*.ja,*.jar,*.kmz,*.odb,*.odc,*.odf,*.odg,*.odi,*.odm,*.odp,*.ods,*.odt,*.otc,*.otf,*.otg,*.oth,*.oti,*.otp,*.ots,*.ott,*.oxt,*.potm,*.potx,*.ppam,*.ppsm,*.ppsx,*.pptm,*.pptx,*.sldx,*.thmx,*.vdw,*.war,*.wsz,*.xap,*.xlam,*.xlam,*.xlsb,*.xlsm,*.xlsx,*.xltm,*.xltx,*.xpi,*.zip call zip#Browse(expand("<amatch>"))
line 50: augroup END
line 51: 
line 52: " ---------------------------------------------------------------------
line 53: "  Restoration And Modelines: {{{1
line 54: "  vim: fdm=marker
line 55: let &cpo= s:keepcpo
line 56: unlet s:keepcpo
finished sourcing /Users/ablanken/.local/nvim-brew/Cellar/neovim/0.7.0/share/nvim/runtime/plugin/zipPlugin.vim
Searching for "/Users/ablanken/.local/nvim-brew/Cellar/neovim/0.7.0/lib/nvim/plugin/**/*.vim"
Searching for "plugin/**/*.lua" in "/Users/ablanken/.config/nvim,/private/etc/xdg/nvim,/Users/ablanken/.local/share/nvim/site,/usr/local/share/nvim/site,/usr/share/nvim/site,/Users/ablanken/.local/share/nvim/site/pack/packer/start/vim-polyglot,/Users/ablanken/.local/nvim-brew/Cellar/neovim/0.7.0/share/nvim/runtime,/Users/ablanken/.local/nvim-brew/Cellar/neovim/0.7.0/lib/nvim,/Users/ablanken/.local/share/nvim/site/pack/packer/start/vim-polyglot/after,/usr/share/nvim/site/after,/usr/local/share/nvim/site/after,/Users/ablanken/.local/share/nvim/site/after,/private/etc/xdg/nvim/after,/Users/ablanken/.config/nvim/after"
Searching for "/Users/ablanken/.config/nvim/plugin/**/*.lua"
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.config/nvim/plugin)
chdir(/Users/ablanken/Sync/src/neovim-conf)
sourcing "/Users/ablanken/.config/nvim/plugin/packer_compiled.lua"
Executing: packadd packer.nvim
Searching for "pack/*/start/packer.nvim" in "/Users/ablanken/.config/nvim,/etc/xdg/nvim,/Users/ablanken/.local/share/nvim/site,/usr/local/share/nvim/site,/usr/share/nvim/site,/Users/ablanken/.local/nvim-brew/Cellar/neovim/0.7.0/share/nvim/runtime,/Users/ablanken/.local/nvim-brew/Cellar/neovim/0.7.0/lib/nvim,/usr/share/nvim/site/after,/usr/local/share/nvim/site/after,/Users/ablanken/.local/share/nvim/site/after,/etc/xdg/nvim/after,/Users/ablanken/.config/nvim/after"
Searching for "/Users/ablanken/.config/nvim/pack/*/start/packer.nvim"
Searching for "/etc/xdg/nvim/pack/*/start/packer.nvim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/*/start/packer.nvim"
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.config/nvim)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/private/etc/xdg/nvim)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf/conf/nvim/plugin)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start)
chdir(/Users/ablanken/Sync/src/neovim-conf)
Searching for "/usr/local/share/nvim/site/pack/*/start/packer.nvim"
Searching for "/usr/share/nvim/site/pack/*/start/packer.nvim"
Searching for "/Users/ablanken/.local/nvim-brew/Cellar/neovim/0.7.0/share/nvim/runtime/pack/*/start/packer.nvim"
Searching for "/Users/ablanken/.local/nvim-brew/Cellar/neovim/0.7.0/lib/nvim/pack/*/start/packer.nvim"
Searching for "/usr/share/nvim/site/after/pack/*/start/packer.nvim"
Searching for "/usr/local/share/nvim/site/after/pack/*/start/packer.nvim"
Searching for "/Users/ablanken/.local/share/nvim/site/after/pack/*/start/packer.nvim"
Searching for "/etc/xdg/nvim/after/pack/*/start/packer.nvim"
Searching for "/Users/ablanken/.config/nvim/after/pack/*/start/packer.nvim"
Searching for "pack/*/opt/packer.nvim" in "/Users/ablanken/.config/nvim,/etc/xdg/nvim,/Users/ablanken/.local/share/nvim/site,/usr/local/share/nvim/site,/usr/share/nvim/site,/Users/ablanken/.local/nvim-brew/Cellar/neovim/0.7.0/share/nvim/runtime,/Users/ablanken/.local/nvim-brew/Cellar/neovim/0.7.0/lib/nvim,/usr/share/nvim/site/after,/usr/local/share/nvim/site/after,/Users/ablanken/.local/share/nvim/site/after,/etc/xdg/nvim/after,/Users/ablanken/.config/nvim/after"
Searching for "/Users/ablanken/.config/nvim/pack/*/opt/packer.nvim"
Searching for "/etc/xdg/nvim/pack/*/opt/packer.nvim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/*/opt/packer.nvim"
Searching for "/usr/local/share/nvim/site/pack/*/opt/packer.nvim"
Searching for "/usr/share/nvim/site/pack/*/opt/packer.nvim"
Searching for "/Users/ablanken/.local/nvim-brew/Cellar/neovim/0.7.0/share/nvim/runtime/pack/*/opt/packer.nvim"
Searching for "/Users/ablanken/.local/nvim-brew/Cellar/neovim/0.7.0/lib/nvim/pack/*/opt/packer.nvim"
Searching for "/usr/share/nvim/site/after/pack/*/opt/packer.nvim"
Searching for "/usr/local/share/nvim/site/after/pack/*/opt/packer.nvim"
Searching for "/Users/ablanken/.local/share/nvim/site/after/pack/*/opt/packer.nvim"
Searching for "/etc/xdg/nvim/after/pack/*/opt/packer.nvim"
Searching for "/Users/ablanken/.config/nvim/after/pack/*/opt/packer.nvim"
not found in 'packpath': "pack/*/opt/packer.nvim"
finished sourcing /Users/ablanken/.config/nvim/plugin/packer_compiled.lua
Searching for "/private/etc/xdg/nvim/plugin/**/*.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/plugin/**/*.lua"
Searching for "/usr/local/share/nvim/site/plugin/**/*.lua"
Searching for "/usr/share/nvim/site/plugin/**/*.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/vim-polyglot/plugin/**/*.lua"
Searching for "/Users/ablanken/.local/nvim-brew/Cellar/neovim/0.7.0/share/nvim/runtime/plugin/**/*.lua"
Searching for "/Users/ablanken/.local/nvim-brew/Cellar/neovim/0.7.0/lib/nvim/plugin/**/*.lua"
Searching for "pack/*/start/*" in "/Users/ablanken/.config/nvim,/etc/xdg/nvim,/Users/ablanken/.local/share/nvim/site,/usr/local/share/nvim/site,/usr/share/nvim/site,/Users/ablanken/.local/nvim-brew/Cellar/neovim/0.7.0/share/nvim/runtime,/Users/ablanken/.local/nvim-brew/Cellar/neovim/0.7.0/lib/nvim,/usr/share/nvim/site/after,/usr/local/share/nvim/site/after,/Users/ablanken/.local/share/nvim/site/after,/etc/xdg/nvim/after,/Users/ablanken/.config/nvim/after"
Searching for "/Users/ablanken/.config/nvim/pack/*/start/*"
Searching for "/etc/xdg/nvim/pack/*/start/*"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/*/start/*"
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/42header/plugin)
chdir(/Users/ablanken/Sync/src/neovim-conf)
sourcing "/Users/ablanken/.local/share/nvim/site/pack/packer/start/42header/plugin/stdheader.vim"
line 1: let s:asciiart = ["        :::      ::::::::","      :+:      :+:    :+:","    +:+ +:+         +:+  ","  +#+  +:+       +#+     ","+#+#+#+#+#+   +#+        ","     #+#    #+#          ","    ###   ########.fr    "]
line 10: 
line 11: let s:start^I^I= '/*'
line 12: let s:end^I^I= '*/'
line 13: let s:fill^I^I= '*'
line 14: let s:length^I= 80
line 15: let s:margin^I= 5
line 16: 
line 17: let s:types^I^I= {'\.c$\|\.h$\|\.cc$\|\.hh$\|\.cpp$\|\.hpp$\|\.php':['/*', '*/', '*'],'\.htm$\|\.html$\|\.xml$':['<!--', '-->', '*'],'\.js$':['//', '//', '*'],'\.tex$':['%', '%', '*'],'\.ml$\|\.mli$\|\.mll$\|\.mly$':['(*', '*)', '*'],'\.vim$\|\vimrc$':['"', '"', '*'],'\.el$\|\emacs$':[';', ';', '*'],'\.f90$\|\.f95$\|\.f03$\|\.f$\|\.for$':['!', '!', '/']}
line 35: 
line 36: function! s:filetype()
line 52: 
line 53: function! s:ascii(n)
line 56: 
line 57: function! s:textline(left, right)
line 62: 
line 63: function! s:line(n)
line 80: 
line 81: function! s:user()
line 91: 
line 92: function! s:mail()
line 102: 
line 103: function! s:filename()
line 110: 
line 111: function! s:date()
line 114: 
line 115: function! s:insert()
line 127: 
line 128: function! s:update()
line 139: 
line 140: function! s:stdheader()
line 145: 
line 146: " Bind command and shortcut
line 147: command! Stdheader call s:stdheader ()
line 148: map <F1> :Stdheader<CR>
line 149: autocmd BufWritePre * call s:update ()
finished sourcing /Users/ablanken/.local/share/nvim/site/pack/packer/start/42header/plugin/stdheader.vim
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/auto-session/plugin)
chdir(/Users/ablanken/Sync/src/neovim-conf)
sourcing "/Users/ablanken/.local/share/nvim/site/pack/packer/start/auto-session/plugin/auto-session.vim"
line 1: if exists('g:loaded_auto_session') | finish | endif " prevent loading file twice
line 1:  finish | endif " prevent loading file twice
line 1:  endif " prevent loading file twice
line 2: 
line 3: let s:save_cpo = &cpo " save user coptions
line 4: set cpo&vim " reset them to defaults
line 5: 
line 6: let g:in_pager_mode = 0
line 7: 
line 8: let LuaSaveSession = luaeval('require("auto-session").SaveSession')
line 9: let LuaRestoreSession = luaeval('require("auto-session").RestoreSession')
line 10: let LuaRestoreSessionFromFile = luaeval('require("auto-session").RestoreSessionFromFile')
line 11: let LuaDeleteSessionByName = luaeval('require("auto-session").DeleteSessionByName')
line 12: let LuaDisableAutoSave = luaeval('require("auto-session").DisableAutoSave')
line 13: 
line 14: let LuaAutoSaveSession = luaeval('require("auto-session").AutoSaveSession')
line 15: let LuaAutoRestoreSession = luaeval('require("auto-session").AutoRestoreSession')
line 16: 
line 17: function! CompleteSessions(A,L,P) abort
line 20: 
line 21: " Available commands
line 22: command! -nargs=* SaveSession call LuaSaveSession(expand('<args>'))
line 23: command! -nargs=* RestoreSession call LuaRestoreSession(expand('<args>'))
line 24: command! -nargs=1 -complete=custom,CompleteSessions RestoreSessionFromFile call LuaRestoreSessionFromFile(expand('<args>'))
line 25: command! -nargs=* -complete=custom,CompleteSessions DeleteSession call LuaDeleteSessionByName(<f-args>)
line 26: command! -nargs=* DisableAutoSave call LuaDisableAutoSave()
line 27: 
line 28: aug StdIn
line 29:   autocmd!
line 30:   autocmd StdinReadPre * let g:in_pager_mode = 1
line 31: aug END
line 32: 
line 33: augroup autosession
line 34:   autocmd!
line 35:   autocmd VimEnter * nested call LuaAutoRestoreSession()
line 36:   autocmd VimLeave * call LuaAutoSaveSession()
line 37: 
line 38:   " TODO: Experiment with saving session on more than just VimEnter and VimLeave
line 39:   " autocmd BufWinEnter * if g:in_pager_mode == 0 | call LuaAutoSaveSession() | endif
line 40:   " autocmd BufWinLeave * if g:in_pager_mode == 0 | call LuaAutoSaveSession() | endif
line 41: augroup end
line 42: 
line 43: let &cpo = s:save_cpo " and restore after
line 44: unlet s:save_cpo
line 45: 
line 46: let g:loaded_auto_session = 1
finished sourcing /Users/ablanken/.local/share/nvim/site/pack/packer/start/auto-session/plugin/auto-session.vim
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/cheatsheet.nvim/plugin)
chdir(/Users/ablanken/Sync/src/neovim-conf)
sourcing "/Users/ablanken/.local/share/nvim/site/pack/packer/start/cheatsheet.nvim/plugin/cheatsheet.vim"
line 1: command! -bar -bang Cheatsheet call s:Cheatsheet(<bang>0)
line 2: command! -bar CheatsheetEdit lua require'cheatsheet.utils'.edit_user_cheatsheet()
line 3: 
line 4: function! s:Cheatsheet(force_float)
line 12: 
line 13: if mapcheck("<leader>?", "n") == ""
line 14:   nnoremap <unique> <leader>? :<C-U>Cheatsheet<CR>
line 15: endif
line 16: 
line 17: highlight default link cheatComment Comment
line 18: highlight default link cheatMetadataComment Comment
line 19: highlight default link cheatMetadataTag Include
line 20: highlight default link cheatMetadataSection Structure
line 21: 
line 22: highlight default link cheatDescription String
line 23: highlight default link cheatSeparator Keyword
line 24: highlight default link cheatCode Statement
finished sourcing /Users/ablanken/.local/share/nvim/site/pack/packer/start/cheatsheet.nvim/plugin/cheatsheet.vim
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/coc.nvim/plugin)
chdir(/Users/ablanken/Sync/src/neovim-conf)
sourcing "/Users/ablanken/.local/share/nvim/site/pack/packer/start/coc.nvim/plugin/coc.vim"
line 1: scriptencoding utf-8
line 2: if exists('g:did_coc_loaded') || v:version < 800
line 3:   finish
line 4: endif
line 5: 
line 6: function! s:checkVersion() abort
line 38: 
line 39: call s:checkVersion()
calling function <SNR>44_checkVersion()

line 1:   let l:unsupported = 0
line 2:   if get(g:, 'coc_disable_startup_warning', 0) != 1
line 3:     if has('nvim')
line 4:       let l:unsupported = !has('nvim-0.3.2')
line 5:     else
line 6:       let l:unsupported = !has('patch-8.0.1453')
line 7:     endif
line 8: 
line 9:     if l:unsupported == 1
line 10:       echohl Error
line 11:       echom "coc.nvim requires at least Vim 8.0.1453 or Neovim 0.3.2, but you're using an older version."
line 12:       echom "Please upgrade your (neo)vim."
line 13:       echom "You can add this to your vimrc to avoid this message:"
line 14:       echom "    let g:coc_disable_startup_warning = 1"
line 15:       echom "Note that some features may error out or behave incorrectly."
line 16:       echom "Please do not report bugs unless you're using at least Vim 8.0.1453 or Neovim 0.3.2."
line 17:       echohl None
line 18:       sleep 2
line 19:     else
line 20:       if !has('nvim-0.4.0') && !has('patch-8.1.1719')
line 21:         echohl WarningMsg
line 22:         echom "coc.nvim works best on vim >= 8.1.1719 and neovim >= 0.4.0, consider upgrade your vim."
line 23:         echom "You can add this to your vimrc to avoid this message:"
line 24:         echom "    let g:coc_disable_startup_warning = 1"
line 25:         echom "Note that some features may behave incorrectly."
line 26:         echohl None
line 27:         sleep 2
line 28:       endif
line 29:     endif
line 30:   endif
function <SNR>44_checkVersion returning #0

continuing in /Users/ablanken/.local/share/nvim/site/pack/packer/start/coc.nvim/plugin/coc.vim

line 40: 
line 41: let g:did_coc_loaded = 1
line 42: let g:coc_service_initialized = 0
line 43: let s:is_win = has('win32') || has('win64')
line 44: let s:root = expand('<sfile>:h:h')
line 45: let s:is_vim = !has('nvim')
line 46: let s:is_gvim = s:is_vim && has("gui_running")
line 47: 
line 48: if get(g:, 'coc_start_at_startup', 1) && !s:is_gvim
line 49:   call coc#rpc#start_server()
Searching for "autoload/coc/rpc.vim" in runtime path
Searching for "/Users/ablanken/.config/nvim/autoload/coc/rpc.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/autoload/coc/rpc.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/42header/autoload/coc/rpc.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/auto-session/autoload/coc/rpc.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/cheatsheet.nvim/autoload/coc/rpc.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/coc-nvim-lua/autoload/coc/rpc.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/coc.nvim/autoload/coc/rpc.vim"
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/coc.nvim/autoload/coc)
chdir(/Users/ablanken/Sync/src/neovim-conf)
line 49: sourcing "/Users/ablanken/.local/share/nvim/site/pack/packer/start/coc.nvim/autoload/coc/rpc.vim"
line 1: scriptencoding utf-8
line 2: let s:is_win = has("win32") || has("win64")
line 3: let s:client = v:null
line 4: let s:name = 'coc'
line 5: let s:is_vim = !has('nvim')
line 6: 
line 7: function! coc#rpc#start_server()
line 27: 
line 28: function! coc#rpc#started() abort
line 31: 
line 32: function! coc#rpc#ready()
line 38: 
line 39: function! coc#rpc#set_channel(chan_id) abort
line 46: 
line 47: function! coc#rpc#kill()
line 56: 
line 57: function! coc#rpc#get_errors()
line 60: 
line 61: function! coc#rpc#stop()
line 75: 
line 76: function! coc#rpc#restart()
line 89: 
line 90: function! coc#rpc#request(method, args) abort
line 96: 
line 97: function! coc#rpc#notify(method, args) abort
line 104: 
line 105: function! coc#rpc#request_async(method, args, cb) abort
line 111: 
line 112: " receive async response
line 113: function! coc#rpc#async_response(id, resp, isErr) abort
line 119: 
line 120: " send async response to server
line 121: function! coc#rpc#async_request(id, method, args)
finished sourcing /Users/ablanken/.local/share/nvim/site/pack/packer/start/coc.nvim/autoload/coc/rpc.vim
continuing in /Users/ablanken/.local/share/nvim/site/pack/packer/start/coc.nvim/plugin/coc.vim
calling function coc#rpc#start_server()

line 1:   if get(g:, 'coc_node_env', '') ==# 'test'
line 2:     " server already started
line 3:     let s:client = coc#client#create(s:name, [])
line 4:     let chan_id = get(g:, 'coc_node_channel_id', 0)
line 5:     let s:client['running'] = chan_id != 0
line 6:     let s:client['chan_id'] = chan_id
line 7:     return
line 8:   endif
line 9:   if empty(s:client)
line 10:     let cmd = coc#util#job_command()
Searching for "autoload/coc/util.vim" in runtime path
Searching for "/Users/ablanken/.config/nvim/autoload/coc/util.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/autoload/coc/util.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/42header/autoload/coc/util.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/auto-session/autoload/coc/util.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/cheatsheet.nvim/autoload/coc/util.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/coc-nvim-lua/autoload/coc/util.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/coc.nvim/autoload/coc/util.vim"
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/coc.nvim/autoload/coc)
chdir(/Users/ablanken/Sync/src/neovim-conf)
line 10: sourcing "/Users/ablanken/.local/share/nvim/site/pack/packer/start/coc.nvim/autoload/coc/util.vim"
line 1: scriptencoding utf-8
line 2: let s:root = expand('<sfile>:h:h:h')
line 3: let s:is_win = has('win32') || has('win64')
line 4: let s:is_vim = !has('nvim')
line 5: let s:vim_api_version = 29
line 6: 
line 7: function! coc#util#remote_fns(name)
line 17: 
line 18: function! coc#util#do_complete(name, opt, cb) abort
line 24: 
line 25: function! coc#util#suggest_variables(bufnr) abort
line 32: 
line 33: function! coc#util#api_version() abort
line 36: 
line 37: function! coc#util#semantic_hlgroups() abort
line 42: 
line 43: " get cursor position
line 44: function! coc#util#cursor()
line 47: 
line 48: function! coc#util#change_info() abort
line 51: 
line 52: function! coc#util#jumpTo(line, character) abort
line 56: 
line 57: function! coc#util#root_patterns() abort
line 60: 
line 61: function! coc#util#get_config(key) abort
line 64: 
line 65: function! coc#util#open_terminal(opts) abort
line 68: 
line 69: function! coc#util#synname() abort
line 72: 
line 73: function! coc#util#setline(lnum, line)
line 76: 
line 77: function! coc#util#path_replace_patterns() abort
line 89: 
line 90: function! coc#util#version()
line 98: 
line 99: function! coc#util#check_refresh(bufnr)
line 111: 
line 112: function! coc#util#diagnostic_info(bufnr, checkInsert) abort
line 136: 
line 137: function! coc#util#open_file(cmd, file)
line 141: 
line 142: function! coc#util#job_command()
line 162: 
line 163: function! coc#util#jump(cmd, filepath, ...) abort
line 210: 
line 211: function! coc#util#variables(bufnr) abort
line 221: 
line 222: function! coc#util#with_callback(method, args, cb)
line 234: 
line 235: function! coc#util#timer(method, args)
line 238: 
line 239: function! s:Call(method, args)
line 247: 
line 248: function! coc#util#vim_info()
line 284: 
line 285: function! coc#util#all_state()
line 293: 
line 294: function! coc#util#install() abort
line 302: 
line 303: function! coc#util#extension_root() abort
line 312: 
line 313: function! coc#util#update_extensions(...) abort
line 321: 
line 322: function! coc#util#install_extension(args) abort
line 331: 
line 332: function! coc#util#do_autocmd(name) abort
line 337: 
line 338: function! coc#util#rebuild()
line 347: 
line 348: function! coc#util#unmap(bufnr, keys) abort
line 355: 
line 356: function! coc#util#refactor_foldlevel(lnum) abort
line 362: 
line 363: function! coc#util#refactor_fold_text(lnum) abort
line 371: 
line 372: " get tabsize & expandtab option
line 373: function! coc#util#get_format_opts(bufnr) abort
line 387: 
line 388: function! coc#util#get_editoroption(winid) abort
line 421: 
line 422: function! coc#util#getpid()
line 429: 
line 430: " Get indentkeys for indent on TextChangedP, consider = for word indent only.
line 431: function! coc#util#get_indentkeys() abort
line 440: 
line 441: function! coc#util#get_bufoptions(bufnr) abort
line 473: 
line 474: function! coc#util#get_config_home()
line 496: 
line 497: function! coc#util#get_data_home()
line 517: 
line 518: function! coc#util#get_complete_option()
line 542: 
line 543: " used by vim
line 544: function! coc#util#get_buf_lines(bufnr, changedtick)
line 557: 
line 558: " used for TextChangedI with InsertCharPre
line 559: function! coc#util#get_changeinfo()
line 567: 
line 568: function! s:visible_ranges(winid) abort
finished sourcing /Users/ablanken/.local/share/nvim/site/pack/packer/start/coc.nvim/autoload/coc/util.vim
continuing in function coc#rpc#start_server
calling function coc#rpc#start_server[10]..coc#util#job_command()

line 1:   if (has_key(g:, 'coc_node_path'))
line 2:     let node = expand(g:coc_node_path)
line 3:   else
line 4:     let node = $COC_NODE_PATH == '' ? 'node' : $COC_NODE_PATH
line 5:   endif
line 6:   if !executable(node)
line 7:     echohl Error | echom '[coc.nvim] "'.node.'" is not executable, checkout https://nodejs.org/en/download/' | echohl None
line 7:  echom '[coc.nvim] "'.node.'" is not executable, checkout https://nodejs.org/en/download/' | echohl None
line 7:  echohl None
line 8:     return
line 9:   endif
line 10:   if !filereadable(s:root.'/build/index.js')
line 11:     if isdirectory(s:root.'/src')
line 12:       echohl Error | echom '[coc.nvim] build/index.js not found, please install dependencies and compile coc.nvim by: yarn install' | echohl None
line 12:  echom '[coc.nvim] build/index.js not found, please install dependencies and compile coc.nvim by: yarn install' | echohl None
line 12:  echohl None
line 13:     else
line 14:       echohl Error | echon '[coc.nvim] your coc.nvim is broken.' | echohl None
line 14:  echon '[coc.nvim] your coc.nvim is broken.' | echohl None
line 14:  echohl None
line 15:     endif
line 16:     return
line 17:   endif
line 18:   return [node] + get(g:, 'coc_node_args', ['--no-warnings']) + [s:root.'/build/index.js']
function coc#rpc#start_server[10]..coc#util#job_command returning ['node', '--no-warnings', '/Users/abla.../packer/start/coc.nvim/build/index.js']

continuing in function coc#rpc#start_server

line 11:     if empty(cmd) | return | endif
line 11:  return | endif
line 11:  endif
line 12:     let $COC_VIMCONFIG = coc#util#get_config_home()
calling function coc#rpc#start_server[12]..coc#util#get_config_home()

line 1:   if !empty(get(g:, 'coc_config_home', ''))
line 2:       return resolve(expand(g:coc_config_home))
line 3:   endif
line 4:   if exists('$VIMCONFIG')
line 5:     return resolve($VIMCONFIG)
line 6:   endif
line 7:   if has('nvim')
line 8:     if exists('$XDG_CONFIG_HOME')
line 9:       return resolve($XDG_CONFIG_HOME."/nvim")
line 10:     endif
line 11:     if s:is_win
line 12:       return resolve($HOME.'/AppData/Local/nvim')
line 13:     endif
line 14:     return resolve($HOME.'/.config/nvim')
function coc#rpc#start_server[12]..coc#util#get_config_home returning '/Users/ablanken/Sync/src/neovim-conf/conf/nvim'

continuing in function coc#rpc#start_server

line 13:     let $COC_DATA_HOME = coc#util#get_data_home()
calling function coc#rpc#start_server[13]..coc#util#get_data_home()

line 1:   if !empty(get(g:, 'coc_data_home', ''))
line 2:     let dir = resolve(expand(g:coc_data_home))
line 3:   else
line 4:     if exists('$XDG_CONFIG_HOME')
line 5:       let dir = resolve($XDG_CONFIG_HOME."/coc")
line 6:     else
line 7:       if s:is_win
line 8:         let dir = resolve(expand('~/AppData/Local/coc'))
line 9:       else
line 10:         let dir = resolve(expand('~/.config/coc'))
line 11:       endif
line 12:     endif
line 13:   endif
line 14:   if !isdirectory(dir)
line 15:     call coc#float#create_notification(['creating data directory: '.dir], {'timeout': 2000})
line 16:     call mkdir(dir, "p", 0755)
line 17:   endif
line 18:   return dir
function coc#rpc#start_server[13]..coc#util#get_data_home returning '/Users/ablanken/Sync/dot.config/coc'

continuing in function coc#rpc#start_server

line 14:     let s:client = coc#client#create(s:name, cmd)
Searching for "autoload/coc/client.vim" in runtime path
Searching for "/Users/ablanken/.config/nvim/autoload/coc/client.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/autoload/coc/client.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/42header/autoload/coc/client.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/auto-session/autoload/coc/client.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/cheatsheet.nvim/autoload/coc/client.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/coc-nvim-lua/autoload/coc/client.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/coc.nvim/autoload/coc/client.vim"
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/coc.nvim/autoload/coc)
chdir(/Users/ablanken/Sync/src/neovim-conf)
line 14: sourcing "/Users/ablanken/.local/share/nvim/site/pack/packer/start/coc.nvim/autoload/coc/client.vim"
line 1: scriptencoding utf-8
line 2: let s:root = expand('<sfile>:h:h:h')
line 3: let s:is_vim = !has('nvim')
line 4: let s:is_win = has("win32") || has("win64")
line 5: let s:clients = {}
line 6: 
line 7: if get(g:, 'node_client_debug', 0)
line 8:   echohl WarningMsg | echon '[coc.nvim] Enable g:node_client_debug could impact your vim experience' | echohl None
line 8:  echon '[coc.nvim] Enable g:node_client_debug could impact your vim experience' | echohl None
line 8:  echohl None
line 9:   let $NODE_CLIENT_LOG_LEVEL = 'debug'
line 10:   if exists('$NODE_CLIENT_LOG_FILE')
line 11:     let s:logfile = resolve($NODE_CLIENT_LOG_FILE)
line 12:   else
line 13:     let s:logfile = tempname()
line 14:     let $NODE_CLIENT_LOG_FILE = s:logfile
line 15:   endif
line 16: endif
line 17: 
line 18: " create a client
line 19: function! coc#client#create(name, command)
line 38: 
line 39: function! s:start() dict
line 125: 
line 126: function! s:on_stderr(name, msgs)
line 135: 
line 136: function! s:on_exit(name, code) abort
line 149: 
line 150: function! coc#client#get_client(name) abort
line 153: 
line 154: function! coc#client#get_channel(client)
line 160: 
line 161: function! s:request(method, args) dict
line 193: 
line 194: function! s:notify(method, args) dict
line 221: 
line 222: function! s:request_async(method, args, cb) dict
line 234: 
line 235: function! s:on_async_response(id, resp, isErr) dict
line 249: 
line 250: function! coc#client#is_running(name) abort
line 263: 
line 264: function! coc#client#stop(name) abort
line 286: 
line 287: function! coc#client#request(name, method, args)
line 293: 
line 294: function! coc#client#notify(name, method, args)
line 300: 
line 301: function! coc#client#request_async(name, method, args, cb)
line 307: 
line 308: function! coc#client#on_response(name, id, resp, isErr)
line 314: 
line 315: function! coc#client#restart(name) abort
line 323: 
line 324: function! coc#client#restart_all()
line 329: 
line 330: function! coc#client#open_log()
finished sourcing /Users/ablanken/.local/share/nvim/site/pack/packer/start/coc.nvim/autoload/coc/client.vim
continuing in function coc#rpc#start_server
calling function coc#rpc#start_server[14]..coc#client#create('coc', ['node', '--no-warnings', '/Users/abla.../packer/start/coc.nvim/build/index.js'])

line 1:   let client = {}
line 2:   let client['command'] = a:command
line 3:   let client['name'] = a:name
line 4:   let client['running'] = 0
line 5:   let client['async_req_id'] = 1
line 6:   let client['async_callbacks'] = {}
line 7:   " vim only
line 8:   let client['channel'] = v:null
line 9:   " neovim only
line 10:   let client['chan_id'] = 0
line 11:   let client['start'] = function('s:start', [], client)
line 12:   let client['request'] = function('s:request', [], client)
line 13:   let client['notify'] = function('s:notify', [], client)
line 14:   let client['request_async'] = function('s:request_async', [], client)
line 15:   let client['on_async_response'] = function('s:on_async_response', [], client)
line 16:   let s:clients[a:name] = client
line 17:   return client
function coc#rpc#start_server[14]..coc#client#create returning {'on_async_response': function('<SNR>4...packer/start/coc.nvim/build/index.js']}

continuing in function coc#rpc#start_server

line 15:   endif
line 16:   if !coc#client#is_running('coc')
calling function coc#rpc#start_server[16]..coc#client#is_running('coc')

line 1:   let client = get(s:clients, a:name, v:null)
line 2:   if empty(client) | return 0 | endif
line 2:  return 0 | endif
line 2:  endif
line 3:   if !client['running'] | return 0 | endif
line 3:  return 0 | endif
function coc#rpc#start_server[16]..coc#client#is_running returning #0

continuing in function coc#rpc#start_server

line 17:     call s:client['start']()
calling function coc#rpc#start_server[17]..<SNR>47_start()

line 1:   if self.running | return | endif
line 1:  return | endif
line 1:  endif
line 2:   if !isdirectory(getcwd())
line 3:     echohl Error | echon '[coc.nvim] Current cwd is not a valid directory.' | echohl None
line 3:  echon '[coc.nvim] Current cwd is not a valid directory.' | echohl None
line 3:  echohl None
line 4:     return
line 5:   endif
line 6:   let timeout = string(get(g:, 'coc_channel_timeout', 30))
line 7:   let disable_warning = string(get(g:, 'coc_disable_startup_warning', 0))
line 8:   let tmpdir = fnamemodify(tempname(), ':p:h')
line 9:   if s:is_vim
line 10:     let options = { 'in_mode': 'json', 'out_mode': 'json', 'err_mode': 'nl', 'err_cb': {channel, message -> s:on_stderr(self.name, split(message, "\n"))}, 'exit_cb': {channel, code -> s:on_exit(self.name, code)}, 'env': { 'NODE_NO_WARNINGS': '1', 'VIM_NODE_RPC': '1', 'COC_NVIM': '1', 'COC_CHANNEL_TIMEOUT': timeout, 'TMPDIR': tmpdir, }}
line 24:     if has("patch-8.1.350")
line 25:       let options['noblock'] = 1
line 26:     endif
line 27:     let job = job_start(self.command, options)
line 28:     let status = job_status(job)
line 29:     if status !=# 'run'
line 30:       let self.running = 0
line 31:       echohl Error | echom 'Failed to start '.self.name.' service' | echohl None
line 31:  echom 'Failed to start '.self.name.' service' | echohl None
line 31:  echohl None
line 32:       return
line 33:     endif
line 34:     let self['running'] = 1
line 35:     let self['channel'] = job_getchannel(job)
line 36:   else
line 37:     let original = {}
line 38:     let opts = { 'rpc': 1, 'on_stderr': {channel, msgs -> s:on_stderr(self.name, msgs)}, 'on_exit': {channel, code -> s:on_exit(self.name, code)}, }
line 43:     if has('nvim-0.5.0')
line 44:       " could use env option
line 45:       let opts['env'] = { 'COC_NVIM': '1', 'NODE_NO_WARNINGS': '1', 'COC_CHANNEL_TIMEOUT': timeout, 'TMPDIR': tmpdir }
line 51:     else
line 52:       if exists('*getenv')
line 53:         let original = { 'NODE_NO_WARNINGS': getenv('NODE_NO_WARNINGS'), 'TMPDIR': getenv('TMPDIR'), }
line 57:       endif
line 58:       if exists('*setenv')
line 59:         call setenv('COC_NVIM', '1')
line 60:         call setenv('NODE_NO_WARNINGS', '1')
line 61:         call setenv('COC_CHANNEL_TIMEOUT', timeout)
line 62:         call setenv('TMPDIR', tmpdir)
line 63:       else
line 64:         let $NODE_NO_WARNINGS = 1
line 65:         let $TMPDIR = tmpdir
line 66:       endif
line 67:     endif
line 68:     let chan_id = jobstart(self.command, opts)
line 69:     if !empty(original)
line 70:       if exists('*setenv')
line 71:         for key in keys(original)
line 72:           call setenv(key, original[key])
line 73:         endfor
line 74:       else
line 75:         let $TMPDIR = original['TMPDIR']
line 76:       endif
line 77:     endif
line 78:     if chan_id <= 0
line 79:       echohl Error | echom 'Failed to start '.self.name.' service' | echohl None
line 79:  echom 'Failed to start '.self.name.' service' | echohl None
line 79:  echohl None
line 80:       return
line 81:     endif
line 82:     let self['chan_id'] = chan_id
line 83:     let self['running'] = 1
line 84:   endif
function coc#rpc#start_server[17]..<SNR>47_start returning #0

continuing in function coc#rpc#start_server

line 18:   endif
function coc#rpc#start_server returning #0

continuing in /Users/ablanken/.local/share/nvim/site/pack/packer/start/coc.nvim/plugin/coc.vim

line 50: endif
line 51: 
line 52: function! CocTagFunc(pattern, flags, info) abort
line 59: 
line 60: function! CocPopupCallback(bufnr, arglist) abort
line 70: 
line 71: function! CocAction(name, ...) abort
line 77: 
line 78: function! CocHasProvider(name) abort
line 81: 
line 82: function! CocActionAsync(name, ...) abort
line 85: 
line 86: function! CocRequest(...) abort
line 89: 
line 90: function! CocNotify(...) abort
line 93: 
line 94: function! CocRegistNotification(id, method, cb) abort
line 97: 
line 98: function! CocLocations(id, method, ...) abort
line 102: 
line 103: function! CocLocationsAsync(id, method, ...) abort
line 107: 
line 108: function! CocRequestAsync(...)
line 111: 
line 112: function! s:AsyncRequest(name, args) abort
line 125: 
line 126: function! s:CommandList(...) abort
line 130: 
line 131: function! s:ExtensionList(...) abort
line 137: 
line 138: function! s:SearchOptions(...) abort
line 145: 
line 146: function! s:LoadedExtensions(...) abort
line 150: 
line 151: function! s:InstallOptions(...)abort
line 155: 
line 156: function! s:OpenConfig()
line 173: 
line 174: function! s:get_color(item, fallback) abort
line 186: 
line 187: function! s:AddAnsiGroups() abort
line 215: 
line 216: function! s:CursorRangeFromSelected(type, ...) abort
line 220: 
line 221: function! s:OpenDiagnostics(...) abort
line 230: 
line 231: function! s:Disable() abort
line 244: 
line 245: function! s:Autocmd(...) abort
line 251: 
line 252: function! s:HandleCharInsert(char, bufnr) abort
line 261: 
line 262: function! s:HandleCompleteDone(complete_item) abort
line 274: 
line 275: function! s:HandleWinScrolled(winid) abort
line 281: 
line 282: function! s:SyncAutocmd(...)
line 288: 
line 289: function! s:Enable(initialize)
line 374: 
line 375: function! s:Hi() abort
line 512: 
line 513: function! s:FormatFromSelected(type)
line 516: 
line 517: function! s:CodeActionFromSelected(type)
line 520: 
line 521: function! s:ShowInfo()
line 555: 
line 556: command! -nargs=0 CocOutline      :call coc#rpc#notify('showOutline', [])
line 557: command! -nargs=? CocDiagnostics  :call s:OpenDiagnostics(<f-args>)
line 558: command! -nargs=0 CocInfo         :call s:ShowInfo()
line 559: command! -nargs=0 CocOpenLog      :call coc#rpc#notify('openLog',  [])
line 560: command! -nargs=0 CocDisable      :call s:Disable()
line 561: command! -nargs=0 CocEnable       :call s:Enable(0)
line 562: command! -nargs=0 CocConfig       :call s:OpenConfig()
line 563: command! -nargs=0 CocLocalConfig  :call coc#rpc#notify('openLocalConfig', [])
line 564: command! -nargs=0 CocRestart      :call coc#rpc#restart()
line 565: command! -nargs=0 CocStart        :call coc#rpc#start_server()
line 566: command! -nargs=0 CocRebuild      :call coc#util#rebuild()
line 567: command! -nargs=1 -complete=custom,s:LoadedExtensions  CocWatch    :call coc#rpc#notify('watchExtension', [<f-args>])
line 568: command! -nargs=+ -complete=custom,s:SearchOptions  CocSearch    :call coc#rpc#notify('search', [<f-args>])
line 569: command! -nargs=+ -complete=custom,s:ExtensionList  CocUninstall :call CocActionAsync('uninstallExtension', <f-args>)
line 570: command! -nargs=* -complete=custom,s:CommandList -range CocCommand :call coc#rpc#notify('runCommand', [<f-args>])
line 571: command! -nargs=* -complete=custom,coc#list#options CocList      :call coc#rpc#notify('openList',  [<f-args>])
line 572: command! -nargs=? -complete=custom,coc#list#names CocListResume   :call coc#rpc#notify('listResume', [<f-args>])
line 573: command! -nargs=? -complete=custom,coc#list#names CocListCancel   :call coc#rpc#notify('listCancel', [])
line 574: command! -nargs=? -complete=custom,coc#list#names CocPrev         :call coc#rpc#notify('listPrev', [<f-args>])
line 575: command! -nargs=? -complete=custom,coc#list#names CocNext         :call coc#rpc#notify('listNext', [<f-args>])
line 576: command! -nargs=? -complete=custom,coc#list#names CocFirst        :call coc#rpc#notify('listFirst', [<f-args>])
line 577: command! -nargs=? -complete=custom,coc#list#names CocLast         :call coc#rpc#notify('listLast', [<f-args>])
line 578: command! -nargs=* -range CocAction :call coc#rpc#notify('codeActionRange', [<line1>, <line2>, <f-args>])
line 579: command! -nargs=* -range CocFix    :call coc#rpc#notify('codeActionRange', [<line1>, <line2>, 'quickfix'])
line 580: command! -nargs=0 CocUpdate       :call coc#util#update_extensions(1)
line 581: command! -nargs=0 -bar CocUpdateSync   :call coc#util#update_extensions()
line 582: command! -nargs=* -bar -complete=custom,s:InstallOptions CocInstall   :call coc#util#install_extension([<f-args>])
line 583: 
line 584: call s:Enable(1)
calling function <SNR>44_Enable(1)

line 1:   if get(g:, 'coc_enabled', 0) == 1
line 2:     return
line 3:   endif
line 4:   let g:coc_enabled = 1
line 5: 
line 6:   augroup coc_nvim
line 7:     autocmd!
line 8: 
line 9:     if exists('##MenuPopupChanged') && exists('*nvim_open_win')
line 10:       autocmd MenuPopupChanged *   call s:Autocmd('MenuPopupChanged', get(v:, 'event', {}), win_screenpos(winnr())[0] + winline() - 2)
line 11:     endif
line 12:     if exists('##CompleteChanged')
line 13:       autocmd CompleteChanged *   call s:Autocmd('MenuPopupChanged', get(v:, 'event', {}), win_screenpos(winnr())[0] + winline() - 2)
line 14:     endif
line 15: 
line 16:     if coc#rpc#started()
calling function <SNR>44_Enable[16]..coc#rpc#started()

line 1:   return !empty(s:client)
function <SNR>44_Enable[16]..coc#rpc#started returning #1

continuing in function <SNR>44_Enable

line 17:       autocmd VimEnter            * call coc#rpc#notify('VimEnter', [])
line 18:     elseif get(g:, 'coc_start_at_startup', 1)
line 19:       autocmd VimEnter            * call coc#rpc#start_server()
line 20:     endif
line 21:     if s:is_vim
line 22:       if exists('##DirChanged')
line 23:         autocmd DirChanged        * call s:Autocmd('DirChanged', getcwd())
line 24:       endif
line 25:       if exists('##TerminalOpen')
line 26:         autocmd TerminalOpen      * call s:Autocmd('TermOpen', +expand('<abuf>'))
line 27:       endif
line 28:     else
line 29:       autocmd DirChanged        * call s:Autocmd('DirChanged', get(v:event, 'cwd', ''))
line 30:       autocmd TermOpen          * call s:Autocmd('TermOpen', +expand('<abuf>'))
line 31:       autocmd CursorMoved       * call coc#float#nvim_refresh_scrollbar(win_getid())
line 32:       autocmd WinEnter          * call coc#float#nvim_win_enter(win_getid())
line 33:       if exists('##WinClosed')
line 34:         autocmd WinClosed       * call coc#float#close_related(+expand('<afile>'))
line 35:       endif
line 36:     endif
line 37:     if has('nvim-0.4.0') || has('patch-8.1.1719')
line 38:       autocmd CursorHold        * call coc#float#check_related()
line 39:     endif
line 40:     if exists('##WinScrolled')
line 41:       autocmd WinScrolled       * call s:HandleWinScrolled(+expand('<amatch>'))
line 42:     endif
line 43:     autocmd TabNew              * call s:Autocmd('TabNew', tabpagenr())
line 44:     autocmd TabClosed           * call s:Autocmd('TabClosed', +expand('<afile>'))
line 45:     autocmd WinLeave            * call s:Autocmd('WinLeave', win_getid())
line 46:     autocmd WinEnter            * call s:Autocmd('WinEnter', win_getid())
line 47:     autocmd BufWinLeave         * call s:Autocmd('BufWinLeave', +expand('<abuf>'), bufwinid(+expand('<abuf>')))
line 48:     autocmd BufWinEnter         * call s:Autocmd('BufWinEnter', +expand('<abuf>'), win_getid())
line 49:     autocmd FileType            * call s:Autocmd('FileType', expand('<amatch>'), +expand('<abuf>'))
line 50:     autocmd CompleteDone        * call s:HandleCompleteDone(get(v:, 'completed_item', {}))
line 51:     autocmd InsertCharPre       * call s:HandleCharInsert(v:char, bufnr('%'))
line 52:     if exists('##TextChangedP')
line 53:       autocmd TextChangedP        * call s:Autocmd('TextChangedP', +expand('<abuf>'), coc#util#change_info())
line 54:     endif
line 55:     autocmd TextChangedI        * call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())
line 56:     autocmd InsertLeave         * call s:Autocmd('InsertLeave', +expand('<abuf>'))
line 57:     autocmd InsertEnter         * call s:Autocmd('InsertEnter', +expand('<abuf>'))
line 58:     autocmd BufHidden           * call s:Autocmd('BufHidden', +expand('<abuf>'))
line 59:     autocmd BufEnter            * call s:Autocmd('BufEnter', +expand('<abuf>'))
line 60:     autocmd TextChanged         * call s:Autocmd('TextChanged', +expand('<abuf>'), getbufvar(+expand('<abuf>'), 'changedtick'))
line 61:     autocmd BufWritePost        * call s:Autocmd('BufWritePost', +expand('<abuf>'), getbufvar(+expand('<abuf>'), 'changedtick'))
line 62:     autocmd CursorMoved         * call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])
line 63:     autocmd CursorMovedI        * call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])
line 64:     autocmd CursorHold          * call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')], coc#util#suggest_variables(bufnr('%')))
line 65:     autocmd CursorHoldI         * call s:Autocmd('CursorHoldI', +expand('<abuf>'), [line('.'), col('.')])
line 66:     autocmd BufNewFile,BufReadPost * call s:Autocmd('BufCreate', +expand('<abuf>'))
line 67:     autocmd BufUnload           * call s:Autocmd('BufUnload', +expand('<abuf>'))
line 68:     autocmd BufWritePre         * call s:SyncAutocmd('BufWritePre', +expand('<abuf>'), bufname(+expand('<abuf>')))
line 69:     autocmd FocusGained         * if mode() !~# '^c' | call s:Autocmd('FocusGained') | endif
line 70:     autocmd FocusLost           * call s:Autocmd('FocusLost')
line 71:     autocmd VimResized          * call s:Autocmd('VimResized', &columns, &lines)
line 72:     autocmd VimLeavePre         * let g:coc_vim_leaving = 1
line 73:     autocmd VimLeavePre         * call s:Autocmd('VimLeavePre')
line 74:     autocmd BufReadCmd,FileReadCmd,SourceCmd list://* call coc#list#setup(expand('<amatch>'))
line 75:     autocmd BufWriteCmd __coc_refactor__* :call coc#rpc#notify('saveRefactor', [+expand('<abuf>')])
line 76:     autocmd ColorScheme * call s:Hi()
line 77:   augroup end
line 78:   if a:initialize == 0
line 79:      call coc#rpc#request('attach', [])
line 80:      echohl MoreMsg
line 81:      echom '[coc.nvim] Event enabled'
line 82:      echohl None
line 83:   endif
function <SNR>44_Enable returning #0

continuing in /Users/ablanken/.local/share/nvim/site/pack/packer/start/coc.nvim/plugin/coc.vim

line 585: call s:Hi()
calling function <SNR>44_Hi()

line 1:   hi default CocErrorSign     ctermfg=Red     guifg=#ff0000 guibg=NONE
line 2:   hi default CocWarningSign   ctermfg=Brown   guifg=#ff922b guibg=NONE
line 3:   hi default CocInfoSign      ctermfg=Yellow  guifg=#fab005 guibg=NONE
line 4:   hi default CocHintSign      ctermfg=Blue    guifg=#15aabf guibg=NONE
line 5:   hi default CocSelectedText  ctermfg=Red     guifg=#fb4934 guibg=NONE
line 6:   hi default CocCodeLens      ctermfg=Gray    guifg=#999999 guibg=NONE
line 7:   hi default CocUnderline     term=underline cterm=underline gui=underline
line 8:   hi default CocBold          term=bold cterm=bold gui=bold
line 9:   hi default CocItalic        term=italic cterm=italic gui=italic
line 10:   if s:is_vim || has('nvim-0.4.0')
line 11:     hi default CocStrikeThrough term=strikethrough cterm=strikethrough gui=strikethrough
line 12:   else
line 13:     hi default CocStrikeThrough guifg=#989898 ctermfg=gray
line 14:   endif
line 15:   hi default CocMarkdownLink  ctermfg=Blue    guifg=#15aabf guibg=NONE
line 16:   hi default CocDisabled guifg=#999999 ctermfg=gray
line 17:   hi default link CocFadeOut             Conceal
line 18:   hi default link CocMarkdownCode        markdownCode
line 19:   hi default link CocMarkdownHeader      markdownH1
line 20:   hi default link CocMenuSel             PmenuSel
line 21:   hi default link CocErrorFloat          CocErrorSign
line 22:   hi default link CocWarningFloat        CocWarningSign
line 23:   hi default link CocInfoFloat           CocInfoSign
line 24:   hi default link CocHintFloat           CocHintSign
line 25:   hi default link CocErrorHighlight      CocUnderline
line 26:   hi default link CocWarningHighlight    CocUnderline
line 27:   hi default link CocInfoHighlight       CocUnderline
line 28:   hi default link CocHintHighlight       CocUnderline
line 29:   hi default link CocDeprecatedHighlight CocStrikeThrough
line 30:   hi default link CocUnusedHighlight     CocFadeOut
line 31:   hi default link CocListMode            ModeMsg
line 32:   hi default link CocListPath            Comment
line 33:   hi default link CocHighlightText       CursorColumn
line 34:   hi default link CocHoverRange          Search
line 35:   hi default link CocCursorRange         Search
line 36:   hi default link CocLinkedEditing       CocCursorRange
line 37:   hi default link CocHighlightRead       CocHighlightText
line 38:   hi default link CocHighlightWrite      CocHighlightText
line 39:   hi default link CocInlayHint           CocHintSign
line 40:   " Snippet
line 41:   hi default link CocSnippetVisual       Visual
line 42:   " Tree view highlights
line 43:   hi default link CocTreeTitle       Title
line 44:   hi default link CocTreeDescription Comment
line 45:   hi default link CocTreeOpenClose   CocBold
line 46:   hi default link CocTreeSelected    CursorLine
line 47:   hi default link CocSelectedRange   CocHighlightText
line 48:   " Symbol highlights
line 49:   hi default link CocSymbolDefault       MoreMsg
line 50:   hi default link CocSymbolFile          Statement
line 51:   hi default link CocSymbolModule        Statement
line 52:   hi default link CocSymbolNamespace     Statement
line 53:   hi default link CocSymbolPackage       Statement
line 54:   hi default link CocSymbolClass         Statement
line 55:   hi default link CocSymbolMethod        Function
line 56:   hi default link CocSymbolProperty      Keyword
line 57:   hi default link CocSymbolField         CocSymbolDefault
line 58:   hi default link CocSymbolConstructor   Function
line 59:   hi default link CocSymbolEnum          CocSymbolDefault
line 60:   hi default link CocSymbolInterface     CocSymbolDefault
line 61:   hi default link CocSymbolFunction      Function
line 62:   hi default link CocSymbolVariable      CocSymbolDefault
line 63:   hi default link CocSymbolConstant      Constant
line 64:   hi default link CocSymbolString        String
line 65:   hi default link CocSymbolNumber        Number
line 66:   hi default link CocSymbolBoolean       Boolean
line 67:   hi default link CocSymbolArray         CocSymbolDefault
line 68:   hi default link CocSymbolObject        CocSymbolDefault
line 69:   hi default link CocSymbolKey           Keyword
line 70:   hi default link CocSymbolNull          Type
line 71:   hi default link CocSymbolEnumMember    CocSymbolDefault
line 72:   hi default link CocSymbolStruct        Keyword
line 73:   hi default link CocSymbolEvent         Keyword
line 74:   hi default link CocSymbolOperator      Operator
line 75:   hi default link CocSymbolTypeParameter Operator
line 76: 
line 77:   if has('nvim')
line 78:     hi default link CocFloating NormalFloat
line 79:   else
line 80:     hi default link CocFloating Pmenu
line 81:   endif
line 82:   if !exists('*sign_getdefined') || empty(sign_getdefined('CocCurrentLine'))
line 83:     sign define CocCurrentLine linehl=CocMenuSel
line 84:   endif
line 85:   if !exists('*sign_getdefined') || empty(sign_getdefined('CocTreeSelected'))
line 86:     sign define CocTreeSelected linehl=CocTreeSelected
line 87:   endif
line 88:   if has('nvim-0.5.0')
line 89:     hi default CocCursorTransparent gui=strikethrough blend=100
line 90:   endif
line 91: 
line 92:   if has('nvim')
line 93:     let names = ['Error', 'Warning', 'Info', 'Hint']
line 94:     for name in names
line 95:       if !hlexists('Coc'.name.'VirtualText')
line 96:         exe 'hi default link Coc'.name.'VirtualText Coc'.name.'Sign'
line 96: hi default link CocErrorVirtualText CocErrorSign
line 97:       endif
line 98:     endfor
line 94:     for name in names
line 95:       if !hlexists('Coc'.name.'VirtualText')
line 96:         exe 'hi default link Coc'.name.'VirtualText Coc'.name.'Sign'
line 96: hi default link CocWarningVirtualText CocWarningSign
line 97:       endif
line 98:     endfor
line 94:     for name in names
line 95:       if !hlexists('Coc'.name.'VirtualText')
line 96:         exe 'hi default link Coc'.name.'VirtualText Coc'.name.'Sign'
line 96: hi default link CocInfoVirtualText CocInfoSign
line 97:       endif
line 98:     endfor
line 94:     for name in names
line 95:       if !hlexists('Coc'.name.'VirtualText')
line 96:         exe 'hi default link Coc'.name.'VirtualText Coc'.name.'Sign'
line 96: hi default link CocHintVirtualText CocHintSign
line 97:       endif
line 98:     endfor
line 94:     for name in names
line 95:       if !hlexists('Coc'.name.'VirtualText')
line 96:         exe 'hi default link Coc'.name.'VirtualText Coc'.name.'Sign'
line 97:       endif
line 98:     endfor
line 99:   endif
line 100:   call s:AddAnsiGroups()
calling function <SNR>44_Hi[100]..<SNR>44_AddAnsiGroups()

line 1:   let color_map = {}
line 2:   let colors = ['#282828', '#cc241d', '#98971a', '#d79921', '#458588', '#b16286', '#689d6a', '#a89984', '#928374']
line 3:   let names = ['black', 'red', 'green', 'yellow', 'blue', 'magenta', 'cyan', 'white', 'grey']
line 4:   for i in range(0, len(names) - 1)
line 5:     let name = names[i]
line 6:     if exists('g:terminal_ansi_colors')
line 7:       let color_map[name] = s:get_color(get(g:terminal_ansi_colors, i, colors[i]), colors[i])
line 8:     else
line 9:       let color_map[name] = get(g:, 'terminal_color_'.i, colors[i])
line 10:     endif
line 11:   endfor
line 4:   for i in range(0, len(names) - 1)
line 5:     let name = names[i]
line 6:     if exists('g:terminal_ansi_colors')
line 7:       let color_map[name] = s:get_color(get(g:terminal_ansi_colors, i, colors[i]), colors[i])
line 8:     else
line 9:       let color_map[name] = get(g:, 'terminal_color_'.i, colors[i])
line 10:     endif
line 11:   endfor
line 4:   for i in range(0, len(names) - 1)
line 5:     let name = names[i]
line 6:     if exists('g:terminal_ansi_colors')
line 7:       let color_map[name] = s:get_color(get(g:terminal_ansi_colors, i, colors[i]), colors[i])
line 8:     else
line 9:       let color_map[name] = get(g:, 'terminal_color_'.i, colors[i])
line 10:     endif
line 11:   endfor
line 4:   for i in range(0, len(names) - 1)
line 5:     let name = names[i]
line 6:     if exists('g:terminal_ansi_colors')
line 7:       let color_map[name] = s:get_color(get(g:terminal_ansi_colors, i, colors[i]), colors[i])
line 8:     else
line 9:       let color_map[name] = get(g:, 'terminal_color_'.i, colors[i])
line 10:     endif
line 11:   endfor
line 4:   for i in range(0, len(names) - 1)
line 5:     let name = names[i]
line 6:     if exists('g:terminal_ansi_colors')
line 7:       let color_map[name] = s:get_color(get(g:terminal_ansi_colors, i, colors[i]), colors[i])
line 8:     else
line 9:       let color_map[name] = get(g:, 'terminal_color_'.i, colors[i])
line 10:     endif
line 11:   endfor
line 4:   for i in range(0, len(names) - 1)
line 5:     let name = names[i]
line 6:     if exists('g:terminal_ansi_colors')
line 7:       let color_map[name] = s:get_color(get(g:terminal_ansi_colors, i, colors[i]), colors[i])
line 8:     else
line 9:       let color_map[name] = get(g:, 'terminal_color_'.i, colors[i])
line 10:     endif
line 11:   endfor
line 4:   for i in range(0, len(names) - 1)
line 5:     let name = names[i]
line 6:     if exists('g:terminal_ansi_colors')
line 7:       let color_map[name] = s:get_color(get(g:terminal_ansi_colors, i, colors[i]), colors[i])
line 8:     else
line 9:       let color_map[name] = get(g:, 'terminal_color_'.i, colors[i])
line 10:     endif
line 11:   endfor
line 4:   for i in range(0, len(names) - 1)
line 5:     let name = names[i]
line 6:     if exists('g:terminal_ansi_colors')
line 7:       let color_map[name] = s:get_color(get(g:terminal_ansi_colors, i, colors[i]), colors[i])
line 8:     else
line 9:       let color_map[name] = get(g:, 'terminal_color_'.i, colors[i])
line 10:     endif
line 11:   endfor
line 4:   for i in range(0, len(names) - 1)
line 5:     let name = names[i]
line 6:     if exists('g:terminal_ansi_colors')
line 7:       let color_map[name] = s:get_color(get(g:terminal_ansi_colors, i, colors[i]), colors[i])
line 8:     else
line 9:       let color_map[name] = get(g:, 'terminal_color_'.i, colors[i])
line 10:     endif
line 11:   endfor
line 4:   for i in range(0, len(names) - 1)
line 5:     let name = names[i]
line 6:     if exists('g:terminal_ansi_colors')
line 7:       let color_map[name] = s:get_color(get(g:terminal_ansi_colors, i, colors[i]), colors[i])
line 8:     else
line 9:       let color_map[name] = get(g:, 'terminal_color_'.i, colors[i])
line 10:     endif
line 11:   endfor
line 12:   try
line 13:     for name in keys(color_map)
line 14:       let foreground = toupper(name[0]).name[1:]
line 15:       let foregroundColor = color_map[name]
line 16:       for key in keys(color_map)
line 17:         let background = toupper(key[0]).key[1:]
line 18:         let backgroundColor = color_map[key]
line 19:         exe 'hi default CocList'.foreground.background.' guifg='.foregroundColor.' guibg='.backgroundColor
line 19: hi default CocListBlackBlack guifg=#363a49 guibg=#363a49
line 20:       endfor
line 16:       for key in keys(color_map)
line 17:         let background = toupper(key[0]).key[1:]
line 18:         let backgroundColor = color_map[key]
line 19:         exe 'hi default CocList'.foreground.background.' guifg='.foregroundColor.' guibg='.backgroundColor
line 19: hi default CocListBlackBlue guifg=#363a49 guibg=#ECBE7B
line 20:       endfor
line 16:       for key in keys(color_map)
line 17:         let background = toupper(key[0]).key[1:]
line 18:         let backgroundColor = color_map[key]
line 19:         exe 'hi default CocList'.foreground.background.' guifg='.foregroundColor.' guibg='.backgroundColor
line 19: hi default CocListBlackGreen guifg=#363a49 guibg=#a0c980
line 20:       endfor
line 16:       for key in keys(color_map)
line 17:         let background = toupper(key[0]).key[1:]
line 18:         let backgroundColor = color_map[key]
line 19:         exe 'hi default CocList'.foreground.background.' guifg='.foregroundColor.' guibg='.backgroundColor
line 19: hi default CocListBlackGrey guifg=#363a49 guibg=#ECBE7B
line 20:       endfor
line 16:       for key in keys(color_map)
line 17:         let background = toupper(key[0]).key[1:]
line 18:         let backgroundColor = color_map[key]
line 19:         exe 'hi default CocList'.foreground.background.' guifg='.foregroundColor.' guibg='.backgroundColor
line 19: hi default CocListBlackWhite guifg=#363a49 guibg=#6cb6eb
line 20:       endfor
line 16:       for key in keys(color_map)
line 17:         let background = toupper(key[0]).key[1:]
line 18:         let backgroundColor = color_map[key]
line 19:         exe 'hi default CocList'.foreground.background.' guifg='.foregroundColor.' guibg='.backgroundColor
line 19: hi default CocListBlackCyan guifg=#363a49 guibg=#6cb6eb
line 20:       endfor
line 16:       for key in keys(color_map)
line 17:         let background = toupper(key[0]).key[1:]
line 18:         let backgroundColor = color_map[key]
line 19:         exe 'hi default CocList'.foreground.background.' guifg='.foregroundColor.' guibg='.backgroundColor
line 19: hi default CocListBlackYellow guifg=#363a49 guibg=#6cb6eb
line 20:       endfor
line 16:       for key in keys(color_map)
line 17:         let background = toupper(key[0]).key[1:]
line 18:         let backgroundColor = color_map[key]
line 19:         exe 'hi default CocList'.foreground.background.' guifg='.foregroundColor.' guibg='.backgroundColor
line 19: hi default CocListBlackMagenta guifg=#363a49 guibg=#d38aea
line 20:       endfor
line 16:       for key in keys(color_map)
line 17:         let background = toupper(key[0]).key[1:]
line 18:         let backgroundColor = color_map[key]
line 19:         exe 'hi default CocList'.foreground.background.' guifg='.foregroundColor.' guibg='.backgroundColor
line 19: hi default CocListBlackRed guifg=#363a49 guibg=#4db5bd
line 20:       endfor
line 16:       for key in keys(color_map)
line 17:         let background = toupper(key[0]).key[1:]
line 18:         let backgroundColor = color_map[key]
line 19:         exe 'hi default CocList'.foreground.background.' guifg='.foregroundColor.' guibg='.backgroundColor
line 20:       endfor
line 21:       exe 'hi default CocListFg'.foreground. ' guifg='.foregroundColor. ' ctermfg='.foreground
line 21: hi default CocListFgBlack guifg=#363a49 ctermfg=Black
line 22:       exe 'hi default CocListBg'.foreground. ' guibg='.foregroundColor. ' ctermbg='.foreground
line 22: hi default CocListBgBlack guibg=#363a49 ctermbg=Black
line 23:     endfor
line 13:     for name in keys(color_map)
line 14:       let foreground = toupper(name[0]).name[1:]
line 15:       let foregroundColor = color_map[name]
line 16:       for key in keys(color_map)
line 17:         let background = toupper(key[0]).key[1:]
line 18:         let backgroundColor = color_map[key]
line 19:         exe 'hi default CocList'.foreground.background.' guifg='.foregroundColor.' guibg='.backgroundColor
line 19: hi default CocListBlueBlack guifg=#ECBE7B guibg=#363a49
line 20:       endfor
line 16:       for key in keys(color_map)
line 17:         let background = toupper(key[0]).key[1:]
line 18:         let backgroundColor = color_map[key]
line 19:         exe 'hi default CocList'.foreground.background.' guifg='.foregroundColor.' guibg='.backgroundColor
line 19: hi default CocListBlueBlue guifg=#ECBE7B guibg=#ECBE7B
line 20:       endfor
line 16:       for key in keys(color_map)
line 17:         let background = toupper(key[0]).key[1:]
line 18:         let backgroundColor = color_map[key]
line 19:         exe 'hi default CocList'.foreground.background.' guifg='.foregroundColor.' guibg='.backgroundColor
line 19: hi default CocListBlueGreen guifg=#ECBE7B guibg=#a0c980
line 20:       endfor
line 16:       for key in keys(color_map)
line 17:         let background = toupper(key[0]).key[1:]
line 18:         let backgroundColor = color_map[key]
line 19:         exe 'hi default CocList'.foreground.background.' guifg='.foregroundColor.' guibg='.backgroundColor
line 19: hi default CocListBlueGrey guifg=#ECBE7B guibg=#ECBE7B
line 20:       endfor
line 16:       for key in keys(color_map)
line 17:         let background = toupper(key[0]).key[1:]
line 18:         let backgroundColor = color_map[key]
line 19:         exe 'hi default CocList'.foreground.background.' guifg='.foregroundColor.' guibg='.backgroundColor
line 19: hi default CocListBlueWhite guifg=#ECBE7B guibg=#6cb6eb
line 20:       endfor
line 16:       for key in keys(color_map)
line 17:         let background = toupper(key[0]).key[1:]
line 18:         let backgroundColor = color_map[key]
line 19:         exe 'hi default CocList'.foreground.background.' guifg='.foregroundColor.' guibg='.backgroundColor
line 19: hi default CocListBlueCyan guifg=#ECBE7B guibg=#6cb6eb
line 20:       endfor
line 16:       for key in keys(color_map)
line 17:         let background = toupper(key[0]).key[1:]
line 18:         let backgroundColor = color_map[key]
line 19:         exe 'hi default CocList'.foreground.background.' guifg='.foregroundColor.' guibg='.backgroundColor
line 19: hi default CocListBlueYellow guifg=#ECBE7B guibg=#6cb6eb
line 20:       endfor
line 16:       for key in keys(color_map)
line 17:         let background = toupper(key[0]).key[1:]
line 18:         let backgroundColor = color_map[key]
line 19:         exe 'hi default CocList'.foreground.background.' guifg='.foregroundColor.' guibg='.backgroundColor
line 19: hi default CocListBlueMagenta guifg=#ECBE7B guibg=#d38aea
line 20:       endfor
line 16:       for key in keys(color_map)
line 17:         let background = toupper(key[0]).key[1:]
line 18:         let backgroundColor = color_map[key]
line 19:         exe 'hi default CocList'.foreground.background.' guifg='.foregroundColor.' guibg='.backgroundColor
line 19: hi default CocListBlueRed guifg=#ECBE7B guibg=#4db5bd
line 20:       endfor
line 16:       for key in keys(color_map)
line 17:         let background = toupper(key[0]).key[1:]
line 18:         let backgroundColor = color_map[key]
line 19:         exe 'hi default CocList'.foreground.background.' guifg='.foregroundColor.' guibg='.backgroundColor
line 20:       endfor
line 21:       exe 'hi default CocListFg'.foreground. ' guifg='.foregroundColor. ' ctermfg='.foreground
line 21: hi default CocListFgBlue guifg=#ECBE7B ctermfg=Blue
line 22:       exe 'hi default CocListBg'.foreground. ' guibg='.foregroundColor. ' ctermbg='.foreground
line 22: hi default CocListBgBlue guibg=#ECBE7B ctermbg=Blue
line 23:     endfor
line 13:     for name in keys(color_map)
line 14:       let foreground = toupper(name[0]).name[1:]
line 15:       let foregroundColor = color_map[name]
line 16:       for key in keys(color_map)
line 17:         let background = toupper(key[0]).key[1:]
line 18:         let backgroundColor = color_map[key]
line 19:         exe 'hi default CocList'.foreground.background.' guifg='.foregroundColor.' guibg='.backgroundColor
line 19: hi default CocListGreenBlack guifg=#a0c980 guibg=#363a49
line 20:       endfor
line 16:       for key in keys(color_map)
line 17:         let background = toupper(key[0]).key[1:]
line 18:         let backgroundColor = color_map[key]
line 19:         exe 'hi default CocList'.foreground.background.' guifg='.foregroundColor.' guibg='.backgroundColor
line 19: hi default CocListGreenBlue guifg=#a0c980 guibg=#ECBE7B
line 20:       endfor
line 16:       for key in keys(color_map)
line 17:         let background = toupper(key[0]).key[1:]
line 18:         let backgroundColor = color_map[key]
line 19:         exe 'hi default CocList'.foreground.background.' guifg='.foregroundColor.' guibg='.backgroundColor
line 19: hi default CocListGreenGreen guifg=#a0c980 guibg=#a0c980
line 20:       endfor
line 16:       for key in keys(color_map)
line 17:         let background = toupper(key[0]).key[1:]
line 18:         let backgroundColor = color_map[key]
line 19:         exe 'hi default CocList'.foreground.background.' guifg='.foregroundColor.' guibg='.backgroundColor
line 19: hi default CocListGreenGrey guifg=#a0c980 guibg=#ECBE7B
line 20:       endfor
line 16:       for key in keys(color_map)
line 17:         let background = toupper(key[0]).key[1:]
line 18:         let backgroundColor = color_map[key]
line 19:         exe 'hi default CocList'.foreground.background.' guifg='.foregroundColor.' guibg='.backgroundColor
line 19: hi default CocListGreenWhite guifg=#a0c980 guibg=#6cb6eb
line 20:       endfor
line 16:       for key in keys(color_map)
line 17:         let background = toupper(key[0]).key[1:]
line 18:         let backgroundColor = color_map[key]
line 19:         exe 'hi default CocList'.foreground.background.' guifg='.foregroundColor.' guibg='.backgroundColor
line 19: hi default CocListGreenCyan guifg=#a0c980 guibg=#6cb6eb
line 20:       endfor
line 16:       for key in keys(color_map)
line 17:         let background = toupper(key[0]).key[1:]
line 18:         let backgroundColor = color_map[key]
line 19:         exe 'hi default CocList'.foreground.background.' guifg='.foregroundColor.' guibg='.backgroundColor
line 19: hi default CocListGreenYellow guifg=#a0c980 guibg=#6cb6eb
line 20:       endfor
line 16:       for key in keys(color_map)
line 17:         let background = toupper(key[0]).key[1:]
line 18:         let backgroundColor = color_map[key]
line 19:         exe 'hi default CocList'.foreground.background.' guifg='.foregroundColor.' guibg='.backgroundColor
line 19: hi default CocListGreenMagenta guifg=#a0c980 guibg=#d38aea
line 20:       endfor
line 16:       for key in keys(color_map)
line 17:         let background = toupper(key[0]).key[1:]
line 18:         let backgroundColor = color_map[key]
line 19:         exe 'hi default CocList'.foreground.background.' guifg='.foregroundColor.' guibg='.backgroundColor
line 19: hi default CocListGreenRed guifg=#a0c980 guibg=#4db5bd
line 20:       endfor
line 16:       for key in keys(color_map)
line 17:         let background = toupper(key[0]).key[1:]
line 18:         let backgroundColor = color_map[key]
line 19:         exe 'hi default CocList'.foreground.background.' guifg='.foregroundColor.' guibg='.backgroundColor
line 20:       endfor
line 21:       exe 'hi default CocListFg'.foreground. ' guifg='.foregroundColor. ' ctermfg='.foreground
line 21: hi default CocListFgGreen guifg=#a0c980 ctermfg=Green
line 22:       exe 'hi default CocListBg'.foreground. ' guibg='.foregroundColor. ' ctermbg='.foreground
line 22: hi default CocListBgGreen guibg=#a0c980 ctermbg=Green
line 23:     endfor
line 13:     for name in keys(color_map)
line 14:       let foreground = toupper(name[0]).name[1:]
line 15:       let foregroundColor = color_map[name]
line 16:       for key in keys(color_map)
line 17:         let background = toupper(key[0]).key[1:]
line 18:         let backgroundColor = color_map[key]
line 19:         exe 'hi default CocList'.foreground.background.' guifg='.foregroundColor.' guibg='.backgroundColor
line 19: hi default CocListGreyBlack guifg=#ECBE7B guibg=#363a49
line 20:       endfor
line 16:       for key in keys(color_map)
line 17:         let background = toupper(key[0]).key[1:]
line 18:         let backgroundColor = color_map[key]
line 19:         exe 'hi default CocList'.foreground.background.' guifg='.foregroundColor.' guibg='.backgroundColor
line 19: hi default CocListGreyBlue guifg=#ECBE7B guibg=#ECBE7B
line 20:       endfor
line 16:       for key in keys(color_map)
line 17:         let background = toupper(key[0]).key[1:]
line 18:         let backgroundColor = color_map[key]
line 19:         exe 'hi default CocList'.foreground.background.' guifg='.foregroundColor.' guibg='.backgroundColor
line 19: hi default CocListGreyGreen guifg=#ECBE7B guibg=#a0c980
line 20:       endfor
line 16:       for key in keys(color_map)
line 17:         let background = toupper(key[0]).key[1:]
line 18:         let backgroundColor = color_map[key]
line 19:         exe 'hi default CocList'.foreground.background.' guifg='.foregroundColor.' guibg='.backgroundColor
line 19: hi default CocListGreyGrey guifg=#ECBE7B guibg=#ECBE7B
line 20:       endfor
line 16:       for key in keys(color_map)
line 17:         let background = toupper(key[0]).key[1:]
line 18:         let backgroundColor = color_map[key]
line 19:         exe 'hi default CocList'.foreground.background.' guifg='.foregroundColor.' guibg='.backgroundColor
line 19: hi default CocListGreyWhite guifg=#ECBE7B guibg=#6cb6eb
line 20:       endfor
line 16:       for key in keys(color_map)
line 17:         let background = toupper(key[0]).key[1:]
line 18:         let backgroundColor = color_map[key]
line 19:         exe 'hi default CocList'.foreground.background.' guifg='.foregroundColor.' guibg='.backgroundColor
line 19: hi default CocListGreyCyan guifg=#ECBE7B guibg=#6cb6eb
line 20:       endfor
line 16:       for key in keys(color_map)
line 17:         let background = toupper(key[0]).key[1:]
line 18:         let backgroundColor = color_map[key]
line 19:         exe 'hi default CocList'.foreground.background.' guifg='.foregroundColor.' guibg='.backgroundColor
line 19: hi default CocListGreyYellow guifg=#ECBE7B guibg=#6cb6eb
line 20:       endfor
line 16:       for key in keys(color_map)
line 17:         let background = toupper(key[0]).key[1:]
line 18:         let backgroundColor = color_map[key]
line 19:         exe 'hi default CocList'.foreground.background.' guifg='.foregroundColor.' guibg='.backgroundColor
line 19: hi default CocListGreyMagenta guifg=#ECBE7B guibg=#d38aea
line 20:       endfor
line 16:       for key in keys(color_map)
line 17:         let background = toupper(key[0]).key[1:]
line 18:         let backgroundColor = color_map[key]
line 19:         exe 'hi default CocList'.foreground.background.' guifg='.foregroundColor.' guibg='.backgroundColor
line 19: hi default CocListGreyRed guifg=#ECBE7B guibg=#4db5bd
line 20:       endfor
line 16:       for key in keys(color_map)
line 17:         let background = toupper(key[0]).key[1:]
line 18:         let backgroundColor = color_map[key]
line 19:         exe 'hi default CocList'.foreground.background.' guifg='.foregroundColor.' guibg='.backgroundColor
line 20:       endfor
line 21:       exe 'hi default CocListFg'.foreground. ' guifg='.foregroundColor. ' ctermfg='.foreground
line 21: hi default CocListFgGrey guifg=#ECBE7B ctermfg=Grey
line 22:       exe 'hi default CocListBg'.foreground. ' guibg='.foregroundColor. ' ctermbg='.foreground
line 22: hi default CocListBgGrey guibg=#ECBE7B ctermbg=Grey
line 23:     endfor
line 13:     for name in keys(color_map)
line 14:       let foreground = toupper(name[0]).name[1:]
line 15:       let foregroundColor = color_map[name]
line 16:       for key in keys(color_map)
line 17:         let background = toupper(key[0]).key[1:]
line 18:         let backgroundColor = color_map[key]
line 19:         exe 'hi default CocList'.foreground.background.' guifg='.foregroundColor.' guibg='.backgroundColor
line 19: hi default CocListWhiteBlack guifg=#6cb6eb guibg=#363a49
line 20:       endfor
line 16:       for key in keys(color_map)
line 17:         let background = toupper(key[0]).key[1:]
line 18:         let backgroundColor = color_map[key]
line 19:         exe 'hi default CocList'.foreground.background.' guifg='.foregroundColor.' guibg='.backgroundColor
line 19: hi default CocListWhiteBlue guifg=#6cb6eb guibg=#ECBE7B
line 20:       endfor
line 16:       for key in keys(color_map)
line 17:         let background = toupper(key[0]).key[1:]
line 18:         let backgroundColor = color_map[key]
line 19:         exe 'hi default CocList'.foreground.background.' guifg='.foregroundColor.' guibg='.backgroundColor
line 19: hi default CocListWhiteGreen guifg=#6cb6eb guibg=#a0c980
line 20:       endfor
line 16:       for key in keys(color_map)
line 17:         let background = toupper(key[0]).key[1:]
line 18:         let backgroundColor = color_map[key]
line 19:         exe 'hi default CocList'.foreground.background.' guifg='.foregroundColor.' guibg='.backgroundColor
line 19: hi default CocListWhiteGrey guifg=#6cb6eb guibg=#ECBE7B
line 20:       endfor
line 16:       for key in keys(color_map)
line 17:         let background = toupper(key[0]).key[1:]
line 18:         let backgroundColor = color_map[key]
line 19:         exe 'hi default CocList'.foreground.background.' guifg='.foregroundColor.' guibg='.backgroundColor
line 19: hi default CocListWhiteWhite guifg=#6cb6eb guibg=#6cb6eb
line 20:       endfor
line 16:       for key in keys(color_map)
line 17:         let background = toupper(key[0]).key[1:]
line 18:         let backgroundColor = color_map[key]
line 19:         exe 'hi default CocList'.foreground.background.' guifg='.foregroundColor.' guibg='.backgroundColor
line 19: hi default CocListWhiteCyan guifg=#6cb6eb guibg=#6cb6eb
line 20:       endfor
line 16:       for key in keys(color_map)
line 17:         let background = toupper(key[0]).key[1:]
line 18:         let backgroundColor = color_map[key]
line 19:         exe 'hi default CocList'.foreground.background.' guifg='.foregroundColor.' guibg='.backgroundColor
line 19: hi default CocListWhiteYellow guifg=#6cb6eb guibg=#6cb6eb
line 20:       endfor
line 16:       for key in keys(color_map)
line 17:         let background = toupper(key[0]).key[1:]
line 18:         let backgroundColor = color_map[key]
line 19:         exe 'hi default CocList'.foreground.background.' guifg='.foregroundColor.' guibg='.backgroundColor
line 19: hi default CocListWhiteMagenta guifg=#6cb6eb guibg=#d38aea
line 20:       endfor
line 16:       for key in keys(color_map)
line 17:         let background = toupper(key[0]).key[1:]
line 18:         let backgroundColor = color_map[key]
line 19:         exe 'hi default CocList'.foreground.background.' guifg='.foregroundColor.' guibg='.backgroundColor
line 19: hi default CocListWhiteRed guifg=#6cb6eb guibg=#4db5bd
line 20:       endfor
line 16:       for key in keys(color_map)
line 17:         let background = toupper(key[0]).key[1:]
line 18:         let backgroundColor = color_map[key]
line 19:         exe 'hi default CocList'.foreground.background.' guifg='.foregroundColor.' guibg='.backgroundColor
line 20:       endfor
line 21:       exe 'hi default CocListFg'.foreground. ' guifg='.foregroundColor. ' ctermfg='.foreground
line 21: hi default CocListFgWhite guifg=#6cb6eb ctermfg=White
line 22:       exe 'hi default CocListBg'.foreground. ' guibg='.foregroundColor. ' ctermbg='.foreground
line 22: hi default CocListBgWhite guibg=#6cb6eb ctermbg=White
line 23:     endfor
line 13:     for name in keys(color_map)
line 14:       let foreground = toupper(name[0]).name[1:]
line 15:       let foregroundColor = color_map[name]
line 16:       for key in keys(color_map)
line 17:         let background = toupper(key[0]).key[1:]
line 18:         let backgroundColor = color_map[key]
line 19:         exe 'hi default CocList'.foreground.background.' guifg='.foregroundColor.' guibg='.backgroundColor
line 19: hi default CocListCyanBlack guifg=#6cb6eb guibg=#363a49
line 20:       endfor
line 16:       for key in keys(color_map)
line 17:         let background = toupper(key[0]).key[1:]
line 18:         let backgroundColor = color_map[key]
line 19:         exe 'hi default CocList'.foreground.background.' guifg='.foregroundColor.' guibg='.backgroundColor
line 19: hi default CocListCyanBlue guifg=#6cb6eb guibg=#ECBE7B
line 20:       endfor
line 16:       for key in keys(color_map)
line 17:         let background = toupper(key[0]).key[1:]
line 18:         let backgroundColor = color_map[key]
line 19:         exe 'hi default CocList'.foreground.background.' guifg='.foregroundColor.' guibg='.backgroundColor
line 19: hi default CocListCyanGreen guifg=#6cb6eb guibg=#a0c980
line 20:       endfor
line 16:       for key in keys(color_map)
line 17:         let background = toupper(key[0]).key[1:]
line 18:         let backgroundColor = color_map[key]
line 19:         exe 'hi default CocList'.foreground.background.' guifg='.foregroundColor.' guibg='.backgroundColor
line 19: hi default CocListCyanGrey guifg=#6cb6eb guibg=#ECBE7B
line 20:       endfor
line 16:       for key in keys(color_map)
line 17:         let background = toupper(key[0]).key[1:]
line 18:         let backgroundColor = color_map[key]
line 19:         exe 'hi default CocList'.foreground.background.' guifg='.foregroundColor.' guibg='.backgroundColor
line 19: hi default CocListCyanWhite guifg=#6cb6eb guibg=#6cb6eb
line 20:       endfor
line 16:       for key in keys(color_map)
line 17:         let background = toupper(key[0]).key[1:]
line 18:         let backgroundColor = color_map[key]
line 19:         exe 'hi default CocList'.foreground.background.' guifg='.foregroundColor.' guibg='.backgroundColor
line 19: hi default CocListCyanCyan guifg=#6cb6eb guibg=#6cb6eb
line 20:       endfor
line 16:       for key in keys(color_map)
line 17:         let background = toupper(key[0]).key[1:]
line 18:         let backgroundColor = color_map[key]
line 19:         exe 'hi default CocList'.foreground.background.' guifg='.foregroundColor.' guibg='.backgroundColor
line 19: hi default CocListCyanYellow guifg=#6cb6eb guibg=#6cb6eb
line 20:       endfor
line 16:       for key in keys(color_map)
line 17:         let background = toupper(key[0]).key[1:]
line 18:         let backgroundColor = color_map[key]
line 19:         exe 'hi default CocList'.foreground.background.' guifg='.foregroundColor.' guibg='.backgroundColor
line 19: hi default CocListCyanMagenta guifg=#6cb6eb guibg=#d38aea
line 20:       endfor
line 16:       for key in keys(color_map)
line 17:         let background = toupper(key[0]).key[1:]
line 18:         let backgroundColor = color_map[key]
line 19:         exe 'hi default CocList'.foreground.background.' guifg='.foregroundColor.' guibg='.backgroundColor
line 19: hi default CocListCyanRed guifg=#6cb6eb guibg=#4db5bd
line 20:       endfor
line 16:       for key in keys(color_map)
line 17:         let background = toupper(key[0]).key[1:]
line 18:         let backgroundColor = color_map[key]
line 19:         exe 'hi default CocList'.foreground.background.' guifg='.foregroundColor.' guibg='.backgroundColor
line 20:       endfor
line 21:       exe 'hi default CocListFg'.foreground. ' guifg='.foregroundColor. ' ctermfg='.foreground
line 21: hi default CocListFgCyan guifg=#6cb6eb ctermfg=Cyan
line 22:       exe 'hi default CocListBg'.foreground. ' guibg='.foregroundColor. ' ctermbg='.foreground
line 22: hi default CocListBgCyan guibg=#6cb6eb ctermbg=Cyan
line 23:     endfor
line 13:     for name in keys(color_map)
line 14:       let foreground = toupper(name[0]).name[1:]
line 15:       let foregroundColor = color_map[name]
line 16:       for key in keys(color_map)
line 17:         let background = toupper(key[0]).key[1:]
line 18:         let backgroundColor = color_map[key]
line 19:         exe 'hi default CocList'.foreground.background.' guifg='.foregroundColor.' guibg='.backgroundColor
line 19: hi default CocListYellowBlack guifg=#6cb6eb guibg=#363a49
line 20:       endfor
line 16:       for key in keys(color_map)
line 17:         let background = toupper(key[0]).key[1:]
line 18:         let backgroundColor = color_map[key]
line 19:         exe 'hi default CocList'.foreground.background.' guifg='.foregroundColor.' guibg='.backgroundColor
line 19: hi default CocListYellowBlue guifg=#6cb6eb guibg=#ECBE7B
line 20:       endfor
line 16:       for key in keys(color_map)
line 17:         let background = toupper(key[0]).key[1:]
line 18:         let backgroundColor = color_map[key]
line 19:         exe 'hi default CocList'.foreground.background.' guifg='.foregroundColor.' guibg='.backgroundColor
line 19: hi default CocListYellowGreen guifg=#6cb6eb guibg=#a0c980
line 20:       endfor
line 16:       for key in keys(color_map)
line 17:         let background = toupper(key[0]).key[1:]
line 18:         let backgroundColor = color_map[key]
line 19:         exe 'hi default CocList'.foreground.background.' guifg='.foregroundColor.' guibg='.backgroundColor
line 19: hi default CocListYellowGrey guifg=#6cb6eb guibg=#ECBE7B
line 20:       endfor
line 16:       for key in keys(color_map)
line 17:         let background = toupper(key[0]).key[1:]
line 18:         let backgroundColor = color_map[key]
line 19:         exe 'hi default CocList'.foreground.background.' guifg='.foregroundColor.' guibg='.backgroundColor
line 19: hi default CocListYellowWhite guifg=#6cb6eb guibg=#6cb6eb
line 20:       endfor
line 16:       for key in keys(color_map)
line 17:         let background = toupper(key[0]).key[1:]
line 18:         let backgroundColor = color_map[key]
line 19:         exe 'hi default CocList'.foreground.background.' guifg='.foregroundColor.' guibg='.backgroundColor
line 19: hi default CocListYellowCyan guifg=#6cb6eb guibg=#6cb6eb
line 20:       endfor
line 16:       for key in keys(color_map)
line 17:         let background = toupper(key[0]).key[1:]
line 18:         let backgroundColor = color_map[key]
line 19:         exe 'hi default CocList'.foreground.background.' guifg='.foregroundColor.' guibg='.backgroundColor
line 19: hi default CocListYellowYellow guifg=#6cb6eb guibg=#6cb6eb
line 20:       endfor
line 16:       for key in keys(color_map)
line 17:         let background = toupper(key[0]).key[1:]
line 18:         let backgroundColor = color_map[key]
line 19:         exe 'hi default CocList'.foreground.background.' guifg='.foregroundColor.' guibg='.backgroundColor
line 19: hi default CocListYellowMagenta guifg=#6cb6eb guibg=#d38aea
line 20:       endfor
line 16:       for key in keys(color_map)
line 17:         let background = toupper(key[0]).key[1:]
line 18:         let backgroundColor = color_map[key]
line 19:         exe 'hi default CocList'.foreground.background.' guifg='.foregroundColor.' guibg='.backgroundColor
line 19: hi default CocListYellowRed guifg=#6cb6eb guibg=#4db5bd
line 20:       endfor
line 16:       for key in keys(color_map)
line 17:         let background = toupper(key[0]).key[1:]
line 18:         let backgroundColor = color_map[key]
line 19:         exe 'hi default CocList'.foreground.background.' guifg='.foregroundColor.' guibg='.backgroundColor
line 20:       endfor
line 21:       exe 'hi default CocListFg'.foreground. ' guifg='.foregroundColor. ' ctermfg='.foreground
line 21: hi default CocListFgYellow guifg=#6cb6eb ctermfg=Yellow
line 22:       exe 'hi default CocListBg'.foreground. ' guibg='.foregroundColor. ' ctermbg='.foreground
line 22: hi default CocListBgYellow guibg=#6cb6eb ctermbg=Yellow
line 23:     endfor
line 13:     for name in keys(color_map)
line 14:       let foreground = toupper(name[0]).name[1:]
line 15:       let foregroundColor = color_map[name]
line 16:       for key in keys(color_map)
line 17:         let background = toupper(key[0]).key[1:]
line 18:         let backgroundColor = color_map[key]
line 19:         exe 'hi default CocList'.foreground.background.' guifg='.foregroundColor.' guibg='.backgroundColor
line 19: hi default CocListMagentaBlack guifg=#d38aea guibg=#363a49
line 20:       endfor
line 16:       for key in keys(color_map)
line 17:         let background = toupper(key[0]).key[1:]
line 18:         let backgroundColor = color_map[key]
line 19:         exe 'hi default CocList'.foreground.background.' guifg='.foregroundColor.' guibg='.backgroundColor
line 19: hi default CocListMagentaBlue guifg=#d38aea guibg=#ECBE7B
line 20:       endfor
line 16:       for key in keys(color_map)
line 17:         let background = toupper(key[0]).key[1:]
line 18:         let backgroundColor = color_map[key]
line 19:         exe 'hi default CocList'.foreground.background.' guifg='.foregroundColor.' guibg='.backgroundColor
line 19: hi default CocListMagentaGreen guifg=#d38aea guibg=#a0c980
line 20:       endfor
line 16:       for key in keys(color_map)
line 17:         let background = toupper(key[0]).key[1:]
line 18:         let backgroundColor = color_map[key]
line 19:         exe 'hi default CocList'.foreground.background.' guifg='.foregroundColor.' guibg='.backgroundColor
line 19: hi default CocListMagentaGrey guifg=#d38aea guibg=#ECBE7B
line 20:       endfor
line 16:       for key in keys(color_map)
line 17:         let background = toupper(key[0]).key[1:]
line 18:         let backgroundColor = color_map[key]
line 19:         exe 'hi default CocList'.foreground.background.' guifg='.foregroundColor.' guibg='.backgroundColor
line 19: hi default CocListMagentaWhite guifg=#d38aea guibg=#6cb6eb
line 20:       endfor
line 16:       for key in keys(color_map)
line 17:         let background = toupper(key[0]).key[1:]
line 18:         let backgroundColor = color_map[key]
line 19:         exe 'hi default CocList'.foreground.background.' guifg='.foregroundColor.' guibg='.backgroundColor
line 19: hi default CocListMagentaCyan guifg=#d38aea guibg=#6cb6eb
line 20:       endfor
line 16:       for key in keys(color_map)
line 17:         let background = toupper(key[0]).key[1:]
line 18:         let backgroundColor = color_map[key]
line 19:         exe 'hi default CocList'.foreground.background.' guifg='.foregroundColor.' guibg='.backgroundColor
line 19: hi default CocListMagentaYellow guifg=#d38aea guibg=#6cb6eb
line 20:       endfor
line 16:       for key in keys(color_map)
line 17:         let background = toupper(key[0]).key[1:]
line 18:         let backgroundColor = color_map[key]
line 19:         exe 'hi default CocList'.foreground.background.' guifg='.foregroundColor.' guibg='.backgroundColor
line 19: hi default CocListMagentaMagenta guifg=#d38aea guibg=#d38aea
line 20:       endfor
line 16:       for key in keys(color_map)
line 17:         let background = toupper(key[0]).key[1:]
line 18:         let backgroundColor = color_map[key]
line 19:         exe 'hi default CocList'.foreground.background.' guifg='.foregroundColor.' guibg='.backgroundColor
line 19: hi default CocListMagentaRed guifg=#d38aea guibg=#4db5bd
line 20:       endfor
line 16:       for key in keys(color_map)
line 17:         let background = toupper(key[0]).key[1:]
line 18:         let backgroundColor = color_map[key]
line 19:         exe 'hi default CocList'.foreground.background.' guifg='.foregroundColor.' guibg='.backgroundColor
line 20:       endfor
line 21:       exe 'hi default CocListFg'.foreground. ' guifg='.foregroundColor. ' ctermfg='.foreground
line 21: hi default CocListFgMagenta guifg=#d38aea ctermfg=Magenta
line 22:       exe 'hi default CocListBg'.foreground. ' guibg='.foregroundColor. ' ctermbg='.foreground
line 22: hi default CocListBgMagenta guibg=#d38aea ctermbg=Magenta
line 23:     endfor
line 13:     for name in keys(color_map)
line 14:       let foreground = toupper(name[0]).name[1:]
line 15:       let foregroundColor = color_map[name]
line 16:       for key in keys(color_map)
line 17:         let background = toupper(key[0]).key[1:]
line 18:         let backgroundColor = color_map[key]
line 19:         exe 'hi default CocList'.foreground.background.' guifg='.foregroundColor.' guibg='.backgroundColor
line 19: hi default CocListRedBlack guifg=#4db5bd guibg=#363a49
line 20:       endfor
line 16:       for key in keys(color_map)
line 17:         let background = toupper(key[0]).key[1:]
line 18:         let backgroundColor = color_map[key]
line 19:         exe 'hi default CocList'.foreground.background.' guifg='.foregroundColor.' guibg='.backgroundColor
line 19: hi default CocListRedBlue guifg=#4db5bd guibg=#ECBE7B
line 20:       endfor
line 16:       for key in keys(color_map)
line 17:         let background = toupper(key[0]).key[1:]
line 18:         let backgroundColor = color_map[key]
line 19:         exe 'hi default CocList'.foreground.background.' guifg='.foregroundColor.' guibg='.backgroundColor
line 19: hi default CocListRedGreen guifg=#4db5bd guibg=#a0c980
line 20:       endfor
line 16:       for key in keys(color_map)
line 17:         let background = toupper(key[0]).key[1:]
line 18:         let backgroundColor = color_map[key]
line 19:         exe 'hi default CocList'.foreground.background.' guifg='.foregroundColor.' guibg='.backgroundColor
line 19: hi default CocListRedGrey guifg=#4db5bd guibg=#ECBE7B
line 20:       endfor
line 16:       for key in keys(color_map)
line 17:         let background = toupper(key[0]).key[1:]
line 18:         let backgroundColor = color_map[key]
line 19:         exe 'hi default CocList'.foreground.background.' guifg='.foregroundColor.' guibg='.backgroundColor
line 19: hi default CocListRedWhite guifg=#4db5bd guibg=#6cb6eb
line 20:       endfor
line 16:       for key in keys(color_map)
line 17:         let background = toupper(key[0]).key[1:]
line 18:         let backgroundColor = color_map[key]
line 19:         exe 'hi default CocList'.foreground.background.' guifg='.foregroundColor.' guibg='.backgroundColor
line 19: hi default CocListRedCyan guifg=#4db5bd guibg=#6cb6eb
line 20:       endfor
line 16:       for key in keys(color_map)
line 17:         let background = toupper(key[0]).key[1:]
line 18:         let backgroundColor = color_map[key]
line 19:         exe 'hi default CocList'.foreground.background.' guifg='.foregroundColor.' guibg='.backgroundColor
line 19: hi default CocListRedYellow guifg=#4db5bd guibg=#6cb6eb
line 20:       endfor
line 16:       for key in keys(color_map)
line 17:         let background = toupper(key[0]).key[1:]
line 18:         let backgroundColor = color_map[key]
line 19:         exe 'hi default CocList'.foreground.background.' guifg='.foregroundColor.' guibg='.backgroundColor
line 19: hi default CocListRedMagenta guifg=#4db5bd guibg=#d38aea
line 20:       endfor
line 16:       for key in keys(color_map)
line 17:         let background = toupper(key[0]).key[1:]
line 18:         let backgroundColor = color_map[key]
line 19:         exe 'hi default CocList'.foreground.background.' guifg='.foregroundColor.' guibg='.backgroundColor
line 19: hi default CocListRedRed guifg=#4db5bd guibg=#4db5bd
line 20:       endfor
line 16:       for key in keys(color_map)
line 17:         let background = toupper(key[0]).key[1:]
line 18:         let backgroundColor = color_map[key]
line 19:         exe 'hi default CocList'.foreground.background.' guifg='.foregroundColor.' guibg='.backgroundColor
line 20:       endfor
line 21:       exe 'hi default CocListFg'.foreground. ' guifg='.foregroundColor. ' ctermfg='.foreground
line 21: hi default CocListFgRed guifg=#4db5bd ctermfg=Red
line 22:       exe 'hi default CocListBg'.foreground. ' guibg='.foregroundColor. ' ctermbg='.foreground
line 22: hi default CocListBgRed guibg=#4db5bd ctermbg=Red
line 23:     endfor
line 13:     for name in keys(color_map)
line 14:       let foreground = toupper(name[0]).name[1:]
line 15:       let foregroundColor = color_map[name]
line 16:       for key in keys(color_map)
line 17:         let background = toupper(key[0]).key[1:]
line 18:         let backgroundColor = color_map[key]
line 19:         exe 'hi default CocList'.foreground.background.' guifg='.foregroundColor.' guibg='.backgroundColor
line 20:       endfor
line 21:       exe 'hi default CocListFg'.foreground. ' guifg='.foregroundColor. ' ctermfg='.foreground
line 22:       exe 'hi default CocListBg'.foreground. ' guibg='.foregroundColor. ' ctermbg='.foreground
line 23:     endfor
line 24:   catch /.*/
line 25:     " ignore invalid color
line 26:   endtry
function <SNR>44_Hi[100]..<SNR>44_AddAnsiGroups returning #0

continuing in function <SNR>44_Hi

line 101: 
line 102:   if get(g:, 'coc_default_semantic_highlight_groups', 1)
line 103:     let hlMap = { 'Namespace': ['TSNamespace', 'Include'], 'Type': ['TSType', 'Type'], 'Class': ['TSConstructor', 'Special'], 'Enum': ['TSEnum', 'Type'], 'Interface': ['TSInterface', 'Type'], 'Struct': ['TSStruct', 'Identifier'], 'TypeParameter': ['TSParameter', 'Identifier'], 'Parameter': ['TSParameter', 'Identifier'], 'Variable': ['TSSymbol', 'Identifier'], 'Property': ['TSProperty', 'Identifier'], 'EnumMember': ['TSEnumMember', 'Constant'], 'Event': ['TSEvent', 'Keyword'], 'Function': ['TSFunction', 'Function'], 'Method': ['TSMethod', 'Function'], 'Macro': ['TSConstMacro', 'Define'], 'Keyword': ['TSKeyword', 'Keyword'], 'Modifier': ['TSModifier', 'StorageClass'], 'Comment': ['TSComment', 'Comment'], 'String': ['TSString', 'String'], 'Number': ['TSNumber', 'Number'], 'Boolean': ['TSBoolean', 'Boolean'], 'Regexp': ['TSStringRegex', 'String'], 'Operator': ['TSOperator', 'Operator'], 'Decorator': ['TSSymbol', 'Identifier'], 'Deprecated': ['TSStrike', 'CocDeprecatedHighlight'] }
line 130:     for [key, value] in items(hlMap)
line 131:       let ts = get(value, 0, '')
line 132:       let fallback = get(value, 1, '')
line 133:       execute 'hi default link CocSem'.key.' '.(hlexists(ts) ? ts : fallback)
line 133: hi default link CocSemNumber TSNumber
line 134:     endfor
line 130:     for [key, value] in items(hlMap)
line 131:       let ts = get(value, 0, '')
line 132:       let fallback = get(value, 1, '')
line 133:       execute 'hi default link CocSem'.key.' '.(hlexists(ts) ? ts : fallback)
line 133: hi default link CocSemFunction TSFunction
line 134:     endfor
line 130:     for [key, value] in items(hlMap)
line 131:       let ts = get(value, 0, '')
line 132:       let fallback = get(value, 1, '')
line 133:       execute 'hi default link CocSem'.key.' '.(hlexists(ts) ? ts : fallback)
line 133: hi default link CocSemKeyword TSKeyword
line 134:     endfor
line 130:     for [key, value] in items(hlMap)
line 131:       let ts = get(value, 0, '')
line 132:       let fallback = get(value, 1, '')
line 133:       execute 'hi default link CocSem'.key.' '.(hlexists(ts) ? ts : fallback)
line 133: hi default link CocSemParameter TSParameter
line 134:     endfor
line 130:     for [key, value] in items(hlMap)
line 131:       let ts = get(value, 0, '')
line 132:       let fallback = get(value, 1, '')
line 133:       execute 'hi default link CocSem'.key.' '.(hlexists(ts) ? ts : fallback)
line 133: hi default link CocSemEvent Keyword
line 134:     endfor
line 130:     for [key, value] in items(hlMap)
line 131:       let ts = get(value, 0, '')
line 132:       let fallback = get(value, 1, '')
line 133:       execute 'hi default link CocSem'.key.' '.(hlexists(ts) ? ts : fallback)
line 133: hi default link CocSemModifier StorageClass
line 134:     endfor
line 130:     for [key, value] in items(hlMap)
line 131:       let ts = get(value, 0, '')
line 132:       let fallback = get(value, 1, '')
line 133:       execute 'hi default link CocSem'.key.' '.(hlexists(ts) ? ts : fallback)
line 133: hi default link CocSemMacro TSConstMacro
line 134:     endfor
line 130:     for [key, value] in items(hlMap)
line 131:       let ts = get(value, 0, '')
line 132:       let fallback = get(value, 1, '')
line 133:       execute 'hi default link CocSem'.key.' '.(hlexists(ts) ? ts : fallback)
line 133: hi default link CocSemDeprecated TSStrike
line 134:     endfor
line 130:     for [key, value] in items(hlMap)
line 131:       let ts = get(value, 0, '')
line 132:       let fallback = get(value, 1, '')
line 133:       execute 'hi default link CocSem'.key.' '.(hlexists(ts) ? ts : fallback)
line 133: hi default link CocSemClass TSConstructor
line 134:     endfor
line 130:     for [key, value] in items(hlMap)
line 131:       let ts = get(value, 0, '')
line 132:       let fallback = get(value, 1, '')
line 133:       execute 'hi default link CocSem'.key.' '.(hlexists(ts) ? ts : fallback)
line 133: hi default link CocSemDecorator TSSymbol
line 134:     endfor
line 130:     for [key, value] in items(hlMap)
line 131:       let ts = get(value, 0, '')
line 132:       let fallback = get(value, 1, '')
line 133:       execute 'hi default link CocSem'.key.' '.(hlexists(ts) ? ts : fallback)
line 133: hi default link CocSemOperator TSOperator
line 134:     endfor
line 130:     for [key, value] in items(hlMap)
line 131:       let ts = get(value, 0, '')
line 132:       let fallback = get(value, 1, '')
line 133:       execute 'hi default link CocSem'.key.' '.(hlexists(ts) ? ts : fallback)
line 133: hi default link CocSemStruct Identifier
line 134:     endfor
line 130:     for [key, value] in items(hlMap)
line 131:       let ts = get(value, 0, '')
line 132:       let fallback = get(value, 1, '')
line 133:       execute 'hi default link CocSem'.key.' '.(hlexists(ts) ? ts : fallback)
line 133: hi default link CocSemRegexp TSStringRegex
line 134:     endfor
line 130:     for [key, value] in items(hlMap)
line 131:       let ts = get(value, 0, '')
line 132:       let fallback = get(value, 1, '')
line 133:       execute 'hi default link CocSem'.key.' '.(hlexists(ts) ? ts : fallback)
line 133: hi default link CocSemMethod TSMethod
line 134:     endfor
line 130:     for [key, value] in items(hlMap)
line 131:       let ts = get(value, 0, '')
line 132:       let fallback = get(value, 1, '')
line 133:       execute 'hi default link CocSem'.key.' '.(hlexists(ts) ? ts : fallback)
line 133: hi default link CocSemComment TSComment
line 134:     endfor
line 130:     for [key, value] in items(hlMap)
line 131:       let ts = get(value, 0, '')
line 132:       let fallback = get(value, 1, '')
line 133:       execute 'hi default link CocSem'.key.' '.(hlexists(ts) ? ts : fallback)
line 133: hi default link CocSemEnum Type
line 134:     endfor
line 130:     for [key, value] in items(hlMap)
line 131:       let ts = get(value, 0, '')
line 132:       let fallback = get(value, 1, '')
line 133:       execute 'hi default link CocSem'.key.' '.(hlexists(ts) ? ts : fallback)
line 133: hi default link CocSemInterface Type
line 134:     endfor
line 130:     for [key, value] in items(hlMap)
line 131:       let ts = get(value, 0, '')
line 132:       let fallback = get(value, 1, '')
line 133:       execute 'hi default link CocSem'.key.' '.(hlexists(ts) ? ts : fallback)
line 133: hi default link CocSemType TSType
line 134:     endfor
line 130:     for [key, value] in items(hlMap)
line 131:       let ts = get(value, 0, '')
line 132:       let fallback = get(value, 1, '')
line 133:       execute 'hi default link CocSem'.key.' '.(hlexists(ts) ? ts : fallback)
line 133: hi default link CocSemProperty TSProperty
line 134:     endfor
line 130:     for [key, value] in items(hlMap)
line 131:       let ts = get(value, 0, '')
line 132:       let fallback = get(value, 1, '')
line 133:       execute 'hi default link CocSem'.key.' '.(hlexists(ts) ? ts : fallback)
line 133: hi default link CocSemTypeParameter TSParameter
line 134:     endfor
line 130:     for [key, value] in items(hlMap)
line 131:       let ts = get(value, 0, '')
line 132:       let fallback = get(value, 1, '')
line 133:       execute 'hi default link CocSem'.key.' '.(hlexists(ts) ? ts : fallback)
line 133: hi default link CocSemEnumMember Constant
line 134:     endfor
line 130:     for [key, value] in items(hlMap)
line 131:       let ts = get(value, 0, '')
line 132:       let fallback = get(value, 1, '')
line 133:       execute 'hi default link CocSem'.key.' '.(hlexists(ts) ? ts : fallback)
line 133: hi default link CocSemBoolean TSBoolean
line 134:     endfor
line 130:     for [key, value] in items(hlMap)
line 131:       let ts = get(value, 0, '')
line 132:       let fallback = get(value, 1, '')
line 133:       execute 'hi default link CocSem'.key.' '.(hlexists(ts) ? ts : fallback)
line 133: hi default link CocSemNamespace TSNamespace
line 134:     endfor
line 130:     for [key, value] in items(hlMap)
line 131:       let ts = get(value, 0, '')
line 132:       let fallback = get(value, 1, '')
line 133:       execute 'hi default link CocSem'.key.' '.(hlexists(ts) ? ts : fallback)
line 133: hi default link CocSemString TSString
line 134:     endfor
line 130:     for [key, value] in items(hlMap)
line 131:       let ts = get(value, 0, '')
line 132:       let fallback = get(value, 1, '')
line 133:       execute 'hi default link CocSem'.key.' '.(hlexists(ts) ? ts : fallback)
line 133: hi default link CocSemVariable TSSymbol
line 134:     endfor
line 130:     for [key, value] in items(hlMap)
line 131:       let ts = get(value, 0, '')
line 132:       let fallback = get(value, 1, '')
line 133:       execute 'hi default link CocSem'.key.' '.(hlexists(ts) ? ts : fallback)
line 134:     endfor
line 135:   endif
function <SNR>44_Hi returning #0

continuing in /Users/ablanken/.local/share/nvim/site/pack/packer/start/coc.nvim/plugin/coc.vim

line 586: 
line 587: vnoremap <silent> <Plug>(coc-range-select)          :<C-u>call       CocActionAsync('rangeSelect',     visualmode(), v:true)<CR>
line 588: vnoremap <silent> <Plug>(coc-range-select-backward) :<C-u>call       CocActionAsync('rangeSelect',     visualmode(), v:false)<CR>
line 589: nnoremap <Plug>(coc-range-select)          :<C-u>call       CocActionAsync('rangeSelect',     '', v:true)<CR>
line 590: nnoremap <Plug>(coc-codelens-action)       :<C-u>call       CocActionAsync('codeLensAction')<CR>
line 591: vnoremap <silent> <Plug>(coc-format-selected)       :<C-u>call       CocActionAsync('formatSelected',     visualmode())<CR>
line 592: vnoremap <silent> <Plug>(coc-codeaction-selected)   :<C-u>call       CocActionAsync('codeAction',         visualmode())<CR>
line 593: nnoremap <Plug>(coc-codeaction-selected)   :<C-u>set        operatorfunc=<SID>CodeActionFromSelected<CR>g@
line 594: nnoremap <Plug>(coc-codeaction)            :<C-u>call       CocActionAsync('codeAction',         '')<CR>
line 595: nnoremap <Plug>(coc-codeaction-line)       :<C-u>call       CocActionAsync('codeAction',         'line')<CR>
line 596: nnoremap <Plug>(coc-codeaction-cursor)     :<C-u>call       CocActionAsync('codeAction',         'cursor')<CR>
line 597: nnoremap <silent> <Plug>(coc-rename)                :<C-u>call       CocActionAsync('rename')<CR>
line 598: nnoremap <silent> <Plug>(coc-format-selected)       :<C-u>set        operatorfunc=<SID>FormatFromSelected<CR>g@
line 599: nnoremap <silent> <Plug>(coc-format)                :<C-u>call       CocActionAsync('format')<CR>
line 600: nnoremap <silent> <Plug>(coc-diagnostic-info)       :<C-u>call       CocActionAsync('diagnosticInfo')<CR>
line 601: nnoremap <silent> <Plug>(coc-diagnostic-next)       :<C-u>call       CocActionAsync('diagnosticNext')<CR>
line 602: nnoremap <silent> <Plug>(coc-diagnostic-prev)       :<C-u>call       CocActionAsync('diagnosticPrevious')<CR>
line 603: nnoremap <silent> <Plug>(coc-diagnostic-next-error) :<C-u>call       CocActionAsync('diagnosticNext',     'error')<CR>
line 604: nnoremap <silent> <Plug>(coc-diagnostic-prev-error) :<C-u>call       CocActionAsync('diagnosticPrevious', 'error')<CR>
line 605: nnoremap <silent> <Plug>(coc-definition)            :<C-u>call       CocActionAsync('jumpDefinition')<CR>
line 606: nnoremap <silent> <Plug>(coc-declaration)           :<C-u>call       CocActionAsync('jumpDeclaration')<CR>
line 607: nnoremap <silent> <Plug>(coc-implementation)        :<C-u>call       CocActionAsync('jumpImplementation')<CR>
line 608: nnoremap <silent> <Plug>(coc-type-definition)       :<C-u>call       CocActionAsync('jumpTypeDefinition')<CR>
line 609: nnoremap <silent> <Plug>(coc-references)            :<C-u>call       CocActionAsync('jumpReferences')<CR>
line 610: nnoremap <silent> <Plug>(coc-references-used)       :<C-u>call       CocActionAsync('jumpUsed')<CR>
line 611: nnoremap <silent> <Plug>(coc-openlink)              :<C-u>call       CocActionAsync('openLink')<CR>
line 612: nnoremap <silent> <Plug>(coc-fix-current)           :<C-u>call       CocActionAsync('doQuickfix')<CR>
line 613: nnoremap <silent> <Plug>(coc-float-hide)            :<C-u>call       coc#float#close_all()<CR>
line 614: nnoremap <silent> <Plug>(coc-float-jump)            :<c-u>call       coc#float#jump()<cr>
line 615: nnoremap <silent> <Plug>(coc-command-repeat)        :<C-u>call       CocAction('repeatCommand')<CR>
line 616: nnoremap <silent> <Plug>(coc-refactor)              :<C-u>call       CocActionAsync('refactor')<CR>
line 617: inoremap <silent>                          <Plug>CocRefresh <C-r>=coc#_complete()<CR>
line 618: 
line 619: nnoremap <silent> <Plug>(coc-cursors-operator) :<C-u>set operatorfunc=<SID>CursorRangeFromSelected<CR>g@
line 620: vnoremap <silent> <Plug>(coc-cursors-range)    :<C-u>call CocAction('cursorsSelect', bufnr('%'), 'range', visualmode())<CR>
line 621: nnoremap <silent> <Plug>(coc-cursors-word)     :<C-u>call CocAction('cursorsSelect', bufnr('%'), 'word', 'n')<CR>
line 622: nnoremap <silent> <Plug>(coc-cursors-position) :<C-u>call CocAction('cursorsSelect', bufnr('%'), 'position', 'n')<CR>
line 623: 
line 624: vnoremap <silent> <Plug>(coc-funcobj-i)        :<C-U>call CocAction('selectSymbolRange', v:true, visualmode(), ['Method', 'Function'])<CR>
line 625: vnoremap <silent> <Plug>(coc-funcobj-a)        :<C-U>call CocAction('selectSymbolRange', v:false, visualmode(), ['Method', 'Function'])<CR>
line 626: onoremap <silent> <Plug>(coc-funcobj-i)        :<C-U>call CocAction('selectSymbolRange', v:true, '', ['Method', 'Function'])<CR>
line 627: onoremap <silent> <Plug>(coc-funcobj-a)        :<C-U>call CocAction('selectSymbolRange', v:false, '', ['Method', 'Function'])<CR>
line 628: 
line 629: vnoremap <silent> <Plug>(coc-classobj-i)       :<C-U>call CocAction('selectSymbolRange', v:true, visualmode(), ['Interface', 'Struct', 'Class'])<CR>
line 630: vnoremap <silent> <Plug>(coc-classobj-a)       :<C-U>call CocAction('selectSymbolRange', v:false, visualmode(), ['Interface', 'Struct', 'Class'])<CR>
line 631: onoremap <silent> <Plug>(coc-classobj-i)       :<C-U>call CocAction('selectSymbolRange', v:true, '', ['Interface', 'Struct', 'Class'])<CR>
line 632: onoremap <silent> <Plug>(coc-classobj-a)       :<C-U>call CocAction('selectSymbolRange', v:false, '', ['Interface', 'Struct', 'Class'])<CR>
finished sourcing /Users/ablanken/.local/share/nvim/site/pack/packer/start/coc.nvim/plugin/coc.vim
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/c_formatter_42.vim/plugin)
chdir(/Users/ablanken/Sync/src/neovim-conf)
sourcing "/Users/ablanken/.local/share/nvim/site/pack/packer/start/c_formatter_42.vim/plugin/c_formatter_42.vim"
line 1: " **************************************************************************** "
line 2: "                                                                              "
line 3: "                                                         :::      ::::::::    "
line 4: "    c_formatter_42.vim                                 :+:      :+:    :+:    "
line 5: "                                                     +:+ +:+         +:+      "
line 6: "    By: cacharle <me@cacharle.xyz>                 +#+  +:+       +#+         "
line 7: "                                                 +#+#+#+#+#+   +#+            "
line 8: "    Created: 2020/10/04 16:53:57 by cacharle          #+#    #+#              "
line 9: "    Updated: 2021/02/27 22:41:23 by jihypark         ###   ########.fr        "
line 10: "                                                                              "
line 11: " **************************************************************************** "
line 12: 
line 13: let g:c_formatter_42_exec           = get(g:, 'c_formatter_42_exec', 'c_formatter_42')
line 14: let g:c_formatter_42_set_equalprg   = get(g:, 'c_formatter_42_set_equalprg', 0)
line 15: let g:c_formatter_42_format_on_save = get(g:, 'c_formatter_42_format_on_save', 0)
line 16: 
line 17: if !executable(g:c_formatter_42_exec)
line 18:     echom 'Installing c_formatter_42'
line 19:     !pip3 install --user c-formatter-42
line 20: endif
line 21: 
line 22: function! s:CFormatter42()
line 31: 
line 32: if g:c_formatter_42_set_equalprg
line 33:     let &l:equalprg = g:c_formatter_42_exec
line 34: endif
line 35: 
line 36: augroup c_formatter_42
line 37:     autocmd!
line 38: augroup END
line 39: 
line 40: if g:c_formatter_42_format_on_save
line 41:     autocmd c_formatter_42 BufWritePre *.c,*.h :call s:CFormatter42()
line 42: endif
line 43: 
line 44: autocmd c_formatter_42 FileType c,cpp command! CFormatter42 call s:CFormatter42()
line 45: autocmd c_formatter_42 FileType c,cpp nnoremap <F2> :CFormatter42<CR>
line 46: 
line 47: function! s:Norminette()
line 74: 
line 75: autocmd c_formatter_42 FileType c,cpp command! Norminette call s:Norminette()
finished sourcing /Users/ablanken/.local/share/nvim/site/pack/packer/start/c_formatter_42.vim/plugin/c_formatter_42.vim
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/gentoo-syntax/plugin)
chdir(/Users/ablanken/Sync/src/neovim-conf)
sourcing "/Users/ablanken/.local/share/nvim/site/pack/packer/start/gentoo-syntax/plugin/gentoo-common.vim"
line 1: " Vim plugin
line 2: " Purpose:      Common functionality for gentoo-syntax plugins
line 3: " Author:       Ciaran McCreesh <ciaranm@gentoo.org>
line 4: " Copyright:    Copyright (c) 2005 Ciaran McCreesh
line 5: " Licence:      You may redistribute this under the same terms as Vim itself
line 6: 
line 7: if &compatible || v:version < 603 || exists("g:loaded_gentoo_common")
line 8:     finish
line 9: endif
line 10: 
line 11: let g:loaded_gentoo_common=1
line 12: 
line 13: fun! GentooGetUser()
line 28: 
line 29: fun! GentooHeader(...)
line 44: 
line 45: fun! GentooGetArch()
line 60: 
line 61: fun! GentooGetPythonTargets()
line 116: 
line 117: " vim: set et foldmethod=marker sw=4 ts=4 : "
finished sourcing /Users/ablanken/.local/share/nvim/site/pack/packer/start/gentoo-syntax/plugin/gentoo-common.vim
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/gentoo-syntax/plugin)
chdir(/Users/ablanken/Sync/src/neovim-conf)
sourcing "/Users/ablanken/.local/share/nvim/site/pack/packer/start/gentoo-syntax/plugin/newebuild.vim"
line 1: " Vim plugin
line 2: " Purpose:      Intelligently create content for new ebuild files
line 3: " Author:       Ciaran McCreesh <ciaranm@gentoo.org>
line 4: " Copyright:    Copyright (c) 2004-2005 Ciaran McCreesh
line 5: " Licence:      You may redistribute this under the same terms as Vim itself
line 6: 
line 7: if &compatible || v:version < 603 || exists("g:loaded_newebuild")
line 8:     finish
line 9: endif
line 10: 
line 11: let g:loaded_newebuild=1
line 12: 
line 13: runtime! plugin/gentoo-common.vim
Searching for "plugin/gentoo-common.vim" in runtime path
Searching for "/Users/ablanken/.config/nvim/plugin/gentoo-common.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/plugin/gentoo-common.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/42header/plugin/gentoo-common.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/auto-session/plugin/gentoo-common.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/cheatsheet.nvim/plugin/gentoo-common.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/coc-nvim-lua/plugin/gentoo-common.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/coc.nvim/plugin/gentoo-common.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/Comment.nvim/plugin/gentoo-common.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/c_formatter_42.vim/plugin/gentoo-common.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/FTerm.nvim/plugin/gentoo-common.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/gentoo-syntax/plugin/gentoo-common.vim"
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/gentoo-syntax/plugin)
chdir(/Users/ablanken/Sync/src/neovim-conf)
line 13: sourcing "/Users/ablanken/.local/share/nvim/site/pack/packer/start/gentoo-syntax/plugin/gentoo-common.vim"
line 1: " Vim plugin
line 2: " Purpose:      Common functionality for gentoo-syntax plugins
line 3: " Author:       Ciaran McCreesh <ciaranm@gentoo.org>
line 4: " Copyright:    Copyright (c) 2005 Ciaran McCreesh
line 5: " Licence:      You may redistribute this under the same terms as Vim itself
line 6: 
line 7: if &compatible || v:version < 603 || exists("g:loaded_gentoo_common")
line 8:     finish
finished sourcing /Users/ablanken/.local/share/nvim/site/pack/packer/start/gentoo-syntax/plugin/gentoo-common.vim
continuing in /Users/ablanken/.local/share/nvim/site/pack/packer/start/gentoo-syntax/plugin/newebuild.vim
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/gitsigns.nvim/plugin/gentoo-common.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/indent-blankline.nvim/plugin/gentoo-common.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/lualine.nvim/plugin/gentoo-common.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/neon/plugin/gentoo-common.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/nvim-neoclip.lua/plugin/gentoo-common.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/nvim-treesitter/plugin/gentoo-common.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/nvim-web-devicons/plugin/gentoo-common.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/packer.nvim/plugin/gentoo-common.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/plenary.nvim/plugin/gentoo-common.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/session-lens/plugin/gentoo-common.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/sqlite.lua/plugin/gentoo-common.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/suda.vim/plugin/gentoo-common.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/telescope-file-browser.nvim/plugin/gentoo-common.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/telescope-fzf-native.nvim/plugin/gentoo-common.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/telescope-packer.nvim/plugin/gentoo-common.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/telescope-repo.nvim/plugin/gentoo-common.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/telescope-symbols.nvim/plugin/gentoo-common.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/telescope.nvim/plugin/gentoo-common.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/vim-fugitive/plugin/gentoo-common.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/vim-polyglot/plugin/gentoo-common.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/vim-rooter/plugin/gentoo-common.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/which-key.nvim/plugin/gentoo-common.vim"
Searching for "/Users/ablanken/.local/nvim-brew/Cellar/neovim/0.7.0/share/nvim/runtime/plugin/gentoo-common.vim"
Searching for "/Users/ablanken/.local/nvim-brew/Cellar/neovim/0.7.0/share/nvim/runtime/pack/dist/opt/matchit/plugin/gentoo-common.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/Comment.nvim/after/plugin/gentoo-common.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/vim-polyglot/after/plugin/gentoo-common.vim"
line 14: 
line 15: fun! <SID>MakeNewEbuild()
line 213: 
line 214: com! -nargs=0 NewEbuild call <SID>MakeNewEbuild()
line 215: 
line 216: if !exists("g:ebuild_create_on_empty")
line 217:     " Enable autogeneration of ebuilds by default
line 218:     let g:ebuild_create_on_empty = 1
line 219: endif
line 220: 
line 221: " check to see if v:progname is vimdiff to disable new ebuild creation
line 222: if v:progname =~ "vimdiff"
line 223:     let g:ebuild_create_on_empty = 0
line 224: endif
line 225: 
line 226: augroup NewEbuild
line 227:     au!
line 228:     autocmd BufNewFile *.e{build,class} if g:ebuild_create_on_empty |    call <SID>MakeNewEbuild() | endif
line 232: augroup END
line 233: 
line 234: " vim: set et foldmethod=marker : "
finished sourcing /Users/ablanken/.local/share/nvim/site/pack/packer/start/gentoo-syntax/plugin/newebuild.vim
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/gentoo-syntax/plugin)
chdir(/Users/ablanken/Sync/src/neovim-conf)
sourcing "/Users/ablanken/.local/share/nvim/site/pack/packer/start/gentoo-syntax/plugin/newglep.vim"
line 1: " Vim plugin
line 2: " Purpose:      New GLEP skeleton
line 3: " Author:       Michał Górny <mgorny@gentoo.org>
line 4: " Copyright:    Copyright (c) 2017 Michał Górny
line 5: " Licence:      You may redistribute this under the same terms as Vim itself
line 6: 
line 7: if &compatible || v:version < 603 || exists("g:loaded_newglep")
line 8:     finish
line 9: endif
line 10: 
line 11: let g:loaded_newglep=1
line 12: 
line 13: runtime! plugin/gentoo-common.vim
Searching for "plugin/gentoo-common.vim" in runtime path
Searching for "/Users/ablanken/.config/nvim/plugin/gentoo-common.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/plugin/gentoo-common.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/42header/plugin/gentoo-common.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/auto-session/plugin/gentoo-common.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/cheatsheet.nvim/plugin/gentoo-common.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/coc-nvim-lua/plugin/gentoo-common.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/coc.nvim/plugin/gentoo-common.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/Comment.nvim/plugin/gentoo-common.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/c_formatter_42.vim/plugin/gentoo-common.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/FTerm.nvim/plugin/gentoo-common.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/gentoo-syntax/plugin/gentoo-common.vim"
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/gentoo-syntax/plugin)
chdir(/Users/ablanken/Sync/src/neovim-conf)
line 13: sourcing "/Users/ablanken/.local/share/nvim/site/pack/packer/start/gentoo-syntax/plugin/gentoo-common.vim"
line 1: " Vim plugin
line 2: " Purpose:      Common functionality for gentoo-syntax plugins
line 3: " Author:       Ciaran McCreesh <ciaranm@gentoo.org>
line 4: " Copyright:    Copyright (c) 2005 Ciaran McCreesh
line 5: " Licence:      You may redistribute this under the same terms as Vim itself
line 6: 
line 7: if &compatible || v:version < 603 || exists("g:loaded_gentoo_common")
line 8:     finish
finished sourcing /Users/ablanken/.local/share/nvim/site/pack/packer/start/gentoo-syntax/plugin/gentoo-common.vim
continuing in /Users/ablanken/.local/share/nvim/site/pack/packer/start/gentoo-syntax/plugin/newglep.vim
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/gitsigns.nvim/plugin/gentoo-common.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/indent-blankline.nvim/plugin/gentoo-common.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/lualine.nvim/plugin/gentoo-common.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/neon/plugin/gentoo-common.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/nvim-neoclip.lua/plugin/gentoo-common.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/nvim-treesitter/plugin/gentoo-common.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/nvim-web-devicons/plugin/gentoo-common.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/packer.nvim/plugin/gentoo-common.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/plenary.nvim/plugin/gentoo-common.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/session-lens/plugin/gentoo-common.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/sqlite.lua/plugin/gentoo-common.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/suda.vim/plugin/gentoo-common.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/telescope-file-browser.nvim/plugin/gentoo-common.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/telescope-fzf-native.nvim/plugin/gentoo-common.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/telescope-packer.nvim/plugin/gentoo-common.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/telescope-repo.nvim/plugin/gentoo-common.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/telescope-symbols.nvim/plugin/gentoo-common.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/telescope.nvim/plugin/gentoo-common.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/vim-fugitive/plugin/gentoo-common.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/vim-polyglot/plugin/gentoo-common.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/vim-rooter/plugin/gentoo-common.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/which-key.nvim/plugin/gentoo-common.vim"
Searching for "/Users/ablanken/.local/nvim-brew/Cellar/neovim/0.7.0/share/nvim/runtime/plugin/gentoo-common.vim"
Searching for "/Users/ablanken/.local/nvim-brew/Cellar/neovim/0.7.0/share/nvim/runtime/pack/dist/opt/matchit/plugin/gentoo-common.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/Comment.nvim/after/plugin/gentoo-common.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/vim-polyglot/after/plugin/gentoo-common.vim"
line 14: 
line 15: fun! <SID>MakeNewGLEP()
line 83: 
line 84: com! -nargs=0 NewGLEP call <SID>MakeNewGLEP() | set filetype=glep
line 85: 
line 86: if !exists("g:glep_create_on_empty")
line 87:     " Enable autogeneration of GLEPs by default
line 88:     let g:glep_create_on_empty = 1
line 89: endif
line 90: 
line 91: " check to see if v:progname is vimdiff to disable new GLEP creation
line 92: if v:progname =~ "vimdiff"
line 93:     let g:glep_create_on_empty = 0
line 94: endif
line 95: 
line 96: augroup NewGLEP
line 97:     au!
line 98:     autocmd BufNewFile glep-[0-9][0-9][0-9][0-9].{txt,rst} if g:glep_create_on_empty |    call <SID>MakeNewGLEP() | set filetype=glep | endif
line 102: augroup END
line 103: 
line 104: " vim: set et foldmethod=marker : "
finished sourcing /Users/ablanken/.local/share/nvim/site/pack/packer/start/gentoo-syntax/plugin/newglep.vim
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/gentoo-syntax/plugin)
chdir(/Users/ablanken/Sync/src/neovim-conf)
sourcing "/Users/ablanken/.local/share/nvim/site/pack/packer/start/gentoo-syntax/plugin/newinitd.vim"
line 1: " Vim plugin
line 2: " Purpose:^Icreate content for new init.d scripts
line 3: " Author:^IAaron Walker <ka0ttic@gentoo.org>
line 4: " Copyright:^ICopyright (c) 2005 Aaron Walker
line 5: " License:^IYou may redistribute this under the same terms as Vim itself
line 6: 
line 7: if &compatible || v:version < 603 || exists("g:loaded_newinitd")
line 8:     finish
line 9: endif
line 10: 
line 11: let g:loaded_newinitd=1
line 12: 
line 13: runtime! plugin/gentoo-common.vim
Searching for "plugin/gentoo-common.vim" in runtime path
Searching for "/Users/ablanken/.config/nvim/plugin/gentoo-common.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/plugin/gentoo-common.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/42header/plugin/gentoo-common.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/auto-session/plugin/gentoo-common.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/cheatsheet.nvim/plugin/gentoo-common.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/coc-nvim-lua/plugin/gentoo-common.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/coc.nvim/plugin/gentoo-common.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/Comment.nvim/plugin/gentoo-common.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/c_formatter_42.vim/plugin/gentoo-common.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/FTerm.nvim/plugin/gentoo-common.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/gentoo-syntax/plugin/gentoo-common.vim"
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/gentoo-syntax/plugin)
chdir(/Users/ablanken/Sync/src/neovim-conf)
line 13: sourcing "/Users/ablanken/.local/share/nvim/site/pack/packer/start/gentoo-syntax/plugin/gentoo-common.vim"
line 1: " Vim plugin
line 2: " Purpose:      Common functionality for gentoo-syntax plugins
line 3: " Author:       Ciaran McCreesh <ciaranm@gentoo.org>
line 4: " Copyright:    Copyright (c) 2005 Ciaran McCreesh
line 5: " Licence:      You may redistribute this under the same terms as Vim itself
line 6: 
line 7: if &compatible || v:version < 603 || exists("g:loaded_gentoo_common")
line 8:     finish
finished sourcing /Users/ablanken/.local/share/nvim/site/pack/packer/start/gentoo-syntax/plugin/gentoo-common.vim
continuing in /Users/ablanken/.local/share/nvim/site/pack/packer/start/gentoo-syntax/plugin/newinitd.vim
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/gitsigns.nvim/plugin/gentoo-common.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/indent-blankline.nvim/plugin/gentoo-common.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/lualine.nvim/plugin/gentoo-common.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/neon/plugin/gentoo-common.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/nvim-neoclip.lua/plugin/gentoo-common.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/nvim-treesitter/plugin/gentoo-common.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/nvim-web-devicons/plugin/gentoo-common.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/packer.nvim/plugin/gentoo-common.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/plenary.nvim/plugin/gentoo-common.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/session-lens/plugin/gentoo-common.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/sqlite.lua/plugin/gentoo-common.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/suda.vim/plugin/gentoo-common.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/telescope-file-browser.nvim/plugin/gentoo-common.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/telescope-fzf-native.nvim/plugin/gentoo-common.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/telescope-packer.nvim/plugin/gentoo-common.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/telescope-repo.nvim/plugin/gentoo-common.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/telescope-symbols.nvim/plugin/gentoo-common.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/telescope.nvim/plugin/gentoo-common.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/vim-fugitive/plugin/gentoo-common.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/vim-polyglot/plugin/gentoo-common.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/vim-rooter/plugin/gentoo-common.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/which-key.nvim/plugin/gentoo-common.vim"
Searching for "/Users/ablanken/.local/nvim-brew/Cellar/neovim/0.7.0/share/nvim/runtime/plugin/gentoo-common.vim"
Searching for "/Users/ablanken/.local/nvim-brew/Cellar/neovim/0.7.0/share/nvim/runtime/pack/dist/opt/matchit/plugin/gentoo-common.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/Comment.nvim/after/plugin/gentoo-common.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/vim-polyglot/after/plugin/gentoo-common.vim"
line 14: 
line 15: fun! <SID>MakeNewInitd()
line 39: 
line 40: com! -nargs=0 NewInitd call <SID>MakeNewInitd() | set filetype=gentoo-init-d.sh
line 41: 
line 42: augroup NewInitd
line 43:     au!
line 44:     autocmd BufNewFile {/*/files/*.{rc*,init*},/etc/init.d/*} call <SID>MakeNewInitd() | set filetype=gentoo-init-d.sh
line 46: augroup END
line 47: 
line 48: " vim: set et foldmethod=marker : "
finished sourcing /Users/ablanken/.local/share/nvim/site/pack/packer/start/gentoo-syntax/plugin/newinitd.vim
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/gentoo-syntax/plugin)
chdir(/Users/ablanken/Sync/src/neovim-conf)
sourcing "/Users/ablanken/.local/share/nvim/site/pack/packer/start/gentoo-syntax/plugin/newmetadata.vim"
line 1: " Vim plugin
line 2: " Purpose:      Intelligently create content for metadata.xml
line 3: " Author:       Ciaran McCreesh <ciaranm@gentoo.org>
line 4: " Copyright:    Copyright (c) 2004-2005 Ciaran McCreesh
line 5: " Licence:      You may redistribute this under the same terms as Vim itself
line 6: 
line 7: if &compatible || v:version < 603 || exists("g:loaded_newmetadata")
line 8:     finish
line 9: endif
line 10: 
line 11: let g:loaded_newmetadata=1
line 12: 
line 13: runtime! plugin/gentoo-common.vim
Searching for "plugin/gentoo-common.vim" in runtime path
Searching for "/Users/ablanken/.config/nvim/plugin/gentoo-common.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/plugin/gentoo-common.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/42header/plugin/gentoo-common.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/auto-session/plugin/gentoo-common.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/cheatsheet.nvim/plugin/gentoo-common.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/coc-nvim-lua/plugin/gentoo-common.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/coc.nvim/plugin/gentoo-common.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/Comment.nvim/plugin/gentoo-common.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/c_formatter_42.vim/plugin/gentoo-common.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/FTerm.nvim/plugin/gentoo-common.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/gentoo-syntax/plugin/gentoo-common.vim"
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/gentoo-syntax/plugin)
chdir(/Users/ablanken/Sync/src/neovim-conf)
line 13: sourcing "/Users/ablanken/.local/share/nvim/site/pack/packer/start/gentoo-syntax/plugin/gentoo-common.vim"
line 1: " Vim plugin
line 2: " Purpose:      Common functionality for gentoo-syntax plugins
line 3: " Author:       Ciaran McCreesh <ciaranm@gentoo.org>
line 4: " Copyright:    Copyright (c) 2005 Ciaran McCreesh
line 5: " Licence:      You may redistribute this under the same terms as Vim itself
line 6: 
line 7: if &compatible || v:version < 603 || exists("g:loaded_gentoo_common")
line 8:     finish
finished sourcing /Users/ablanken/.local/share/nvim/site/pack/packer/start/gentoo-syntax/plugin/gentoo-common.vim
continuing in /Users/ablanken/.local/share/nvim/site/pack/packer/start/gentoo-syntax/plugin/newmetadata.vim
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/gitsigns.nvim/plugin/gentoo-common.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/indent-blankline.nvim/plugin/gentoo-common.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/lualine.nvim/plugin/gentoo-common.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/neon/plugin/gentoo-common.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/nvim-neoclip.lua/plugin/gentoo-common.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/nvim-treesitter/plugin/gentoo-common.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/nvim-web-devicons/plugin/gentoo-common.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/packer.nvim/plugin/gentoo-common.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/plenary.nvim/plugin/gentoo-common.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/session-lens/plugin/gentoo-common.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/sqlite.lua/plugin/gentoo-common.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/suda.vim/plugin/gentoo-common.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/telescope-file-browser.nvim/plugin/gentoo-common.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/telescope-fzf-native.nvim/plugin/gentoo-common.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/telescope-packer.nvim/plugin/gentoo-common.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/telescope-repo.nvim/plugin/gentoo-common.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/telescope-symbols.nvim/plugin/gentoo-common.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/telescope.nvim/plugin/gentoo-common.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/vim-fugitive/plugin/gentoo-common.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/vim-polyglot/plugin/gentoo-common.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/vim-rooter/plugin/gentoo-common.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/which-key.nvim/plugin/gentoo-common.vim"
Searching for "/Users/ablanken/.local/nvim-brew/Cellar/neovim/0.7.0/share/nvim/runtime/plugin/gentoo-common.vim"
Searching for "/Users/ablanken/.local/nvim-brew/Cellar/neovim/0.7.0/share/nvim/runtime/pack/dist/opt/matchit/plugin/gentoo-common.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/Comment.nvim/after/plugin/gentoo-common.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/vim-polyglot/after/plugin/gentoo-common.vim"
line 14: 
line 15: fun! <SID>MakeNewMetadata()
line 109: 
line 110: com! -nargs=0 NewMetadata call <SID>MakeNewMetadata()
line 111: augroup NewMetadata
line 112:     au!
line 113:     autocmd BufNewFile metadata.xml call <SID>MakeNewMetadata()
line 115: augroup END
line 116: 
line 117: " vim: set et foldmethod=marker : "
finished sourcing /Users/ablanken/.local/share/nvim/site/pack/packer/start/gentoo-syntax/plugin/newmetadata.vim
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/indent-blankline.nvim/plugin)
chdir(/Users/ablanken/Sync/src/neovim-conf)
sourcing "/Users/ablanken/.local/share/nvim/site/pack/packer/start/indent-blankline.nvim/plugin/indent_blankline.vim"
line 1: 
line 2: if exists('g:loaded_indent_blankline') || !has('nvim-0.5.0')
line 3:     finish
line 4: endif
line 5: let g:loaded_indent_blankline = 1
line 6: 
line 7: function s:try(cmd)
line 14: 
line 15: command! -bang IndentBlanklineRefresh call s:try('lua require("indent_blankline.commands").refresh("<bang>" == "!")')
line 16: command! -bang IndentBlanklineRefreshScroll call s:try('lua require("indent_blankline.commands").refresh("<bang>" == "!", true)')
line 17: command! -bang IndentBlanklineEnable call s:try('lua require("indent_blankline.commands").enable("<bang>" == "!")')
line 18: command! -bang IndentBlanklineDisable call s:try('lua require("indent_blankline.commands").disable("<bang>" == "!")')
line 19: command! -bang IndentBlanklineToggle call s:try('lua require("indent_blankline.commands").toggle("<bang>" == "!")')
line 20: 
line 21: if exists(':IndentLinesEnable') && !g:indent_blankline_disable_warning_message
line 22:     echohl Error
line 23:     echom 'indent-blankline does not require IndentLine anymore, please remove it.'
line 24:     echohl None
line 25: endif
line 26: 
line 27: if !exists('g:__indent_blankline_setup_completed')
line 28:     lua require("indent_blankline").setup {}
line 29: endif
line 30: 
line 31: lua require("indent_blankline").init()
Executing: highlight IndentBlanklineSpaceCharBlankline guifg=#3a3e4e ctermfg=12 gui=nocombine cterm=nocombine
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/indent-blankline.nvim/lua/indent_blankline)
chdir(/Users/ablanken/Sync/src/neovim-conf)
Executing: highlight IndentBlanklineSpaceChar guifg=#3a3e4e ctermfg=12 gui=nocombine cterm=nocombine
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/indent-blankline.nvim/lua/indent_blankline)
chdir(/Users/ablanken/Sync/src/neovim-conf)
Executing: highlight IndentBlanklineContextStart guisp=#4db5bd gui=underline cterm=underline
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/indent-blankline.nvim/lua/indent_blankline)
chdir(/Users/ablanken/Sync/src/neovim-conf)
Executing: noautocmd windo lua require("indent_blankline").refresh(false)
Executing: lua require("indent_blankline").refresh(false)
line 32: 
line 33: augroup IndentBlanklineAutogroup
line 34:     autocmd!
line 35:     autocmd OptionSet list,shiftwidth,tabstop,expandtab IndentBlanklineRefresh
line 36:     autocmd FileChangedShellPost,TextChanged,TextChangedI,CompleteChanged,BufWinEnter,Filetype * IndentBlanklineRefresh
line 37:     autocmd WinScrolled * IndentBlanklineRefreshScroll
line 38:     autocmd ColorScheme * lua require("indent_blankline.utils").reset_highlights()
line 39:     autocmd VimEnter * lua require("indent_blankline").init()
line 40: augroup END
line 41: 
finished sourcing /Users/ablanken/.local/share/nvim/site/pack/packer/start/indent-blankline.nvim/plugin/indent_blankline.vim
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/nvim-treesitter/plugin)
chdir(/Users/ablanken/Sync/src/neovim-conf)
sourcing "/Users/ablanken/.local/share/nvim/site/pack/packer/start/nvim-treesitter/plugin/nvim-treesitter.lua"
Executing: command! -nargs=+ -complete=custom,nvim_treesitter#installed_parsers TSUninstall lua require'nvim-treesitter.install'.commands.TSUninstall['run<bang>'](<f-args>)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/nvim-treesitter/lua/nvim-treesitter)
chdir(/Users/ablanken/Sync/src/neovim-conf)
Executing: command! -nargs=+ -bang -complete=custom,nvim_treesitter#installable_parsers TSInstallFromGrammar lua require'nvim-treesitter.install'.commands.TSInstallFromGrammar['run<bang>'](<f-args>)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/nvim-treesitter/lua/nvim-treesitter)
chdir(/Users/ablanken/Sync/src/neovim-conf)
Executing: command! -nargs=+ -bang -complete=custom,nvim_treesitter#installable_parsers TSInstallSync lua require'nvim-treesitter.install'.commands.TSInstallSync['run<bang>'](<f-args>)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/nvim-treesitter/lua/nvim-treesitter)
chdir(/Users/ablanken/Sync/src/neovim-conf)
Executing: command! -nargs=* -complete=custom,nvim_treesitter#installed_parsers TSUpdate lua require'nvim-treesitter.install'.commands.TSUpdate['run<bang>'](<f-args>)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/nvim-treesitter/lua/nvim-treesitter)
chdir(/Users/ablanken/Sync/src/neovim-conf)
Executing: command! -nargs=+ -bang -complete=custom,nvim_treesitter#installable_parsers TSInstall lua require'nvim-treesitter.install'.commands.TSInstall['run<bang>'](<f-args>)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/nvim-treesitter/lua/nvim-treesitter)
chdir(/Users/ablanken/Sync/src/neovim-conf)
Executing: command! -nargs=* -complete=custom,nvim_treesitter#installed_parsers TSUpdateSync lua require'nvim-treesitter.install'.commands.TSUpdateSync['run<bang>'](<f-args>)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/nvim-treesitter/lua/nvim-treesitter)
chdir(/Users/ablanken/Sync/src/neovim-conf)
Executing: command! -nargs=? -complete=custom,nvim_treesitter#available_modules TSModuleInfo lua require'nvim-treesitter.info'.commands.TSModuleInfo['run<bang>'](<f-args>)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/nvim-treesitter/lua/nvim-treesitter)
chdir(/Users/ablanken/Sync/src/neovim-conf)
Executing: command! -nargs=0 TSInstallInfo lua require'nvim-treesitter.info'.commands.TSInstallInfo['run<bang>'](<f-args>)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/nvim-treesitter/lua/nvim-treesitter)
chdir(/Users/ablanken/Sync/src/neovim-conf)
Executing: command! -nargs=+ -complete=custom,nvim_treesitter#available_query_groups TSEditQueryUserAfter lua require'nvim-treesitter.configs'.commands.TSEditQueryUserAfter['run<bang>'](<f-args>)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/nvim-treesitter/lua/nvim-treesitter)
chdir(/Users/ablanken/Sync/src/neovim-conf)
Executing: command! -nargs=1 -complete=custom,nvim_treesitter#available_modules TSBufEnable lua require'nvim-treesitter.configs'.commands.TSBufEnable['run<bang>'](<f-args>)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/nvim-treesitter/lua/nvim-treesitter)
chdir(/Users/ablanken/Sync/src/neovim-conf)
Executing: command! -nargs=1 -complete=custom,nvim_treesitter#available_modules TSBufDisable lua require'nvim-treesitter.configs'.commands.TSBufDisable['run<bang>'](<f-args>)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/nvim-treesitter/lua/nvim-treesitter)
chdir(/Users/ablanken/Sync/src/neovim-conf)
Executing: command! -nargs=1 -complete=custom,nvim_treesitter#available_modules TSBufToggle lua require'nvim-treesitter.configs'.commands.TSBufToggle['run<bang>'](<f-args>)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/nvim-treesitter/lua/nvim-treesitter)
chdir(/Users/ablanken/Sync/src/neovim-conf)
Executing: command! -nargs=+ -complete=custom,nvim_treesitter#available_modules TSEnable lua require'nvim-treesitter.configs'.commands.TSEnable['run<bang>'](<f-args>)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/nvim-treesitter/lua/nvim-treesitter)
chdir(/Users/ablanken/Sync/src/neovim-conf)
Executing: command! -nargs=+ -complete=custom,nvim_treesitter#available_modules TSDisable lua require'nvim-treesitter.configs'.commands.TSDisable['run<bang>'](<f-args>)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/nvim-treesitter/lua/nvim-treesitter)
chdir(/Users/ablanken/Sync/src/neovim-conf)
Executing: command! -nargs=+ -complete=custom,nvim_treesitter#available_modules TSToggle lua require'nvim-treesitter.configs'.commands.TSToggle['run<bang>'](<f-args>)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/nvim-treesitter/lua/nvim-treesitter)
chdir(/Users/ablanken/Sync/src/neovim-conf)
Executing: command! -nargs=0 TSConfigInfo lua require'nvim-treesitter.configs'.commands.TSConfigInfo['run<bang>'](<f-args>)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/nvim-treesitter/lua/nvim-treesitter)
chdir(/Users/ablanken/Sync/src/neovim-conf)
Executing: command! -nargs=+ -complete=custom,nvim_treesitter#available_query_groups TSEditQuery lua require'nvim-treesitter.configs'.commands.TSEditQuery['run<bang>'](<f-args>)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/nvim-treesitter/lua/nvim-treesitter)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/nvim-treesitter/lua/nvim-treesitter)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/nvim-treesitter/plugin)
chdir(/Users/ablanken/Sync/src/neovim-conf)
finished sourcing /Users/ablanken/.local/share/nvim/site/pack/packer/start/nvim-treesitter/plugin/nvim-treesitter.lua
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/nvim-web-devicons/plugin)
chdir(/Users/ablanken/Sync/src/neovim-conf)
sourcing "/Users/ablanken/.local/share/nvim/site/pack/packer/start/nvim-web-devicons/plugin/nvim-web-devicons.vim"
line 1: if exists('g:loaded_devicons') | finish | endif
line 1:  finish | endif
line 1:  endif
line 2: 
line 3: let s:save_cpo = &cpo
line 4: set cpo&vim
line 5: 
line 6: " TODO change so its easier to get
line 7: let g:nvim_web_devicons = 1
line 8: 
line 9: let &cpo = s:save_cpo
line 10: unlet s:save_cpo
line 11: 
line 12: let g:loaded_devicons = 1
finished sourcing /Users/ablanken/.local/share/nvim/site/pack/packer/start/nvim-web-devicons/plugin/nvim-web-devicons.vim
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/plenary.nvim/plugin)
chdir(/Users/ablanken/Sync/src/neovim-conf)
sourcing "/Users/ablanken/.local/share/nvim/site/pack/packer/start/plenary.nvim/plugin/plenary.vim"
line 1: 
line 2: " Create command for running busted
line 3: command! -nargs=1 -complete=file PlenaryBustedFile lua require('plenary.busted').run(vim.fn.expand("<args>"))
line 5: 
line 6: command! -nargs=+ -complete=file PlenaryBustedDirectory lua require('plenary.test_harness').test_directory_command(vim.fn.expand("<args>"))
line 8: 
line 9: nnoremap <Plug>PlenaryTestFile :lua require('plenary.test_harness').test_directory(vim.fn.expand("%:p"))<CR>
finished sourcing /Users/ablanken/.local/share/nvim/site/pack/packer/start/plenary.nvim/plugin/plenary.vim
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/session-lens/plugin)
chdir(/Users/ablanken/Sync/src/neovim-conf)
sourcing "/Users/ablanken/.local/share/nvim/site/pack/packer/start/session-lens/plugin/session-lens.vim"
line 1: if exists('g:loaded_session_lens') | finish | endif " prevent loading file twice
line 1:  finish | endif " prevent loading file twice
line 1:  endif " prevent loading file twice
line 2: 
line 3: let s:save_cpo = &cpo " save user coptions
line 4: set cpo&vim " reset them to defaults
line 5: 
line 6: let LuaSearchSession = luaeval('require("telescope._extensions.session-lens.main").search_session')
line 7: 
line 8: " Available commands
line 9: command! -nargs=0 SearchSession call LuaSearchSession()
line 10: 
line 11: let &cpo = s:save_cpo " and restore after
line 12: unlet s:save_cpo
line 13: 
line 14: let g:loaded_session_lens = 1
finished sourcing /Users/ablanken/.local/share/nvim/site/pack/packer/start/session-lens/plugin/session-lens.vim
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/suda.vim/plugin)
chdir(/Users/ablanken/Sync/src/neovim-conf)
sourcing "/Users/ablanken/.local/share/nvim/site/pack/packer/start/suda.vim/plugin/suda.vim"
line 1: if exists('g:loaded_suda')
line 2:   finish
line 3: endif
line 4: let g:loaded_suda = 1
line 5: 
line 6: if get(g:, 'suda_smart_edit')
line 7:   augroup suda_smart_edit
line 8:     autocmd!
line 9:     autocmd BufEnter * nested call suda#BufEnter()
line 10:   augroup end
line 11: endif
line 12: 
line 13: augroup suda_plugin
line 14:   autocmd!
line 15:   autocmd BufReadCmd   suda://* call suda#BufReadCmd()
line 16:   autocmd FileReadCmd  suda://* call suda#FileReadCmd()
line 17:   autocmd BufWriteCmd  suda://* call suda#BufWriteCmd()
line 18:   autocmd FileWriteCmd suda://* call suda#FileWriteCmd()
line 19: augroup END
line 20: 
line 21: function! s:read(args) abort
line 25: command! -nargs=? -complete=file SudaRead  call s:read(<q-args>)
line 26: 
line 27: function! s:write(args) abort
line 31: command! -nargs=? -complete=file SudaWrite call s:write(<q-args>)
finished sourcing /Users/ablanken/.local/share/nvim/site/pack/packer/start/suda.vim/plugin/suda.vim
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/telescope.nvim/plugin)
chdir(/Users/ablanken/Sync/src/neovim-conf)
sourcing "/Users/ablanken/.local/share/nvim/site/pack/packer/start/telescope.nvim/plugin/telescope.lua"
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/telescope.nvim/plugin)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/telescope.nvim/plugin)
chdir(/Users/ablanken/Sync/src/neovim-conf)
finished sourcing /Users/ablanken/.local/share/nvim/site/pack/packer/start/telescope.nvim/plugin/telescope.lua
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/vim-fugitive/plugin)
chdir(/Users/ablanken/Sync/src/neovim-conf)
sourcing "/Users/ablanken/.local/share/nvim/site/pack/packer/start/vim-fugitive/plugin/fugitive.vim"
line 1: " fugitive.vim - A Git wrapper so awesome, it should be illegal
line 2: " Maintainer:   Tim Pope <http://tpo.pe/>
line 3: " Version:      3.6
line 4: " GetLatestVimScripts: 2975 1 :AutoInstall: fugitive.vim
line 5: 
line 6: if exists('g:loaded_fugitive')
line 7:   finish
line 8: endif
line 9: let g:loaded_fugitive = 1
line 10: 
line 11: let s:bad_git_dir = '/$\|^fugitive:'
line 12: 
line 13: " FugitiveGitDir() returns the detected Git dir for the given buffer number,
line 14: " or the current buffer if no argument is passed.  This will be an empty
line 15: " string if no Git dir was found.  Use !empty(FugitiveGitDir()) to check if
line 16: " Fugitive is active in the current buffer.  Do not rely on this for direct
line 17: " filesystem access; use FugitiveFind('.git/whatever') instead.
line 18: function! FugitiveGitDir(...) abort
line 47: 
line 48: " FugitiveReal() takes a fugitive:// URL and returns the corresponding path in
line 49: " the work tree.  This may be useful to get a cleaner path for inclusion in
line 50: " the statusline, for example.  Note that the file and its parent directories
line 51: " are not guaranteed to exist.
line 52: "
line 53: " This is intended as an abstract API to be used on any "virtual" path.  For a
line 54: " buffer named foo://bar, check for a function named FooReal(), and if it
line 55: " exists, call FooReal("foo://bar").
line 56: function! FugitiveReal(...) abort
line 70: 
line 71: " FugitiveFind() takes a Fugitive object and returns the appropriate Vim
line 72: " buffer name.  You can use this to generate Fugitive URLs ("HEAD:README") or
line 73: " to get the absolute path to a file in the Git dir (".git/HEAD"), the common
line 74: " dir (".git/config"), or the work tree (":(top)Makefile").
line 75: "
line 76: " An optional second argument provides the Git dir, or the buffer number of a
line 77: " buffer with a Git dir.  The default is the current buffer.
line 78: function! FugitiveFind(...) abort
line 85: 
line 86: " FugitiveParse() takes a fugitive:// URL and returns a 2 element list
line 87: " containing an object name ("commit:file") and the Git dir.  It's effectively
line 88: " the inverse of FugitiveFind().
line 89: function! FugitiveParse(...) abort
line 101: 
line 102: " FugitiveGitVersion() queries the version of Git in use.  Pass up to 3
line 103: " arguments to return a Boolean of whether a certain minimum version is
line 104: " available (FugitiveGitVersion(2,3,4) checks for 2.3.4 or higher) or no
line 105: " arguments to get a raw string.
line 106: function! FugitiveGitVersion(...) abort
line 109: 
line 110: " FugitiveResult() returns an object encapsulating the result of the most
line 111: " recent :Git command.  Will be empty if no result is available.  During a
line 112: " User FugitiveChanged event, this is guaranteed to correspond to the :Git
line 113: " command that triggered the event, or be empty if :Git was not the trigger.
line 114: " Pass in the name of a temp buffer to get the result object for that command
line 115: " instead.  Contains the following keys:
line 116: "
line 117: " * "args": List of command arguments, starting with the subcommand.  Will be
line 118: "   empty for usages like :Git --help.
line 119: " * "git_dir": Git dir of the relevant repository.
line 120: " * "exit_status": The integer exit code of the process.
line 121: " * "flags": Flags passed directly to Git, like -c and --help.
line 122: " * "file": Path to file containing command output.  Not guaranteed to exist,
line 123: "   so verify with filereadable() before trying to access it.
line 124: function! FugitiveResult(...) abort
line 127: 
line 128: " FugitiveExecute() runs Git with a list of arguments and returns a dictionary
line 129: " with the following keys:
line 130: "
line 131: " * "exit_status": The integer exit code of the process.
line 132: " * "stdout": The stdout produced by the process, as a list of lines.
line 133: " * "stderr": The stdout produced by the process, as a list of lines.
line 134: "
line 135: " An optional second argument provides the Git dir, or the buffer number of a
line 136: " buffer with a Git dir.  The default is the current buffer.
line 137: "
line 138: " An optional final argument is a callback Funcref, for asynchronous
line 139: " execution.
line 140: function! FugitiveExecute(args, ...) abort
line 143: 
line 144: " FugitiveShellCommand() turns an array of arugments into a Git command string
line 145: " which can be executed with functions like system() and commands like :!.
line 146: " Integer arguments will be treated as buffer numbers, and the appropriate
line 147: " relative path inserted in their place.
line 148: "
line 149: " An optional second argument provides the Git dir, or the buffer number of a
line 150: " buffer with a Git dir.  The default is the current buffer.
line 151: function! FugitiveShellCommand(...) abort
line 154: 
line 155: " FugitivePrepare() is a deprecated alias for FugitiveShellCommand().  If you
line 156: " are using this in conjunction with system(), consider using
line 157: " FugitiveExecute() instead.
line 158: function! FugitivePrepare(...) abort
line 167: 
line 168: " FugitiveConfig() get returns an opaque structure that can be passed to other
line 169: " FugitiveConfig functions in lieu of a Git directory.  This can be faster
line 170: " when performing multiple config queries.  Do not rely on the internal
line 171: " structure of the return value as it is not guaranteed.  If you want a full
line 172: " dictionary of every config value, use FugitiveConfigGetRegexp('.*').
line 173: "
line 174: " An optional argument provides the Git dir, or the buffer number of a
line 175: " buffer with a Git dir.  The default is the current buffer.  Pass a blank
line 176: " string to limit to the global config.
line 177: function! FugitiveConfig(...) abort
line 180: 
line 181: " FugitiveConfigGet() retrieves a Git configuration value.  An optional second
line 182: " argument can be either the object returned by FugitiveConfig(), or a Git
line 183: " dir or buffer number to be passed along to FugitiveConfig().
line 184: function! FugitiveConfigGet(name, ...) abort
line 187: 
line 188: " FugitiveConfigGetAll() is like FugitiveConfigGet() but returns a list of
line 189: " all values.
line 190: function! FugitiveConfigGetAll(name, ...) abort
line 193: 
line 194: " FugitiveConfigGetRegexp() retrieves a dictionary of all configuration values
line 195: " with a key matching the given pattern.  Like git config --get-regexp, but
line 196: " using a Vim regexp.  Second argument has same semantics as
line 197: " FugitiveConfigGet().
line 198: function! FugitiveConfigGetRegexp(pattern, ...) abort
line 201: 
line 202: " FugitiveRemoteUrl() retrieves the remote URL for the given remote name,
line 203: " defaulting to the current branch's remote or "origin" if no argument is
line 204: " given.  Similar to `git remote get-url`, but also attempts to resolve HTTP
line 205: " redirects and SSH host aliases.
line 206: "
line 207: " An optional second argument provides the Git dir, or the buffer number of a
line 208: " buffer with a Git dir.  The default is the current buffer.
line 209: function! FugitiveRemoteUrl(...) abort
line 212: 
line 213: " FugitiveRemote() returns a data structure parsed from the remote URL.
line 214: " For example, for remote URL "https://me@example.com:1234/repo.git", the
line 215: " returned dictionary will contain the following:
line 216: "
line 217: " * "scheme": "https"
line 218: " * "authority": "user@example.com:1234"
line 219: " * "path": "/repo.git" (for SSH URLs this may be a relative path)
line 220: " * "pathname": "/repo.git" (always coerced to absolute path)
line 221: " * "host": "example.com:1234"
line 222: " * "hostname": "example.com"
line 223: " * "port": "1234"
line 224: " * "user": "me"
line 225: " * "path": "/repo.git"
line 226: " * "url": "https://me@example.com:1234/repo.git"
line 227: function! FugitiveRemote(...) abort
line 230: 
line 231: " FugitiveDidChange() triggers a FugitiveChanged event and reloads the summary
line 232: " buffer for the current or given buffer number's repository.  You can also
line 233: " give the result of a FugitiveExecute() and that context will be made
line 234: " available inside the FugitiveChanged() event.
line 235: "
line 236: " Passing the special argument 0 (the number zero) softly expires summary
line 237: " buffers for all repositories.  This can be used after a call to system()
line 238: " with unclear implications.
line 239: function! FugitiveDidChange(...) abort
line 242: 
line 243: " FugitiveHead() retrieves the name of the current branch. If the current HEAD
line 244: " is detached, FugitiveHead() will return the empty string, unless the
line 245: " optional argument is given, in which case the hash of the current commit
line 246: " will be truncated to the given number of characters.
line 247: "
line 248: " An optional second argument provides the Git dir, or the buffer number of a
line 249: " buffer with a Git dir.  The default is the current buffer.
line 250: function! FugitiveHead(...) abort
line 266: 
line 267: function! FugitivePath(...) abort
line 278: 
line 279: function! FugitiveStatusline(...) abort
line 285: 
line 286: let s:commondirs = {}
line 287: function! FugitiveCommonDir(...) abort
line 309: 
line 310: function! FugitiveWorkTree(...) abort
line 318: 
line 319: function! FugitiveIsGitDir(...) abort
line 328: 
line 329: function! s:ReadFile(path, line_count) abort
line 336: 
line 337: let s:worktree_for_dir = {}
line 338: let s:dir_for_worktree = {}
line 339: function! s:Tree(path) abort
line 386: 
line 387: function! s:CeilingDirectories() abort
line 403: 
line 404: function! FugitiveExtractGitDir(path) abort
line 463: 
line 464: function! FugitiveDetect(...) abort
line 495: 
line 496: function! FugitiveVimPath(path) abort
line 503: 
line 504: function! FugitiveGitPath(path) abort
line 507: 
line 508: if exists('+shellslash')
line 509:   function! s:Slash(path) abort
line 512: else
line 513:   function! s:Slash(path) abort
line 516: endif
line 517: 
line 518: function! s:ProjectionistDetect() abort
line 535: 
line 536: let s:addr_other = has('patch-8.1.560') || has('nvim-0.5.0') ? '-addr=other' : ''
line 537: let s:addr_tabs  = has('patch-7.4.542') ? '-addr=tabs' : ''
line 538: let s:addr_wins  = has('patch-7.4.542') ? '-addr=windows' : ''
line 539: 
line 540: if exists(':G') != 2
line 541:   command! -bang -nargs=? -range=-1 -complete=customlist,fugitive#Complete G   exe fugitive#Command(<line1>, <count>, +"<range>", <bang>0, "<mods>", <q-args>)
line 542: endif
line 543: command! -bang -nargs=? -range=-1 -complete=customlist,fugitive#Complete Git exe fugitive#Command(<line1>, <count>, +"<range>", <bang>0, "<mods>", <q-args>)
line 544: 
line 545: if exists(':Gstatus') != 2 && get(g:, 'fugitive_legacy_commands', 0)
line 546:   exe 'command! -bang -bar     -range=-1' s:addr_other 'Gstatus exe fugitive#Command(<line1>, <count>, +"<range>", <bang>0, "<mods>", <q-args>)' '|echohl WarningMSG|echomsg ":Gstatus is deprecated in favor of :Git (with no arguments)"|echohl NONE'
line 548: elseif exists(':Gstatus') != 2 && !exists('g:fugitive_legacy_commands')
line 549:   exe 'command! -bang -bar     -range=-1' s:addr_other 'Gstatus' ' echoerr ":Gstatus has been removed in favor of :Git (with no arguments)"'
line 549: command! -bang -bar     -range=-1 -addr=other Gstatus  echoerr ":Gstatus has been removed in favor of :Git (with no arguments)"
line 551: endif
line 552: 
line 553: for s:cmd in ['Commit', 'Revert', 'Merge', 'Rebase', 'Pull', 'Push', 'Fetch', 'Blame']
line 554:   if exists(':G' . tolower(s:cmd)) != 2 && get(g:, 'fugitive_legacy_commands', 0)
line 555:     exe 'command! -bang -nargs=? -range=-1 -complete=customlist,fugitive#' . s:cmd . 'Complete G' . tolower(s:cmd) 'echohl WarningMSG|echomsg ":G' . tolower(s:cmd) . ' is deprecated in favor of :Git ' . tolower(s:cmd) . '"|echohl NONE|' 'exe fugitive#Command(<line1>, <count>, +"<range>", <bang>0, "<mods>", "' . tolower(s:cmd) . ' " . <q-args>)'
line 558:   elseif exists(':G' . tolower(s:cmd)) != 2 && !exists('g:fugitive_legacy_commands')
line 559:     exe 'command! -bang -nargs=? -range=-1 -complete=customlist,fugitive#' . s:cmd . 'Complete G' . tolower(s:cmd) 'echoerr ":G' . tolower(s:cmd) . ' has been removed in favor of :Git ' . tolower(s:cmd) . '"'
line 559: command! -bang -nargs=? -range=-1 -complete=customlist,fugitive#CommitComplete Gcommit echoerr ":Gcommit has been removed in favor of :Git commit"
line 561:   endif
line 562: endfor
line 553: for s:cmd in ['Commit', 'Revert', 'Merge', 'Rebase', 'Pull', 'Push', 'Fetch', 'Blame']
line 554:   if exists(':G' . tolower(s:cmd)) != 2 && get(g:, 'fugitive_legacy_commands', 0)
line 555:     exe 'command! -bang -nargs=? -range=-1 -complete=customlist,fugitive#' . s:cmd . 'Complete G' . tolower(s:cmd) 'echohl WarningMSG|echomsg ":G' . tolower(s:cmd) . ' is deprecated in favor of :Git ' . tolower(s:cmd) . '"|echohl NONE|' 'exe fugitive#Command(<line1>, <count>, +"<range>", <bang>0, "<mods>", "' . tolower(s:cmd) . ' " . <q-args>)'
line 558:   elseif exists(':G' . tolower(s:cmd)) != 2 && !exists('g:fugitive_legacy_commands')
line 559:     exe 'command! -bang -nargs=? -range=-1 -complete=customlist,fugitive#' . s:cmd . 'Complete G' . tolower(s:cmd) 'echoerr ":G' . tolower(s:cmd) . ' has been removed in favor of :Git ' . tolower(s:cmd) . '"'
line 559: command! -bang -nargs=? -range=-1 -complete=customlist,fugitive#RevertComplete Grevert echoerr ":Grevert has been removed in favor of :Git revert"
line 561:   endif
line 562: endfor
line 553: for s:cmd in ['Commit', 'Revert', 'Merge', 'Rebase', 'Pull', 'Push', 'Fetch', 'Blame']
line 554:   if exists(':G' . tolower(s:cmd)) != 2 && get(g:, 'fugitive_legacy_commands', 0)
line 555:     exe 'command! -bang -nargs=? -range=-1 -complete=customlist,fugitive#' . s:cmd . 'Complete G' . tolower(s:cmd) 'echohl WarningMSG|echomsg ":G' . tolower(s:cmd) . ' is deprecated in favor of :Git ' . tolower(s:cmd) . '"|echohl NONE|' 'exe fugitive#Command(<line1>, <count>, +"<range>", <bang>0, "<mods>", "' . tolower(s:cmd) . ' " . <q-args>)'
line 558:   elseif exists(':G' . tolower(s:cmd)) != 2 && !exists('g:fugitive_legacy_commands')
line 559:     exe 'command! -bang -nargs=? -range=-1 -complete=customlist,fugitive#' . s:cmd . 'Complete G' . tolower(s:cmd) 'echoerr ":G' . tolower(s:cmd) . ' has been removed in favor of :Git ' . tolower(s:cmd) . '"'
line 559: command! -bang -nargs=? -range=-1 -complete=customlist,fugitive#MergeComplete Gmerge echoerr ":Gmerge has been removed in favor of :Git merge"
line 561:   endif
line 562: endfor
line 553: for s:cmd in ['Commit', 'Revert', 'Merge', 'Rebase', 'Pull', 'Push', 'Fetch', 'Blame']
line 554:   if exists(':G' . tolower(s:cmd)) != 2 && get(g:, 'fugitive_legacy_commands', 0)
line 555:     exe 'command! -bang -nargs=? -range=-1 -complete=customlist,fugitive#' . s:cmd . 'Complete G' . tolower(s:cmd) 'echohl WarningMSG|echomsg ":G' . tolower(s:cmd) . ' is deprecated in favor of :Git ' . tolower(s:cmd) . '"|echohl NONE|' 'exe fugitive#Command(<line1>, <count>, +"<range>", <bang>0, "<mods>", "' . tolower(s:cmd) . ' " . <q-args>)'
line 558:   elseif exists(':G' . tolower(s:cmd)) != 2 && !exists('g:fugitive_legacy_commands')
line 559:     exe 'command! -bang -nargs=? -range=-1 -complete=customlist,fugitive#' . s:cmd . 'Complete G' . tolower(s:cmd) 'echoerr ":G' . tolower(s:cmd) . ' has been removed in favor of :Git ' . tolower(s:cmd) . '"'
line 559: command! -bang -nargs=? -range=-1 -complete=customlist,fugitive#RebaseComplete Grebase echoerr ":Grebase has been removed in favor of :Git rebase"
line 561:   endif
line 562: endfor
line 553: for s:cmd in ['Commit', 'Revert', 'Merge', 'Rebase', 'Pull', 'Push', 'Fetch', 'Blame']
line 554:   if exists(':G' . tolower(s:cmd)) != 2 && get(g:, 'fugitive_legacy_commands', 0)
line 555:     exe 'command! -bang -nargs=? -range=-1 -complete=customlist,fugitive#' . s:cmd . 'Complete G' . tolower(s:cmd) 'echohl WarningMSG|echomsg ":G' . tolower(s:cmd) . ' is deprecated in favor of :Git ' . tolower(s:cmd) . '"|echohl NONE|' 'exe fugitive#Command(<line1>, <count>, +"<range>", <bang>0, "<mods>", "' . tolower(s:cmd) . ' " . <q-args>)'
line 558:   elseif exists(':G' . tolower(s:cmd)) != 2 && !exists('g:fugitive_legacy_commands')
line 559:     exe 'command! -bang -nargs=? -range=-1 -complete=customlist,fugitive#' . s:cmd . 'Complete G' . tolower(s:cmd) 'echoerr ":G' . tolower(s:cmd) . ' has been removed in favor of :Git ' . tolower(s:cmd) . '"'
line 559: command! -bang -nargs=? -range=-1 -complete=customlist,fugitive#PullComplete Gpull echoerr ":Gpull has been removed in favor of :Git pull"
line 561:   endif
line 562: endfor
line 553: for s:cmd in ['Commit', 'Revert', 'Merge', 'Rebase', 'Pull', 'Push', 'Fetch', 'Blame']
line 554:   if exists(':G' . tolower(s:cmd)) != 2 && get(g:, 'fugitive_legacy_commands', 0)
line 555:     exe 'command! -bang -nargs=? -range=-1 -complete=customlist,fugitive#' . s:cmd . 'Complete G' . tolower(s:cmd) 'echohl WarningMSG|echomsg ":G' . tolower(s:cmd) . ' is deprecated in favor of :Git ' . tolower(s:cmd) . '"|echohl NONE|' 'exe fugitive#Command(<line1>, <count>, +"<range>", <bang>0, "<mods>", "' . tolower(s:cmd) . ' " . <q-args>)'
line 558:   elseif exists(':G' . tolower(s:cmd)) != 2 && !exists('g:fugitive_legacy_commands')
line 559:     exe 'command! -bang -nargs=? -range=-1 -complete=customlist,fugitive#' . s:cmd . 'Complete G' . tolower(s:cmd) 'echoerr ":G' . tolower(s:cmd) . ' has been removed in favor of :Git ' . tolower(s:cmd) . '"'
line 559: command! -bang -nargs=? -range=-1 -complete=customlist,fugitive#PushComplete Gpush echoerr ":Gpush has been removed in favor of :Git push"
line 561:   endif
line 562: endfor
line 553: for s:cmd in ['Commit', 'Revert', 'Merge', 'Rebase', 'Pull', 'Push', 'Fetch', 'Blame']
line 554:   if exists(':G' . tolower(s:cmd)) != 2 && get(g:, 'fugitive_legacy_commands', 0)
line 555:     exe 'command! -bang -nargs=? -range=-1 -complete=customlist,fugitive#' . s:cmd . 'Complete G' . tolower(s:cmd) 'echohl WarningMSG|echomsg ":G' . tolower(s:cmd) . ' is deprecated in favor of :Git ' . tolower(s:cmd) . '"|echohl NONE|' 'exe fugitive#Command(<line1>, <count>, +"<range>", <bang>0, "<mods>", "' . tolower(s:cmd) . ' " . <q-args>)'
line 558:   elseif exists(':G' . tolower(s:cmd)) != 2 && !exists('g:fugitive_legacy_commands')
line 559:     exe 'command! -bang -nargs=? -range=-1 -complete=customlist,fugitive#' . s:cmd . 'Complete G' . tolower(s:cmd) 'echoerr ":G' . tolower(s:cmd) . ' has been removed in favor of :Git ' . tolower(s:cmd) . '"'
line 559: command! -bang -nargs=? -range=-1 -complete=customlist,fugitive#FetchComplete Gfetch echoerr ":Gfetch has been removed in favor of :Git fetch"
line 561:   endif
line 562: endfor
line 553: for s:cmd in ['Commit', 'Revert', 'Merge', 'Rebase', 'Pull', 'Push', 'Fetch', 'Blame']
line 554:   if exists(':G' . tolower(s:cmd)) != 2 && get(g:, 'fugitive_legacy_commands', 0)
line 555:     exe 'command! -bang -nargs=? -range=-1 -complete=customlist,fugitive#' . s:cmd . 'Complete G' . tolower(s:cmd) 'echohl WarningMSG|echomsg ":G' . tolower(s:cmd) . ' is deprecated in favor of :Git ' . tolower(s:cmd) . '"|echohl NONE|' 'exe fugitive#Command(<line1>, <count>, +"<range>", <bang>0, "<mods>", "' . tolower(s:cmd) . ' " . <q-args>)'
line 558:   elseif exists(':G' . tolower(s:cmd)) != 2 && !exists('g:fugitive_legacy_commands')
line 559:     exe 'command! -bang -nargs=? -range=-1 -complete=customlist,fugitive#' . s:cmd . 'Complete G' . tolower(s:cmd) 'echoerr ":G' . tolower(s:cmd) . ' has been removed in favor of :Git ' . tolower(s:cmd) . '"'
line 559: command! -bang -nargs=? -range=-1 -complete=customlist,fugitive#BlameComplete Gblame echoerr ":Gblame has been removed in favor of :Git blame"
line 561:   endif
line 562: endfor
line 553: for s:cmd in ['Commit', 'Revert', 'Merge', 'Rebase', 'Pull', 'Push', 'Fetch', 'Blame']
line 554:   if exists(':G' . tolower(s:cmd)) != 2 && get(g:, 'fugitive_legacy_commands', 0)
line 555:     exe 'command! -bang -nargs=? -range=-1 -complete=customlist,fugitive#' . s:cmd . 'Complete G' . tolower(s:cmd) 'echohl WarningMSG|echomsg ":G' . tolower(s:cmd) . ' is deprecated in favor of :Git ' . tolower(s:cmd) . '"|echohl NONE|' 'exe fugitive#Command(<line1>, <count>, +"<range>", <bang>0, "<mods>", "' . tolower(s:cmd) . ' " . <q-args>)'
line 558:   elseif exists(':G' . tolower(s:cmd)) != 2 && !exists('g:fugitive_legacy_commands')
line 559:     exe 'command! -bang -nargs=? -range=-1 -complete=customlist,fugitive#' . s:cmd . 'Complete G' . tolower(s:cmd) 'echoerr ":G' . tolower(s:cmd) . ' has been removed in favor of :Git ' . tolower(s:cmd) . '"'
line 561:   endif
line 562: endfor
line 563: unlet s:cmd
line 564: 
line 565: exe "command! -bar -bang -nargs=? -complete=customlist,fugitive#CdComplete Gcd  exe fugitive#Cd(<q-args>, 0)"
line 565: command! -bar -bang -nargs=? -complete=customlist,fugitive#CdComplete Gcd  exe fugitive#Cd(<q-args>, 0)
line 566: exe "command! -bar -bang -nargs=? -complete=customlist,fugitive#CdComplete Glcd exe fugitive#Cd(<q-args>, 1)"
line 566: command! -bar -bang -nargs=? -complete=customlist,fugitive#CdComplete Glcd exe fugitive#Cd(<q-args>, 1)
line 567: 
line 568: exe 'command! -bang -nargs=? -range=-1' s:addr_wins '-complete=customlist,fugitive#GrepComplete Ggrep  exe fugitive#GrepCommand(<line1>, <count>, +"<range>", <bang>0, "<mods>", <q-args>)'
line 568: command! -bang -nargs=? -range=-1 -addr=windows -complete=customlist,fugitive#GrepComplete Ggrep  exe fugitive#GrepCommand(<line1>, <count>, +"<range>", <bang>0, "<mods>", <q-args>)
line 569: exe 'command! -bang -nargs=? -range=-1' s:addr_wins '-complete=customlist,fugitive#GrepComplete Glgrep exe fugitive#GrepCommand(0, <count> > 0 ? <count> : 0, +"<range>", <bang>0, "<mods>", <q-args>)'
line 569: command! -bang -nargs=? -range=-1 -addr=windows -complete=customlist,fugitive#GrepComplete Glgrep exe fugitive#GrepCommand(0, <count> > 0 ? <count> : 0, +"<range>", <bang>0, "<mods>", <q-args>)
line 570: 
line 571: if exists(':Glog') != 2 && get(g:, 'fugitive_legacy_commands', 0)
line 572:   exe 'command! -bang -nargs=? -range=-1 -complete=customlist,fugitive#LogComplete Glog  :exe fugitive#LogCommand(<line1>,<count>,+"<range>",<bang>0,"<mods>",<q-args>, "")' '|echohl WarningMSG|echomsg ":Glog is deprecated in favor of :Gclog"|echohl NONE'
line 574: elseif exists(':Glog') != 2 && !exists('g:fugitive_legacy_commands')
line 575:   exe 'command! -bang -nargs=? -range=-1 -complete=customlist,fugitive#LogComplete Glog' ' echoerr ":Glog has been removed in favor of :Gclog"'
line 575: command! -bang -nargs=? -range=-1 -complete=customlist,fugitive#LogComplete Glog  echoerr ":Glog has been removed in favor of :Gclog"
line 577: endif
line 578: exe 'command! -bang -nargs=? -range=-1 -complete=customlist,fugitive#LogComplete Gclog :exe fugitive#LogCommand(<line1>,<count>,+"<range>",<bang>0,"<mods>",<q-args>, "c")'
line 578: command! -bang -nargs=? -range=-1 -complete=customlist,fugitive#LogComplete Gclog :exe fugitive#LogCommand(<line1>,<count>,+"<range>",<bang>0,"<mods>",<q-args>, "c")
line 579: exe 'command! -bang -nargs=? -range=-1 -complete=customlist,fugitive#LogComplete GcLog :exe fugitive#LogCommand(<line1>,<count>,+"<range>",<bang>0,"<mods>",<q-args>, "c")'
line 579: command! -bang -nargs=? -range=-1 -complete=customlist,fugitive#LogComplete GcLog :exe fugitive#LogCommand(<line1>,<count>,+"<range>",<bang>0,"<mods>",<q-args>, "c")
line 580: exe 'command! -bang -nargs=? -range=-1 -complete=customlist,fugitive#LogComplete Gllog :exe fugitive#LogCommand(<line1>,<count>,+"<range>",<bang>0,"<mods>",<q-args>, "l")'
line 580: command! -bang -nargs=? -range=-1 -complete=customlist,fugitive#LogComplete Gllog :exe fugitive#LogCommand(<line1>,<count>,+"<range>",<bang>0,"<mods>",<q-args>, "l")
line 581: exe 'command! -bang -nargs=? -range=-1 -complete=customlist,fugitive#LogComplete GlLog :exe fugitive#LogCommand(<line1>,<count>,+"<range>",<bang>0,"<mods>",<q-args>, "l")'
line 581: command! -bang -nargs=? -range=-1 -complete=customlist,fugitive#LogComplete GlLog :exe fugitive#LogCommand(<line1>,<count>,+"<range>",<bang>0,"<mods>",<q-args>, "l")
line 582: 
line 583: exe 'command! -bar -bang -nargs=*                          -complete=customlist,fugitive#EditComplete   Ge       exe fugitive#Open("edit<bang>", 0, "<mods>", <q-args>)'
line 583: command! -bar -bang -nargs=*                          -complete=customlist,fugitive#EditComplete   Ge       exe fugitive#Open("edit<bang>", 0, "<mods>", <q-args>)
line 584: exe 'command! -bar -bang -nargs=*                          -complete=customlist,fugitive#EditComplete   Gedit    exe fugitive#Open("edit<bang>", 0, "<mods>", <q-args>)'
line 584: command! -bar -bang -nargs=*                          -complete=customlist,fugitive#EditComplete   Gedit    exe fugitive#Open("edit<bang>", 0, "<mods>", <q-args>)
line 585: exe 'command! -bar -bang -nargs=*                          -complete=customlist,fugitive#ReadComplete   Gpedit   exe fugitive#Open("pedit", <bang>0, "<mods>", <q-args>)'
line 585: command! -bar -bang -nargs=*                          -complete=customlist,fugitive#ReadComplete   Gpedit   exe fugitive#Open("pedit", <bang>0, "<mods>", <q-args>)
line 586: exe 'command! -bar -bang -nargs=* -range=-1' s:addr_other '-complete=customlist,fugitive#ReadComplete   Gsplit   exe fugitive#Open((<count> > 0 ? <count> : "").(<count> ? "split" : "edit"), <bang>0, "<mods>", <q-args>)'
line 586: command! -bar -bang -nargs=* -range=-1 -addr=other -complete=customlist,fugitive#ReadComplete   Gsplit   exe fugitive#Open((<count> > 0 ? <count> : "").(<count> ? "split" : "edit"), <bang>0, "<mods>", <q-args>)
line 587: exe 'command! -bar -bang -nargs=* -range=-1' s:addr_other '-complete=customlist,fugitive#ReadComplete   Gvsplit  exe fugitive#Open((<count> > 0 ? <count> : "").(<count> ? "vsplit" : "edit!"), <bang>0, "<mods>", <q-args>)'
line 587: command! -bar -bang -nargs=* -range=-1 -addr=other -complete=customlist,fugitive#ReadComplete   Gvsplit  exe fugitive#Open((<count> > 0 ? <count> : "").(<count> ? "vsplit" : "edit!"), <bang>0, "<mods>", <q-args>)
line 588: exe 'command! -bar -bang -nargs=* -range=-1' s:addr_tabs  '-complete=customlist,fugitive#ReadComplete   Gtabedit exe fugitive#Open((<count> >= 0 ? <count> : "")."tabedit", <bang>0, "<mods>", <q-args>)'
line 588: command! -bar -bang -nargs=* -range=-1 -addr=tabs -complete=customlist,fugitive#ReadComplete   Gtabedit exe fugitive#Open((<count> >= 0 ? <count> : "")."tabedit", <bang>0, "<mods>", <q-args>)
line 589: 
line 590: if exists(':Gr') != 2
line 591:   exe 'command! -bar -bang -nargs=* -range=-1                -complete=customlist,fugitive#ReadComplete   Gr     exe fugitive#ReadCommand(<line1>, <count>, +"<range>", <bang>0, "<mods>", <q-args>)'
line 591: command! -bar -bang -nargs=* -range=-1                -complete=customlist,fugitive#ReadComplete   Gr     exe fugitive#ReadCommand(<line1>, <count>, +"<range>", <bang>0, "<mods>", <q-args>)
line 592: endif
line 593: exe 'command! -bar -bang -nargs=* -range=-1                -complete=customlist,fugitive#ReadComplete   Gread    exe fugitive#ReadCommand(<line1>, <count>, +"<range>", <bang>0, "<mods>", <q-args>)'
line 593: command! -bar -bang -nargs=* -range=-1                -complete=customlist,fugitive#ReadComplete   Gread    exe fugitive#ReadCommand(<line1>, <count>, +"<range>", <bang>0, "<mods>", <q-args>)
line 594: 
line 595: exe 'command! -bar -bang -nargs=* -complete=customlist,fugitive#EditComplete Gdiffsplit  exe fugitive#Diffsplit(1, <bang>0, "<mods>", <q-args>)'
line 595: command! -bar -bang -nargs=* -complete=customlist,fugitive#EditComplete Gdiffsplit  exe fugitive#Diffsplit(1, <bang>0, "<mods>", <q-args>)
line 596: exe 'command! -bar -bang -nargs=* -complete=customlist,fugitive#EditComplete Ghdiffsplit exe fugitive#Diffsplit(0, <bang>0, "<mods>", <q-args>)'
line 596: command! -bar -bang -nargs=* -complete=customlist,fugitive#EditComplete Ghdiffsplit exe fugitive#Diffsplit(0, <bang>0, "<mods>", <q-args>)
line 597: exe 'command! -bar -bang -nargs=* -complete=customlist,fugitive#EditComplete Gvdiffsplit exe fugitive#Diffsplit(0, <bang>0, "vertical <mods>", <q-args>)'
line 597: command! -bar -bang -nargs=* -complete=customlist,fugitive#EditComplete Gvdiffsplit exe fugitive#Diffsplit(0, <bang>0, "vertical <mods>", <q-args>)
line 598: 
line 599: exe 'command! -bar -bang -nargs=* -complete=customlist,fugitive#EditComplete Gw     exe fugitive#WriteCommand(<line1>, <count>, +"<range>", <bang>0, "<mods>", <q-args>)'
line 599: command! -bar -bang -nargs=* -complete=customlist,fugitive#EditComplete Gw     exe fugitive#WriteCommand(<line1>, <count>, +"<range>", <bang>0, "<mods>", <q-args>)
line 600: exe 'command! -bar -bang -nargs=* -complete=customlist,fugitive#EditComplete Gwrite exe fugitive#WriteCommand(<line1>, <count>, +"<range>", <bang>0, "<mods>", <q-args>)'
line 600: command! -bar -bang -nargs=* -complete=customlist,fugitive#EditComplete Gwrite exe fugitive#WriteCommand(<line1>, <count>, +"<range>", <bang>0, "<mods>", <q-args>)
line 601: exe 'command! -bar -bang -nargs=* -complete=customlist,fugitive#EditComplete Gwq    exe fugitive#WqCommand(   <line1>, <count>, +"<range>", <bang>0, "<mods>", <q-args>)'
line 601: command! -bar -bang -nargs=* -complete=customlist,fugitive#EditComplete Gwq    exe fugitive#WqCommand(   <line1>, <count>, +"<range>", <bang>0, "<mods>", <q-args>)
line 602: 
line 603: exe 'command! -bar -bang -nargs=0 GRemove exe fugitive#RemoveCommand(<line1>, <count>, +"<range>", <bang>0, "<mods>", <q-args>)'
line 603: command! -bar -bang -nargs=0 GRemove exe fugitive#RemoveCommand(<line1>, <count>, +"<range>", <bang>0, "<mods>", <q-args>)
line 604: exe 'command! -bar -bang -nargs=0 GUnlink exe fugitive#UnlinkCommand(<line1>, <count>, +"<range>", <bang>0, "<mods>", <q-args>)'
line 604: command! -bar -bang -nargs=0 GUnlink exe fugitive#UnlinkCommand(<line1>, <count>, +"<range>", <bang>0, "<mods>", <q-args>)
line 605: exe 'command! -bar -bang -nargs=0 GDelete exe fugitive#DeleteCommand(<line1>, <count>, +"<range>", <bang>0, "<mods>", <q-args>)'
line 605: command! -bar -bang -nargs=0 GDelete exe fugitive#DeleteCommand(<line1>, <count>, +"<range>", <bang>0, "<mods>", <q-args>)
line 606: exe 'command! -bar -bang -nargs=1 -complete=customlist,fugitive#CompleteObject GMove   exe fugitive#MoveCommand(  <line1>, <count>, +"<range>", <bang>0, "<mods>", <q-args>)'
line 606: command! -bar -bang -nargs=1 -complete=customlist,fugitive#CompleteObject GMove   exe fugitive#MoveCommand(  <line1>, <count>, +"<range>", <bang>0, "<mods>", <q-args>)
line 607: exe 'command! -bar -bang -nargs=1 -complete=customlist,fugitive#RenameComplete GRename exe fugitive#RenameCommand(<line1>, <count>, +"<range>", <bang>0, "<mods>", <q-args>)'
line 607: command! -bar -bang -nargs=1 -complete=customlist,fugitive#RenameComplete GRename exe fugitive#RenameCommand(<line1>, <count>, +"<range>", <bang>0, "<mods>", <q-args>)
line 608: if exists(':Gremove') != 2 && get(g:, 'fugitive_legacy_commands', 0)
line 609:   exe 'command! -bar -bang -nargs=0 Gremove exe fugitive#RemoveCommand(<line1>, <count>, +"<range>", <bang>0, "<mods>", <q-args>)' '|echohl WarningMSG|echomsg ":Gremove is deprecated in favor of :GRemove"|echohl NONE'
line 611: elseif exists(':Gremove') != 2 && !exists('g:fugitive_legacy_commands')
line 612:   exe 'command! -bar -bang -nargs=0 Gremove echoerr ":Gremove has been removed in favor of :GRemove"'
line 612: command! -bar -bang -nargs=0 Gremove echoerr ":Gremove has been removed in favor of :GRemove"
line 613: endif
line 614: if exists(':Gdelete') != 2 && get(g:, 'fugitive_legacy_commands', 0)
line 615:   exe 'command! -bar -bang -nargs=0 Gdelete exe fugitive#DeleteCommand(<line1>, <count>, +"<range>", <bang>0, "<mods>", <q-args>)' '|echohl WarningMSG|echomsg ":Gdelete is deprecated in favor of :GDelete"|echohl NONE'
line 617: elseif exists(':Gdelete') != 2 && !exists('g:fugitive_legacy_commands')
line 618:   exe 'command! -bar -bang -nargs=0 Gdelete echoerr ":Gremove has been removed in favor of :GRemove"'
line 618: command! -bar -bang -nargs=0 Gdelete echoerr ":Gremove has been removed in favor of :GRemove"
line 619: endif
line 620: if exists(':Gmove') != 2 && get(g:, 'fugitive_legacy_commands', 0)
line 621:   exe 'command! -bar -bang -nargs=1 -complete=customlist,fugitive#CompleteObject Gmove   exe fugitive#MoveCommand(  <line1>, <count>, +"<range>", <bang>0, "<mods>", <q-args>)' '|echohl WarningMSG|echomsg ":Gmove is deprecated in favor of :GMove"|echohl NONE'
line 623: elseif exists(':Gmove') != 2 && !exists('g:fugitive_legacy_commands')
line 624:   exe 'command! -bar -bang -nargs=? -complete=customlist,fugitive#CompleteObject Gmove' 'echoerr ":Gmove has been removed in favor of :GMove"'
line 624: command! -bar -bang -nargs=? -complete=customlist,fugitive#CompleteObject Gmove echoerr ":Gmove has been removed in favor of :GMove"
line 626: endif
line 627: if exists(':Grename') != 2 && get(g:, 'fugitive_legacy_commands', 0)
line 628:   exe 'command! -bar -bang -nargs=1 -complete=customlist,fugitive#RenameComplete Grename exe fugitive#RenameCommand(<line1>, <count>, +"<range>", <bang>0, "<mods>", <q-args>)' '|echohl WarningMSG|echomsg ":Grename is deprecated in favor of :GRename"|echohl NONE'
line 630: elseif exists(':Grename') != 2 && !exists('g:fugitive_legacy_commands')
line 631:   exe 'command! -bar -bang -nargs=? -complete=customlist,fugitive#RenameComplete Grename' 'echoerr ":Grename has been removed in favor of :GRename"'
line 631: command! -bar -bang -nargs=? -complete=customlist,fugitive#RenameComplete Grename echoerr ":Grename has been removed in favor of :GRename"
line 633: endif
line 634: 
line 635: exe 'command! -bar -bang -range=-1 -nargs=* -complete=customlist,fugitive#CompleteObject GBrowse exe fugitive#BrowseCommand(<line1>, <count>, +"<range>", <bang>0, "<mods>", <q-args>)'
line 635: command! -bar -bang -range=-1 -nargs=* -complete=customlist,fugitive#CompleteObject GBrowse exe fugitive#BrowseCommand(<line1>, <count>, +"<range>", <bang>0, "<mods>", <q-args>)
line 636: if exists(':Gbrowse') != 2 && get(g:, 'fugitive_legacy_commands', 0)
line 637:   exe 'command! -bar -bang -range=-1 -nargs=* -complete=customlist,fugitive#CompleteObject Gbrowse exe fugitive#BrowseCommand(<line1>, <count>, +"<range>", <bang>0, "<mods>", <q-args>)' '|if <bang>1|redraw!|endif|echohl WarningMSG|echomsg ":Gbrowse is deprecated in favor of :GBrowse"|echohl NONE'
line 639: elseif exists(':Gbrowse') != 2 && !exists('g:fugitive_legacy_commands')
line 640:   exe 'command! -bar -bang -range=-1 -nargs=* -complete=customlist,fugitive#CompleteObject Gbrowse' 'echoerr ":Gbrowse has been removed in favor of :GBrowse"'
line 640: command! -bar -bang -range=-1 -nargs=* -complete=customlist,fugitive#CompleteObject Gbrowse echoerr ":Gbrowse has been removed in favor of :GBrowse"
line 642: endif
line 643: 
line 644: if v:version < 703
line 645:   finish
line 646: endif
line 647: 
line 648: let g:io_fugitive = { 'simplify': function('fugitive#simplify'), 'resolve': function('fugitive#resolve'), 'getftime': function('fugitive#getftime'), 'getfsize': function('fugitive#getfsize'), 'getftype': function('fugitive#getftype'), 'filereadable': function('fugitive#filereadable'), 'filewritable': function('fugitive#filewritable'), 'isdirectory': function('fugitive#isdirectory'), 'getfperm': function('fugitive#getfperm'), 'setfperm': function('fugitive#setfperm'), 'readfile': function('fugitive#readfile'), 'writefile': function('fugitive#writefile'), 'glob': function('fugitive#glob'), 'delete': function('fugitive#delete'), 'Real': function('FugitiveReal')}
line 664: 
line 665: augroup fugitive
line 666:   autocmd!
line 667: 
line 668:   autocmd BufNewFile,BufReadPost *  call FugitiveDetect(+expand('<abuf>'), 0)
line 669:   autocmd FileType           netrw  call FugitiveDetect(+expand('<abuf>'), 0)
line 670: 
line 671:   autocmd FileType git call fugitive#MapCfile()
line 673:   autocmd FileType gitcommit call fugitive#MapCfile('fugitive#MessageCfile()')
line 675:   autocmd FileType git,gitcommit if &foldtext ==# 'foldtext()' |    setlocal foldtext=fugitive#Foldtext() | endif
line 679:   autocmd FileType fugitive call fugitive#MapCfile('fugitive#PorcelainCfile()')
line 681:   autocmd FileType gitrebase let &l:include = '^\%(pick\|squash\|edit\|reword\|fixup\|drop\|[pserfd]\)\>' | if &l:includeexpr !~# 'Fugitive' |   let &l:includeexpr = 'v:fname =~# ''^\x\{4,\}$'' && len(FugitiveGitDir()) ? FugitiveFind(v:fname) : ' .     (len(&l:includeexpr) ? &l:includeexpr : 'v:fname') | endif | let b:undo_ftplugin = get(b:, 'undo_ftplugin', 'exe') . '|setl inex= inc='
line 688: 
line 689:   autocmd BufReadCmd index{,.lock} nested if FugitiveIsGitDir(expand('<amatch>:p:h')) |   let b:git_dir = s:Slash(expand('<amatch>:p:h')) |   exe fugitive#BufReadStatus(v:cmdbang) | elseif filereadable(expand('<amatch>')) |   silent doautocmd BufReadPre |   keepalt noautocmd read <amatch> |   silent 1delete_ |   silent doautocmd BufReadPost | else |   silent doautocmd BufNewFile | endif
line 701: 
line 702:   autocmd BufReadCmd   fugitive://*//*       nested exe fugitive#BufReadCmd() | if &path =~# '^\.\%(,\|$\)' |   let &l:path = substitute(&path, '^\.,\=', '', '') | endif
line 706:   autocmd BufWriteCmd  fugitive://*//[0-3]/* nested exe fugitive#BufWriteCmd()
line 707:   autocmd FileReadCmd  fugitive://*//*       nested exe fugitive#FileReadCmd()
line 708:   autocmd FileWriteCmd fugitive://*//[0-3]/* nested exe fugitive#FileWriteCmd()
line 709:   if exists('##SourceCmd')
line 710:     autocmd SourceCmd     fugitive://*//*    nested exe fugitive#SourceCmd()
line 711:   endif
line 712: 
line 713:   autocmd User Flags call Hoist('buffer', function('FugitiveStatusline'))
line 714: 
line 715:   autocmd User ProjectionistDetect call s:ProjectionistDetect()
line 716: augroup END
line 717: 
line 718: if get(g:, 'fugitive_no_maps')
line 719:   finish
line 720: endif
line 721: 
line 722: let s:nowait = v:version >= 704 ? '<nowait>' : ''
line 723: 
line 724: function! s:Map(mode, lhs, rhs, flags) abort
line 746: 
line 747: call s:Map('c', '<C-R><C-G>', 'fnameescape(fugitive#Object(@%))', '<expr>')
calling function <SNR>64_Map('c', '<C-R><C-G>', 'fnameescape(fugitive#Object(@%))', '<expr>')

line 1:   let flags = a:flags . (a:rhs =~# '<Plug>' ? '' : '<script>')
line 2:   let head = a:lhs
line 3:   let tail = ''
line 4:   let keys = get(g:, a:mode.'remap', {})
line 5:   if len(keys) && type(keys) == type({})
line 6:     while !empty(head)
line 7:       if has_key(keys, head)
line 8:         let head = keys[head]
line 9:         if empty(head)
line 10:           return
line 11:         endif
line 12:         break
line 13:       endif
line 14:       let tail = matchstr(head, '<[^<>]*>$\|.$') . tail
line 15:       let head = substitute(head, '<[^<>]*>$\|.$', '', '')
line 16:     endwhile
line 17:   endif
line 18:   if empty(mapcheck(head.tail, a:mode))
line 19:     exe a:mode.'map' s:nowait flags head.tail a:rhs
line 20:   endif
function <SNR>64_Map returning #0

continuing in /Users/ablanken/.local/share/nvim/site/pack/packer/start/vim-fugitive/plugin/fugitive.vim

line 748: call s:Map('n', 'y<C-G>', ':<C-U>call setreg(v:register, fugitive#Object(@%))<CR>', '<silent>')
calling function <SNR>64_Map('n', 'y<C-G>', ':<C-U>call setreg(v:register, fugitive#Object(@%))<CR>', '<silent>')

line 1:   let flags = a:flags . (a:rhs =~# '<Plug>' ? '' : '<script>')
line 2:   let head = a:lhs
line 3:   let tail = ''
line 4:   let keys = get(g:, a:mode.'remap', {})
line 5:   if len(keys) && type(keys) == type({})
line 6:     while !empty(head)
line 7:       if has_key(keys, head)
line 8:         let head = keys[head]
line 9:         if empty(head)
line 10:           return
line 11:         endif
line 12:         break
line 13:       endif
line 14:       let tail = matchstr(head, '<[^<>]*>$\|.$') . tail
line 15:       let head = substitute(head, '<[^<>]*>$\|.$', '', '')
line 16:     endwhile
line 17:   endif
line 18:   if empty(mapcheck(head.tail, a:mode))
line 19:     exe a:mode.'map' s:nowait flags head.tail a:rhs
line 19: nmap <nowait> <silent><script> y<C-G> :<C-U>call setreg(v:register, fugitive#Object(@%))<CR>
line 20:   endif
function <SNR>64_Map returning #0

continuing in /Users/ablanken/.local/share/nvim/site/pack/packer/start/vim-fugitive/plugin/fugitive.vim

line 749: nmap <script><silent> <Plug>fugitive:y<C-G> :<C-U>call setreg(v:register, fugitive#Object(@%))<CR>
line 750: nmap <script> <Plug>fugitive: <Nop>
finished sourcing /Users/ablanken/.local/share/nvim/site/pack/packer/start/vim-fugitive/plugin/fugitive.vim
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/vim-polyglot/plugin)
chdir(/Users/ablanken/Sync/src/neovim-conf)
sourcing "/Users/ablanken/.local/share/nvim/site/pack/packer/start/vim-polyglot/plugin/polyglot.vim"
line 1: call polyglot#init#init()
calling function polyglot#init#init()

line 1:   " A no-op as sourcing this file is enough
function polyglot#init#init returning #0

continuing in /Users/ablanken/.local/share/nvim/site/pack/packer/start/vim-polyglot/plugin/polyglot.vim

line 2: 
line 3: " Turn on filetype plugins (:help filetype-plugin).
line 4: if has('autocmd') && !(exists("did_load_filetypes") && exists("did_indent_on"))
line 5:   filetype plugin indent on
line 6: endif
line 7: 
line 8: " Enable syntax highlighting.
line 9: if has('syntax') && !exists('g:syntax_on')
line 10:   syntax enable
line 11: endif
line 12: 
line 13: " No need to duplicate work
line 14: if exists('g:loaded_sensible')
line 15:   finish
line 16: endif
line 17: 
line 18: " Code taken from https://github.com/tpope/vim-sensible
line 19: " and (mostly comments) from https://github.com/sheerun/vimrc
line 20: "
line 21: " Only settings that matter for proper editing are left
line 22: if !has_key(g:polyglot_is_disabled, 'sensible')
line 23:   " Allow backspace in insert mode.
line 24:   if &backspace == ""
line 25:     set backspace=indent,eol,start
line 26:   endif
line 27: 
line 28:   " Allow for mappings including `Esc`, while preserving
line 29:   " zero timeout after pressing it manually.
line 30:   " (only vim needs a fix for this)
line 31:   if !has('nvim') && &ttimeoutlen == -1
line 32:     set ttimeout
line 33:     set ttimeoutlen=100
line 34:   endif
line 35: 
line 36:   " Set default whitespace characters when using `:set list`
line 37:   if &listchars ==# 'eol:$'
line 38:     set listchars=tab:>\ ,trail:-,extends:>,precedes:<,nbsp:+
line 39:   endif
line 40: 
line 41:   " Delete comment character when joining commented lines
line 42:   if v:version > 703 || v:version == 703 && has("patch541")
line 43:     set formatoptions+=j
line 44:   endif
line 45: 
line 46:   " Search upwards for tags file instead only locally
line 47:   if has('path_extra')
line 48:     setglobal tags-=./tags tags-=./tags; tags^=./tags;
line 49:   endif
line 50: 
line 51:   " Fix issues with fish shell
line 52:   " https://github.com/tpope/vim-sensible/issues/50
line 53:   if &shell =~# 'fish$' && (v:version < 704 || v:version == 704 && !has('patch276'))
line 54:     set shell=/usr/bin/env\ bash
line 55:   endif
line 56: 
line 57:   " Increase history size to 1000 items.
line 58:   if &history < 1000
line 59:     set history=1000
line 60:   endif
line 61: 
line 62:   " Allow for up to 50 opened tabs on Vim start.
line 63:   if &tabpagemax < 50
line 64:     set tabpagemax=50
line 65:   endif
line 66: 
line 67:   " Reduce updatetime from 4000 to 300 to avoid issues with coc.nvim
line 68:   if &updatetime == 4000
line 69:     set updatetime=300
line 70:   endif
line 71: 
line 72:   " Automatically reload file if changed somewhere else
line 73:   redir => capture
line 74:   silent autocmd CursorHold
--- Autocommands ---
polyglot-sensible  CursorHold
    *         silent! checktime
	Last set from ~/.local/share/nvim/site/pack/packer/start/vim-polyglot/plugin/polyglot.vim line 79
coc_nvim  CursorHold
    *         call coc#float#check_related()
	Last set from ~/.local/share/nvim/site/pack/packer/start/coc.nvim/plugin/coc.vim line 327
              call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')], coc#util#suggest_variables(bufnr('%')))
	Last set from ~/.local/share/nvim/site/pack/packer/start/coc.nvim/plugin/coc.vim line 353
line 75:   redir END
line 76:   if match(capture, 'checktime') == -1
line 77:     augroup polyglot-sensible
line 78:       au!
line 79:       au CursorHold * silent! checktime
line 80:     augroup END
line 81:   endif
line 82: 
line 83:   " Always save upper case variables to viminfo file.
line 84:   if !empty(&viminfo)
line 85:     set viminfo^=!
line 86:   endif
line 87: 
line 88:   " Don't save options in sessions and views
line 89:   set sessionoptions-=options
line 90:   set viewoptions-=options
line 91: 
line 92:   " Allow color schemes to do bright colors without forcing bold.
line 93:   if &t_Co == 8 && $TERM !~# '^Eterm'
line 94:     set t_Co=16
line 95:   endif
line 96: 
line 97:   " Load matchit.vim, but only if the user hasn't installed a newer version.
line 98:   if !exists('g:loaded_matchit') && findfile('plugin/matchit.vim', &rtp) ==# ''
line 99:     runtime! macros/matchit.vim
line 100:   endif
line 101: 
line 102:   " `Ctrl-U` in insert mode deletes a lot. Use `Ctrl-G` u to first break undo,
line 103:   " so that you can undo `Ctrl-U` without undoing what you typed before it.
line 104:   if empty(mapcheck('<C-U>', 'i'))
line 105:     inoremap <C-U> <C-G>u<C-U>
line 106:   endif
line 107: 
line 108:   if empty(mapcheck('<C-W>', 'i'))
line 109:     inoremap <C-W> <C-G>u<C-W>
line 110:   endif
line 111: endif
finished sourcing /Users/ablanken/.local/share/nvim/site/pack/packer/start/vim-polyglot/plugin/polyglot.vim
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/vim-rooter/plugin)
chdir(/Users/ablanken/Sync/src/neovim-conf)
sourcing "/Users/ablanken/.local/share/nvim/site/pack/packer/start/vim-rooter/plugin/rooter.vim"
line 1: " Vim plugin to change the working directory to the project root.
line 2: "
line 3: " Copyright 2010-2020 Andrew Stewart, <boss@airbladesoftware.com>
line 4: " Released under the MIT licence.
line 5: 
line 6: if exists('g:loaded_rooter') || &cp
line 7:   finish
line 8: endif
line 9: let g:loaded_rooter = 1
line 10: 
line 11: let s:nomodeline = (v:version > 703 || (v:version == 703 && has('patch442'))) ? '<nomodeline>' : ''
line 12: 
line 13: if !exists('g:rooter_manual_only')
line 14:   let g:rooter_manual_only = 0
line 15: endif
line 16: 
line 17: if exists('+autochdir') && &autochdir && !g:rooter_manual_only
line 18:   set noautochdir
line 19: endif
line 20: 
line 21: if exists('g:rooter_use_lcd')
line 22:   echoerr 'vim-rooter: please replace g:rooter_use_lcd=1 with g:rooter_cd_cmd="lcd"'
line 23:   let g:rooter_cd_cmd = 'lcd'
line 24: endif
line 25: 
line 26: if !exists('g:rooter_cd_cmd')
line 27:   let g:rooter_cd_cmd = 'cd'
line 28: endif
line 29: 
line 30: if !exists('g:rooter_patterns')
line 31:   let g:rooter_patterns = ['.git', '_darcs', '.hg', '.bzr', '.svn', 'Makefile', 'package.json']
line 32: endif
line 33: 
line 34: if !exists('g:rooter_targets')
line 35:   let g:rooter_targets = '/,*'
line 36: endif
line 37: 
line 38: if !exists('g:rooter_change_directory_for_non_project_files')
line 39:   let g:rooter_change_directory_for_non_project_files = ''
line 40: endif
line 41: 
line 42: if !exists('g:rooter_silent_chdir')
line 43:   let g:rooter_silent_chdir = 0
line 44: endif
line 45: 
line 46: if !exists('g:rooter_resolve_links')
line 47:   let g:rooter_resolve_links = 0
line 48: endif
line 49: 
line 50: 
line 51: " For third-parties.  Not used by plugin.
line 52: function! FindRootDirectory()
line 55: 
line 56: 
line 57: command! -bar Rooter call <SID>rooter()
line 58: command! -bar RooterToggle call <SID>toggle()
line 59: 
line 60: 
line 61: augroup rooter
line 62:   autocmd!
line 63:   autocmd VimEnter,BufReadPost,BufEnter * nested if !g:rooter_manual_only | Rooter | endif
line 64:   autocmd BufWritePost * nested if !g:rooter_manual_only | call setbufvar('%', 'rootDir', '') | Rooter | endif
line 65: augroup END
line 66: 
line 67: 
line 68: function! s:rooter()
line 84: 
line 85: 
line 86: " Returns true if we should change to the buffer's root directory, false otherwise.
line 87: function! s:activate()
line 114: 
line 115: 
line 116: " Returns the root directory or an empty string if no root directory found.
line 117: function! s:root()
line 143: 
line 144: 
line 145: function s:match(dir, pattern)
line 156: 
line 157: 
line 158: " Returns true if dir is identifier, false otherwise.
line 159: "
line 160: " dir        - full path to a directory
line 161: " identifier - a directory name
line 162: function! s:is(dir, identifier)
line 166: 
line 167: 
line 168: " Returns true if dir contains identifier, false otherwise.
line 169: "
line 170: " dir        - full path to a directory
line 171: " identifier - a file name or a directory name; may be a glob
line 172: function! s:has(dir, identifier)
line 179: 
line 180: 
line 181: " Returns true if identifier is an ancestor of dir,
line 182: " i.e. dir is a subdirectory (no matter how many levels) of identifier;
line 183: " false otherwise.
line 184: "
line 185: " dir        - full path to a directory
line 186: " identifier - a directory name
line 187: function! s:sub(dir, identifier)
line 196: 
line 197: " Return true if identifier is a direct ancestor (parent) of dir,
line 198: " i.e. dir is a direct subdirectory (child) of identifier; false otherwise
line 199: "
line 200: " dir        - full path to a directory
line 201: " identifier - a directory name
line 202: function! s:child(dir, identifier)
line 206: 
line 207: " Returns full path of directory of current file name (which may be a directory).
line 208: function! s:current()
line 215: 
line 216: 
line 217: " Returns full path of dir's parent directory.
line 218: function! s:parent(dir)
line 221: 
line 222: 
line 223: " Changes to the given directory unless it is already the current one.
line 224: function! s:cd(dir)
line 232: 
line 233: 
line 234: function! s:rootless()
line 243: 
line 244: 
line 245: function! s:toggle()
line 249: 
line 250: 
line 251: " vim:set ft=vim sw=2 sts=2 et:
finished sourcing /Users/ablanken/.local/share/nvim/site/pack/packer/start/vim-rooter/plugin/rooter.vim
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/which-key.nvim/plugin)
chdir(/Users/ablanken/Sync/src/neovim-conf)
sourcing "/Users/ablanken/.local/share/nvim/site/pack/packer/start/which-key.nvim/plugin/which-key.vim"
line 1: command! -nargs=* WhichKey lua require('which-key').show_command(<f-args>)
finished sourcing /Users/ablanken/.local/share/nvim/site/pack/packer/start/which-key.nvim/plugin/which-key.vim
Searching for "/usr/local/share/nvim/site/pack/*/start/*"
Searching for "/usr/share/nvim/site/pack/*/start/*"
Searching for "/Users/ablanken/.local/nvim-brew/Cellar/neovim/0.7.0/share/nvim/runtime/pack/*/start/*"
Searching for "/Users/ablanken/.local/nvim-brew/Cellar/neovim/0.7.0/lib/nvim/pack/*/start/*"
Searching for "/usr/share/nvim/site/after/pack/*/start/*"
Searching for "/usr/local/share/nvim/site/after/pack/*/start/*"
Searching for "/Users/ablanken/.local/share/nvim/site/after/pack/*/start/*"
Searching for "/etc/xdg/nvim/after/pack/*/start/*"
Searching for "/Users/ablanken/.config/nvim/after/pack/*/start/*"
Searching for "start/*" in "/Users/ablanken/.config/nvim,/etc/xdg/nvim,/Users/ablanken/.local/share/nvim/site,/usr/local/share/nvim/site,/usr/share/nvim/site,/Users/ablanken/.local/nvim-brew/Cellar/neovim/0.7.0/share/nvim/runtime,/Users/ablanken/.local/nvim-brew/Cellar/neovim/0.7.0/lib/nvim,/usr/share/nvim/site/after,/usr/local/share/nvim/site/after,/Users/ablanken/.local/share/nvim/site/after,/etc/xdg/nvim/after,/Users/ablanken/.config/nvim/after"
Searching for "/Users/ablanken/.config/nvim/start/*"
Searching for "/etc/xdg/nvim/start/*"
Searching for "/Users/ablanken/.local/share/nvim/site/start/*"
Searching for "/usr/local/share/nvim/site/start/*"
Searching for "/usr/share/nvim/site/start/*"
Searching for "/Users/ablanken/.local/nvim-brew/Cellar/neovim/0.7.0/share/nvim/runtime/start/*"
Searching for "/Users/ablanken/.local/nvim-brew/Cellar/neovim/0.7.0/lib/nvim/start/*"
Searching for "/usr/share/nvim/site/after/start/*"
Searching for "/usr/local/share/nvim/site/after/start/*"
Searching for "/Users/ablanken/.local/share/nvim/site/after/start/*"
Searching for "/etc/xdg/nvim/after/start/*"
Searching for "/Users/ablanken/.config/nvim/after/start/*"
not found in 'packpath': "start/*"
Searching for "plugin/**/*.vim" in runtime path
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/Comment.nvim/after/plugin/**/*.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/vim-polyglot/after/plugin/**/*.vim"
not found in runtime path: "plugin/**/*.vim"
Searching for "plugin/**/*.lua" in runtime path
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/Comment.nvim/after/plugin/**/*.lua"
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/Comment.nvim/after/plugin)
chdir(/Users/ablanken/Sync/src/neovim-conf)
sourcing "/Users/ablanken/.local/share/nvim/site/pack/packer/start/Comment.nvim/after/plugin/Comment.lua"
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/Comment.nvim/after/plugin)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/Comment.nvim/after/plugin)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/Comment.nvim/after/plugin)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/Comment.nvim/after/plugin)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/Comment.nvim/after/plugin)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/Comment.nvim/after/plugin)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/Comment.nvim/after/plugin)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/Comment.nvim/after/plugin)
chdir(/Users/ablanken/Sync/src/neovim-conf)
finished sourcing /Users/ablanken/.local/share/nvim/site/pack/packer/start/Comment.nvim/after/plugin/Comment.lua
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/vim-polyglot/after/plugin/**/*.lua"
Reading ShaDa file "/Users/ablanken/.local/share/nvim/shada/main.shada" info marks oldfiles
Executing BufWinEnter Autocommands for "*"
autocommand if &ft == "" && expand("<afile>:e") == "" | call s:Observe() | endif

Executing: if &ft == "" && expand("<afile>:e") == "" | call s:Observe() | endif
Executing:  call s:Observe() | endif
calling function <SNR>15_Observe()

line 1:   augroup polyglot-observer
line 2:     au!
line 3:     au CursorHold,CursorHoldI <buffer> if (&ft == "" || &ft == "conf") | call s:PolyglotObserve(s:detect_func) | endif
line 4:   augroup END
function <SNR>15_Observe returning #0

continuing in BufWinEnter Autocommands for "*"

Executing:  endif
Executing BufWinEnter Autocommands for "*"
autocommand call s:Autocmd('BufWinEnter', +expand('<abuf>'), win_getid())

Executing: call s:Autocmd('BufWinEnter', +expand('<abuf>'), win_getid())
calling function <SNR>44_Autocmd('BufWinEnter', 1, 1000)

line 1:   if !get(g:, 'coc_workspace_initialized', 0)
line 2:     return
function <SNR>44_Autocmd returning #0

continuing in BufWinEnter Autocommands for "*"

Executing BufWinEnter Autocommands for "*"
autocommand IndentBlanklineRefresh

Executing: IndentBlanklineRefresh
Executing: call s:try('lua require("indent_blankline.commands").refresh("" == "!")')
calling function <SNR>54_try('lua require("indent_blankline.commands").refresh("" == "!")')

line 1:     try
line 2:         execute a:cmd
line 2: lua require("indent_blankline.commands").refresh("" == "!")
line 3:     catch /E12/
line 4:         return
line 5:     endtry
function <SNR>54_try returning #0

continuing in BufWinEnter Autocommands for "*"

Executing BufEnter Autocommands for "*"
autocommand lua require'lualine.components.branch.git_branch'.find_git_dir()

Executing: lua require'lualine.components.branch.git_branch'.find_git_dir()
autocommand lua require'lualine.components.diff.git_diff'.update_diff_args()

Executing: lua require'lualine.components.diff.git_diff'.update_diff_args()
Executing BufEnter Autocommands for "*"
autocommand call s:detect_indent()

Executing: call s:detect_indent()
calling function <SNR>15_detect_indent()

line 1:     if &buftype ==# 'help'
line 2:       return
line 3:     endif
line 4: 
line 5:     " Do not autodetect indent if language or user sets it
line 6:     if &l:shiftwidth != s:default_shiftwidth
line 7:       return
line 8:     endif
line 9: 
line 10:     let b:sleuth_culprit = expand("<afile>:p")
line 11:     if s:guess(getline(1, 128))
calling function <SNR>15_detect_indent[11]..<SNR>15_guess([''])

line 1:     let options = {}
line 2:     let ccomment = 0
line 3:     let podcomment = 0
line 4:     let triplequote = 0
line 5:     let backtick = 0
line 6:     let xmlcomment = 0
line 7:     let heredoc = ''
line 8:     let minindent = 10
line 9:     let spaces_minus_tabs = 0
line 10:     let lineno = 0
line 11:     let stack = [0]
line 12:     let indents = { '2': 0, '3': 0, '4': 0, '6': 0, '8': 0 }
line 13: 
line 14:     for line in a:lines
line 15:       let lineno += 1
line 16: 
line 17:       if line =~# '^\s*$'
line 18:         continue
line 14:     for line in a:lines
line 15:       let lineno += 1
line 16: 
line 17:       if line =~# '^\s*$'
line 18:         continue
line 19:       endif
line 20: 
line 21:       if line =~# '^\s*/\*'
line 22:         let ccomment = 1
line 23:       endif
line 24:       if ccomment
line 25:         if line =~# '\*/'
line 26:           let ccomment = 0
line 27:         endif
line 28:         continue
line 29:       endif
line 30: 
line 31:       if line =~# '^=\w'
line 32:         let podcomment = 1
line 33:       endif
line 34:       if podcomment
line 35:         if line =~# '^=\%(end\|cut\)\>'
line 36:           let podcomment = 0
line 37:         endif
line 38:         continue
line 39:       endif
line 40: 
line 41:       if triplequote
line 42:         if line =~# '^[^"]*"""[^"]*$'
line 43:           let triplequote = 0
line 44:         endif
line 45:         continue
line 46:       elseif line =~# '^[^"]*"""[^"]*$'
line 47:         let triplequote = 1
line 48:       endif
line 49: 
line 50:       if backtick
line 51:         if line =~# '^[^`]*`[^`]*$'
line 52:           let backtick = 0
line 53:         endif
line 54:         continue
line 55:       elseif &filetype ==# 'go' && line =~# '^[^`]*`[^`]*$'
line 56:         let backtick = 1
line 57:       endif
line 58: 
line 59:       if line =~# '^\s*<\!--'
line 60:         let xmlcomment = 1
line 61:       endif
line 62:       if xmlcomment
line 63:         if line =~# '-->'
line 64:           let xmlcomment = 0
line 65:         endif
line 66:         continue
line 67:       endif
line 68: 
line 69:       " This is correct order because both "<<EOF" and "EOF" matches end
line 70:       if heredoc != ''
line 71:         if line =~# heredoc
line 72:           let heredoc = ''
line 73:         endif
line 74:         continue
line 75:       endif
line 76:       let herematch = matchlist(line, '\C<<\W*\([A-Z]\+\)\s*$')
line 77:       if len(herematch) > 0
line 78:         let heredoc = herematch[1] . '$'
line 79:       endif
line 80: 
line 81:       if line[0] == "\t"
line 82:         let spaces_minus_tabs -= 1
line 83:       else
line 84:         if line[0] == " "
line 85:           let spaces_minus_tabs += 1
line 86:         endif
line 87:         let indent = len(matchstr(line, '^ *'))
line 88:         while stack[-1] > indent
line 89:           call remove(stack, -1)
line 90:         endwhile
line 91: 
line 92:         let indent_inc = indent - stack[-1]
line 93: 
line 94:         if indent_inc == 0 && len(stack) > 1
line 95:           let indent_inc = indent - stack[-2]
line 96:         endif
line 97: 
line 98:         if has_key(indents, indent_inc)
line 99:           let indents[indent_inc] += 1
line 100:           let prev_indent = indent
line 101:         endif
line 102: 
line 103:         if stack[-1] != indent
line 104:           call add(stack, indent)
line 105:         endif
line 106:       endif
line 107:     endfor
line 108: 
line 109:     if spaces_minus_tabs < 0
line 110:       setlocal noexpandtab
line 111:       let &l:shiftwidth=&tabstop
line 112:       return 1
line 113:     endif
line 114: 
line 115:     let shiftwidth = s:get_shiftwidth(indents)
calling function <SNR>15_detect_indent[11]..<SNR>15_guess[115]..<SNR>15_get_shiftwidth({'2': 0, '3': 0, '4': 0, '6': 0, '8': 0})

line 1:     let shiftwidth = 0
line 2:     let max_count = 0
line 3:     let final_counts = {}
line 4:     for [indent, indent_count] in items(a:indents)
line 5:       let indent_count = indent_count * 1.5
line 6:       for [indent2, indent2_count] in items(a:indents)
line 7:         if indent2 > indent && indent2 % indent == 0
line 8:           let indent_count = indent_count + indent2_count
line 9:         endif
line 10:       endfor
line 6:       for [indent2, indent2_count] in items(a:indents)
line 7:         if indent2 > indent && indent2 % indent == 0
line 8:           let indent_count = indent_count + indent2_count
line 9:         endif
line 10:       endfor
line 6:       for [indent2, indent2_count] in items(a:indents)
line 7:         if indent2 > indent && indent2 % indent == 0
line 8:           let indent_count = indent_count + indent2_count
line 9:         endif
line 10:       endfor
line 6:       for [indent2, indent2_count] in items(a:indents)
line 7:         if indent2 > indent && indent2 % indent == 0
line 8:           let indent_count = indent_count + indent2_count
line 9:         endif
line 10:       endfor
line 6:       for [indent2, indent2_count] in items(a:indents)
line 7:         if indent2 > indent && indent2 % indent == 0
line 8:           let indent_count = indent_count + indent2_count
line 9:         endif
line 10:       endfor
line 6:       for [indent2, indent2_count] in items(a:indents)
line 7:         if indent2 > indent && indent2 % indent == 0
line 8:           let indent_count = indent_count + indent2_count
line 9:         endif
line 10:       endfor
line 11:       let final_counts[indent] = indent_count
line 12:     endfor
line 4:     for [indent, indent_count] in items(a:indents)
line 5:       let indent_count = indent_count * 1.5
line 6:       for [indent2, indent2_count] in items(a:indents)
line 7:         if indent2 > indent && indent2 % indent == 0
line 8:           let indent_count = indent_count + indent2_count
line 9:         endif
line 10:       endfor
line 6:       for [indent2, indent2_count] in items(a:indents)
line 7:         if indent2 > indent && indent2 % indent == 0
line 8:           let indent_count = indent_count + indent2_count
line 9:         endif
line 10:       endfor
line 6:       for [indent2, indent2_count] in items(a:indents)
line 7:         if indent2 > indent && indent2 % indent == 0
line 8:           let indent_count = indent_count + indent2_count
line 9:         endif
line 10:       endfor
line 6:       for [indent2, indent2_count] in items(a:indents)
line 7:         if indent2 > indent && indent2 % indent == 0
line 8:           let indent_count = indent_count + indent2_count
line 9:         endif
line 10:       endfor
line 6:       for [indent2, indent2_count] in items(a:indents)
line 7:         if indent2 > indent && indent2 % indent == 0
line 8:           let indent_count = indent_count + indent2_count
line 9:         endif
line 10:       endfor
line 6:       for [indent2, indent2_count] in items(a:indents)
line 7:         if indent2 > indent && indent2 % indent == 0
line 8:           let indent_count = indent_count + indent2_count
line 9:         endif
line 10:       endfor
line 11:       let final_counts[indent] = indent_count
line 12:     endfor
line 4:     for [indent, indent_count] in items(a:indents)
line 5:       let indent_count = indent_count * 1.5
line 6:       for [indent2, indent2_count] in items(a:indents)
line 7:         if indent2 > indent && indent2 % indent == 0
line 8:           let indent_count = indent_count + indent2_count
line 9:         endif
line 10:       endfor
line 6:       for [indent2, indent2_count] in items(a:indents)
line 7:         if indent2 > indent && indent2 % indent == 0
line 8:           let indent_count = indent_count + indent2_count
line 9:         endif
line 10:       endfor
line 6:       for [indent2, indent2_count] in items(a:indents)
line 7:         if indent2 > indent && indent2 % indent == 0
line 8:           let indent_count = indent_count + indent2_count
line 9:         endif
line 10:       endfor
line 6:       for [indent2, indent2_count] in items(a:indents)
line 7:         if indent2 > indent && indent2 % indent == 0
line 8:           let indent_count = indent_count + indent2_count
line 9:         endif
line 10:       endfor
line 6:       for [indent2, indent2_count] in items(a:indents)
line 7:         if indent2 > indent && indent2 % indent == 0
line 8:           let indent_count = indent_count + indent2_count
line 9:         endif
line 10:       endfor
line 6:       for [indent2, indent2_count] in items(a:indents)
line 7:         if indent2 > indent && indent2 % indent == 0
line 8:           let indent_count = indent_count + indent2_count
line 9:         endif
line 10:       endfor
line 11:       let final_counts[indent] = indent_count
line 12:     endfor
line 4:     for [indent, indent_count] in items(a:indents)
line 5:       let indent_count = indent_count * 1.5
line 6:       for [indent2, indent2_count] in items(a:indents)
line 7:         if indent2 > indent && indent2 % indent == 0
line 8:           let indent_count = indent_count + indent2_count
line 9:         endif
line 10:       endfor
line 6:       for [indent2, indent2_count] in items(a:indents)
line 7:         if indent2 > indent && indent2 % indent == 0
line 8:           let indent_count = indent_count + indent2_count
line 9:         endif
line 10:       endfor
line 6:       for [indent2, indent2_count] in items(a:indents)
line 7:         if indent2 > indent && indent2 % indent == 0
line 8:           let indent_count = indent_count + indent2_count
line 9:         endif
line 10:       endfor
line 6:       for [indent2, indent2_count] in items(a:indents)
line 7:         if indent2 > indent && indent2 % indent == 0
line 8:           let indent_count = indent_count + indent2_count
line 9:         endif
line 10:       endfor
line 6:       for [indent2, indent2_count] in items(a:indents)
line 7:         if indent2 > indent && indent2 % indent == 0
line 8:           let indent_count = indent_count + indent2_count
line 9:         endif
line 10:       endfor
line 6:       for [indent2, indent2_count] in items(a:indents)
line 7:         if indent2 > indent && indent2 % indent == 0
line 8:           let indent_count = indent_count + indent2_count
line 9:         endif
line 10:       endfor
line 11:       let final_counts[indent] = indent_count
line 12:     endfor
line 4:     for [indent, indent_count] in items(a:indents)
line 5:       let indent_count = indent_count * 1.5
line 6:       for [indent2, indent2_count] in items(a:indents)
line 7:         if indent2 > indent && indent2 % indent == 0
line 8:           let indent_count = indent_count + indent2_count
line 9:         endif
line 10:       endfor
line 6:       for [indent2, indent2_count] in items(a:indents)
line 7:         if indent2 > indent && indent2 % indent == 0
line 8:           let indent_count = indent_count + indent2_count
line 9:         endif
line 10:       endfor
line 6:       for [indent2, indent2_count] in items(a:indents)
line 7:         if indent2 > indent && indent2 % indent == 0
line 8:           let indent_count = indent_count + indent2_count
line 9:         endif
line 10:       endfor
line 6:       for [indent2, indent2_count] in items(a:indents)
line 7:         if indent2 > indent && indent2 % indent == 0
line 8:           let indent_count = indent_count + indent2_count
line 9:         endif
line 10:       endfor
line 6:       for [indent2, indent2_count] in items(a:indents)
line 7:         if indent2 > indent && indent2 % indent == 0
line 8:           let indent_count = indent_count + indent2_count
line 9:         endif
line 10:       endfor
line 6:       for [indent2, indent2_count] in items(a:indents)
line 7:         if indent2 > indent && indent2 % indent == 0
line 8:           let indent_count = indent_count + indent2_count
line 9:         endif
line 10:       endfor
line 11:       let final_counts[indent] = indent_count
line 12:     endfor
line 4:     for [indent, indent_count] in items(a:indents)
line 5:       let indent_count = indent_count * 1.5
line 6:       for [indent2, indent2_count] in items(a:indents)
line 7:         if indent2 > indent && indent2 % indent == 0
line 8:           let indent_count = indent_count + indent2_count
line 9:         endif
line 10:       endfor
line 11:       let final_counts[indent] = indent_count
line 12:     endfor
line 13:     for [indent, final_count] in items(final_counts)
line 14:       if final_count > max_count
line 15:         let shiftwidth = indent
line 16:         let max_count = final_count
line 17:       endif
line 18:     endfor
line 13:     for [indent, final_count] in items(final_counts)
line 14:       if final_count > max_count
line 15:         let shiftwidth = indent
line 16:         let max_count = final_count
line 17:       endif
line 18:     endfor
line 13:     for [indent, final_count] in items(final_counts)
line 14:       if final_count > max_count
line 15:         let shiftwidth = indent
line 16:         let max_count = final_count
line 17:       endif
line 18:     endfor
line 13:     for [indent, final_count] in items(final_counts)
line 14:       if final_count > max_count
line 15:         let shiftwidth = indent
line 16:         let max_count = final_count
line 17:       endif
line 18:     endfor
line 13:     for [indent, final_count] in items(final_counts)
line 14:       if final_count > max_count
line 15:         let shiftwidth = indent
line 16:         let max_count = final_count
line 17:       endif
line 18:     endfor
line 13:     for [indent, final_count] in items(final_counts)
line 14:       if final_count > max_count
line 15:         let shiftwidth = indent
line 16:         let max_count = final_count
line 17:       endif
line 18:     endfor
line 19:     return shiftwidth
function <SNR>15_detect_indent[11]..<SNR>15_guess[115]..<SNR>15_get_shiftwidth returning #0

continuing in function <SNR>15_detect_indent[11]..<SNR>15_guess

line 116: 
line 117:     if shiftwidth > 0
line 118:       setlocal expandtab
line 119:       let &l:shiftwidth=shiftwidth
line 120:       try
line 121:         " Sunchronize tabstop with shiftwidth
line 122:         let &l:softtabstop = -1
line 123:       catch /^Vim\%((\a\+)\)\=:E487/
line 124:         " -1 was not supported before Vim 7.4
line 125:         let &l:softtabstop = a:num_spaces
line 126:       endtry
line 127:       return 1
line 128:     endif
line 129: 
line 130:     return 0
function <SNR>15_detect_indent[11]..<SNR>15_guess returning #0

continuing in function <SNR>15_detect_indent

line 12:       return
line 13:     endif
line 14:     if s:guess(getline(1, 1024))
calling function <SNR>15_detect_indent[14]..<SNR>15_guess([''])

line 1:     let options = {}
line 2:     let ccomment = 0
line 3:     let podcomment = 0
line 4:     let triplequote = 0
line 5:     let backtick = 0
line 6:     let xmlcomment = 0
line 7:     let heredoc = ''
line 8:     let minindent = 10
line 9:     let spaces_minus_tabs = 0
line 10:     let lineno = 0
line 11:     let stack = [0]
line 12:     let indents = { '2': 0, '3': 0, '4': 0, '6': 0, '8': 0 }
line 13: 
line 14:     for line in a:lines
line 15:       let lineno += 1
line 16: 
line 17:       if line =~# '^\s*$'
line 18:         continue
line 14:     for line in a:lines
line 15:       let lineno += 1
line 16: 
line 17:       if line =~# '^\s*$'
line 18:         continue
line 19:       endif
line 20: 
line 21:       if line =~# '^\s*/\*'
line 22:         let ccomment = 1
line 23:       endif
line 24:       if ccomment
line 25:         if line =~# '\*/'
line 26:           let ccomment = 0
line 27:         endif
line 28:         continue
line 29:       endif
line 30: 
line 31:       if line =~# '^=\w'
line 32:         let podcomment = 1
line 33:       endif
line 34:       if podcomment
line 35:         if line =~# '^=\%(end\|cut\)\>'
line 36:           let podcomment = 0
line 37:         endif
line 38:         continue
line 39:       endif
line 40: 
line 41:       if triplequote
line 42:         if line =~# '^[^"]*"""[^"]*$'
line 43:           let triplequote = 0
line 44:         endif
line 45:         continue
line 46:       elseif line =~# '^[^"]*"""[^"]*$'
line 47:         let triplequote = 1
line 48:       endif
line 49: 
line 50:       if backtick
line 51:         if line =~# '^[^`]*`[^`]*$'
line 52:           let backtick = 0
line 53:         endif
line 54:         continue
line 55:       elseif &filetype ==# 'go' && line =~# '^[^`]*`[^`]*$'
line 56:         let backtick = 1
line 57:       endif
line 58: 
line 59:       if line =~# '^\s*<\!--'
line 60:         let xmlcomment = 1
line 61:       endif
line 62:       if xmlcomment
line 63:         if line =~# '-->'
line 64:           let xmlcomment = 0
line 65:         endif
line 66:         continue
line 67:       endif
line 68: 
line 69:       " This is correct order because both "<<EOF" and "EOF" matches end
line 70:       if heredoc != ''
line 71:         if line =~# heredoc
line 72:           let heredoc = ''
line 73:         endif
line 74:         continue
line 75:       endif
line 76:       let herematch = matchlist(line, '\C<<\W*\([A-Z]\+\)\s*$')
line 77:       if len(herematch) > 0
line 78:         let heredoc = herematch[1] . '$'
line 79:       endif
line 80: 
line 81:       if line[0] == "\t"
line 82:         let spaces_minus_tabs -= 1
line 83:       else
line 84:         if line[0] == " "
line 85:           let spaces_minus_tabs += 1
line 86:         endif
line 87:         let indent = len(matchstr(line, '^ *'))
line 88:         while stack[-1] > indent
line 89:           call remove(stack, -1)
line 90:         endwhile
line 91: 
line 92:         let indent_inc = indent - stack[-1]
line 93: 
line 94:         if indent_inc == 0 && len(stack) > 1
line 95:           let indent_inc = indent - stack[-2]
line 96:         endif
line 97: 
line 98:         if has_key(indents, indent_inc)
line 99:           let indents[indent_inc] += 1
line 100:           let prev_indent = indent
line 101:         endif
line 102: 
line 103:         if stack[-1] != indent
line 104:           call add(stack, indent)
line 105:         endif
line 106:       endif
line 107:     endfor
line 108: 
line 109:     if spaces_minus_tabs < 0
line 110:       setlocal noexpandtab
line 111:       let &l:shiftwidth=&tabstop
line 112:       return 1
line 113:     endif
line 114: 
line 115:     let shiftwidth = s:get_shiftwidth(indents)
calling function <SNR>15_detect_indent[14]..<SNR>15_guess[115]..<SNR>15_get_shiftwidth({'2': 0, '3': 0, '4': 0, '6': 0, '8': 0})

line 1:     let shiftwidth = 0
line 2:     let max_count = 0
line 3:     let final_counts = {}
line 4:     for [indent, indent_count] in items(a:indents)
line 5:       let indent_count = indent_count * 1.5
line 6:       for [indent2, indent2_count] in items(a:indents)
line 7:         if indent2 > indent && indent2 % indent == 0
line 8:           let indent_count = indent_count + indent2_count
line 9:         endif
line 10:       endfor
line 6:       for [indent2, indent2_count] in items(a:indents)
line 7:         if indent2 > indent && indent2 % indent == 0
line 8:           let indent_count = indent_count + indent2_count
line 9:         endif
line 10:       endfor
line 6:       for [indent2, indent2_count] in items(a:indents)
line 7:         if indent2 > indent && indent2 % indent == 0
line 8:           let indent_count = indent_count + indent2_count
line 9:         endif
line 10:       endfor
line 6:       for [indent2, indent2_count] in items(a:indents)
line 7:         if indent2 > indent && indent2 % indent == 0
line 8:           let indent_count = indent_count + indent2_count
line 9:         endif
line 10:       endfor
line 6:       for [indent2, indent2_count] in items(a:indents)
line 7:         if indent2 > indent && indent2 % indent == 0
line 8:           let indent_count = indent_count + indent2_count
line 9:         endif
line 10:       endfor
line 6:       for [indent2, indent2_count] in items(a:indents)
line 7:         if indent2 > indent && indent2 % indent == 0
line 8:           let indent_count = indent_count + indent2_count
line 9:         endif
line 10:       endfor
line 11:       let final_counts[indent] = indent_count
line 12:     endfor
line 4:     for [indent, indent_count] in items(a:indents)
line 5:       let indent_count = indent_count * 1.5
line 6:       for [indent2, indent2_count] in items(a:indents)
line 7:         if indent2 > indent && indent2 % indent == 0
line 8:           let indent_count = indent_count + indent2_count
line 9:         endif
line 10:       endfor
line 6:       for [indent2, indent2_count] in items(a:indents)
line 7:         if indent2 > indent && indent2 % indent == 0
line 8:           let indent_count = indent_count + indent2_count
line 9:         endif
line 10:       endfor
line 6:       for [indent2, indent2_count] in items(a:indents)
line 7:         if indent2 > indent && indent2 % indent == 0
line 8:           let indent_count = indent_count + indent2_count
line 9:         endif
line 10:       endfor
line 6:       for [indent2, indent2_count] in items(a:indents)
line 7:         if indent2 > indent && indent2 % indent == 0
line 8:           let indent_count = indent_count + indent2_count
line 9:         endif
line 10:       endfor
line 6:       for [indent2, indent2_count] in items(a:indents)
line 7:         if indent2 > indent && indent2 % indent == 0
line 8:           let indent_count = indent_count + indent2_count
line 9:         endif
line 10:       endfor
line 6:       for [indent2, indent2_count] in items(a:indents)
line 7:         if indent2 > indent && indent2 % indent == 0
line 8:           let indent_count = indent_count + indent2_count
line 9:         endif
line 10:       endfor
line 11:       let final_counts[indent] = indent_count
line 12:     endfor
line 4:     for [indent, indent_count] in items(a:indents)
line 5:       let indent_count = indent_count * 1.5
line 6:       for [indent2, indent2_count] in items(a:indents)
line 7:         if indent2 > indent && indent2 % indent == 0
line 8:           let indent_count = indent_count + indent2_count
line 9:         endif
line 10:       endfor
line 6:       for [indent2, indent2_count] in items(a:indents)
line 7:         if indent2 > indent && indent2 % indent == 0
line 8:           let indent_count = indent_count + indent2_count
line 9:         endif
line 10:       endfor
line 6:       for [indent2, indent2_count] in items(a:indents)
line 7:         if indent2 > indent && indent2 % indent == 0
line 8:           let indent_count = indent_count + indent2_count
line 9:         endif
line 10:       endfor
line 6:       for [indent2, indent2_count] in items(a:indents)
line 7:         if indent2 > indent && indent2 % indent == 0
line 8:           let indent_count = indent_count + indent2_count
line 9:         endif
line 10:       endfor
line 6:       for [indent2, indent2_count] in items(a:indents)
line 7:         if indent2 > indent && indent2 % indent == 0
line 8:           let indent_count = indent_count + indent2_count
line 9:         endif
line 10:       endfor
line 6:       for [indent2, indent2_count] in items(a:indents)
line 7:         if indent2 > indent && indent2 % indent == 0
line 8:           let indent_count = indent_count + indent2_count
line 9:         endif
line 10:       endfor
line 11:       let final_counts[indent] = indent_count
line 12:     endfor
line 4:     for [indent, indent_count] in items(a:indents)
line 5:       let indent_count = indent_count * 1.5
line 6:       for [indent2, indent2_count] in items(a:indents)
line 7:         if indent2 > indent && indent2 % indent == 0
line 8:           let indent_count = indent_count + indent2_count
line 9:         endif
line 10:       endfor
line 6:       for [indent2, indent2_count] in items(a:indents)
line 7:         if indent2 > indent && indent2 % indent == 0
line 8:           let indent_count = indent_count + indent2_count
line 9:         endif
line 10:       endfor
line 6:       for [indent2, indent2_count] in items(a:indents)
line 7:         if indent2 > indent && indent2 % indent == 0
line 8:           let indent_count = indent_count + indent2_count
line 9:         endif
line 10:       endfor
line 6:       for [indent2, indent2_count] in items(a:indents)
line 7:         if indent2 > indent && indent2 % indent == 0
line 8:           let indent_count = indent_count + indent2_count
line 9:         endif
line 10:       endfor
line 6:       for [indent2, indent2_count] in items(a:indents)
line 7:         if indent2 > indent && indent2 % indent == 0
line 8:           let indent_count = indent_count + indent2_count
line 9:         endif
line 10:       endfor
line 6:       for [indent2, indent2_count] in items(a:indents)
line 7:         if indent2 > indent && indent2 % indent == 0
line 8:           let indent_count = indent_count + indent2_count
line 9:         endif
line 10:       endfor
line 11:       let final_counts[indent] = indent_count
line 12:     endfor
line 4:     for [indent, indent_count] in items(a:indents)
line 5:       let indent_count = indent_count * 1.5
line 6:       for [indent2, indent2_count] in items(a:indents)
line 7:         if indent2 > indent && indent2 % indent == 0
line 8:           let indent_count = indent_count + indent2_count
line 9:         endif
line 10:       endfor
line 6:       for [indent2, indent2_count] in items(a:indents)
line 7:         if indent2 > indent && indent2 % indent == 0
line 8:           let indent_count = indent_count + indent2_count
line 9:         endif
line 10:       endfor
line 6:       for [indent2, indent2_count] in items(a:indents)
line 7:         if indent2 > indent && indent2 % indent == 0
line 8:           let indent_count = indent_count + indent2_count
line 9:         endif
line 10:       endfor
line 6:       for [indent2, indent2_count] in items(a:indents)
line 7:         if indent2 > indent && indent2 % indent == 0
line 8:           let indent_count = indent_count + indent2_count
line 9:         endif
line 10:       endfor
line 6:       for [indent2, indent2_count] in items(a:indents)
line 7:         if indent2 > indent && indent2 % indent == 0
line 8:           let indent_count = indent_count + indent2_count
line 9:         endif
line 10:       endfor
line 6:       for [indent2, indent2_count] in items(a:indents)
line 7:         if indent2 > indent && indent2 % indent == 0
line 8:           let indent_count = indent_count + indent2_count
line 9:         endif
line 10:       endfor
line 11:       let final_counts[indent] = indent_count
line 12:     endfor
line 4:     for [indent, indent_count] in items(a:indents)
line 5:       let indent_count = indent_count * 1.5
line 6:       for [indent2, indent2_count] in items(a:indents)
line 7:         if indent2 > indent && indent2 % indent == 0
line 8:           let indent_count = indent_count + indent2_count
line 9:         endif
line 10:       endfor
line 11:       let final_counts[indent] = indent_count
line 12:     endfor
line 13:     for [indent, final_count] in items(final_counts)
line 14:       if final_count > max_count
line 15:         let shiftwidth = indent
line 16:         let max_count = final_count
line 17:       endif
line 18:     endfor
line 13:     for [indent, final_count] in items(final_counts)
line 14:       if final_count > max_count
line 15:         let shiftwidth = indent
line 16:         let max_count = final_count
line 17:       endif
line 18:     endfor
line 13:     for [indent, final_count] in items(final_counts)
line 14:       if final_count > max_count
line 15:         let shiftwidth = indent
line 16:         let max_count = final_count
line 17:       endif
line 18:     endfor
line 13:     for [indent, final_count] in items(final_counts)
line 14:       if final_count > max_count
line 15:         let shiftwidth = indent
line 16:         let max_count = final_count
line 17:       endif
line 18:     endfor
line 13:     for [indent, final_count] in items(final_counts)
line 14:       if final_count > max_count
line 15:         let shiftwidth = indent
line 16:         let max_count = final_count
line 17:       endif
line 18:     endfor
line 13:     for [indent, final_count] in items(final_counts)
line 14:       if final_count > max_count
line 15:         let shiftwidth = indent
line 16:         let max_count = final_count
line 17:       endif
line 18:     endfor
line 19:     return shiftwidth
function <SNR>15_detect_indent[14]..<SNR>15_guess[115]..<SNR>15_get_shiftwidth returning #0

continuing in function <SNR>15_detect_indent[14]..<SNR>15_guess

line 116: 
line 117:     if shiftwidth > 0
line 118:       setlocal expandtab
line 119:       let &l:shiftwidth=shiftwidth
line 120:       try
line 121:         " Sunchronize tabstop with shiftwidth
line 122:         let &l:softtabstop = -1
line 123:       catch /^Vim\%((\a\+)\)\=:E487/
line 124:         " -1 was not supported before Vim 7.4
line 125:         let &l:softtabstop = a:num_spaces
line 126:       endtry
line 127:       return 1
line 128:     endif
line 129: 
line 130:     return 0
function <SNR>15_detect_indent[14]..<SNR>15_guess returning #0

continuing in function <SNR>15_detect_indent

line 15:       return
line 16:     endif
line 17:     let pattern = polyglot#sleuth#GlobForFiletype(&filetype)
Searching for "autoload/polyglot/sleuth.vim" in runtime path
Searching for "/Users/ablanken/.config/nvim/autoload/polyglot/sleuth.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/autoload/polyglot/sleuth.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/42header/autoload/polyglot/sleuth.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/auto-session/autoload/polyglot/sleuth.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/cheatsheet.nvim/autoload/polyglot/sleuth.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/coc-nvim-lua/autoload/polyglot/sleuth.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/coc.nvim/autoload/polyglot/sleuth.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/Comment.nvim/autoload/polyglot/sleuth.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/c_formatter_42.vim/autoload/polyglot/sleuth.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/FTerm.nvim/autoload/polyglot/sleuth.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/gentoo-syntax/autoload/polyglot/sleuth.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/gitsigns.nvim/autoload/polyglot/sleuth.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/indent-blankline.nvim/autoload/polyglot/sleuth.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/lualine.nvim/autoload/polyglot/sleuth.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/neon/autoload/polyglot/sleuth.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/nvim-neoclip.lua/autoload/polyglot/sleuth.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/nvim-treesitter/autoload/polyglot/sleuth.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/nvim-web-devicons/autoload/polyglot/sleuth.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/packer.nvim/autoload/polyglot/sleuth.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/plenary.nvim/autoload/polyglot/sleuth.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/session-lens/autoload/polyglot/sleuth.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/sqlite.lua/autoload/polyglot/sleuth.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/suda.vim/autoload/polyglot/sleuth.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/telescope-file-browser.nvim/autoload/polyglot/sleuth.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/telescope-fzf-native.nvim/autoload/polyglot/sleuth.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/telescope-packer.nvim/autoload/polyglot/sleuth.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/telescope-repo.nvim/autoload/polyglot/sleuth.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/telescope-symbols.nvim/autoload/polyglot/sleuth.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/telescope.nvim/autoload/polyglot/sleuth.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/vim-fugitive/autoload/polyglot/sleuth.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/vim-polyglot/autoload/polyglot/sleuth.vim"
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/vim-polyglot/autoload/polyglot)
chdir(/Users/ablanken/Sync/src/neovim-conf)
line 17: sourcing "/Users/ablanken/.local/share/nvim/site/pack/packer/start/vim-polyglot/autoload/polyglot/sleuth.vim"
line 1: " Restore 'cpoptions'
line 2: let s:cpo_save = &cpo
line 3: set cpo&vim
line 4: 
line 5: " DO NOT EDIT CODE BELOW, IT IS GENERATED WITH MAKEFILE
line 6: 
line 7: let s:globs = { '8th': '*.8th', 'Jenkinsfile': '*.jenkinsfile,*.Jenkinsfile,Jenkinsfile,Jenkinsfile*', 'a2ps': 'a2psrc,.a2psrc', 'a65': '*.a65', 'aap': '*.aap', 'abap': '*.abap', 'abaqus': '*.inp', 'abc': '*.abc', 'abel': '*.abl', 'acedb': '*.wrm', 'ada': '*.adb,*.ads,*.ada,*.adc,*.gpr,*.ada_m', 'ahdl': '*.tdf', 'aidl': '*.aidl', 'alsaconf': '.asoundrc', 'aml': '*.aml', 'ampl': '*.run', 'ant': 'build.xml', 'apache': '.htaccess,access.conf*,apache.conf*,apache2.conf*,httpd.conf*,srm.conf*', 'apachestyle': 'proftpd.conf*', 'apiblueprint': '*.apib', 'applescript': '*.applescript,*.scpt', 'aptconf': 'apt.conf', 'arch': '.arch-inventory,=tagging-method', 'arduino': '*.pde,*.ino', 'art': '*.art', 'asciidoc': '*.asciidoc,*.adoc,*.asc', 'asl': '*.asl,*.dsl', 'asn': '*.asn,*.asn1', 'aspperl': '*.asp', 'aspvbs': '*.asa,*.asp', 'asterisk': '', 'asteriskvm': '', 'atlas': '*.atl,*.as', 'autohotkey': '*.ahk,*.ahkl', 'autoit': '*.au3', 'automake': '[mM]akefile.am,GNUmakefile.am', 'ave': '*.ave', 'awk': '*.awk,*.gawk
line 638: 
line 639: 
line 640: " DO NOT EDIT CODE ABOVE, IT IS GENERATED WITH MAKEFILE
line 641: 
line 642: func! polyglot#sleuth#GlobForFiletype(type)
line 645: 
line 646: " Restore 'cpoptions'
line 647: let &cpo = s:cpo_save
line 648: unlet s:cpo_save
finished sourcing /Users/ablanken/.local/share/nvim/site/pack/packer/start/vim-polyglot/autoload/polyglot/sleuth.vim
continuing in function <SNR>15_detect_indent
calling function <SNR>15_detect_indent[17]..polyglot#sleuth#GlobForFiletype('')

line 1:   return get(s:globs, a:type, '')
function <SNR>15_detect_indent[17]..polyglot#sleuth#GlobForFiletype returning ''

continuing in function <SNR>15_detect_indent

line 18:     if len(pattern) == 0
line 19:       return
function <SNR>15_detect_indent returning #0

continuing in BufEnter Autocommands for "*"

Executing BufEnter Autocommands for "*"
autocommand sil call s:LocalBrowse(expand("<amatch>"))

Executing: sil call s:LocalBrowse(expand("<amatch>"))
calling function <SNR>31_LocalBrowse('')

line 1:   " Unfortunate interaction -- only DechoMsg debugging calls can be safely used here.
line 2:   " Otherwise, the BufEnter event gets triggered when attempts to write to
line 3:   " the DBG buffer are made.
line 4: 
line 5:   if !exists("s:vimentered")
line 6:    " If s:vimentered doesn't exist, then the VimEnter event hasn't fired.  It will,
line 7:    " and so s:VimEnter() will then be calling this routine, but this time with s:vimentered defined.
line 8: "   call Dfunc("s:LocalBrowse(dirname<".a:dirname.">)  (s:vimentered doesn't exist)")
line 9: "   call Dret("s:LocalBrowse")
line 10:    return
function <SNR>31_LocalBrowse returning #0

continuing in BufEnter Autocommands for "*"

Executing BufEnter Autocommands for "*"
autocommand call s:Autocmd('BufEnter', +expand('<abuf>'))

Executing: call s:Autocmd('BufEnter', +expand('<abuf>'))
calling function <SNR>44_Autocmd('BufEnter', 1)

line 1:   if !get(g:, 'coc_workspace_initialized', 0)
line 2:     return
function <SNR>44_Autocmd returning #0

continuing in BufEnter Autocommands for "*"

Executing BufEnter Autocommands for "*"
autocommand call suda#BufEnter()

Executing: call suda#BufEnter()
Searching for "autoload/suda.vim" in runtime path
Searching for "/Users/ablanken/.config/nvim/autoload/suda.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/autoload/suda.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/42header/autoload/suda.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/auto-session/autoload/suda.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/cheatsheet.nvim/autoload/suda.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/coc-nvim-lua/autoload/suda.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/coc.nvim/autoload/suda.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/Comment.nvim/autoload/suda.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/c_formatter_42.vim/autoload/suda.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/FTerm.nvim/autoload/suda.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/gentoo-syntax/autoload/suda.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/gitsigns.nvim/autoload/suda.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/indent-blankline.nvim/autoload/suda.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/lualine.nvim/autoload/suda.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/neon/autoload/suda.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/nvim-neoclip.lua/autoload/suda.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/nvim-treesitter/autoload/suda.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/nvim-web-devicons/autoload/suda.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/packer.nvim/autoload/suda.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/plenary.nvim/autoload/suda.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/session-lens/autoload/suda.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/sqlite.lua/autoload/suda.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/suda.vim/autoload/suda.vim"
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/suda.vim/autoload)
chdir(/Users/ablanken/Sync/src/neovim-conf)
line 0: sourcing "/Users/ablanken/.local/share/nvim/site/pack/packer/start/suda.vim/autoload/suda.vim"
line 1: function! suda#system(cmd, ...) abort
line 21: 
line 22: function! suda#read(expr, ...) abort range
line 72: 
line 73: function! suda#write(expr, ...) abort range
line 130: 
line 131: function! suda#BufReadCmd() abort
line 152: 
line 153: function! suda#FileReadCmd() abort
line 170: 
line 171: function! suda#BufWriteCmd() abort
line 189: 
line 190: function! suda#FileWriteCmd() abort
line 202: 
line 203: function! suda#BufEnter() abort
line 238: 
line 239: function! s:escape_patterns(expr) abort
line 242: 
line 243: function! s:strip_prefix(expr) abort
line 246: 
line 247: function! s:echomsg_exception() abort
line 255: 
line 256: " Pseudo autocmd to suppress 'No such autocmd' message
line 257: augroup suda_internal
line 258:   autocmd!
line 259:   autocmd BufReadPre,BufReadPost     suda://* :
line 260:   autocmd FileReadPre,FileReadPost   suda://* :
line 261:   autocmd BufWritePre,BufWritePost   suda://* :
line 262:   autocmd FileWritePre,FileWritePost suda://* :
line 263: augroup END
line 264: 
line 265: " Configure
line 266: let g:suda#prompt = get(g:, 'suda#prompt', 'Password: ')
finished sourcing /Users/ablanken/.local/share/nvim/site/pack/packer/start/suda.vim/autoload/suda.vim
continuing in BufEnter Autocommands for "*"
calling function suda#BufEnter()

line 1:   if exists('b:suda_smart_edit_checked')
line 2:     return
line 3:   endif
line 4:   let b:suda_smart_edit_checked = 1
line 5:   let bufname = expand('<afile>')
line 6:   if !empty(&buftype) || empty(bufname) || match(bufname, '^[a-z]\+://*') isnot# -1 || isdirectory(bufname)
line 10:     " Non file buffer
line 11:     return
function suda#BufEnter returning #0

continuing in BufEnter Autocommands for "*"

Executing BufEnter Autocommands for "*"
autocommand if !g:rooter_manual_only | Rooter | endif

Executing: if !g:rooter_manual_only | Rooter | endif
Executing:  Rooter | endif
Executing: call <80><fd>R65_rooter()
calling function <SNR>65_rooter()

line 1:   if !s:activate() | return | endif
calling function <SNR>65_rooter[1]..<SNR>65_activate()

line 1:   " Directory browser plugins (e.g. vim-dirvish, NERDTree) tend to
line 2:   " set a nofile buftype when you open a directory.
line 3:   if &buftype != '' && &buftype != 'nofile' | return 0 | endif
line 3:  return 0 | endif
line 3:  endif
line 4: 
line 5:   let patterns = split(g:rooter_targets, ',')
line 6:   let fn = expand('%:p', 1)
line 7: 
line 8:   if fn =~ 'NERD_tree_\d\+$' | let fn = b:NERDTree.root.path.str().'/' | endif
line 8:  let fn = b:NERDTree.root.path.str().'/' | endif
line 8:  endif
line 9: 
line 10:   " directory
line 11:   if empty(fn) || fn[-1:] == '/'
line 12:     return index(patterns, '/') != -1
function <SNR>65_rooter[1]..<SNR>65_activate returning #1

continuing in function <SNR>65_rooter

line 1:  return | endif
line 1:  endif
line 2: 
line 3:   let root = getbufvar('%', 'rootDir')
line 4:   if empty(root)
line 5:     let root = s:root()
calling function <SNR>65_rooter[5]..<SNR>65_root()

line 1:   let dir = s:current()
calling function <SNR>65_rooter[5]..<SNR>65_root[1]..<SNR>65_current()

line 1:   let fn = expand('%:p', 1)
line 2:   if fn =~ 'NERD_tree_\d\+$' | let fn = b:NERDTree.root.path.str().'/' | endif
line 2:  let fn = b:NERDTree.root.path.str().'/' | endif
line 2:  endif
line 3:   if empty(fn) | return getcwd() | endif  " opening vim without a file
line 3:  return getcwd() | endif  " opening vim without a file
function <SNR>65_rooter[5]..<SNR>65_root[1]..<SNR>65_current returning '/Users/ablanken/Sync/src/neovim-conf'

continuing in function <SNR>65_rooter[5]..<SNR>65_root

line 2: 
line 3:   " breadth-first search
line 4:   while 1
line 5:     for pattern in g:rooter_patterns
line 6:       if pattern[0] == '!'
line 7:         let [p, exclude] = [pattern[1:], 1]
line 8:       else
line 9:         let [p, exclude] = [pattern, 0]
line 10:       endif
line 11:       if s:match(dir, p)
calling function <SNR>65_rooter[5]..<SNR>65_root[11]..<SNR>65_match('/Users/ablanken/Sync/src/neovim-conf', '.git')

line 1:   if a:pattern[0] == '='
line 2:     return s:is(a:dir, a:pattern[1:])
line 3:   elseif a:pattern[0] == '^'
line 4:     return s:sub(a:dir, a:pattern[1:])
line 5:   elseif a:pattern[0] == '>'
line 6:     return s:child(a:dir, a:pattern[1:])
line 7:   else
line 8:     return s:has(a:dir, a:pattern)
calling function <SNR>65_rooter[5]..<SNR>65_root[11]..<SNR>65_match[8]..<SNR>65_has('/Users/ablanken/Sync/src/neovim-conf', '.git')

line 1:   " We do not want a:dir to be treated as a glob so escape any wildcards.
line 2:   " If this approach is problematic (e.g. on Windows), an alternative
line 3:   " might be to change directory to a:dir, call globpath() with just
line 4:   " a:identifier, then restore the working directory.
line 5:   return !empty(globpath(escape(a:dir, '?*[]'), a:identifier, 1))
function <SNR>65_rooter[5]..<SNR>65_root[11]..<SNR>65_match[8]..<SNR>65_has returning #1

continuing in function <SNR>65_rooter[5]..<SNR>65_root[11]..<SNR>65_match

function <SNR>65_rooter[5]..<SNR>65_root[11]..<SNR>65_match returning #1

continuing in function <SNR>65_rooter[5]..<SNR>65_root

line 12:         if exclude
line 13:           break
line 14:         else
line 15:           return dir
function <SNR>65_rooter[5]..<SNR>65_root returning '/Users/ablanken/Sync/src/neovim-conf'

continuing in function <SNR>65_rooter

line 6:     call setbufvar('%', 'rootDir', root)
line 7:   endif
line 8: 
line 9:   if empty(root)
line 10:     call s:rootless()
line 11:     return
line 12:   endif
line 13: 
line 14:   call s:cd(root)
calling function <SNR>65_rooter[14]..<SNR>65_cd('/Users/ablanken/Sync/src/neovim-conf')

line 1:   if a:dir == getcwd() | return | endif
line 1:  return | endif
function <SNR>65_rooter[14]..<SNR>65_cd returning #0

continuing in function <SNR>65_rooter

function <SNR>65_rooter returning #0

continuing in BufEnter Autocommands for "*"

Executing:  endif
Executing VimEnter Autocommands for "*"
autocommand lua require("which-key").load()

Executing: lua require("which-key").load()
Executing: hi def link WhichKey Function
Executing: hi def link WhichKeyFloat NormalFloat
Executing: hi def link WhichKeySeparator WhichKeySeperator
Executing: hi def link WhichKeyGroup Keyword
Executing: hi def link WhichKeyDesc Identifier
Executing: hi def link WhichKeyValue Comment
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/which-key.nvim/lua/which-key)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/which-key.nvim/lua/which-key)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/which-key.nvim/lua/which-key)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/which-key.nvim/lua/which-key)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/which-key.nvim/lua/which-key)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/which-key.nvim/lua/which-key)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/which-key.nvim/lua/which-key)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/which-key.nvim/lua/which-key)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/which-key.nvim/lua/which-key)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/which-key.nvim/lua/which-key)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/which-key.nvim/lua/which-key)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/which-key.nvim/lua/which-key)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/which-key.nvim/lua/which-key)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/which-key.nvim/lua/which-key)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/which-key.nvim/lua/which-key)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/which-key.nvim/lua/which-key)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/which-key.nvim/lua/which-key)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/which-key.nvim/lua/which-key)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/which-key.nvim/lua/which-key)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/which-key.nvim/lua/which-key)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/which-key.nvim/lua/which-key)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/which-key.nvim/lua/which-key)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/which-key.nvim/lua/which-key)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/which-key.nvim/lua/which-key)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/which-key.nvim/lua/which-key)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/which-key.nvim/lua/which-key)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/which-key.nvim/lua/which-key)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/which-key.nvim/lua/which-key)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/which-key.nvim/lua/which-key)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/which-key.nvim/lua/which-key)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/which-key.nvim/lua/which-key)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/which-key.nvim/lua/which-key)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/which-key.nvim/lua/which-key)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/which-key.nvim/lua/which-key)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/which-key.nvim/lua/which-key)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/which-key.nvim/lua/which-key)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/which-key.nvim/lua/which-key)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/which-key.nvim/lua/which-key)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/which-key.nvim/lua/which-key)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/which-key.nvim/lua/which-key)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/which-key.nvim/lua/which-key)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/which-key.nvim/lua/which-key)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/which-key.nvim/lua/which-key)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/which-key.nvim/lua/which-key)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/which-key.nvim/lua/which-key)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/which-key.nvim/lua/which-key)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/which-key.nvim/lua/which-key)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/which-key.nvim/lua/which-key)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/which-key.nvim/lua/which-key)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/which-key.nvim/lua/which-key)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/which-key.nvim/lua/which-key)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/which-key.nvim/lua/which-key)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/which-key.nvim/lua/which-key)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/which-key.nvim/lua/which-key)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/which-key.nvim/lua/which-key)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/which-key.nvim/lua/which-key)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/which-key.nvim/lua/which-key)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/which-key.nvim/lua/which-key)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/which-key.nvim/lua/which-key)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/which-key.nvim/lua/which-key)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/which-key.nvim/lua/which-key)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/which-key.nvim/lua/which-key)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/which-key.nvim/lua/which-key)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/which-key.nvim/lua/which-key)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/which-key.nvim/lua/which-key)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/which-key.nvim/lua/which-key)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/which-key.nvim/lua/which-key)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/which-key.nvim/lua/which-key)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/which-key.nvim/lua/which-key)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/which-key.nvim/lua/which-key)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/which-key.nvim/lua/which-key)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/which-key.nvim/lua/which-key)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/which-key.nvim/lua/which-key)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/which-key.nvim/lua/which-key)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/which-key.nvim/lua/which-key)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/which-key.nvim/lua/which-key)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/which-key.nvim/lua/which-key)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/which-key.nvim/lua/which-key)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/which-key.nvim/lua/which-key)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/which-key.nvim/lua/which-key)
chdir(/Users/ablanken/Sync/src/neovim-conf)
autocommand <Lua function 14>

Executing: 
autocommand call PolyglotVerify()

Executing: call PolyglotVerify()
calling function PolyglotVerify()

line 1:   if exists("g:polyglot_disabled_not_set")
line 2:     if exists("g:polyglot_disabled")
line 3:       echohl WarningMsg
line 4:       echo "vim-polyglot: g:polyglot_disabled should be defined before loading vim-polyglot"
line 5:       echohl None
line 6:     endif
line 7: 
line 8:     unlet g:polyglot_disabled_not_set
line 9:   endif
function PolyglotVerify returning #0

continuing in VimEnter Autocommands for "*"

Executing VimEnter Autocommands for "*"
autocommand sil call s:VimEnter(expand("<amatch>"))

Executing: sil call s:VimEnter(expand("<amatch>"))
calling function <SNR>31_VimEnter('')

line 1: "  call Dfunc("s:VimEnter(dirname<".a:dirname.">) expand(%)<".expand("%").">")
line 2:   if has('nvim') || v:version < 802
line 3:   " Johann Höchtl: reported that the call range... line causes an E488: Trailing characters
line 4:   "                error with neovim. I suspect its because neovim hasn't updated with recent
line 5:   "                vim patches. As is, this code will have problems with popup terminals
line 6:   "                instantiated before the VimEnter event runs.
line 7:   " Ingo Karkat  : E488 also in Vim 8.1.1602
line 8:   let curwin       = winnr()
line 9:   let s:vimentered = 1
line 10:   windo call s:LocalBrowse(expand("%:p"))
line 10: call s:LocalBrowse(expand("%:p"))
calling function <SNR>31_VimEnter[10]..<SNR>31_LocalBrowse('')

line 1:   " Unfortunate interaction -- only DechoMsg debugging calls can be safely used here.
line 2:   " Otherwise, the BufEnter event gets triggered when attempts to write to
line 3:   " the DBG buffer are made.
line 4: 
line 5:   if !exists("s:vimentered")
line 6:    " If s:vimentered doesn't exist, then the VimEnter event hasn't fired.  It will,
line 7:    " and so s:VimEnter() will then be calling this routine, but this time with s:vimentered defined.
line 8: "   call Dfunc("s:LocalBrowse(dirname<".a:dirname.">)  (s:vimentered doesn't exist)")
line 9: "   call Dret("s:LocalBrowse")
line 10:    return
line 11:   endif
line 12: 
line 13: "  call Dfunc("s:LocalBrowse(dirname<".a:dirname.">)  (s:vimentered=".s:vimentered.")")
line 14: 
line 15:   if has("amiga")
line 16:    " The check against '' is made for the Amiga, where the empty
line 17:    " string is the current directory and not checking would break
line 18:    " things such as the help command.
line 19: "   call Decho("(LocalBrowse) dirname<".a:dirname.">  (isdirectory, amiga)")
line 20:    if a:dirname != '' && isdirectory(a:dirname)
line 21:     sil! call netrw#LocalBrowseCheck(a:dirname)
line 22:     if exists("w:netrw_bannercnt") && line('.') < w:netrw_bannercnt
line 23:      exe w:netrw_bannercnt
line 24:     endif
line 25:    endif
line 26: 
line 27:   elseif isdirectory(a:dirname)
line 28: "   call Decho("(LocalBrowse) dirname<".a:dirname."> ft=".&ft."  (isdirectory, not amiga)")
line 29: "   call Dredir("LocalBrowse ft last set: ","verbose set ft")
line 30:    " Jul 13, 2021: for whatever reason, preceding the following call with
line 31:    " a   sil!  causes an unbalanced if-endif vim error
line 32:    call netrw#LocalBrowseCheck(a:dirname)
line 33:    if exists("w:netrw_bannercnt") && line('.') < w:netrw_bannercnt
line 34:     exe w:netrw_bannercnt
line 35:    endif
line 36: 
line 37:   else
line 38:    " not a directory, ignore it
line 39: "   call Decho("(LocalBrowse) dirname<".a:dirname."> not a directory, ignoring...")
line 40:   endif
line 41: 
line 42: "  call Dret("s:LocalBrowse")
function <SNR>31_VimEnter[10]..<SNR>31_LocalBrowse returning #0

continuing in function <SNR>31_VimEnter

line 11:   exe curwin."wincmd w"
line 11: 1wincmd w
line 12:  else
line 13:   " the following complicated expression comes courtesy of lacygoill; largely does the same thing as the windo and 
line 14:   " wincmd which are commented out, but avoids some side effects. Allows popup terminal before VimEnter.
line 15:   let s:vimentered = 1
line 16:   call range(1, winnr('$'))->map({_, v -> win_execute(win_getid(v), 'call expand("%:p")->s:LocalBrowse()')})
line 17:  endif
line 18: "  call Dret("s:VimEnter")
function <SNR>31_VimEnter returning #0

continuing in VimEnter Autocommands for "*"

Executing VimEnter Autocommands for "*"
autocommand call LuaAutoRestoreSession()

Executing: call LuaAutoRestoreSession()
Executing: source /Users/ablanken/.local/share/nvim/sessions/\%Users\%ablanken\%Sync\%src\%neovim-conf.vim
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/sessions)
chdir(/Users/ablanken/Sync/src/neovim-conf)
line 0: sourcing "/Users/ablanken/.local/share/nvim/sessions/%Users%ablanken%Sync%src%neovim-conf.vim"
line 1: let SessionLoad = 1
line 2: let s:so_save = &g:so | let s:siso_save = &g:siso | setg so=0 siso=0 | setl so=-1 siso=-1
line 2:  let s:siso_save = &g:siso | setg so=0 siso=0 | setl so=-1 siso=-1
line 2:  setg so=0 siso=0 | setl so=-1 siso=-1
line 2:  setl so=-1 siso=-1
line 3: let v:this_session=expand("<sfile>:p")
line 4: silent only
line 5: silent tabonly
Already only one tab page
line 6: cd ~
chdir(/Users/ablanken)
Executing DirChanged Autocommands for "*"
autocommand call s:Autocmd('DirChanged', get(v:event, 'cwd', ''))

Executing: call s:Autocmd('DirChanged', get(v:event, 'cwd', ''))
calling function <SNR>44_Autocmd('DirChanged', '/Users/ablanken')

line 1:   if !get(g:, 'coc_workspace_initialized', 0)
line 2:     return
function <SNR>44_Autocmd returning #0

continuing in DirChanged Autocommands for "*"

[global] /Users/ablanken
line 7: if expand('%') == '' && !&modified && line('$') <= 1 && getline(1) == ''
line 8:   let s:wipebuf = bufnr('%')
line 9: endif
line 10: let s:shortmess_save = &shortmess
line 11: set shortmess=aoO
line 12: badd +6 Sync/src/neovim-conf/conf/nvim/init.lua
chdir(/Users/ablanken)
chdir(Sync/src/neovim-conf/conf/nvim)
chdir(/Users/ablanken)
chdir(/Users/ablanken)
chdir(/Users/ablanken/Sync/src/neovim-conf/conf/nvim)
chdir(/Users/ablanken)
line 13: badd +12 Sync/src/neovim-conf/macinstall.sh
chdir(/Users/ablanken)
chdir(Sync/src/neovim-conf)
chdir(/Users/ablanken)
chdir(/Users/ablanken)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken)
line 14: badd +1 Sync/src/neovim-conf/.git/COMMIT_EDITMSG
chdir(/Users/ablanken)
chdir(Sync/src/neovim-conf/.git)
chdir(/Users/ablanken)
chdir(/Users/ablanken)
chdir(/Users/ablanken/Sync/src/neovim-conf/.git)
chdir(/Users/ablanken)
line 15: badd +1 Sync/src/neovim-conf/Sync/src/neovim-conf/macinstall.sh
chdir(/Users/ablanken)
chdir(Sync/src/neovim-conf/Sync/src/neovim-conf)
chdir(/Users/ablanken)
chdir(/Users/ablanken)
chdir(/Users/ablanken/Sync/src/neovim-conf/Sync/src/neovim-conf)
chdir(/Users/ablanken)
line 16: badd +0 Sync/src/neovim-conf/Sync/src/neovim-conf/Sync/src/neovim-conf/macinstall.sh
chdir(/Users/ablanken)
chdir(Sync/src/neovim-conf/Sync/src/neovim-conf/Sync/src/neovim-conf)
chdir(/Users/ablanken)
chdir(/Users/ablanken)
chdir(/Users/ablanken/Sync/src/neovim-conf/Sync/src/neovim-conf/Sync/src/neovim-conf)
chdir(/Users/ablanken)
line 17: argglobal
line 18: %argdel
line 19: edit Sync/src/neovim-conf/conf/nvim/init.lua
chdir(/Users/ablanken)
chdir(Sync/src/neovim-conf/conf/nvim)
chdir(/Users/ablanken)
chdir(/Users/ablanken)
chdir(/Users/ablanken/Sync/src/neovim-conf/conf/nvim)
chdir(/Users/ablanken)
Executing BufLeave Autocommands for "*"
autocommand if &ft != "netrw"|let w:netrw_prvfile= expand("%:p")|endif

Executing: if &ft != "netrw"|let w:netrw_prvfile= expand("%:p")|endif
Executing: let w:netrw_prvfile= expand("%:p")|endif
Executing: endif
Executing BufWinLeave Autocommands for "*"
autocommand call s:Autocmd('BufWinLeave', +expand('<abuf>'), bufwinid(+expand('<abuf>')))

Executing: call s:Autocmd('BufWinLeave', +expand('<abuf>'), bufwinid(+expand('<abuf>')))
calling function <SNR>44_Autocmd('BufWinLeave', 1, 1000)

line 1:   if !get(g:, 'coc_workspace_initialized', 0)
line 2:     return
function <SNR>44_Autocmd returning #0

continuing in BufWinLeave Autocommands for "*"

Executing BufHidden Autocommands for "*"
autocommand call s:Autocmd('BufHidden', +expand('<abuf>'))

Executing: call s:Autocmd('BufHidden', +expand('<abuf>'))
calling function <SNR>44_Autocmd('BufHidden', 1)

line 1:   if !get(g:, 'coc_workspace_initialized', 0)
line 2:     return
function <SNR>44_Autocmd returning #0

continuing in BufHidden Autocommands for "*"

chdir(/Users/ablanken)
chdir(Sync/src/neovim-conf/conf/nvim)
chdir(/Users/ablanken)
"Sync/src/neovim-conf/conf/nvim/init.lua" 
"Sync/src/neovim-conf/conf/nvim/init.lua" 490L, 15590B
Reading ShaDa file "/Users/ablanken/.local/share/nvim/shada/main.shada" marks
Reading undo file: /Users/ablanken/.local/share/nvim/undo/%Users%ablanken%Sync%src%neovim-conf%conf%nvim%init.lua
Executing BufReadPost Autocommands for "*"
autocommand if (getline(1) =~? "#!/sbin/\\(runscript\\|openrc-run\\)") |     set filetype=gentoo-init-d.sh | endif

Executing: if (getline(1) =~? "#!/sbin/\\(runscript\\|openrc-run\\)") |     set filetype=gentoo-init-d.sh | endif
Executing:      set filetype=gentoo-init-d.sh | endif
Executing:  endif
Executing BufReadPost Autocommands for "*.lua"
autocommand setf lua

Executing: setf lua
Executing FileType Autocommands for "*"
autocommand call s:LoadFTPlugin()

Executing: call s:LoadFTPlugin()
calling function <SNR>1_LoadFTPlugin()

line 1:     if exists("b:undo_ftplugin")
line 2:       exe b:undo_ftplugin
line 3:       unlet! b:undo_ftplugin b:did_ftplugin
line 4:     endif
line 5: 
line 6:     let s = expand("<amatch>")
line 7:     if s != ""
line 8:       if &cpo =~# "S" && exists("b:did_ftplugin")
line 9: ^I" In compatible mode options are reset to the global values, need to
line 10: ^I" set the local values also when a plugin was already used.
line 11: ^Iunlet b:did_ftplugin
line 12:       endif
line 13: 
line 14:       " When there is a dot it is used to separate filetype names.  Thus for
line 15:       " "aaa.bbb" load "aaa" and then "bbb".
line 16:       for name in split(s, '\.')
line 17:         exe 'runtime! ftplugin/' . name . '.vim ftplugin/' . name . '_*.vim ftplugin/' . name . '/*.vim'
line 17: runtime! ftplugin/lua.vim ftplugin/lua_*.vim ftplugin/lua/*.vim
Searching for "ftplugin/lua.vim ftplugin/lua_*.vim ftplugin/lua/*.vim" in runtime path
Searching for "/Users/ablanken/.config/nvim/ftplugin/lua.vim"
Searching for "/Users/ablanken/.config/nvim/ftplugin/lua_*.vim"
Searching for "/Users/ablanken/.config/nvim/ftplugin/lua/*.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/ftplugin/lua.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/ftplugin/lua_*.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/ftplugin/lua/*.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/42header/ftplugin/lua.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/42header/ftplugin/lua_*.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/42header/ftplugin/lua/*.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/auto-session/ftplugin/lua.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/auto-session/ftplugin/lua_*.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/auto-session/ftplugin/lua/*.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/cheatsheet.nvim/ftplugin/lua.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/cheatsheet.nvim/ftplugin/lua_*.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/cheatsheet.nvim/ftplugin/lua/*.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/coc-nvim-lua/ftplugin/lua.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/coc-nvim-lua/ftplugin/lua_*.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/coc-nvim-lua/ftplugin/lua/*.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/coc.nvim/ftplugin/lua.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/coc.nvim/ftplugin/lua_*.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/coc.nvim/ftplugin/lua/*.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/Comment.nvim/ftplugin/lua.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/Comment.nvim/ftplugin/lua_*.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/Comment.nvim/ftplugin/lua/*.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/c_formatter_42.vim/ftplugin/lua.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/c_formatter_42.vim/ftplugin/lua_*.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/c_formatter_42.vim/ftplugin/lua/*.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/FTerm.nvim/ftplugin/lua.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/FTerm.nvim/ftplugin/lua_*.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/FTerm.nvim/ftplugin/lua/*.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/gentoo-syntax/ftplugin/lua.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/gentoo-syntax/ftplugin/lua_*.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/gentoo-syntax/ftplugin/lua/*.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/gitsigns.nvim/ftplugin/lua.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/gitsigns.nvim/ftplugin/lua_*.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/gitsigns.nvim/ftplugin/lua/*.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/indent-blankline.nvim/ftplugin/lua.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/indent-blankline.nvim/ftplugin/lua_*.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/indent-blankline.nvim/ftplugin/lua/*.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/lualine.nvim/ftplugin/lua.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/lualine.nvim/ftplugin/lua_*.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/lualine.nvim/ftplugin/lua/*.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/neon/ftplugin/lua.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/neon/ftplugin/lua_*.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/neon/ftplugin/lua/*.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/nvim-neoclip.lua/ftplugin/lua.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/nvim-neoclip.lua/ftplugin/lua_*.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/nvim-neoclip.lua/ftplugin/lua/*.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/nvim-treesitter/ftplugin/lua.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/nvim-treesitter/ftplugin/lua_*.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/nvim-treesitter/ftplugin/lua/*.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/nvim-web-devicons/ftplugin/lua.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/nvim-web-devicons/ftplugin/lua_*.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/nvim-web-devicons/ftplugin/lua/*.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/packer.nvim/ftplugin/lua.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/packer.nvim/ftplugin/lua_*.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/packer.nvim/ftplugin/lua/*.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/plenary.nvim/ftplugin/lua.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/plenary.nvim/ftplugin/lua_*.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/plenary.nvim/ftplugin/lua/*.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/session-lens/ftplugin/lua.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/session-lens/ftplugin/lua_*.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/session-lens/ftplugin/lua/*.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/sqlite.lua/ftplugin/lua.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/sqlite.lua/ftplugin/lua_*.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/sqlite.lua/ftplugin/lua/*.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/suda.vim/ftplugin/lua.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/suda.vim/ftplugin/lua_*.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/suda.vim/ftplugin/lua/*.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/telescope-file-browser.nvim/ftplugin/lua.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/telescope-file-browser.nvim/ftplugin/lua_*.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/telescope-file-browser.nvim/ftplugin/lua/*.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/telescope-fzf-native.nvim/ftplugin/lua.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/telescope-fzf-native.nvim/ftplugin/lua_*.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/telescope-fzf-native.nvim/ftplugin/lua/*.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/telescope-packer.nvim/ftplugin/lua.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/telescope-packer.nvim/ftplugin/lua_*.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/telescope-packer.nvim/ftplugin/lua/*.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/telescope-repo.nvim/ftplugin/lua.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/telescope-repo.nvim/ftplugin/lua_*.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/telescope-repo.nvim/ftplugin/lua/*.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/telescope-symbols.nvim/ftplugin/lua.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/telescope-symbols.nvim/ftplugin/lua_*.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/telescope-symbols.nvim/ftplugin/lua/*.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/telescope.nvim/ftplugin/lua.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/telescope.nvim/ftplugin/lua_*.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/telescope.nvim/ftplugin/lua/*.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/vim-fugitive/ftplugin/lua.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/vim-fugitive/ftplugin/lua_*.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/vim-fugitive/ftplugin/lua/*.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/vim-polyglot/ftplugin/lua.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/vim-polyglot/ftplugin/lua_*.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/vim-polyglot/ftplugin/lua/*.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/vim-rooter/ftplugin/lua.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/vim-rooter/ftplugin/lua_*.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/vim-rooter/ftplugin/lua/*.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/which-key.nvim/ftplugin/lua.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/which-key.nvim/ftplugin/lua_*.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/which-key.nvim/ftplugin/lua/*.vim"
Searching for "/Users/ablanken/.local/nvim-brew/Cellar/neovim/0.7.0/share/nvim/runtime/ftplugin/lua.vim"
chdir(/Users/ablanken)
chdir(/Users/ablanken/.local/nvim-brew/Cellar/neovim/0.7.0/share/nvim/runtime/ftplugin)
chdir(/Users/ablanken)
line 17: sourcing "/Users/ablanken/.local/nvim-brew/Cellar/neovim/0.7.0/share/nvim/runtime/ftplugin/lua.vim"
line 1: " Vim filetype plugin file.
line 2: " Language:^I        Lua
line 3: " Maintainer:^I^IDoug Kearns <dougkearns@gmail.com>
line 4: " Previous Maintainer:^IMax Ischenko <mfi@ukr.net>
line 5: " Last Change:^I        2021 Nov 15
line 6: 
line 7: " Only do this when not done yet for this buffer
line 8: if exists("b:did_ftplugin")
line 9:   finish
line 10: endif
line 11: 
line 12: " Don't load another plugin for this buffer
line 13: let b:did_ftplugin = 1
line 14: 
line 15: let s:cpo_save = &cpo
line 16: set cpo&vim
line 17: 
line 18: " Set 'formatoptions' to break comment lines but not other lines, and insert
line 19: " the comment leader when hitting <CR> or using "o".
line 20: setlocal formatoptions-=t formatoptions+=croql
line 21: 
line 22: setlocal comments=:--
line 23: setlocal commentstring=--%s
line 24: setlocal suffixesadd=.lua
line 25: 
line 26: let b:undo_ftplugin = "setlocal fo< com< cms< sua<"
line 27: 
line 28: if exists("loaded_matchit") && !exists("b:match_words")
line 29:   let b:match_ignorecase = 0
line 30:   let b:match_words = '\<\%(do\|function\|if\)\>:' . '\<\%(return\|else\|elseif\)\>:' . '\<end\>,' . '\<repeat\>:\<until\>,' . '\%(--\)\=\[\(=*\)\[:]\1]'
line 36:   let b:undo_ftplugin .= " | unlet! b:match_words b:match_ignorecase"
line 37: endif
line 38: 
line 39: if (has("gui_win32") || has("gui_gtk")) && !exists("b:browsefilter")
line 40:   let b:browsefilter = "Lua Source Files (*.lua)\t*.lua\n" .              "All Files (*.*)\t*.*\n"
line 42:   let b:undo_ftplugin .= " | unlet! b:browsefilter"
line 43: endif
line 44: 
line 45: let &cpo = s:cpo_save
line 46: unlet s:cpo_save
finished sourcing /Users/ablanken/.local/nvim-brew/Cellar/neovim/0.7.0/share/nvim/runtime/ftplugin/lua.vim
continuing in function <SNR>1_LoadFTPlugin
Searching for "/Users/ablanken/.local/nvim-brew/Cellar/neovim/0.7.0/share/nvim/runtime/ftplugin/lua_*.vim"
Searching for "/Users/ablanken/.local/nvim-brew/Cellar/neovim/0.7.0/share/nvim/runtime/ftplugin/lua/*.vim"
Searching for "/Users/ablanken/.local/nvim-brew/Cellar/neovim/0.7.0/share/nvim/runtime/pack/dist/opt/matchit/ftplugin/lua.vim"
Searching for "/Users/ablanken/.local/nvim-brew/Cellar/neovim/0.7.0/share/nvim/runtime/pack/dist/opt/matchit/ftplugin/lua_*.vim"
Searching for "/Users/ablanken/.local/nvim-brew/Cellar/neovim/0.7.0/share/nvim/runtime/pack/dist/opt/matchit/ftplugin/lua/*.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/Comment.nvim/after/ftplugin/lua.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/Comment.nvim/after/ftplugin/lua_*.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/Comment.nvim/after/ftplugin/lua/*.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/vim-polyglot/after/ftplugin/lua.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/vim-polyglot/after/ftplugin/lua_*.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/vim-polyglot/after/ftplugin/lua/*.vim"
line 18:         " Load lua ftplugins
line 19:         exe printf('runtime! ftplugin/%s.lua ftplugin/%s_*.lua ftplugin/%s/*.lua', name, name, name)
line 19: runtime! ftplugin/lua.lua ftplugin/lua_*.lua ftplugin/lua/*.lua
Searching for "ftplugin/lua.lua ftplugin/lua_*.lua ftplugin/lua/*.lua" in runtime path
Searching for "/Users/ablanken/.config/nvim/ftplugin/lua.lua"
Searching for "/Users/ablanken/.config/nvim/ftplugin/lua_*.lua"
Searching for "/Users/ablanken/.config/nvim/ftplugin/lua/*.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/ftplugin/lua.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/ftplugin/lua_*.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/ftplugin/lua/*.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/42header/ftplugin/lua.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/42header/ftplugin/lua_*.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/42header/ftplugin/lua/*.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/auto-session/ftplugin/lua.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/auto-session/ftplugin/lua_*.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/auto-session/ftplugin/lua/*.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/cheatsheet.nvim/ftplugin/lua.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/cheatsheet.nvim/ftplugin/lua_*.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/cheatsheet.nvim/ftplugin/lua/*.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/coc-nvim-lua/ftplugin/lua.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/coc-nvim-lua/ftplugin/lua_*.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/coc-nvim-lua/ftplugin/lua/*.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/coc.nvim/ftplugin/lua.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/coc.nvim/ftplugin/lua_*.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/coc.nvim/ftplugin/lua/*.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/Comment.nvim/ftplugin/lua.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/Comment.nvim/ftplugin/lua_*.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/Comment.nvim/ftplugin/lua/*.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/c_formatter_42.vim/ftplugin/lua.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/c_formatter_42.vim/ftplugin/lua_*.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/c_formatter_42.vim/ftplugin/lua/*.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/FTerm.nvim/ftplugin/lua.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/FTerm.nvim/ftplugin/lua_*.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/FTerm.nvim/ftplugin/lua/*.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/gentoo-syntax/ftplugin/lua.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/gentoo-syntax/ftplugin/lua_*.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/gentoo-syntax/ftplugin/lua/*.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/gitsigns.nvim/ftplugin/lua.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/gitsigns.nvim/ftplugin/lua_*.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/gitsigns.nvim/ftplugin/lua/*.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/indent-blankline.nvim/ftplugin/lua.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/indent-blankline.nvim/ftplugin/lua_*.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/indent-blankline.nvim/ftplugin/lua/*.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/lualine.nvim/ftplugin/lua.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/lualine.nvim/ftplugin/lua_*.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/lualine.nvim/ftplugin/lua/*.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/neon/ftplugin/lua.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/neon/ftplugin/lua_*.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/neon/ftplugin/lua/*.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/nvim-neoclip.lua/ftplugin/lua.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/nvim-neoclip.lua/ftplugin/lua_*.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/nvim-neoclip.lua/ftplugin/lua/*.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/nvim-treesitter/ftplugin/lua.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/nvim-treesitter/ftplugin/lua_*.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/nvim-treesitter/ftplugin/lua/*.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/nvim-web-devicons/ftplugin/lua.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/nvim-web-devicons/ftplugin/lua_*.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/nvim-web-devicons/ftplugin/lua/*.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/packer.nvim/ftplugin/lua.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/packer.nvim/ftplugin/lua_*.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/packer.nvim/ftplugin/lua/*.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/plenary.nvim/ftplugin/lua.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/plenary.nvim/ftplugin/lua_*.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/plenary.nvim/ftplugin/lua/*.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/session-lens/ftplugin/lua.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/session-lens/ftplugin/lua_*.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/session-lens/ftplugin/lua/*.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/sqlite.lua/ftplugin/lua.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/sqlite.lua/ftplugin/lua_*.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/sqlite.lua/ftplugin/lua/*.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/suda.vim/ftplugin/lua.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/suda.vim/ftplugin/lua_*.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/suda.vim/ftplugin/lua/*.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/telescope-file-browser.nvim/ftplugin/lua.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/telescope-file-browser.nvim/ftplugin/lua_*.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/telescope-file-browser.nvim/ftplugin/lua/*.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/telescope-fzf-native.nvim/ftplugin/lua.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/telescope-fzf-native.nvim/ftplugin/lua_*.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/telescope-fzf-native.nvim/ftplugin/lua/*.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/telescope-packer.nvim/ftplugin/lua.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/telescope-packer.nvim/ftplugin/lua_*.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/telescope-packer.nvim/ftplugin/lua/*.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/telescope-repo.nvim/ftplugin/lua.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/telescope-repo.nvim/ftplugin/lua_*.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/telescope-repo.nvim/ftplugin/lua/*.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/telescope-symbols.nvim/ftplugin/lua.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/telescope-symbols.nvim/ftplugin/lua_*.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/telescope-symbols.nvim/ftplugin/lua/*.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/telescope.nvim/ftplugin/lua.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/telescope.nvim/ftplugin/lua_*.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/telescope.nvim/ftplugin/lua/*.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/vim-fugitive/ftplugin/lua.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/vim-fugitive/ftplugin/lua_*.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/vim-fugitive/ftplugin/lua/*.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/vim-polyglot/ftplugin/lua.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/vim-polyglot/ftplugin/lua_*.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/vim-polyglot/ftplugin/lua/*.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/vim-rooter/ftplugin/lua.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/vim-rooter/ftplugin/lua_*.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/vim-rooter/ftplugin/lua/*.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/which-key.nvim/ftplugin/lua.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/which-key.nvim/ftplugin/lua_*.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/which-key.nvim/ftplugin/lua/*.lua"
Searching for "/Users/ablanken/.local/nvim-brew/Cellar/neovim/0.7.0/share/nvim/runtime/ftplugin/lua.lua"
Searching for "/Users/ablanken/.local/nvim-brew/Cellar/neovim/0.7.0/share/nvim/runtime/ftplugin/lua_*.lua"
Searching for "/Users/ablanken/.local/nvim-brew/Cellar/neovim/0.7.0/share/nvim/runtime/ftplugin/lua/*.lua"
Searching for "/Users/ablanken/.local/nvim-brew/Cellar/neovim/0.7.0/share/nvim/runtime/pack/dist/opt/matchit/ftplugin/lua.lua"
Searching for "/Users/ablanken/.local/nvim-brew/Cellar/neovim/0.7.0/share/nvim/runtime/pack/dist/opt/matchit/ftplugin/lua_*.lua"
Searching for "/Users/ablanken/.local/nvim-brew/Cellar/neovim/0.7.0/share/nvim/runtime/pack/dist/opt/matchit/ftplugin/lua/*.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/Comment.nvim/after/ftplugin/lua.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/Comment.nvim/after/ftplugin/lua_*.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/Comment.nvim/after/ftplugin/lua/*.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/vim-polyglot/after/ftplugin/lua.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/vim-polyglot/after/ftplugin/lua_*.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/vim-polyglot/after/ftplugin/lua/*.lua"
not found in runtime path: "ftplugin/lua.lua ftplugin/lua_*.lua ftplugin/lua/*.lua"
line 20:       endfor
line 16:       for name in split(s, '\.')
line 17:         exe 'runtime! ftplugin/' . name . '.vim ftplugin/' . name . '_*.vim ftplugin/' . name . '/*.vim'
line 18:         " Load lua ftplugins
line 19:         exe printf('runtime! ftplugin/%s.lua ftplugin/%s_*.lua ftplugin/%s/*.lua', name, name, name)
line 20:       endfor
line 21:     endif
function <SNR>1_LoadFTPlugin returning #0

continuing in FileType Autocommands for "*"

Executing FileType Autocommands for "*"
autocommand call s:LoadIndent()

Executing: call s:LoadIndent()
calling function <SNR>2_LoadIndent()

line 1:     if exists("b:undo_indent")
line 2:       exe b:undo_indent
line 3:       unlet! b:undo_indent b:did_indent
line 4:     endif
line 5:     let s = expand("<amatch>")
line 6:     if s != ""
line 7:       if exists("b:did_indent")
line 8: ^Iunlet b:did_indent
line 9:       endif
line 10: 
line 11:       " When there is a dot it is used to separate filetype names.  Thus for
line 12:       " "aaa.bbb" load "indent/aaa.vim" and then "indent/bbb.vim".
line 13:       for name in split(s, '\.')
line 14:         exe 'runtime! indent/' . name . '.vim'
line 14: runtime! indent/lua.vim
Searching for "indent/lua.vim" in runtime path
Searching for "/Users/ablanken/.config/nvim/indent/lua.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/indent/lua.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/42header/indent/lua.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/auto-session/indent/lua.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/cheatsheet.nvim/indent/lua.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/coc-nvim-lua/indent/lua.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/coc.nvim/indent/lua.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/Comment.nvim/indent/lua.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/c_formatter_42.vim/indent/lua.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/FTerm.nvim/indent/lua.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/gentoo-syntax/indent/lua.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/gitsigns.nvim/indent/lua.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/indent-blankline.nvim/indent/lua.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/lualine.nvim/indent/lua.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/neon/indent/lua.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/nvim-neoclip.lua/indent/lua.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/nvim-treesitter/indent/lua.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/nvim-web-devicons/indent/lua.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/packer.nvim/indent/lua.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/plenary.nvim/indent/lua.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/session-lens/indent/lua.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/sqlite.lua/indent/lua.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/suda.vim/indent/lua.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/telescope-file-browser.nvim/indent/lua.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/telescope-fzf-native.nvim/indent/lua.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/telescope-packer.nvim/indent/lua.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/telescope-repo.nvim/indent/lua.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/telescope-symbols.nvim/indent/lua.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/telescope.nvim/indent/lua.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/vim-fugitive/indent/lua.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/vim-polyglot/indent/lua.vim"
chdir(/Users/ablanken)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/vim-polyglot/indent)
chdir(/Users/ablanken)
line 14: sourcing "/Users/ablanken/.local/share/nvim/site/pack/packer/start/vim-polyglot/indent/lua.vim"
line 1: if polyglot#init#is_disabled(expand('<sfile>:p'), 'lua', 'indent/lua.vim')
calling function polyglot#init#is_disabled('/Users/ablanken/.local/share/nvim/sit...cker/start/vim-polyglot/indent/lua.vim', 'lua', 'indent/lua.vim')

line 1:   if !g:polyglot_initialized
line 2:     if a:path[0:7] == "autoload"
line 3:       let g:polyglot_initialized = 1
line 4: 
line 5:       for p in globpath(&rtp, a:path, 0, 1)
line 6:         if p != a:caller
line 7:           exe "source " . p
line 8:         endif
line 9:       endfor
line 10:     endif
line 11:   endif
line 12: 
line 13:   return has_key(g:polyglot_is_disabled, a:name)
function polyglot#init#is_disabled returning #0

continuing in /Users/ablanken/.local/share/nvim/site/pack/packer/start/vim-polyglot/indent/lua.vim

line 2:   finish
line 3: endif
line 4: 
line 5: " Vim indent file
line 6: " Language: Lua
line 7: " URL: https://github.com/tbastos/vim-lua
line 8: 
line 9: " Initialization ------------------------------------------{{{1
line 10: 
line 11: if exists("b:did_indent")
line 12:   finish
line 13: endif
line 14: let b:did_indent = 1
line 15: 
line 16: setlocal autoindent
line 17: setlocal nosmartindent
line 18: 
line 19: setlocal indentexpr=GetLuaIndent()
line 20: setlocal indentkeys+=0=end,0=until,0=elseif,0=else
line 21: 
line 22: " Only define the function once.
line 23: if exists("*GetLuaIndent")
line 24:   finish
line 25: endif
line 26: 
line 27: " Variables -----------------------------------------------{{{1
line 28: 
line 29: let s:open_patt = '\C\%(\<\%(function\|if\|repeat\|do\)\>\|(\|{\)'
line 30: let s:middle_patt = '\C\<\%(else\|elseif\)\>'
line 31: let s:close_patt = '\C\%(\<\%(end\|until\)\>\|)\|}\)'
line 32: 
line 33: let s:anon_func_start = '\S\+\s*[({].*\<function\s*(.*)\s*$'
line 34: let s:anon_func_end = '\<end\%(\s*[)}]\)\+'
line 35: 
line 36: let s:chained_func_call = "^\\v\\s*[:.]\\w+[({\"']"
line 37: 
line 38: " Expression used to check whether we should skip a match with searchpair().
line 39: let s:skip_expr = "synIDattr(synID(line('.'),col('.'),1),'name') =~# 'luaComment\\|luaString'"
line 40: 
line 41: " Auxiliary Functions -------------------------------------{{{1
line 42: 
line 43: function s:IsInCommentOrString(lnum, col)
line 47: 
line 48: " Find line above 'lnum' that isn't blank, in a comment or string.
line 49: function s:PrevLineOfCode(lnum)
line 56: 
line 57: " Gets line contents, excluding trailing comments.
line 58: function s:GetContents(lnum)
line 61: 
line 62: " GetLuaIndent Function -----------------------------------{{{1
line 63: 
line 64: function GetLuaIndent()
finished sourcing /Users/ablanken/.local/share/nvim/site/pack/packer/start/vim-polyglot/indent/lua.vim
continuing in function <SNR>2_LoadIndent
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/vim-rooter/indent/lua.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/which-key.nvim/indent/lua.vim"
Searching for "/Users/ablanken/.local/nvim-brew/Cellar/neovim/0.7.0/share/nvim/runtime/indent/lua.vim"
chdir(/Users/ablanken)
chdir(/Users/ablanken/.local/nvim-brew/Cellar/neovim/0.7.0/share/nvim/runtime/indent)
chdir(/Users/ablanken)
line 14: sourcing "/Users/ablanken/.local/nvim-brew/Cellar/neovim/0.7.0/share/nvim/runtime/indent/lua.vim"
line 1: " Vim indent file
line 2: " Language:^ILua script
line 3: " Maintainer:^IMarcus Aurelius Farias <marcus.cf 'at' bol.com.br>
line 4: " First Author:^IMax Ischenko <mfi 'at' ukr.net>
line 5: " Last Change:^I2017 Jun 13
line 6: 
line 7: " Only load this indent file when no other was loaded.
line 8: if exists("b:did_indent")
line 9:   finish
finished sourcing /Users/ablanken/.local/nvim-brew/Cellar/neovim/0.7.0/share/nvim/runtime/indent/lua.vim
continuing in function <SNR>2_LoadIndent
Searching for "/Users/ablanken/.local/nvim-brew/Cellar/neovim/0.7.0/share/nvim/runtime/pack/dist/opt/matchit/indent/lua.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/Comment.nvim/after/indent/lua.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/vim-polyglot/after/indent/lua.vim"
line 15:         exe 'runtime! indent/' . name . '.lua'
line 15: runtime! indent/lua.lua
Searching for "indent/lua.lua" in runtime path
Searching for "/Users/ablanken/.config/nvim/indent/lua.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/indent/lua.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/42header/indent/lua.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/auto-session/indent/lua.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/cheatsheet.nvim/indent/lua.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/coc-nvim-lua/indent/lua.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/coc.nvim/indent/lua.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/Comment.nvim/indent/lua.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/c_formatter_42.vim/indent/lua.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/FTerm.nvim/indent/lua.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/gentoo-syntax/indent/lua.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/gitsigns.nvim/indent/lua.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/indent-blankline.nvim/indent/lua.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/lualine.nvim/indent/lua.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/neon/indent/lua.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/nvim-neoclip.lua/indent/lua.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/nvim-treesitter/indent/lua.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/nvim-web-devicons/indent/lua.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/packer.nvim/indent/lua.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/plenary.nvim/indent/lua.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/session-lens/indent/lua.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/sqlite.lua/indent/lua.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/suda.vim/indent/lua.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/telescope-file-browser.nvim/indent/lua.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/telescope-fzf-native.nvim/indent/lua.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/telescope-packer.nvim/indent/lua.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/telescope-repo.nvim/indent/lua.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/telescope-symbols.nvim/indent/lua.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/telescope.nvim/indent/lua.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/vim-fugitive/indent/lua.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/vim-polyglot/indent/lua.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/vim-rooter/indent/lua.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/which-key.nvim/indent/lua.lua"
Searching for "/Users/ablanken/.local/nvim-brew/Cellar/neovim/0.7.0/share/nvim/runtime/indent/lua.lua"
Searching for "/Users/ablanken/.local/nvim-brew/Cellar/neovim/0.7.0/share/nvim/runtime/pack/dist/opt/matchit/indent/lua.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/Comment.nvim/after/indent/lua.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/vim-polyglot/after/indent/lua.lua"
not found in runtime path: "indent/lua.lua"
line 16:       endfor
line 13:       for name in split(s, '\.')
line 14:         exe 'runtime! indent/' . name . '.vim'
line 15:         exe 'runtime! indent/' . name . '.lua'
line 16:       endfor
line 17:     endif
function <SNR>2_LoadIndent returning #0

continuing in FileType Autocommands for "*"

Executing FileType Autocommands for "*"
autocommand exe "set syntax=" . expand("<amatch>")

Executing: exe "set syntax=" . expand("<amatch>")
Executing: set syntax=lua
Executing Syntax Autocommands for "*"
autocommand call s:SynSet()

Executing: call s:SynSet()
calling function <SNR>23_SynSet()

line 1:   " clear syntax for :set syntax=OFF  and any syntax name that doesn't exist
line 2:   syn clear
line 3:   if exists("b:current_syntax")
line 4:     unlet b:current_syntax
line 5:   endif
line 6: 
line 7:   let s = expand("<amatch>")
line 8:   if s == "ON"
line 9:     " :set syntax=ON
line 10:     if &filetype == ""
line 11:       echohl ErrorMsg
line 12:       echo "filetype unknown"
line 13:       echohl None
line 14:     endif
line 15:     let s = &filetype
line 16:   elseif s == "OFF"
line 17:     let s = ""
line 18:   endif
line 19: 
line 20:   if s != ""
line 21:     " Load the syntax file(s).  When there are several, separated by dots,
line 22:     " load each in sequence.  Skip empty entries.
line 23:     for name in split(s, '\.')
line 24:       if !empty(name)
line 25:         exe "runtime! syntax/" . name . ".vim syntax/" . name . "/*.vim"
line 25: runtime! syntax/lua.vim syntax/lua/*.vim
Searching for "syntax/lua.vim syntax/lua/*.vim" in runtime path
Searching for "/Users/ablanken/.config/nvim/syntax/lua.vim"
Searching for "/Users/ablanken/.config/nvim/syntax/lua/*.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/syntax/lua.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/syntax/lua/*.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/42header/syntax/lua.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/42header/syntax/lua/*.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/auto-session/syntax/lua.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/auto-session/syntax/lua/*.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/cheatsheet.nvim/syntax/lua.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/cheatsheet.nvim/syntax/lua/*.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/coc-nvim-lua/syntax/lua.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/coc-nvim-lua/syntax/lua/*.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/coc.nvim/syntax/lua.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/coc.nvim/syntax/lua/*.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/Comment.nvim/syntax/lua.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/Comment.nvim/syntax/lua/*.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/c_formatter_42.vim/syntax/lua.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/c_formatter_42.vim/syntax/lua/*.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/FTerm.nvim/syntax/lua.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/FTerm.nvim/syntax/lua/*.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/gentoo-syntax/syntax/lua.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/gentoo-syntax/syntax/lua/*.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/gitsigns.nvim/syntax/lua.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/gitsigns.nvim/syntax/lua/*.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/indent-blankline.nvim/syntax/lua.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/indent-blankline.nvim/syntax/lua/*.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/lualine.nvim/syntax/lua.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/lualine.nvim/syntax/lua/*.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/neon/syntax/lua.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/neon/syntax/lua/*.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/nvim-neoclip.lua/syntax/lua.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/nvim-neoclip.lua/syntax/lua/*.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/nvim-treesitter/syntax/lua.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/nvim-treesitter/syntax/lua/*.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/nvim-web-devicons/syntax/lua.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/nvim-web-devicons/syntax/lua/*.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/packer.nvim/syntax/lua.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/packer.nvim/syntax/lua/*.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/plenary.nvim/syntax/lua.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/plenary.nvim/syntax/lua/*.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/session-lens/syntax/lua.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/session-lens/syntax/lua/*.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/sqlite.lua/syntax/lua.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/sqlite.lua/syntax/lua/*.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/suda.vim/syntax/lua.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/suda.vim/syntax/lua/*.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/telescope-file-browser.nvim/syntax/lua.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/telescope-file-browser.nvim/syntax/lua/*.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/telescope-fzf-native.nvim/syntax/lua.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/telescope-fzf-native.nvim/syntax/lua/*.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/telescope-packer.nvim/syntax/lua.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/telescope-packer.nvim/syntax/lua/*.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/telescope-repo.nvim/syntax/lua.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/telescope-repo.nvim/syntax/lua/*.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/telescope-symbols.nvim/syntax/lua.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/telescope-symbols.nvim/syntax/lua/*.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/telescope.nvim/syntax/lua.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/telescope.nvim/syntax/lua/*.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/vim-fugitive/syntax/lua.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/vim-fugitive/syntax/lua/*.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/vim-polyglot/syntax/lua.vim"
chdir(/Users/ablanken)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/vim-polyglot/syntax)
chdir(/Users/ablanken)
line 25: sourcing "/Users/ablanken/.local/share/nvim/site/pack/packer/start/vim-polyglot/syntax/lua.vim"
line 1: if polyglot#init#is_disabled(expand('<sfile>:p'), 'lua', 'syntax/lua.vim')
calling function polyglot#init#is_disabled('/Users/ablanken/.local/share/nvim/sit...cker/start/vim-polyglot/syntax/lua.vim', 'lua', 'syntax/lua.vim')

line 1:   if !g:polyglot_initialized
line 2:     if a:path[0:7] == "autoload"
line 3:       let g:polyglot_initialized = 1
line 4: 
line 5:       for p in globpath(&rtp, a:path, 0, 1)
line 6:         if p != a:caller
line 7:           exe "source " . p
line 8:         endif
line 9:       endfor
line 10:     endif
line 11:   endif
line 12: 
line 13:   return has_key(g:polyglot_is_disabled, a:name)
function polyglot#init#is_disabled returning #0

continuing in /Users/ablanken/.local/share/nvim/site/pack/packer/start/vim-polyglot/syntax/lua.vim

line 2:   finish
line 3: endif
line 4: 
line 5: " Vim syntax file
line 6: " Language: Lua
line 7: " URL: https://github.com/tbastos/vim-lua
line 8: 
line 9: if !exists("main_syntax")
line 10:   if version < 600
line 11:     syntax clear
line 12:   elseif exists("b:current_syntax")
line 13:     finish
line 14:   endif
line 15:   let main_syntax = 'lua'
line 16: endif
line 17: 
line 18: if exists('g:lua_syntax_fancynotequal') && !has('conceal')
line 19:   unlet g:lua_syntax_fancynotequal
line 20: endif
line 21: 
line 22: 
line 23: syntax sync fromstart
line 24: 
line 25: function! s:FoldableRegion(tag, name, expr)
line 33: 
line 34: " Clusters
line 35: syntax cluster luaBase contains=luaComment,luaCommentLong,luaConstant,luaNumber,luaString,luaStringLong,luaBuiltIn
line 36: syntax cluster luaExpr contains=@luaBase,luaTable,luaParen,luaBracket,luaSpecialTable,luaSpecialValue,luaOperator,luaSymbolOperator,luaEllipsis,luaComma,luaFunc,luaFuncCall,luaError
line 37: syntax cluster luaStat contains=@luaExpr,luaIfThen,luaBlock,luaLoop,luaGoto,luaLabel,luaLocal,luaStatement,luaSemiCol,luaErrHand
line 39: 
line 40: syntax match luaNoise /\%(\.\|,\|:\|\;\)/
line 41: 
line 42: " Symbols
line 43: call s:FoldableRegion('table', 'luaTable', 'transparent matchgroup=luaBraces start="{" end="}" contains=@luaExpr')
calling function <SNR>75_FoldableRegion('table', 'luaTable', 'transparent matchgroup=luaBraces start="{" end="}" contains=@luaExpr')

line 1:   let synexpr = 'syntax region ' . a:name . ' ' . a:expr
line 2:   let pfx = 'g:lua_syntax_fold_'
line 3:   if !exists('g:lua_syntax_nofold') || exists(pfx . a:tag) || exists(pfx . a:name)
line 4:     let synexpr .= ' fold'
line 5:   end
line 6:   exec synexpr
line 6: syntax region luaTable transparent matchgroup=luaBraces start="{" end="}" contains=@luaExpr fold
function <SNR>75_FoldableRegion returning #0

continuing in /Users/ablanken/.local/share/nvim/site/pack/packer/start/vim-polyglot/syntax/lua.vim

line 45: syntax region luaParen   transparent matchgroup=luaParens   start='(' end=')' contains=@luaExpr
line 46: syntax region luaBracket transparent matchgroup=luaBrackets start="\[" end="\]" contains=@luaExpr
line 47: syntax match  luaComma ","
line 48: syntax match  luaSemiCol ";"
line 49: if !exists('g:lua_syntax_nosymboloperator')
line 50:   if exists('g:lua_syntax_fancynotequal')
line 51:     syntax match luaNotEqOperator "\V~=" conceal cchar=≠
line 52:     setlocal conceallevel=2
line 53:   endi
line 54:   syntax match luaSymbolOperator "[#<>=~^&|*/%+-]\|\.\." contains=luaNotEqOperator
line 55: endi
line 56: syntax match  luaEllipsis "\.\.\."
line 57: 
line 58: " Catch errors caused by unbalanced brackets and keywords
line 59: syntax match luaError ")"
line 60: syntax match luaError "}"
line 61: syntax match luaError "\]"
line 62: syntax match luaError "\<\%(end\|else\|elseif\|then\|until\)\>"
line 63: 
line 64: " Shebang at the start
line 65: syntax match luaComment "\%^#!.*"
line 66: 
line 67: " Comments
line 68: syntax keyword luaCommentTodo contained TODO FIXME XXX TBD
line 69: syntax match   luaComment "--.*$" contains=luaCommentTodo,luaDocTag,@Spell
line 70: call s:FoldableRegion('comment', 'luaCommentLong', 'matchgroup=luaCommentLongTag start="--\[\z(=*\)\[" end="\]\z1\]" contains=luaCommentTodo,luaDocTag,@Spell')
calling function <SNR>75_FoldableRegion('comment', 'luaCommentLong', 'matchgroup=luaCommentLongTag start="-...ntains=luaCommentTodo,luaDocTag,@Spell')

line 1:   let synexpr = 'syntax region ' . a:name . ' ' . a:expr
line 2:   let pfx = 'g:lua_syntax_fold_'
line 3:   if !exists('g:lua_syntax_nofold') || exists(pfx . a:tag) || exists(pfx . a:name)
line 4:     let synexpr .= ' fold'
line 5:   end
line 6:   exec synexpr
line 6: syntax region luaCommentLong matchgroup=luaCommentLongTag start="--\[\z(=*\)\[" end="\]\z1\]" contains=luaCommentTodo,luaDocTag,@Spell fold
function <SNR>75_FoldableRegion returning #0

continuing in /Users/ablanken/.local/share/nvim/site/pack/packer/start/vim-polyglot/syntax/lua.vim

line 72: syntax match   luaDocTag contained "\s@\k\+"
line 73: 
line 74: " Function calls
line 75: syntax match luaFuncCall /\k\+\%(\s*[{('"]\)\@=/
line 76: 
line 77: " Functions
line 78: call s:FoldableRegion('function', 'luaFunc', 'transparent matchgroup=luaFuncKeyword start="\<function\>" end="\<end\>" contains=@luaStat,luaFuncSig')
calling function <SNR>75_FoldableRegion('function', 'luaFunc', 'transparent matchgroup=luaFuncKeyword..."\<end\>" contains=@luaStat,luaFuncSig')

line 1:   let synexpr = 'syntax region ' . a:name . ' ' . a:expr
line 2:   let pfx = 'g:lua_syntax_fold_'
line 3:   if !exists('g:lua_syntax_nofold') || exists(pfx . a:tag) || exists(pfx . a:name)
line 4:     let synexpr .= ' fold'
line 5:   end
line 6:   exec synexpr
line 6: syntax region luaFunc transparent matchgroup=luaFuncKeyword start="\<function\>" end="\<end\>" contains=@luaStat,luaFuncSig fold
function <SNR>75_FoldableRegion returning #0

continuing in /Users/ablanken/.local/share/nvim/site/pack/packer/start/vim-polyglot/syntax/lua.vim

line 80: syntax region luaFuncSig contained transparent start="\(\<function\>\)\@<=" end=")" contains=luaFuncId,luaFuncArgs keepend
line 81: syntax match luaFuncId contained "[^(]*(\@=" contains=luaFuncTable,luaFuncName
line 82: syntax match luaFuncTable contained /\k\+\%(\s*[.:]\)\@=/
line 83: syntax match luaFuncName contained "[^(.:]*(\@="
line 84: syntax region luaFuncArgs contained transparent matchgroup=luaFuncParens start=/(/ end=/)/ contains=@luaBase,luaFuncArgName,luaFuncArgComma,luaEllipsis
line 85: syntax match luaFuncArgName contained /\k\+/
line 86: syntax match luaFuncArgComma contained /,/
line 87: 
line 88: " if ... then
line 89: syntax region luaIfThen transparent matchgroup=luaCond start="\<if\>" end="\<then\>"me=e-4 contains=@luaExpr nextgroup=luaThenEnd skipwhite skipempty
line 90: 
line 91: " then ... end
line 92: call s:FoldableRegion('control', 'luaThenEnd', 'contained transparent matchgroup=luaCond start="\<then\>" end="\<end\>" contains=@luaStat,luaElseifThen,luaElse')
calling function <SNR>75_FoldableRegion('control', 'luaThenEnd', 'contained transparent matchgroup=luaC...ontains=@luaStat,luaElseifThen,luaElse')

line 1:   let synexpr = 'syntax region ' . a:name . ' ' . a:expr
line 2:   let pfx = 'g:lua_syntax_fold_'
line 3:   if !exists('g:lua_syntax_nofold') || exists(pfx . a:tag) || exists(pfx . a:name)
line 4:     let synexpr .= ' fold'
line 5:   end
line 6:   exec synexpr
line 6: syntax region luaThenEnd contained transparent matchgroup=luaCond start="\<then\>" end="\<end\>" contains=@luaStat,luaElseifThen,luaElse fold
function <SNR>75_FoldableRegion returning #0

continuing in /Users/ablanken/.local/share/nvim/site/pack/packer/start/vim-polyglot/syntax/lua.vim

line 94: 
line 95: " elseif ... then
line 96: syntax region luaElseifThen contained transparent matchgroup=luaCond start="\<elseif\>" end="\<then\>" contains=@luaExpr
line 97: 
line 98: " else
line 99: syntax keyword luaElse contained else
line 100: 
line 101: " do ... end
line 102: call s:FoldableRegion('control', 'luaLoopBlock', 'transparent matchgroup=luaRepeat start="\<do\>" end="\<end\>" contains=@luaStat contained')
calling function <SNR>75_FoldableRegion('control', 'luaLoopBlock', 'transparent matchgroup=luaRepeat star...="\<end\>" contains=@luaStat contained')

line 1:   let synexpr = 'syntax region ' . a:name . ' ' . a:expr
line 2:   let pfx = 'g:lua_syntax_fold_'
line 3:   if !exists('g:lua_syntax_nofold') || exists(pfx . a:tag) || exists(pfx . a:name)
line 4:     let synexpr .= ' fold'
line 5:   end
line 6:   exec synexpr
line 6: syntax region luaLoopBlock transparent matchgroup=luaRepeat start="\<do\>" end="\<end\>" contains=@luaStat contained fold
function <SNR>75_FoldableRegion returning #0

continuing in /Users/ablanken/.local/share/nvim/site/pack/packer/start/vim-polyglot/syntax/lua.vim

line 104: call s:FoldableRegion('control', 'luaBlock', 'transparent matchgroup=luaStatement start="\<do\>" end="\<end\>" contains=@luaStat')
calling function <SNR>75_FoldableRegion('control', 'luaBlock', 'transparent matchgroup=luaStatement s...<do\>" end="\<end\>" contains=@luaStat')

line 1:   let synexpr = 'syntax region ' . a:name . ' ' . a:expr
line 2:   let pfx = 'g:lua_syntax_fold_'
line 3:   if !exists('g:lua_syntax_nofold') || exists(pfx . a:tag) || exists(pfx . a:name)
line 4:     let synexpr .= ' fold'
line 5:   end
line 6:   exec synexpr
line 6: syntax region luaBlock transparent matchgroup=luaStatement start="\<do\>" end="\<end\>" contains=@luaStat fold
function <SNR>75_FoldableRegion returning #0

continuing in /Users/ablanken/.local/share/nvim/site/pack/packer/start/vim-polyglot/syntax/lua.vim

line 106: 
line 107: " repeat ... until
line 108: call s:FoldableRegion('control', 'luaLoop', 'transparent matchgroup=luaRepeat start="\<repeat\>" end="\<until\>" contains=@luaStat nextgroup=@luaExpr')
calling function <SNR>75_FoldableRegion('control', 'luaLoop', 'transparent matchgroup=luaRepeat star..." contains=@luaStat nextgroup=@luaExpr')

line 1:   let synexpr = 'syntax region ' . a:name . ' ' . a:expr
line 2:   let pfx = 'g:lua_syntax_fold_'
line 3:   if !exists('g:lua_syntax_nofold') || exists(pfx . a:tag) || exists(pfx . a:name)
line 4:     let synexpr .= ' fold'
line 5:   end
line 6:   exec synexpr
line 6: syntax region luaLoop transparent matchgroup=luaRepeat start="\<repeat\>" end="\<until\>" contains=@luaStat nextgroup=@luaExpr fold
function <SNR>75_FoldableRegion returning #0

continuing in /Users/ablanken/.local/share/nvim/site/pack/packer/start/vim-polyglot/syntax/lua.vim

line 110: 
line 111: " while ... do
line 112: syntax region luaLoop transparent matchgroup=luaRepeat start="\<while\>" end="\<do\>"me=e-2 contains=@luaExpr nextgroup=luaLoopBlock skipwhite skipempty
line 113: 
line 114: " for ... do and for ... in ... do
line 115: syntax region luaLoop transparent matchgroup=luaRepeat start="\<for\>" end="\<do\>"me=e-2 contains=@luaExpr,luaIn nextgroup=luaLoopBlock skipwhite skipempty
line 116: syntax keyword luaIn contained in
line 117: 
line 118: " goto and labels
line 119: syntax keyword luaGoto goto nextgroup=luaGotoLabel skipwhite
line 120: syntax match luaGotoLabel "\k\+" contained
line 121: syntax match luaLabel "::\k\+::"
line 122: 
line 123: " Other Keywords
line 124: syntax keyword luaConstant nil true false
line 125: syntax keyword luaBuiltIn _ENV self
line 126: syntax keyword luaLocal local
line 127: syntax keyword luaOperator and or not
line 128: syntax keyword luaStatement break return
line 129: 
line 130: " Strings
line 131: syntax match  luaStringSpecial contained #\\[\\abfnrtvz'"]\|\\x[[:xdigit:]]\{2}\|\\[[:digit:]]\{,3}#
line 132: call s:FoldableRegion('string', 'luaStringLong', 'matchgroup=luaStringLongTag start="\[\z(=*\)\[" end="\]\z1\]" contains=@Spell')
calling function <SNR>75_FoldableRegion('string', 'luaStringLong', 'matchgroup=luaStringLongTag start="\[\z(=*\)\[" end="\]\z1\]" contains=@Spell')

line 1:   let synexpr = 'syntax region ' . a:name . ' ' . a:expr
line 2:   let pfx = 'g:lua_syntax_fold_'
line 3:   if !exists('g:lua_syntax_nofold') || exists(pfx . a:tag) || exists(pfx . a:name)
line 4:     let synexpr .= ' fold'
line 5:   end
line 6:   exec synexpr
line 6: syntax region luaStringLong matchgroup=luaStringLongTag start="\[\z(=*\)\[" end="\]\z1\]" contains=@Spell fold
function <SNR>75_FoldableRegion returning #0

continuing in /Users/ablanken/.local/share/nvim/site/pack/packer/start/vim-polyglot/syntax/lua.vim

line 134: syntax region luaString  start=+'+ end=+'+ skip=+\\\\\|\\'+ contains=luaStringSpecial,@Spell
line 135: syntax region luaString  start=+"+ end=+"+ skip=+\\\\\|\\"+ contains=luaStringSpecial,@Spell
line 136: 
line 137: " Decimal constant
line 138: syntax match luaNumber "\<\d\+\>"
line 139: " Hex constant
line 140: syntax match luaNumber "\<0[xX][[:xdigit:].]\+\%([pP][-+]\=\d\+\)\=\>"
line 141: " Floating point constant, with dot, optional exponent
line 142: syntax match luaFloat  "\<\d\+\.\d*\%([eE][-+]\=\d\+\)\=\>"
line 143: " Floating point constant, starting with a dot, optional exponent
line 144: syntax match luaFloat  "\.\d\+\%([eE][-+]\=\d\+\)\=\>"
line 145: " Floating point constant, without dot, with exponent
line 146: syntax match luaFloat  "\<\d\+[eE][-+]\=\d\+\>"
line 147: 
line 148: 
line 149: " Special names from the Standard Library
line 150: if !exists('g:lua_syntax_nostdlib')
line 151:     syntax keyword luaSpecialValue module require
line 154: 
line 155:     syntax keyword luaSpecialTable _G
line 156: 
line 157:     syntax keyword luaErrHand assert error pcall xpcall
line 162: 
line 163:   if !exists('g:lua_syntax_noextendedstdlib')
line 164:     syntax keyword luaSpecialTable bit32 coroutine debug io math os package string table utf8
line 175: 
line 176:     syntax keyword luaSpecialValue _VERSION collectgarbage dofile getfenv getmetatable ipairs load loadfile loadstring next pairs print rawequal rawget rawlen rawset select setfenv setmetatable tonumber tostring type unpack
line 200:   endif
line 201: endif
line 202: 
line 203: " Define the default highlighting.
line 204: " For version 5.7 and earlier: only when not done already
line 205: " For version 5.8 and later: only when an item doesn't have highlighting yet
line 206: if version >= 508 || !exists("did_lua_syn_inits")
line 207:   if version < 508
line 208:     let did_lua_syn_inits = 1
line 209:     command -nargs=+ HiLink hi link <args>
line 210:   else
line 211:     command -nargs=+ HiLink hi def link <args>
line 212:   endif
line 213:   HiLink luaParens           Noise
line 213: hi def link luaParens           Noise
line 214:   HiLink luaBraces           Structure
line 214: hi def link luaBraces           Structure
line 215:   HiLink luaBrackets         Noise
line 215: hi def link luaBrackets         Noise
line 216:   HiLink luaBuiltIn          Special
line 216: hi def link luaBuiltIn          Special
line 217:   HiLink luaComment          Comment
line 217: hi def link luaComment          Comment
line 218:   HiLink luaCommentLongTag   luaCommentLong
line 218: hi def link luaCommentLongTag   luaCommentLong
line 219:   HiLink luaCommentLong      luaComment
line 219: hi def link luaCommentLong      luaComment
line 220:   HiLink luaCommentTodo      Todo
line 220: hi def link luaCommentTodo      Todo
line 221:   HiLink luaCond             Conditional
line 221: hi def link luaCond             Conditional
line 222:   HiLink luaConstant         Constant
line 222: hi def link luaConstant         Constant
line 223:   HiLink luaDocTag           Underlined
line 223: hi def link luaDocTag           Underlined
line 224:   HiLink luaEllipsis         Special
line 224: hi def link luaEllipsis         Special
line 225:   HiLink luaElse             Conditional
line 225: hi def link luaElse             Conditional
line 226:   HiLink luaError            Error
line 226: hi def link luaError            Error
line 227:   HiLink luaFloat            Float
line 227: hi def link luaFloat            Float
line 228:   HiLink luaFuncArgName      Noise
line 228: hi def link luaFuncArgName      Noise
line 229:   HiLink luaFuncCall         PreProc
line 229: hi def link luaFuncCall         PreProc
line 230:   HiLink luaFuncId           Function
line 230: hi def link luaFuncId           Function
line 231:   HiLink luaFuncName         luaFuncId
line 231: hi def link luaFuncName         luaFuncId
line 232:   HiLink luaFuncTable        luaFuncId
line 232: hi def link luaFuncTable        luaFuncId
line 233:   HiLink luaFuncKeyword      luaFunction
line 233: hi def link luaFuncKeyword      luaFunction
line 234:   HiLink luaFunction         Structure
line 234: hi def link luaFunction         Structure
line 235:   HiLink luaFuncParens       Noise
line 235: hi def link luaFuncParens       Noise
line 236:   HiLink luaGoto             luaStatement
line 236: hi def link luaGoto             luaStatement
line 237:   HiLink luaGotoLabel        Noise
line 237: hi def link luaGotoLabel        Noise
line 238:   HiLink luaIn               Repeat
line 238: hi def link luaIn               Repeat
line 239:   HiLink luaLabel            Label
line 239: hi def link luaLabel            Label
line 240:   HiLink luaLocal            Type
line 240: hi def link luaLocal            Type
line 241:   HiLink luaNumber           Number
line 241: hi def link luaNumber           Number
line 242:   HiLink luaSymbolOperator   luaOperator
line 242: hi def link luaSymbolOperator   luaOperator
line 243:   HiLink luaNotEqOperator    luaOperator
line 243: hi def link luaNotEqOperator    luaOperator
line 244:   HiLink luaOperator         Operator
line 244: hi def link luaOperator         Operator
line 245:   HiLink luaRepeat           Repeat
line 245: hi def link luaRepeat           Repeat
line 246:   HiLink luaSemiCol          Delimiter
line 246: hi def link luaSemiCol          Delimiter
line 247:   HiLink luaSpecialTable     Special
line 247: hi def link luaSpecialTable     Special
line 248:   HiLink luaSpecialValue     PreProc
line 248: hi def link luaSpecialValue     PreProc
line 249:   HiLink luaStatement        Statement
line 249: hi def link luaStatement        Statement
line 250:   HiLink luaString           String
line 250: hi def link luaString           String
line 251:   HiLink luaStringLong       luaString
line 251: hi def link luaStringLong       luaString
line 252:   HiLink luaStringSpecial    SpecialChar
line 252: hi def link luaStringSpecial    SpecialChar
line 253:   HiLink luaErrHand          Exception
line 253: hi def link luaErrHand          Exception
line 254: 
line 255:   if exists('g:lua_syntax_fancynotequal')
line 256:     hi! link Conceal luaOperator
line 257:   endi
line 258: 
line 259:   delcommand HiLink
line 260: end
line 261: 
line 262: let b:current_syntax = "lua"
line 263: if main_syntax == 'lua'
line 264:   unlet main_syntax
line 265: endif
finished sourcing /Users/ablanken/.local/share/nvim/site/pack/packer/start/vim-polyglot/syntax/lua.vim
continuing in function <SNR>23_SynSet
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/vim-polyglot/syntax/lua/*.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/vim-rooter/syntax/lua.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/vim-rooter/syntax/lua/*.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/which-key.nvim/syntax/lua.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/which-key.nvim/syntax/lua/*.vim"
Searching for "/Users/ablanken/.local/nvim-brew/Cellar/neovim/0.7.0/share/nvim/runtime/syntax/lua.vim"
chdir(/Users/ablanken)
chdir(/Users/ablanken/.local/nvim-brew/Cellar/neovim/0.7.0/share/nvim/runtime/syntax)
chdir(/Users/ablanken)
line 25: sourcing "/Users/ablanken/.local/nvim-brew/Cellar/neovim/0.7.0/share/nvim/runtime/syntax/lua.vim"
line 1: " Vim syntax file
line 2: " Language:^ILua 4.0, Lua 5.0, Lua 5.1 and Lua 5.2
line 3: " Maintainer:^IMarcus Aurelius Farias <masserahguard-lua 'at' yahoo com>
line 4: " First Author:^ICarlos Augusto Teixeira Mendes <cmendes 'at' inf puc-rio br>
line 5: " Last Change:^I2022 Mar 31
line 6: " Options:^Ilua_version = 4 or 5
line 7: "^I^Ilua_subversion = 0 (4.0, 5.0) or 1 (5.1) or 2 (5.2)
line 8: "^I^Idefault 5.2
line 9: 
line 10: " quit when a syntax file was already loaded
line 11: if exists("b:current_syntax")
line 12:   finish
finished sourcing /Users/ablanken/.local/nvim-brew/Cellar/neovim/0.7.0/share/nvim/runtime/syntax/lua.vim
continuing in function <SNR>23_SynSet
Searching for "/Users/ablanken/.local/nvim-brew/Cellar/neovim/0.7.0/share/nvim/runtime/syntax/lua/*.vim"
Searching for "/Users/ablanken/.local/nvim-brew/Cellar/neovim/0.7.0/share/nvim/runtime/pack/dist/opt/matchit/syntax/lua.vim"
Searching for "/Users/ablanken/.local/nvim-brew/Cellar/neovim/0.7.0/share/nvim/runtime/pack/dist/opt/matchit/syntax/lua/*.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/Comment.nvim/after/syntax/lua.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/Comment.nvim/after/syntax/lua/*.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/vim-polyglot/after/syntax/lua.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/vim-polyglot/after/syntax/lua/*.vim"
line 26:         exe "runtime! syntax/" . name . ".lua syntax/" . name . "/*.lua"
line 26: runtime! syntax/lua.lua syntax/lua/*.lua
Searching for "syntax/lua.lua syntax/lua/*.lua" in runtime path
Searching for "/Users/ablanken/.config/nvim/syntax/lua.lua"
Searching for "/Users/ablanken/.config/nvim/syntax/lua/*.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/syntax/lua.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/syntax/lua/*.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/42header/syntax/lua.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/42header/syntax/lua/*.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/auto-session/syntax/lua.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/auto-session/syntax/lua/*.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/cheatsheet.nvim/syntax/lua.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/cheatsheet.nvim/syntax/lua/*.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/coc-nvim-lua/syntax/lua.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/coc-nvim-lua/syntax/lua/*.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/coc.nvim/syntax/lua.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/coc.nvim/syntax/lua/*.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/Comment.nvim/syntax/lua.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/Comment.nvim/syntax/lua/*.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/c_formatter_42.vim/syntax/lua.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/c_formatter_42.vim/syntax/lua/*.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/FTerm.nvim/syntax/lua.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/FTerm.nvim/syntax/lua/*.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/gentoo-syntax/syntax/lua.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/gentoo-syntax/syntax/lua/*.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/gitsigns.nvim/syntax/lua.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/gitsigns.nvim/syntax/lua/*.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/indent-blankline.nvim/syntax/lua.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/indent-blankline.nvim/syntax/lua/*.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/lualine.nvim/syntax/lua.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/lualine.nvim/syntax/lua/*.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/neon/syntax/lua.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/neon/syntax/lua/*.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/nvim-neoclip.lua/syntax/lua.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/nvim-neoclip.lua/syntax/lua/*.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/nvim-treesitter/syntax/lua.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/nvim-treesitter/syntax/lua/*.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/nvim-web-devicons/syntax/lua.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/nvim-web-devicons/syntax/lua/*.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/packer.nvim/syntax/lua.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/packer.nvim/syntax/lua/*.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/plenary.nvim/syntax/lua.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/plenary.nvim/syntax/lua/*.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/session-lens/syntax/lua.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/session-lens/syntax/lua/*.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/sqlite.lua/syntax/lua.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/sqlite.lua/syntax/lua/*.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/suda.vim/syntax/lua.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/suda.vim/syntax/lua/*.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/telescope-file-browser.nvim/syntax/lua.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/telescope-file-browser.nvim/syntax/lua/*.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/telescope-fzf-native.nvim/syntax/lua.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/telescope-fzf-native.nvim/syntax/lua/*.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/telescope-packer.nvim/syntax/lua.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/telescope-packer.nvim/syntax/lua/*.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/telescope-repo.nvim/syntax/lua.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/telescope-repo.nvim/syntax/lua/*.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/telescope-symbols.nvim/syntax/lua.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/telescope-symbols.nvim/syntax/lua/*.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/telescope.nvim/syntax/lua.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/telescope.nvim/syntax/lua/*.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/vim-fugitive/syntax/lua.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/vim-fugitive/syntax/lua/*.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/vim-polyglot/syntax/lua.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/vim-polyglot/syntax/lua/*.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/vim-rooter/syntax/lua.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/vim-rooter/syntax/lua/*.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/which-key.nvim/syntax/lua.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/which-key.nvim/syntax/lua/*.lua"
Searching for "/Users/ablanken/.local/nvim-brew/Cellar/neovim/0.7.0/share/nvim/runtime/syntax/lua.lua"
Searching for "/Users/ablanken/.local/nvim-brew/Cellar/neovim/0.7.0/share/nvim/runtime/syntax/lua/*.lua"
Searching for "/Users/ablanken/.local/nvim-brew/Cellar/neovim/0.7.0/share/nvim/runtime/pack/dist/opt/matchit/syntax/lua.lua"
Searching for "/Users/ablanken/.local/nvim-brew/Cellar/neovim/0.7.0/share/nvim/runtime/pack/dist/opt/matchit/syntax/lua/*.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/Comment.nvim/after/syntax/lua.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/Comment.nvim/after/syntax/lua/*.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/vim-polyglot/after/syntax/lua.lua"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/vim-polyglot/after/syntax/lua/*.lua"
not found in runtime path: "syntax/lua.lua syntax/lua/*.lua"
line 27:       endif
line 28:     endfor
line 23:     for name in split(s, '\.')
line 24:       if !empty(name)
line 25:         exe "runtime! syntax/" . name . ".vim syntax/" . name . "/*.vim"
line 26:         exe "runtime! syntax/" . name . ".lua syntax/" . name . "/*.lua"
line 27:       endif
line 28:     endfor
line 29:   endif
function <SNR>23_SynSet returning #0

continuing in Syntax Autocommands for "*"

Executing FileType Autocommands for "*"
autocommand call s:Autocmd('FileType', expand('<amatch>'), +expand('<abuf>'))

Executing: call s:Autocmd('FileType', expand('<amatch>'), +expand('<abuf>'))
calling function <SNR>44_Autocmd('FileType', 'lua', 2)

line 1:   if !get(g:, 'coc_workspace_initialized', 0)
line 2:     return
function <SNR>44_Autocmd returning #0

continuing in FileType Autocommands for "*"

Executing FileType Autocommands for "*"
autocommand IndentBlanklineRefresh

Executing: IndentBlanklineRefresh
Executing: call s:try('lua require("indent_blankline.commands").refresh("" == "!")')
calling function <SNR>54_try('lua require("indent_blankline.commands").refresh("" == "!")')

line 1:     try
line 2:         execute a:cmd
line 2: lua require("indent_blankline.commands").refresh("" == "!")
Searching for "queries/lua/indents.scm" in runtime path
Searching for "/Users/ablanken/.config/nvim/queries/lua/indents.scm"
Searching for "/Users/ablanken/.local/share/nvim/site/queries/lua/indents.scm"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/42header/queries/lua/indents.scm"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/auto-session/queries/lua/indents.scm"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/cheatsheet.nvim/queries/lua/indents.scm"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/coc-nvim-lua/queries/lua/indents.scm"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/coc.nvim/queries/lua/indents.scm"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/Comment.nvim/queries/lua/indents.scm"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/c_formatter_42.vim/queries/lua/indents.scm"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/FTerm.nvim/queries/lua/indents.scm"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/gentoo-syntax/queries/lua/indents.scm"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/gitsigns.nvim/queries/lua/indents.scm"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/indent-blankline.nvim/queries/lua/indents.scm"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/lualine.nvim/queries/lua/indents.scm"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/neon/queries/lua/indents.scm"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/nvim-neoclip.lua/queries/lua/indents.scm"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/nvim-treesitter/queries/lua/indents.scm"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/nvim-web-devicons/queries/lua/indents.scm"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/packer.nvim/queries/lua/indents.scm"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/plenary.nvim/queries/lua/indents.scm"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/session-lens/queries/lua/indents.scm"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/sqlite.lua/queries/lua/indents.scm"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/suda.vim/queries/lua/indents.scm"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/telescope-file-browser.nvim/queries/lua/indents.scm"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/telescope-fzf-native.nvim/queries/lua/indents.scm"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/telescope-packer.nvim/queries/lua/indents.scm"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/telescope-repo.nvim/queries/lua/indents.scm"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/telescope-symbols.nvim/queries/lua/indents.scm"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/telescope.nvim/queries/lua/indents.scm"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/vim-fugitive/queries/lua/indents.scm"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/vim-polyglot/queries/lua/indents.scm"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/vim-rooter/queries/lua/indents.scm"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/which-key.nvim/queries/lua/indents.scm"
Searching for "/Users/ablanken/.local/nvim-brew/Cellar/neovim/0.7.0/share/nvim/runtime/queries/lua/indents.scm"
Searching for "/Users/ablanken/.local/nvim-brew/Cellar/neovim/0.7.0/share/nvim/runtime/pack/dist/opt/matchit/queries/lua/indents.scm"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/Comment.nvim/after/queries/lua/indents.scm"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/vim-polyglot/after/queries/lua/indents.scm"
Searching for "parser/lua.*" in runtime path
Searching for "/Users/ablanken/.config/nvim/parser/lua.*"
Searching for "/Users/ablanken/.local/share/nvim/site/parser/lua.*"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/42header/parser/lua.*"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/auto-session/parser/lua.*"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/cheatsheet.nvim/parser/lua.*"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/coc-nvim-lua/parser/lua.*"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/coc.nvim/parser/lua.*"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/Comment.nvim/parser/lua.*"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/c_formatter_42.vim/parser/lua.*"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/FTerm.nvim/parser/lua.*"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/gentoo-syntax/parser/lua.*"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/gitsigns.nvim/parser/lua.*"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/indent-blankline.nvim/parser/lua.*"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/lualine.nvim/parser/lua.*"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/neon/parser/lua.*"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/nvim-neoclip.lua/parser/lua.*"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/nvim-treesitter/parser/lua.*"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/nvim-web-devicons/parser/lua.*"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/packer.nvim/parser/lua.*"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/plenary.nvim/parser/lua.*"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/session-lens/parser/lua.*"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/sqlite.lua/parser/lua.*"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/suda.vim/parser/lua.*"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/telescope-file-browser.nvim/parser/lua.*"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/telescope-fzf-native.nvim/parser/lua.*"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/telescope-packer.nvim/parser/lua.*"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/telescope-repo.nvim/parser/lua.*"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/telescope-symbols.nvim/parser/lua.*"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/telescope.nvim/parser/lua.*"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/vim-fugitive/parser/lua.*"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/vim-polyglot/parser/lua.*"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/vim-rooter/parser/lua.*"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/which-key.nvim/parser/lua.*"
Searching for "/Users/ablanken/.local/nvim-brew/Cellar/neovim/0.7.0/share/nvim/runtime/parser/lua.*"
Searching for "/Users/ablanken/.local/nvim-brew/Cellar/neovim/0.7.0/share/nvim/runtime/pack/dist/opt/matchit/parser/lua.*"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/Comment.nvim/after/parser/lua.*"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/vim-polyglot/after/parser/lua.*"
not found in runtime path: "parser/lua.*"
line 3:     catch /E12/
line 4:         return
line 5:     endtry
function <SNR>54_try returning #0

continuing in FileType Autocommands for "*"

Executing FileType Autocommands for "*"
autocommand Reattach module

Executing: 
Executing BufReadPost Autocommands for "*"
autocommand if (&ft == "" || &ft == "conf") && expand("<afile>:e") == "" | call polyglot#shebang#Detect() | endif

Executing: if (&ft == "" || &ft == "conf") && expand("<afile>:e") == "" | call polyglot#shebang#Detect() | endif
Executing:  call polyglot#shebang#Detect() | endif
Executing:  endif
Executing BufReadPost Autocommands for "*"
autocommand if !did_filetype() && expand("<amatch>") !~ g:ft_ignore_pat | runtime! scripts.vim | endif

Executing: if !did_filetype() && expand("<amatch>") !~ g:ft_ignore_pat | runtime! scripts.vim | endif
Executing:  runtime! scripts.vim | endif
Executing:  endif
Executing BufReadPost Autocommands for "*"
autocommand call s:Autocmd('BufCreate', +expand('<abuf>'))

Executing: call s:Autocmd('BufCreate', +expand('<abuf>'))
calling function <SNR>44_Autocmd('BufCreate', 2)

line 1:   if !get(g:, 'coc_workspace_initialized', 0)
line 2:     return
function <SNR>44_Autocmd returning #0

continuing in BufReadPost Autocommands for "*"

Executing BufReadPost Autocommands for "*"
autocommand call FugitiveDetect(+expand('<abuf>'), 0)

Executing: call FugitiveDetect(+expand('<abuf>'), 0)
calling function FugitiveDetect(2, 0)

line 1:   if v:version < 703
line 2:     return ''
line 3:   endif
line 4:   if exists('b:git_dir') && b:git_dir =~# '^$\|' . s:bad_git_dir
line 5:     unlet b:git_dir
line 6:   endif
line 7:   if a:0 > 1 && a:2 is# 0 && !exists('#User#Fugitive')
line 8:     return ''
function FugitiveDetect returning ''

continuing in BufReadPost Autocommands for "*"

Executing BufReadPost Autocommands for "*"
autocommand if !g:rooter_manual_only | Rooter | endif

Executing: if !g:rooter_manual_only | Rooter | endif
Executing:  Rooter | endif
Executing: call <80><fd>R65_rooter()
calling function <SNR>65_rooter()

line 1:   if !s:activate() | return | endif
calling function <SNR>65_rooter[1]..<SNR>65_activate()

line 1:   " Directory browser plugins (e.g. vim-dirvish, NERDTree) tend to
line 2:   " set a nofile buftype when you open a directory.
line 3:   if &buftype != '' && &buftype != 'nofile' | return 0 | endif
line 3:  return 0 | endif
line 3:  endif
line 4: 
line 5:   let patterns = split(g:rooter_targets, ',')
line 6:   let fn = expand('%:p', 1)
chdir(/Users/ablanken)
chdir(Sync/src/neovim-conf/conf/nvim)
chdir(/Users/ablanken)
line 7: 
line 8:   if fn =~ 'NERD_tree_\d\+$' | let fn = b:NERDTree.root.path.str().'/' | endif
line 8:  let fn = b:NERDTree.root.path.str().'/' | endif
line 8:  endif
line 9: 
line 10:   " directory
line 11:   if empty(fn) || fn[-1:] == '/'
line 12:     return index(patterns, '/') != -1
line 13:   endif
line 14: 
line 15:   " file
line 16:   if !filereadable(fn) | return 0 | endif
line 16:  return 0 | endif
line 16:  endif
line 17:   if !exists('*glob2regpat') | return 1 | endif
line 17:  return 1 | endif
line 17:  endif
line 18: 
line 19:   for p in filter(copy(patterns), 'v:val != "/"')
line 20:     if fn =~ glob2regpat(p)
line 21:       return 1
function <SNR>65_rooter[1]..<SNR>65_activate returning #1

continuing in function <SNR>65_rooter

line 1:  return | endif
line 1:  endif
line 2: 
line 3:   let root = getbufvar('%', 'rootDir')
line 4:   if empty(root)
line 5:     let root = s:root()
calling function <SNR>65_rooter[5]..<SNR>65_root()

line 1:   let dir = s:current()
calling function <SNR>65_rooter[5]..<SNR>65_root[1]..<SNR>65_current()

line 1:   let fn = expand('%:p', 1)
chdir(/Users/ablanken)
chdir(Sync/src/neovim-conf/conf/nvim)
chdir(/Users/ablanken)
line 2:   if fn =~ 'NERD_tree_\d\+$' | let fn = b:NERDTree.root.path.str().'/' | endif
line 2:  let fn = b:NERDTree.root.path.str().'/' | endif
line 2:  endif
line 3:   if empty(fn) | return getcwd() | endif  " opening vim without a file
line 3:  return getcwd() | endif  " opening vim without a file
line 3:  endif  " opening vim without a file
line 4:   if g:rooter_resolve_links | let fn = resolve(fn) | endif
line 4:  let fn = resolve(fn) | endif
line 4:  endif
line 5:   return fnamemodify(fn, ':h')
function <SNR>65_rooter[5]..<SNR>65_root[1]..<SNR>65_current returning '/Users/ablanken/Sync/src/neovim-conf/conf/nvim'

continuing in function <SNR>65_rooter[5]..<SNR>65_root

line 2: 
line 3:   " breadth-first search
line 4:   while 1
line 5:     for pattern in g:rooter_patterns
line 6:       if pattern[0] == '!'
line 7:         let [p, exclude] = [pattern[1:], 1]
line 8:       else
line 9:         let [p, exclude] = [pattern, 0]
line 10:       endif
line 11:       if s:match(dir, p)
calling function <SNR>65_rooter[5]..<SNR>65_root[11]..<SNR>65_match('/Users/ablanken/Sync/src/neovim-conf/conf/nvim', '.git')

line 1:   if a:pattern[0] == '='
line 2:     return s:is(a:dir, a:pattern[1:])
line 3:   elseif a:pattern[0] == '^'
line 4:     return s:sub(a:dir, a:pattern[1:])
line 5:   elseif a:pattern[0] == '>'
line 6:     return s:child(a:dir, a:pattern[1:])
line 7:   else
line 8:     return s:has(a:dir, a:pattern)
calling function <SNR>65_rooter[5]..<SNR>65_root[11]..<SNR>65_match[8]..<SNR>65_has('/Users/ablanken/Sync/src/neovim-conf/conf/nvim', '.git')

line 1:   " We do not want a:dir to be treated as a glob so escape any wildcards.
line 2:   " If this approach is problematic (e.g. on Windows), an alternative
line 3:   " might be to change directory to a:dir, call globpath() with just
line 4:   " a:identifier, then restore the working directory.
line 5:   return !empty(globpath(escape(a:dir, '?*[]'), a:identifier, 1))
function <SNR>65_rooter[5]..<SNR>65_root[11]..<SNR>65_match[8]..<SNR>65_has returning #0

continuing in function <SNR>65_rooter[5]..<SNR>65_root[11]..<SNR>65_match

function <SNR>65_rooter[5]..<SNR>65_root[11]..<SNR>65_match returning #0

continuing in function <SNR>65_rooter[5]..<SNR>65_root

line 12:         if exclude
line 13:           break
line 14:         else
line 15:           return dir
line 16:         endif
line 17:       endif
line 18:     endfor
line 5:     for pattern in g:rooter_patterns
line 6:       if pattern[0] == '!'
line 7:         let [p, exclude] = [pattern[1:], 1]
line 8:       else
line 9:         let [p, exclude] = [pattern, 0]
line 10:       endif
line 11:       if s:match(dir, p)
calling function <SNR>65_rooter[5]..<SNR>65_root[11]..<SNR>65_match('/Users/ablanken/Sync/src/neovim-conf/conf/nvim', '_darcs')

line 1:   if a:pattern[0] == '='
line 2:     return s:is(a:dir, a:pattern[1:])
line 3:   elseif a:pattern[0] == '^'
line 4:     return s:sub(a:dir, a:pattern[1:])
line 5:   elseif a:pattern[0] == '>'
line 6:     return s:child(a:dir, a:pattern[1:])
line 7:   else
line 8:     return s:has(a:dir, a:pattern)
calling function <SNR>65_rooter[5]..<SNR>65_root[11]..<SNR>65_match[8]..<SNR>65_has('/Users/ablanken/Sync/src/neovim-conf/conf/nvim', '_darcs')

line 1:   " We do not want a:dir to be treated as a glob so escape any wildcards.
line 2:   " If this approach is problematic (e.g. on Windows), an alternative
line 3:   " might be to change directory to a:dir, call globpath() with just
line 4:   " a:identifier, then restore the working directory.
line 5:   return !empty(globpath(escape(a:dir, '?*[]'), a:identifier, 1))
function <SNR>65_rooter[5]..<SNR>65_root[11]..<SNR>65_match[8]..<SNR>65_has returning #0

continuing in function <SNR>65_rooter[5]..<SNR>65_root[11]..<SNR>65_match

function <SNR>65_rooter[5]..<SNR>65_root[11]..<SNR>65_match returning #0

continuing in function <SNR>65_rooter[5]..<SNR>65_root

line 12:         if exclude
line 13:           break
line 14:         else
line 15:           return dir
line 16:         endif
line 17:       endif
line 18:     endfor
line 5:     for pattern in g:rooter_patterns
line 6:       if pattern[0] == '!'
line 7:         let [p, exclude] = [pattern[1:], 1]
line 8:       else
line 9:         let [p, exclude] = [pattern, 0]
line 10:       endif
line 11:       if s:match(dir, p)
calling function <SNR>65_rooter[5]..<SNR>65_root[11]..<SNR>65_match('/Users/ablanken/Sync/src/neovim-conf/conf/nvim', '.hg')

line 1:   if a:pattern[0] == '='
line 2:     return s:is(a:dir, a:pattern[1:])
line 3:   elseif a:pattern[0] == '^'
line 4:     return s:sub(a:dir, a:pattern[1:])
line 5:   elseif a:pattern[0] == '>'
line 6:     return s:child(a:dir, a:pattern[1:])
line 7:   else
line 8:     return s:has(a:dir, a:pattern)
calling function <SNR>65_rooter[5]..<SNR>65_root[11]..<SNR>65_match[8]..<SNR>65_has('/Users/ablanken/Sync/src/neovim-conf/conf/nvim', '.hg')

line 1:   " We do not want a:dir to be treated as a glob so escape any wildcards.
line 2:   " If this approach is problematic (e.g. on Windows), an alternative
line 3:   " might be to change directory to a:dir, call globpath() with just
line 4:   " a:identifier, then restore the working directory.
line 5:   return !empty(globpath(escape(a:dir, '?*[]'), a:identifier, 1))
function <SNR>65_rooter[5]..<SNR>65_root[11]..<SNR>65_match[8]..<SNR>65_has returning #0

continuing in function <SNR>65_rooter[5]..<SNR>65_root[11]..<SNR>65_match

function <SNR>65_rooter[5]..<SNR>65_root[11]..<SNR>65_match returning #0

continuing in function <SNR>65_rooter[5]..<SNR>65_root

line 12:         if exclude
line 13:           break
line 14:         else
line 15:           return dir
line 16:         endif
line 17:       endif
line 18:     endfor
line 5:     for pattern in g:rooter_patterns
line 6:       if pattern[0] == '!'
line 7:         let [p, exclude] = [pattern[1:], 1]
line 8:       else
line 9:         let [p, exclude] = [pattern, 0]
line 10:       endif
line 11:       if s:match(dir, p)
calling function <SNR>65_rooter[5]..<SNR>65_root[11]..<SNR>65_match('/Users/ablanken/Sync/src/neovim-conf/conf/nvim', '.bzr')

line 1:   if a:pattern[0] == '='
line 2:     return s:is(a:dir, a:pattern[1:])
line 3:   elseif a:pattern[0] == '^'
line 4:     return s:sub(a:dir, a:pattern[1:])
line 5:   elseif a:pattern[0] == '>'
line 6:     return s:child(a:dir, a:pattern[1:])
line 7:   else
line 8:     return s:has(a:dir, a:pattern)
calling function <SNR>65_rooter[5]..<SNR>65_root[11]..<SNR>65_match[8]..<SNR>65_has('/Users/ablanken/Sync/src/neovim-conf/conf/nvim', '.bzr')

line 1:   " We do not want a:dir to be treated as a glob so escape any wildcards.
line 2:   " If this approach is problematic (e.g. on Windows), an alternative
line 3:   " might be to change directory to a:dir, call globpath() with just
line 4:   " a:identifier, then restore the working directory.
line 5:   return !empty(globpath(escape(a:dir, '?*[]'), a:identifier, 1))
function <SNR>65_rooter[5]..<SNR>65_root[11]..<SNR>65_match[8]..<SNR>65_has returning #0

continuing in function <SNR>65_rooter[5]..<SNR>65_root[11]..<SNR>65_match

function <SNR>65_rooter[5]..<SNR>65_root[11]..<SNR>65_match returning #0

continuing in function <SNR>65_rooter[5]..<SNR>65_root

line 12:         if exclude
line 13:           break
line 14:         else
line 15:           return dir
line 16:         endif
line 17:       endif
line 18:     endfor
line 5:     for pattern in g:rooter_patterns
line 6:       if pattern[0] == '!'
line 7:         let [p, exclude] = [pattern[1:], 1]
line 8:       else
line 9:         let [p, exclude] = [pattern, 0]
line 10:       endif
line 11:       if s:match(dir, p)
calling function <SNR>65_rooter[5]..<SNR>65_root[11]..<SNR>65_match('/Users/ablanken/Sync/src/neovim-conf/conf/nvim', '.svn')

line 1:   if a:pattern[0] == '='
line 2:     return s:is(a:dir, a:pattern[1:])
line 3:   elseif a:pattern[0] == '^'
line 4:     return s:sub(a:dir, a:pattern[1:])
line 5:   elseif a:pattern[0] == '>'
line 6:     return s:child(a:dir, a:pattern[1:])
line 7:   else
line 8:     return s:has(a:dir, a:pattern)
calling function <SNR>65_rooter[5]..<SNR>65_root[11]..<SNR>65_match[8]..<SNR>65_has('/Users/ablanken/Sync/src/neovim-conf/conf/nvim', '.svn')

line 1:   " We do not want a:dir to be treated as a glob so escape any wildcards.
line 2:   " If this approach is problematic (e.g. on Windows), an alternative
line 3:   " might be to change directory to a:dir, call globpath() with just
line 4:   " a:identifier, then restore the working directory.
line 5:   return !empty(globpath(escape(a:dir, '?*[]'), a:identifier, 1))
function <SNR>65_rooter[5]..<SNR>65_root[11]..<SNR>65_match[8]..<SNR>65_has returning #0

continuing in function <SNR>65_rooter[5]..<SNR>65_root[11]..<SNR>65_match

function <SNR>65_rooter[5]..<SNR>65_root[11]..<SNR>65_match returning #0

continuing in function <SNR>65_rooter[5]..<SNR>65_root

line 12:         if exclude
line 13:           break
line 14:         else
line 15:           return dir
line 16:         endif
line 17:       endif
line 18:     endfor
line 5:     for pattern in g:rooter_patterns
line 6:       if pattern[0] == '!'
line 7:         let [p, exclude] = [pattern[1:], 1]
line 8:       else
line 9:         let [p, exclude] = [pattern, 0]
line 10:       endif
line 11:       if s:match(dir, p)
calling function <SNR>65_rooter[5]..<SNR>65_root[11]..<SNR>65_match('/Users/ablanken/Sync/src/neovim-conf/conf/nvim', 'Makefile')

line 1:   if a:pattern[0] == '='
line 2:     return s:is(a:dir, a:pattern[1:])
line 3:   elseif a:pattern[0] == '^'
line 4:     return s:sub(a:dir, a:pattern[1:])
line 5:   elseif a:pattern[0] == '>'
line 6:     return s:child(a:dir, a:pattern[1:])
line 7:   else
line 8:     return s:has(a:dir, a:pattern)
calling function <SNR>65_rooter[5]..<SNR>65_root[11]..<SNR>65_match[8]..<SNR>65_has('/Users/ablanken/Sync/src/neovim-conf/conf/nvim', 'Makefile')

line 1:   " We do not want a:dir to be treated as a glob so escape any wildcards.
line 2:   " If this approach is problematic (e.g. on Windows), an alternative
line 3:   " might be to change directory to a:dir, call globpath() with just
line 4:   " a:identifier, then restore the working directory.
line 5:   return !empty(globpath(escape(a:dir, '?*[]'), a:identifier, 1))
function <SNR>65_rooter[5]..<SNR>65_root[11]..<SNR>65_match[8]..<SNR>65_has returning #0

continuing in function <SNR>65_rooter[5]..<SNR>65_root[11]..<SNR>65_match

function <SNR>65_rooter[5]..<SNR>65_root[11]..<SNR>65_match returning #0

continuing in function <SNR>65_rooter[5]..<SNR>65_root

line 12:         if exclude
line 13:           break
line 14:         else
line 15:           return dir
line 16:         endif
line 17:       endif
line 18:     endfor
line 5:     for pattern in g:rooter_patterns
line 6:       if pattern[0] == '!'
line 7:         let [p, exclude] = [pattern[1:], 1]
line 8:       else
line 9:         let [p, exclude] = [pattern, 0]
line 10:       endif
line 11:       if s:match(dir, p)
calling function <SNR>65_rooter[5]..<SNR>65_root[11]..<SNR>65_match('/Users/ablanken/Sync/src/neovim-conf/conf/nvim', 'package.json')

line 1:   if a:pattern[0] == '='
line 2:     return s:is(a:dir, a:pattern[1:])
line 3:   elseif a:pattern[0] == '^'
line 4:     return s:sub(a:dir, a:pattern[1:])
line 5:   elseif a:pattern[0] == '>'
line 6:     return s:child(a:dir, a:pattern[1:])
line 7:   else
line 8:     return s:has(a:dir, a:pattern)
calling function <SNR>65_rooter[5]..<SNR>65_root[11]..<SNR>65_match[8]..<SNR>65_has('/Users/ablanken/Sync/src/neovim-conf/conf/nvim', 'package.json')

line 1:   " We do not want a:dir to be treated as a glob so escape any wildcards.
line 2:   " If this approach is problematic (e.g. on Windows), an alternative
line 3:   " might be to change directory to a:dir, call globpath() with just
line 4:   " a:identifier, then restore the working directory.
line 5:   return !empty(globpath(escape(a:dir, '?*[]'), a:identifier, 1))
function <SNR>65_rooter[5]..<SNR>65_root[11]..<SNR>65_match[8]..<SNR>65_has returning #0

continuing in function <SNR>65_rooter[5]..<SNR>65_root[11]..<SNR>65_match

function <SNR>65_rooter[5]..<SNR>65_root[11]..<SNR>65_match returning #0

continuing in function <SNR>65_rooter[5]..<SNR>65_root

line 12:         if exclude
line 13:           break
line 14:         else
line 15:           return dir
line 16:         endif
line 17:       endif
line 18:     endfor
line 5:     for pattern in g:rooter_patterns
line 6:       if pattern[0] == '!'
line 7:         let [p, exclude] = [pattern[1:], 1]
line 8:       else
line 9:         let [p, exclude] = [pattern, 0]
line 10:       endif
line 11:       if s:match(dir, p)
line 12:         if exclude
line 13:           break
line 14:         else
line 15:           return dir
line 16:         endif
line 17:       endif
line 18:     endfor
line 19: 
line 20:     let [current, dir] = [dir, s:parent(dir)]
calling function <SNR>65_rooter[5]..<SNR>65_root[20]..<SNR>65_parent('/Users/ablanken/Sync/src/neovim-conf/conf/nvim')

line 1:   return fnamemodify(a:dir, ':h')
function <SNR>65_rooter[5]..<SNR>65_root[20]..<SNR>65_parent returning '/Users/ablanken/Sync/src/neovim-conf/conf'

continuing in function <SNR>65_rooter[5]..<SNR>65_root

line 21:     if current == dir | break | endif
line 21:  break | endif
line 21:  endif
line 22:   endwhile
line 4:   while 1
line 5:     for pattern in g:rooter_patterns
line 6:       if pattern[0] == '!'
line 7:         let [p, exclude] = [pattern[1:], 1]
line 8:       else
line 9:         let [p, exclude] = [pattern, 0]
line 10:       endif
line 11:       if s:match(dir, p)
calling function <SNR>65_rooter[5]..<SNR>65_root[11]..<SNR>65_match('/Users/ablanken/Sync/src/neovim-conf/conf', '.git')

line 1:   if a:pattern[0] == '='
line 2:     return s:is(a:dir, a:pattern[1:])
line 3:   elseif a:pattern[0] == '^'
line 4:     return s:sub(a:dir, a:pattern[1:])
line 5:   elseif a:pattern[0] == '>'
line 6:     return s:child(a:dir, a:pattern[1:])
line 7:   else
line 8:     return s:has(a:dir, a:pattern)
calling function <SNR>65_rooter[5]..<SNR>65_root[11]..<SNR>65_match[8]..<SNR>65_has('/Users/ablanken/Sync/src/neovim-conf/conf', '.git')

line 1:   " We do not want a:dir to be treated as a glob so escape any wildcards.
line 2:   " If this approach is problematic (e.g. on Windows), an alternative
line 3:   " might be to change directory to a:dir, call globpath() with just
line 4:   " a:identifier, then restore the working directory.
line 5:   return !empty(globpath(escape(a:dir, '?*[]'), a:identifier, 1))
function <SNR>65_rooter[5]..<SNR>65_root[11]..<SNR>65_match[8]..<SNR>65_has returning #0

continuing in function <SNR>65_rooter[5]..<SNR>65_root[11]..<SNR>65_match

function <SNR>65_rooter[5]..<SNR>65_root[11]..<SNR>65_match returning #0

continuing in function <SNR>65_rooter[5]..<SNR>65_root

line 12:         if exclude
line 13:           break
line 14:         else
line 15:           return dir
line 16:         endif
line 17:       endif
line 18:     endfor
line 5:     for pattern in g:rooter_patterns
line 6:       if pattern[0] == '!'
line 7:         let [p, exclude] = [pattern[1:], 1]
line 8:       else
line 9:         let [p, exclude] = [pattern, 0]
line 10:       endif
line 11:       if s:match(dir, p)
calling function <SNR>65_rooter[5]..<SNR>65_root[11]..<SNR>65_match('/Users/ablanken/Sync/src/neovim-conf/conf', '_darcs')

line 1:   if a:pattern[0] == '='
line 2:     return s:is(a:dir, a:pattern[1:])
line 3:   elseif a:pattern[0] == '^'
line 4:     return s:sub(a:dir, a:pattern[1:])
line 5:   elseif a:pattern[0] == '>'
line 6:     return s:child(a:dir, a:pattern[1:])
line 7:   else
line 8:     return s:has(a:dir, a:pattern)
calling function <SNR>65_rooter[5]..<SNR>65_root[11]..<SNR>65_match[8]..<SNR>65_has('/Users/ablanken/Sync/src/neovim-conf/conf', '_darcs')

line 1:   " We do not want a:dir to be treated as a glob so escape any wildcards.
line 2:   " If this approach is problematic (e.g. on Windows), an alternative
line 3:   " might be to change directory to a:dir, call globpath() with just
line 4:   " a:identifier, then restore the working directory.
line 5:   return !empty(globpath(escape(a:dir, '?*[]'), a:identifier, 1))
function <SNR>65_rooter[5]..<SNR>65_root[11]..<SNR>65_match[8]..<SNR>65_has returning #0

continuing in function <SNR>65_rooter[5]..<SNR>65_root[11]..<SNR>65_match

function <SNR>65_rooter[5]..<SNR>65_root[11]..<SNR>65_match returning #0

continuing in function <SNR>65_rooter[5]..<SNR>65_root

line 12:         if exclude
line 13:           break
line 14:         else
line 15:           return dir
line 16:         endif
line 17:       endif
line 18:     endfor
line 5:     for pattern in g:rooter_patterns
line 6:       if pattern[0] == '!'
line 7:         let [p, exclude] = [pattern[1:], 1]
line 8:       else
line 9:         let [p, exclude] = [pattern, 0]
line 10:       endif
line 11:       if s:match(dir, p)
calling function <SNR>65_rooter[5]..<SNR>65_root[11]..<SNR>65_match('/Users/ablanken/Sync/src/neovim-conf/conf', '.hg')

line 1:   if a:pattern[0] == '='
line 2:     return s:is(a:dir, a:pattern[1:])
line 3:   elseif a:pattern[0] == '^'
line 4:     return s:sub(a:dir, a:pattern[1:])
line 5:   elseif a:pattern[0] == '>'
line 6:     return s:child(a:dir, a:pattern[1:])
line 7:   else
line 8:     return s:has(a:dir, a:pattern)
calling function <SNR>65_rooter[5]..<SNR>65_root[11]..<SNR>65_match[8]..<SNR>65_has('/Users/ablanken/Sync/src/neovim-conf/conf', '.hg')

line 1:   " We do not want a:dir to be treated as a glob so escape any wildcards.
line 2:   " If this approach is problematic (e.g. on Windows), an alternative
line 3:   " might be to change directory to a:dir, call globpath() with just
line 4:   " a:identifier, then restore the working directory.
line 5:   return !empty(globpath(escape(a:dir, '?*[]'), a:identifier, 1))
function <SNR>65_rooter[5]..<SNR>65_root[11]..<SNR>65_match[8]..<SNR>65_has returning #0

continuing in function <SNR>65_rooter[5]..<SNR>65_root[11]..<SNR>65_match

function <SNR>65_rooter[5]..<SNR>65_root[11]..<SNR>65_match returning #0

continuing in function <SNR>65_rooter[5]..<SNR>65_root

line 12:         if exclude
line 13:           break
line 14:         else
line 15:           return dir
line 16:         endif
line 17:       endif
line 18:     endfor
line 5:     for pattern in g:rooter_patterns
line 6:       if pattern[0] == '!'
line 7:         let [p, exclude] = [pattern[1:], 1]
line 8:       else
line 9:         let [p, exclude] = [pattern, 0]
line 10:       endif
line 11:       if s:match(dir, p)
calling function <SNR>65_rooter[5]..<SNR>65_root[11]..<SNR>65_match('/Users/ablanken/Sync/src/neovim-conf/conf', '.bzr')

line 1:   if a:pattern[0] == '='
line 2:     return s:is(a:dir, a:pattern[1:])
line 3:   elseif a:pattern[0] == '^'
line 4:     return s:sub(a:dir, a:pattern[1:])
line 5:   elseif a:pattern[0] == '>'
line 6:     return s:child(a:dir, a:pattern[1:])
line 7:   else
line 8:     return s:has(a:dir, a:pattern)
calling function <SNR>65_rooter[5]..<SNR>65_root[11]..<SNR>65_match[8]..<SNR>65_has('/Users/ablanken/Sync/src/neovim-conf/conf', '.bzr')

line 1:   " We do not want a:dir to be treated as a glob so escape any wildcards.
line 2:   " If this approach is problematic (e.g. on Windows), an alternative
line 3:   " might be to change directory to a:dir, call globpath() with just
line 4:   " a:identifier, then restore the working directory.
line 5:   return !empty(globpath(escape(a:dir, '?*[]'), a:identifier, 1))
function <SNR>65_rooter[5]..<SNR>65_root[11]..<SNR>65_match[8]..<SNR>65_has returning #0

continuing in function <SNR>65_rooter[5]..<SNR>65_root[11]..<SNR>65_match

function <SNR>65_rooter[5]..<SNR>65_root[11]..<SNR>65_match returning #0

continuing in function <SNR>65_rooter[5]..<SNR>65_root

line 12:         if exclude
line 13:           break
line 14:         else
line 15:           return dir
line 16:         endif
line 17:       endif
line 18:     endfor
line 5:     for pattern in g:rooter_patterns
line 6:       if pattern[0] == '!'
line 7:         let [p, exclude] = [pattern[1:], 1]
line 8:       else
line 9:         let [p, exclude] = [pattern, 0]
line 10:       endif
line 11:       if s:match(dir, p)
calling function <SNR>65_rooter[5]..<SNR>65_root[11]..<SNR>65_match('/Users/ablanken/Sync/src/neovim-conf/conf', '.svn')

line 1:   if a:pattern[0] == '='
line 2:     return s:is(a:dir, a:pattern[1:])
line 3:   elseif a:pattern[0] == '^'
line 4:     return s:sub(a:dir, a:pattern[1:])
line 5:   elseif a:pattern[0] == '>'
line 6:     return s:child(a:dir, a:pattern[1:])
line 7:   else
line 8:     return s:has(a:dir, a:pattern)
calling function <SNR>65_rooter[5]..<SNR>65_root[11]..<SNR>65_match[8]..<SNR>65_has('/Users/ablanken/Sync/src/neovim-conf/conf', '.svn')

line 1:   " We do not want a:dir to be treated as a glob so escape any wildcards.
line 2:   " If this approach is problematic (e.g. on Windows), an alternative
line 3:   " might be to change directory to a:dir, call globpath() with just
line 4:   " a:identifier, then restore the working directory.
line 5:   return !empty(globpath(escape(a:dir, '?*[]'), a:identifier, 1))
function <SNR>65_rooter[5]..<SNR>65_root[11]..<SNR>65_match[8]..<SNR>65_has returning #0

continuing in function <SNR>65_rooter[5]..<SNR>65_root[11]..<SNR>65_match

function <SNR>65_rooter[5]..<SNR>65_root[11]..<SNR>65_match returning #0

continuing in function <SNR>65_rooter[5]..<SNR>65_root

line 12:         if exclude
line 13:           break
line 14:         else
line 15:           return dir
line 16:         endif
line 17:       endif
line 18:     endfor
line 5:     for pattern in g:rooter_patterns
line 6:       if pattern[0] == '!'
line 7:         let [p, exclude] = [pattern[1:], 1]
line 8:       else
line 9:         let [p, exclude] = [pattern, 0]
line 10:       endif
line 11:       if s:match(dir, p)
calling function <SNR>65_rooter[5]..<SNR>65_root[11]..<SNR>65_match('/Users/ablanken/Sync/src/neovim-conf/conf', 'Makefile')

line 1:   if a:pattern[0] == '='
line 2:     return s:is(a:dir, a:pattern[1:])
line 3:   elseif a:pattern[0] == '^'
line 4:     return s:sub(a:dir, a:pattern[1:])
line 5:   elseif a:pattern[0] == '>'
line 6:     return s:child(a:dir, a:pattern[1:])
line 7:   else
line 8:     return s:has(a:dir, a:pattern)
calling function <SNR>65_rooter[5]..<SNR>65_root[11]..<SNR>65_match[8]..<SNR>65_has('/Users/ablanken/Sync/src/neovim-conf/conf', 'Makefile')

line 1:   " We do not want a:dir to be treated as a glob so escape any wildcards.
line 2:   " If this approach is problematic (e.g. on Windows), an alternative
line 3:   " might be to change directory to a:dir, call globpath() with just
line 4:   " a:identifier, then restore the working directory.
line 5:   return !empty(globpath(escape(a:dir, '?*[]'), a:identifier, 1))
function <SNR>65_rooter[5]..<SNR>65_root[11]..<SNR>65_match[8]..<SNR>65_has returning #0

continuing in function <SNR>65_rooter[5]..<SNR>65_root[11]..<SNR>65_match

function <SNR>65_rooter[5]..<SNR>65_root[11]..<SNR>65_match returning #0

continuing in function <SNR>65_rooter[5]..<SNR>65_root

line 12:         if exclude
line 13:           break
line 14:         else
line 15:           return dir
line 16:         endif
line 17:       endif
line 18:     endfor
line 5:     for pattern in g:rooter_patterns
line 6:       if pattern[0] == '!'
line 7:         let [p, exclude] = [pattern[1:], 1]
line 8:       else
line 9:         let [p, exclude] = [pattern, 0]
line 10:       endif
line 11:       if s:match(dir, p)
calling function <SNR>65_rooter[5]..<SNR>65_root[11]..<SNR>65_match('/Users/ablanken/Sync/src/neovim-conf/conf', 'package.json')

line 1:   if a:pattern[0] == '='
line 2:     return s:is(a:dir, a:pattern[1:])
line 3:   elseif a:pattern[0] == '^'
line 4:     return s:sub(a:dir, a:pattern[1:])
line 5:   elseif a:pattern[0] == '>'
line 6:     return s:child(a:dir, a:pattern[1:])
line 7:   else
line 8:     return s:has(a:dir, a:pattern)
calling function <SNR>65_rooter[5]..<SNR>65_root[11]..<SNR>65_match[8]..<SNR>65_has('/Users/ablanken/Sync/src/neovim-conf/conf', 'package.json')

line 1:   " We do not want a:dir to be treated as a glob so escape any wildcards.
line 2:   " If this approach is problematic (e.g. on Windows), an alternative
line 3:   " might be to change directory to a:dir, call globpath() with just
line 4:   " a:identifier, then restore the working directory.
line 5:   return !empty(globpath(escape(a:dir, '?*[]'), a:identifier, 1))
function <SNR>65_rooter[5]..<SNR>65_root[11]..<SNR>65_match[8]..<SNR>65_has returning #0

continuing in function <SNR>65_rooter[5]..<SNR>65_root[11]..<SNR>65_match

function <SNR>65_rooter[5]..<SNR>65_root[11]..<SNR>65_match returning #0

continuing in function <SNR>65_rooter[5]..<SNR>65_root

line 12:         if exclude
line 13:           break
line 14:         else
line 15:           return dir
line 16:         endif
line 17:       endif
line 18:     endfor
line 5:     for pattern in g:rooter_patterns
line 6:       if pattern[0] == '!'
line 7:         let [p, exclude] = [pattern[1:], 1]
line 8:       else
line 9:         let [p, exclude] = [pattern, 0]
line 10:       endif
line 11:       if s:match(dir, p)
line 12:         if exclude
line 13:           break
line 14:         else
line 15:           return dir
line 16:         endif
line 17:       endif
line 18:     endfor
line 19: 
line 20:     let [current, dir] = [dir, s:parent(dir)]
calling function <SNR>65_rooter[5]..<SNR>65_root[20]..<SNR>65_parent('/Users/ablanken/Sync/src/neovim-conf/conf')

line 1:   return fnamemodify(a:dir, ':h')
function <SNR>65_rooter[5]..<SNR>65_root[20]..<SNR>65_parent returning '/Users/ablanken/Sync/src/neovim-conf'

continuing in function <SNR>65_rooter[5]..<SNR>65_root

line 21:     if current == dir | break | endif
line 21:  break | endif
line 21:  endif
line 22:   endwhile
line 4:   while 1
line 5:     for pattern in g:rooter_patterns
line 6:       if pattern[0] == '!'
line 7:         let [p, exclude] = [pattern[1:], 1]
line 8:       else
line 9:         let [p, exclude] = [pattern, 0]
line 10:       endif
line 11:       if s:match(dir, p)
calling function <SNR>65_rooter[5]..<SNR>65_root[11]..<SNR>65_match('/Users/ablanken/Sync/src/neovim-conf', '.git')

line 1:   if a:pattern[0] == '='
line 2:     return s:is(a:dir, a:pattern[1:])
line 3:   elseif a:pattern[0] == '^'
line 4:     return s:sub(a:dir, a:pattern[1:])
line 5:   elseif a:pattern[0] == '>'
line 6:     return s:child(a:dir, a:pattern[1:])
line 7:   else
line 8:     return s:has(a:dir, a:pattern)
calling function <SNR>65_rooter[5]..<SNR>65_root[11]..<SNR>65_match[8]..<SNR>65_has('/Users/ablanken/Sync/src/neovim-conf', '.git')

line 1:   " We do not want a:dir to be treated as a glob so escape any wildcards.
line 2:   " If this approach is problematic (e.g. on Windows), an alternative
line 3:   " might be to change directory to a:dir, call globpath() with just
line 4:   " a:identifier, then restore the working directory.
line 5:   return !empty(globpath(escape(a:dir, '?*[]'), a:identifier, 1))
function <SNR>65_rooter[5]..<SNR>65_root[11]..<SNR>65_match[8]..<SNR>65_has returning #1

continuing in function <SNR>65_rooter[5]..<SNR>65_root[11]..<SNR>65_match

function <SNR>65_rooter[5]..<SNR>65_root[11]..<SNR>65_match returning #1

continuing in function <SNR>65_rooter[5]..<SNR>65_root

line 12:         if exclude
line 13:           break
line 14:         else
line 15:           return dir
function <SNR>65_rooter[5]..<SNR>65_root returning '/Users/ablanken/Sync/src/neovim-conf'

continuing in function <SNR>65_rooter

line 6:     call setbufvar('%', 'rootDir', root)
line 7:   endif
line 8: 
line 9:   if empty(root)
line 10:     call s:rootless()
line 11:     return
line 12:   endif
line 13: 
line 14:   call s:cd(root)
calling function <SNR>65_rooter[14]..<SNR>65_cd('/Users/ablanken/Sync/src/neovim-conf')

line 1:   if a:dir == getcwd() | return | endif
line 1:  return | endif
line 1:  endif
line 2:   execute g:rooter_cd_cmd fnameescape(a:dir)
line 2: lcd /Users/ablanken/Sync/src/neovim-conf
chdir(/Users/ablanken/Sync/src/neovim-conf)
Executing DirChanged Autocommands for "*"
autocommand call s:Autocmd('DirChanged', get(v:event, 'cwd', ''))

Executing: call s:Autocmd('DirChanged', get(v:event, 'cwd', ''))
calling function <SNR>44_Autocmd('DirChanged', '/Users/ablanken/Sync/src/neovim-conf')

line 1:   if !get(g:, 'coc_workspace_initialized', 0)
line 2:     return
function <SNR>44_Autocmd returning #0

continuing in DirChanged Autocommands for "*"

[window] /Users/ablanken/Sync/src/neovim-conf
line 3:   if !g:rooter_silent_chdir | redraw | echo 'cwd: '.a:dir | endif
line 3:  redraw | echo 'cwd: '.a:dir | endif
Executing: highlight! lualine_transitional_lualine_a_tabs_active_to_lualine_c_normal guifg=#5699AF guibg=#3a3e4e gui=None
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(conf/nvim)
chdir(/Users/ablanken/Sync/src/neovim-conf)
line 3: highlight! DevIconGvimrc guifg=#019833 ctermfg=29
line 3: highlight! DevIconSwift guifg=#e37933 ctermfg=173
line 3: highlight! DevIconTxt guifg=#89e051 ctermfg=113
line 3: highlight! DevIconCs guifg=#596706 ctermfg=58
line 3: highlight! DevIconBmp guifg=#a074c4 ctermfg=140
line 3: highlight! DevIconDefault guifg=#6d8086 ctermfg=66
line 3: highlight! DevIconTerminal guifg=#31B53E ctermfg=71
line 3: highlight! DevIconZsh guifg=#89e051 ctermfg=113
line 3: highlight! DevIconSolidity guifg=#519aba ctermfg=67
line 3: highlight! DevIconScala guifg=#cc3e44 ctermfg=167
line 3: highlight! DevIconMaterial guifg=#B83998 ctermfg=132
line 3: highlight! DevIconMint guifg=#87c095 ctermfg=108
line 3: highlight! DevIconMd guifg=#519aba ctermfg=67
line 3: highlight! DevIconToml guifg=#6d8086 ctermfg=66
line 3: highlight! DevIconConfigRu guifg=#701516 ctermfg=52
line 3: highlight! DevIconNim guifg=#f3d400 ctermfg=220
line 3: highlight! DevIconConf guifg=#6d8086 ctermfg=66
line 3: highlight! DevIconNPMIgnore guifg=#E8274B ctermfg=161
line 3: highlight! DevIconVue guifg=#8dc149 ctermfg=107
line 3: highlight! DevIconLicense guifg=#cbcb41 ctermfg=185
line 3: highlight! DevIconNodeModules guifg=#E8274B ctermfg=161
line 3: highlight! DevIconCson guifg=#cbcb41 ctermfg=185
line 3: highlight! DevIconSql guifg=#dad8d8 ctermfg=188
line 3: highlight! DevIconYaml guifg=#6d8086 ctermfg=66
line 3: highlight! DevIconOpenTypeFont guifg=#ECECEC ctermfg=231
line 3: highlight! DevIconGo guifg=#519aba ctermfg=67
line 3: highlight! DevIconCsv guifg=#89e051 ctermfg=113
line 3: highlight! DevIconPackageLockJson guifg=#7a0d21
line 3: highlight! DevIconCPlusPlus guifg=#f34b7d ctermfg=204
line 3: highlight! DevIconDesktopEntry guifg=#563d7c ctermfg=60
line 3: highlight! DevIconDb guifg=#dad8d8 ctermfg=188
line 3: highlight! DevIconRss guifg=#FB9D3B ctermfg=215
line 3: highlight! DevIconCp guifg=#519aba ctermfg=67
line 3: highlight! DevIconGitConfig guifg=#41535b ctermfg=59
line 3: highlight! DevIconPng guifg=#a074c4 ctermfg=140
line 3: highlight! DevIconHh guifg=#a074c4 ctermfg=140
line 3: highlight! DevIconXml guifg=#e37933 ctermfg=173
line 3: highlight! DevIconPpt guifg=#cb4a32 ctermfg=167
line 3: highlight! DevIconDropbox guifg=#0061FE ctermfg=27
line 3: highlight! DevIconJsx guifg=#519aba ctermfg=67
line 3: highlight! DevIconBash guifg=#89e051 ctermfg=113
line 3: highlight! DevIconProcfile guifg=#a074c4 ctermfg=140
line 3: highlight! DevIconHtml guifg=#e34c26 ctermfg=166
line 3: highlight! DevIconTsx guifg=#519aba ctermfg=67
line 3: highlight! DevIconZshprofile guifg=#89e051 ctermfg=113
line 3: highlight! DevIconKsh guifg=#4d5a5e ctermfg=59
line 3: highlight! DevIconZshenv guifg=#89e051 ctermfg=113
line 3: highlight! DevIconPsd guifg=#519aba ctermfg=67
line 3: highlight! DevIconMakefile guifg=#6d8086 ctermfg=66
line 3: highlight! DevIconVimrc guifg=#019833 ctermfg=29
line 3: highlight! DevIconJson guifg=#cbcb41 ctermfg=185
line 3: highlight! DevIconCrystal guifg=#000000 ctermfg=16
line 3: highlight! DevIconPyc guifg=#ffe291 ctermfg=67
line 3: highlight! DevIconRmd guifg=#519aba ctermfg=67
line 3: highlight! DevIconEpp guifg=#FFA61A
line 3: highlight! DevIconPyd guifg=#ffe291 ctermfg=67
line 3: highlight! DevIconSml guifg=#e37933 ctermfg=173
line 3: highlight! DevIconPyo guifg=#ffe291 ctermfg=67
line 3: highlight! DevIconVagrantfile guifg=#1563FF ctermfg=27
line 3: highlight! DevIconPackedResource guifg=#6d8086 ctermfg=66
line 3: highlight! DevIconLhs guifg=#a074c4 ctermfg=140
line 3: highlight! DevIconErb guifg=#701516 ctermfg=52
line 3: highlight! DevIconSvelte guifg=#ff3e00 ctermfg=202
line 3: highlight! DevIconImportConfiguration guifg=#ECECEC ctermfg=231
line 3: highlight! DevIconLess guifg=#563d7c ctermfg=60
line 3: highlight! DevIconFsharp guifg=#519aba ctermfg=67
line 3: highlight! DevIconTwig guifg=#8dc149 ctermfg=107
line 3: highlight! DevIconRproj guifg=#358a5b ctermfg=65
line 3: highlight! DevIconFavicon guifg=#cbcb41 ctermfg=185
line 3: highlight! DevIconD guifg=#427819 ctermfg=64
line 3: highlight! DevIconTex guifg=#3D6117 ctermfg=58
line 3: highlight! DevIconR guifg=#358a5b ctermfg=65
line 3: highlight! DevIconGitIgnore guifg=#41535b ctermfg=59
line 3: highlight! DevIconHaml guifg=#eaeae1 ctermfg=188
line 3: highlight! DevIconDiff guifg=#41535b ctermfg=59
line 3: highlight! DevIconBashrc guifg=#89e051 ctermfg=113
line 3: highlight! DevIconFsi guifg=#519aba ctermfg=67
line 3: highlight! DevIconSass guifg=#f55385 ctermfg=204
line 3: highlight! DevIconCMake guifg=#6d8086 ctermfg=66
line 3: highlight! DevIconErl guifg=#B83998 ctermfg=132
line 3: highlight! DevIconFsx guifg=#519aba ctermfg=67
line 3: highlight! DevIconSlim guifg=#e34c26 ctermfg=166
line 3: highlight! DevIconHrl guifg=#B83998 ctermfg=132
line 3: highlight! DevIconSln guifg=#854CC7 ctermfg=98
line 3: highlight! DevIconGif guifg=#a074c4 ctermfg=140
line 3: highlight! DevIconJs guifg=#cbcb41 ctermfg=185
line 3: highlight! DevIconGemspec guifg=#701516 ctermfg=52
line 3: highlight! DevIconStyl guifg=#8dc149 ctermfg=107
line 3: highlight! DevIconCobol guifg=#005ca5 ctermfg=25
line 3: highlight! DevIconClojure guifg=#8dc149 ctermfg=107
line 3: highlight! DevIconSuo guifg=#e37933 ctermfg=98
line 3: highlight! DevIconConfiguration guifg=#ECECEC ctermfg=231
line 3: highlight! DevIconVim guifg=#019833 ctermfg=29
line 3: highlight! DevIconPromptPs1 guifg=#4d5a5e ctermfg=59
line 3: highlight! DevIconGodotProject guifg=#6d8086 ctermfg=66
line 3: highlight! DevIconMarkdown guifg=#519aba ctermfg=67
line 3: highlight! DevIconGruntfile guifg=#e37933 ctermfg=173
line 3: highlight! DevIconSig guifg=#e37933 ctermfg=173
line 3: highlight! DevIconEdn guifg=#519aba ctermfg=67
line 3: highlight! DevIconXul guifg=#e37933 ctermfg=173
line 3: highlight! DevIconBinaryGLTF guifg=#FFB13B ctermfg=215
line 3: highlight! DevIconAi guifg=#cbcb41 ctermfg=185
line 3: highlight! DevIconDart guifg=#03589C ctermfg=25
line 3: highlight! DevIconHxx guifg=#a074c4 ctermfg=140
line 3: highlight! DevIconGemfile guifg=#701516 ctermfg=52
line 3: highlight! DevIconPy guifg=#ffbc03 ctermfg=61
line 3: highlight! DevIconMli guifg=#e37933 ctermfg=173
line 3: highlight! DevIconFsscript guifg=#519aba ctermfg=67
line 3: highlight! DevIconCsh guifg=#4d5a5e ctermfg=59
line 3: highlight! DevIconRakefile guifg=#701516 ctermfg=52
line 3: highlight! DevIconTextScene guifg=#a074c4 ctermfg=140
line 3: highlight! DevIconLua guifg=#51a0cf ctermfg=74
line 3: highlight! DevIconEx guifg=#a074c4 ctermfg=140
line 3: highlight! DevIconMustache guifg=#e37933 ctermfg=173
line 3: highlight! DevIconElm guifg=#519aba ctermfg=67
line 3: highlight! DevIconKotlin guifg=#F88A02 ctermfg=208
line 3: highlight! DevIconFennel guifg=#fff3d7 ctermfg=230
line 3: highlight! DevIconEjs guifg=#cbcb41 ctermfg=185
line 3: highlight! DevIconJl guifg=#a270ba ctermfg=133
line 3: highlight! DevIconCoffee guifg=#cbcb41 ctermfg=185
line 3: highlight! DevIconDockerfile guifg=#384d54 ctermfg=59
line 3: highlight! DevIconIco guifg=#cbcb41 ctermfg=185
line 3: highlight! DevIconHbs guifg=#f0772b ctermfg=208
line 3: highlight! DevIconWebp guifg=#a074c4 ctermfg=140
line 3: highlight! DevIconH guifg=#a074c4 ctermfg=140
line 3: highlight! DevIconWebpack guifg=#519aba ctermfg=67
line 3: highlight! DevIconPsb guifg=#519aba ctermfg=67
line 3: highlight! DevIconPp guifg=#FFA61A
line 3: highlight! DevIconXcPlayground guifg=#e37933 ctermfg=173
line 3: highlight! DevIconYml guifg=#6d8086 ctermfg=66
line 3: highlight! DevIconGitCommit guifg=#41535b ctermfg=59
line 3: highlight! DevIconGDScript guifg=#6d8086 ctermfg=66
line 3: highlight! DevIconJpeg guifg=#a074c4 ctermfg=140
line 3: highlight! DevIconRlib guifg=#dea584 ctermfg=180
line 3: highlight! DevIconJpg guifg=#a074c4 ctermfg=140
line 3: highlight! DevIconFs guifg=#519aba ctermfg=67
line 3: highlight! DevIconGitAttributes guifg=#41535b ctermfg=59
line 3: highlight! DevIconHtm guifg=#e34c26 ctermfg=166
line 3: highlight! DevIconPl guifg=#519aba ctermfg=67
line 3: highlight! DevIconDsStore guifg=#41535b ctermfg=59
line 3: highlight! DevIconMl guifg=#e37933 ctermfg=173
line 3: highlight! DevIconGitlabCI guifg=#e24329 ctermfg=166
line 3: highlight! DevIconDump guifg=#dad8d8 ctermfg=188
line 3: highlight! DevIconRake guifg=#701516 ctermfg=52
line 3: highlight! DevIconWebmanifest guifg=#f1e05a ctermfg=221
line 3: highlight! DevIconLeex guifg=#a074c4 ctermfg=140
line 3: highlight! DevIconMixLock guifg=#a074c4 ctermfg=140
line 3: highlight! DevIconCxx guifg=#519aba ctermfg=67
line 3: highlight! DevIconGitModules guifg=#41535b ctermfg=59
line 3: highlight! DevIconExs guifg=#a074c4 ctermfg=140
line 3: highlight! DevIconZshrc guifg=#89e051 ctermfg=113
line 3: highlight! DevIconClojureJS guifg=#519aba ctermfg=67
line 3: highlight! DevIconMjs guifg=#f1e05a ctermfg=221
line 3: highlight! DevIconFish guifg=#4d5a5e ctermfg=59
line 3: highlight! DevIconNPMrc guifg=#E8274B ctermfg=161
line 3: highlight! DevIconGitLogo guifg=#F14C28 ctermfg=202
line 3: highlight! DevIconPhp guifg=#a074c4 ctermfg=140
line 3: highlight! DevIconBashProfile guifg=#89e051 ctermfg=113
line 3: highlight! DevIconSettingsJson guifg=#854CC7 ctermfg=98
line 3: highlight! DevIconJava guifg=#cc3e44 ctermfg=167
line 3: highlight! DevIconAwk guifg=#4d5a5e ctermfg=59
line 3: highlight! DevIconClojureC guifg=#8dc149 ctermfg=107
line 3: highlight! DevIconHpp guifg=#a074c4 ctermfg=140
line 3: highlight! DevIconDoc guifg=#185abd ctermfg=25
line 3: highlight! DevIconCpp guifg=#519aba ctermfg=67
line 3: highlight! DevIconBrewfile guifg=#701516 ctermfg=52
line 3: highlight! DevIconNix guifg=#7ebae4 ctermfg=110
line 3: highlight! DevIconPdf guifg=#b30b00 ctermfg=124
line 3: highlight! DevIconRs guifg=#dea584 ctermfg=180
line 3: highlight! DevIconCMakeLists guifg=#6d8086 ctermfg=66
line 3: highlight! DevIconCss guifg=#563d7c ctermfg=60
line 3: highlight! DevIconTor guifg=#519aba ctermfg=67
line 3: highlight! DevIconScss guifg=#f55385 ctermfg=204
line 3: highlight! DevIconC guifg=#599eff ctermfg=75
line 3: highlight! DevIconProlog guifg=#e4b854 ctermfg=179
line 3: highlight! DevIconPackageJson guifg=#e8274b
line 3: highlight! DevIconBabelrc guifg=#cbcb41 ctermfg=185
line 3: highlight! DevIconBat guifg=#C1F12E ctermfg=154
line 3: highlight! DevIconIni guifg=#6d8086 ctermfg=66
line 3: highlight! DevIconZig guifg=#f69a1b ctermfg=208
line 3: highlight! DevIconSh guifg=#4d5a5e ctermfg=59
line 3: highlight! DevIconPm guifg=#519aba ctermfg=67
line 3: highlight! DevIconMdx guifg=#519aba ctermfg=67
line 3: highlight! DevIconHs guifg=#a074c4 ctermfg=140
line 3: highlight! DevIconEex guifg=#a074c4 ctermfg=140
line 3: highlight! DevIconOPUS guifg=#F88A02 ctermfg=208
line 3: highlight! DevIconHeex guifg=#a074c4 ctermfg=140
line 3: highlight! DevIconRb guifg=#701516 ctermfg=52
line 3: highlight! DevIconTs guifg=#519aba ctermfg=67
line 3: highlight! DevIconSvg guifg=#FFB13B ctermfg=215
line 3: highlight! DevIconGulpfile guifg=#cc3e44 ctermfg=167
line 3: highlight! DevIconTextResource guifg=#cbcb41 ctermfg=185
line 3: highlight! DevIconXls guifg=#207245 ctermfg=23
Executing: augroup NvimWebDevicons
Executing: autocmd!
Executing: autocmd ColorScheme * lua require('nvim-web-devicons').set_up_highlights()
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/nvim-web-devicons/lua)
chdir(/Users/ablanken/Sync/src/neovim-conf)
Executing: augroup END
Executing: highlight! lualine_b_filetype_DevIconLua_normal guifg=#51a0cf guibg=#3a3e4e gui=None
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine)
chdir(/Users/ablanken/Sync/src/neovim-conf)
Executing: highlight! lualine_b_filetype_DevIconLua_insert guifg=#51a0cf guibg=#3a3e4e gui=None
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine)
chdir(/Users/ablanken/Sync/src/neovim-conf)
Executing: highlight! lualine_b_filetype_DevIconLua_visual guifg=#51a0cf guibg=#3a3e4e gui=None
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine)
chdir(/Users/ablanken/Sync/src/neovim-conf)
Executing: highlight! lualine_b_filetype_DevIconLua_replace guifg=#51a0cf guibg=#3a3e4e gui=None
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine)
chdir(/Users/ablanken/Sync/src/neovim-conf)
Executing: highlight! lualine_b_filetype_DevIconLua_command guifg=#51a0cf guibg=#3a3e4e gui=None
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine)
chdir(/Users/ablanken/Sync/src/neovim-conf)
Executing: highlight! lualine_b_filetype_DevIconLua_terminal guifg=#51a0cf guibg=#3a3e4e gui=None
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine)
chdir(/Users/ablanken/Sync/src/neovim-conf)
Executing: highlight! lualine_b_filetype_DevIconLua_inactive guifg=#51a0cf guibg=#3a3e4e gui=None
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(conf/nvim)
chdir(/Users/ablanken/Sync/src/neovim-conf)
Executing: highlight! lualine_x_filetype_DevIconLua_normal guifg=#51a0cf guibg=#3a3e4e gui=None
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine)
chdir(/Users/ablanken/Sync/src/neovim-conf)
Executing: highlight! lualine_x_filetype_DevIconLua_insert guifg=#51a0cf guibg=#3a3e4e gui=None
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine)
chdir(/Users/ablanken/Sync/src/neovim-conf)
Executing: highlight! lualine_x_filetype_DevIconLua_visual guifg=#51a0cf guibg=#3a3e4e gui=None
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine)
chdir(/Users/ablanken/Sync/src/neovim-conf)
Executing: highlight! lualine_x_filetype_DevIconLua_replace guifg=#51a0cf guibg=#3a3e4e gui=None
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine)
chdir(/Users/ablanken/Sync/src/neovim-conf)
Executing: highlight! lualine_x_filetype_DevIconLua_command guifg=#51a0cf guibg=#3a3e4e gui=None
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine)
chdir(/Users/ablanken/Sync/src/neovim-conf)
Executing: highlight! lualine_x_filetype_DevIconLua_terminal guifg=#51a0cf guibg=#3a3e4e gui=None
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine)
chdir(/Users/ablanken/Sync/src/neovim-conf)
Executing: highlight! lualine_x_filetype_DevIconLua_inactive guifg=#51a0cf guibg=#3a3e4e gui=None
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine)
chdir(/Users/ablanken/Sync/src/neovim-conf)
Executing: highlight! lualine_transitional_lualine_a_normal_to_lualine_b_normal guifg=#5699AF guibg=#3a3e4e gui=None
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine)
chdir(/Users/ablanken/Sync/src/neovim-conf)
line 3:  echo 'cwd: '.a:dir | endif
                                   cwd: /Users/ablanken/Sync/src/neovim-conf
line 3:  endif
line 4:   if exists('#User#RooterChDir')
line 5:     execute 'doautocmd' s:nomodeline 'User RooterChDir'
line 6:   endif
function <SNR>65_rooter[14]..<SNR>65_cd returning #0

continuing in function <SNR>65_rooter

function <SNR>65_rooter returning #0

continuing in BufReadPost Autocommands for "*"

Executing:  endif
Executing BufEnter Autocommands for "*"
autocommand lua require'lualine.components.branch.git_branch'.find_git_dir()

Executing: lua require'lualine.components.branch.git_branch'.find_git_dir()
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(conf/nvim)
chdir(/Users/ablanken/Sync/src/neovim-conf)
autocommand lua require'lualine.components.diff.git_diff'.update_diff_args()

Executing: lua require'lualine.components.diff.git_diff'.update_diff_args()
Executing BufEnter Autocommands for "*"
autocommand call s:detect_indent()

Executing: call s:detect_indent()
calling function <SNR>15_detect_indent()

line 1:     if &buftype ==# 'help'
line 2:       return
line 3:     endif
line 4: 
line 5:     " Do not autodetect indent if language or user sets it
line 6:     if &l:shiftwidth != s:default_shiftwidth
line 7:       return
line 8:     endif
line 9: 
line 10:     let b:sleuth_culprit = expand("<afile>:p")
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(conf/nvim)
chdir(/Users/ablanken/Sync/src/neovim-conf)
line 11:     if s:guess(getline(1, 128))
calling function <SNR>15_detect_indent[11]..<SNR>15_guess(['-- vi: et sw=4 ts=4', 'FLAVOUR_42 = ...ckfix<CR>'', { desc = ''Quickfix'' })'])

line 1:     let options = {}
line 2:     let ccomment = 0
line 3:     let podcomment = 0
line 4:     let triplequote = 0
line 5:     let backtick = 0
line 6:     let xmlcomment = 0
line 7:     let heredoc = ''
line 8:     let minindent = 10
line 9:     let spaces_minus_tabs = 0
line 10:     let lineno = 0
line 11:     let stack = [0]
line 12:     let indents = { '2': 0, '3': 0, '4': 0, '6': 0, '8': 0 }
line 13: 
line 14:     for line in a:lines
line 15:       let lineno += 1
line 16: 
line 17:       if line =~# '^\s*$'
line 18:         continue
line 19:       endif
line 20: 
line 21:       if line =~# '^\s*/\*'
line 22:         let ccomment = 1
line 23:       endif
line 24:       if ccomment
line 25:         if line =~# '\*/'
line 26:           let ccomment = 0
line 27:         endif
line 28:         continue
line 29:       endif
line 30: 
line 31:       if line =~# '^=\w'
line 32:         let podcomment = 1
line 33:       endif
line 34:       if podcomment
line 35:         if line =~# '^=\%(end\|cut\)\>'
line 36:           let podcomment = 0
line 37:         endif
line 38:         continue
line 39:       endif
line 40: 
line 41:       if triplequote
line 42:         if line =~# '^[^"]*"""[^"]*$'
line 43:           let triplequote = 0
line 44:         endif
line 45:         continue
line 46:       elseif line =~# '^[^"]*"""[^"]*$'
line 47:         let triplequote = 1
line 48:       endif
line 49: 
line 50:       if backtick
line 51:         if line =~# '^[^`]*`[^`]*$'
line 52:           let backtick = 0
line 53:         endif
line 54:         continue
line 55:       elseif &filetype ==# 'go' && line =~# '^[^`]*`[^`]*$'
line 56:         let backtick = 1
line 57:       endif
line 58: 
line 59:       if line =~# '^\s*<\!--'
line 60:         let xmlcomment = 1
line 61:       endif
line 62:       if xmlcomment
line 63:         if line =~# '-->'
line 64:           let xmlcomment = 0
line 65:         endif
line 66:         continue
line 67:       endif
line 68: 
line 69:       " This is correct order because both "<<EOF" and "EOF" matches end
line 70:       if heredoc != ''
line 71:         if line =~# heredoc
line 72:           let heredoc = ''
line 73:         endif
line 74:         continue
line 75:       endif
line 76:       let herematch = matchlist(line, '\C<<\W*\([A-Z]\+\)\s*$')
line 77:       if len(herematch) > 0
line 78:         let heredoc = herematch[1] . '$'
line 79:       endif
line 80: 
line 81:       if line[0] == "\t"
line 82:         let spaces_minus_tabs -= 1
line 83:       else
line 84:         if line[0] == " "
line 85:           let spaces_minus_tabs += 1
line 86:         endif
line 87:         let indent = len(matchstr(line, '^ *'))
line 88:         while stack[-1] > indent
line 89:           call remove(stack, -1)
line 90:         endwhile
line 91: 
line 92:         let indent_inc = indent - stack[-1]
line 93: 
line 94:         if indent_inc == 0 && len(stack) > 1
line 95:           let indent_inc = indent - stack[-2]
line 96:         endif
line 97: 
line 98:         if has_key(indents, indent_inc)
line 99:           let indents[indent_inc] += 1
line 100:           let prev_indent = indent
line 101:         endif
line 102: 
line 103:         if stack[-1] != indent
line 104:           call add(stack, indent)
line 105:         endif
line 106:       endif
line 107:     endfor
line 14:     for line in a:lines
line 15:       let lineno += 1
line 16: 
line 17:       if line =~# '^\s*$'
line 18:         continue
line 19:       endif
line 20: 
line 21:       if line =~# '^\s*/\*'
line 22:         let ccomment = 1
line 23:       endif
line 24:       if ccomment
line 25:         if line =~# '\*/'
line 26:           let ccomment = 0
line 27:         endif
line 28:         continue
line 29:       endif
line 30: 
line 31:       if line =~# '^=\w'
line 32:         let podcomment = 1
line 33:       endif
line 34:       if podcomment
line 35:         if line =~# '^=\%(end\|cut\)\>'
line 36:           let podcomment = 0
line 37:         endif
line 38:         continue
line 39:       endif
line 40: 
line 41:       if triplequote
line 42:         if line =~# '^[^"]*"""[^"]*$'
line 43:           let triplequote = 0
line 44:         endif
line 45:         continue
line 46:       elseif line =~# '^[^"]*"""[^"]*$'
line 47:         let triplequote = 1
line 48:       endif
line 49: 
line 50:       if backtick
line 51:         if line =~# '^[^`]*`[^`]*$'
line 52:           let backtick = 0
line 53:         endif
line 54:         continue
line 55:       elseif &filetype ==# 'go' && line =~# '^[^`]*`[^`]*$'
line 56:         let backtick = 1
line 57:       endif
line 58: 
line 59:       if line =~# '^\s*<\!--'
line 60:         let xmlcomment = 1
line 61:       endif
line 62:       if xmlcomment
line 63:         if line =~# '-->'
line 64:           let xmlcomment = 0
line 65:         endif
line 66:         continue
line 67:       endif
line 68: 
line 69:       " This is correct order because both "<<EOF" and "EOF" matches end
line 70:       if heredoc != ''
line 71:         if line =~# heredoc
line 72:           let heredoc = ''
line 73:         endif
line 74:         continue
line 75:       endif
line 76:       let herematch = matchlist(line, '\C<<\W*\([A-Z]\+\)\s*$')
line 77:       if len(herematch) > 0
line 78:         let heredoc = herematch[1] . '$'
line 79:       endif
line 80: 
line 81:       if line[0] == "\t"
line 82:         let spaces_minus_tabs -= 1
line 83:       else
line 84:         if line[0] == " "
line 85:           let spaces_minus_tabs += 1
line 86:         endif
line 87:         let indent = len(matchstr(line, '^ *'))
line 88:         while stack[-1] > indent
line 89:           call remove(stack, -1)
line 90:         endwhile
line 91: 
line 92:         let indent_inc = indent - stack[-1]
line 93: 
line 94:         if indent_inc == 0 && len(stack) > 1
line 95:           let indent_inc = indent - stack[-2]
line 96:         endif
line 97: 
line 98:         if has_key(indents, indent_inc)
line 99:           let indents[indent_inc] += 1
line 100:           let prev_indent = indent
line 101:         endif
line 102: 
line 103:         if stack[-1] != indent
line 104:           call add(stack, indent)
line 105:         endif
line 106:       endif
line 107:     endfor
line 14:     for line in a:lines
line 15:       let lineno += 1
line 16: 
line 17:       if line =~# '^\s*$'
line 18:         continue
line 14:     for line in a:lines
line 15:       let lineno += 1
line 16: 
line 17:       if line =~# '^\s*$'
line 18:         continue
line 19:       endif
line 20: 
line 21:       if line =~# '^\s*/\*'
line 22:         let ccomment = 1
line 23:       endif
line 24:       if ccomment
line 25:         if line =~# '\*/'
line 26:           let ccomment = 0
line 27:         endif
line 28:         continue
line 29:       endif
line 30: 
line 31:       if line =~# '^=\w'
line 32:         let podcomment = 1
line 33:       endif
line 34:       if podcomment
line 35:         if line =~# '^=\%(end\|cut\)\>'
line 36:           let podcomment = 0
line 37:         endif
line 38:         continue
line 39:       endif
line 40: 
line 41:       if triplequote
line 42:         if line =~# '^[^"]*"""[^"]*$'
line 43:           let triplequote = 0
line 44:         endif
line 45:         continue
line 46:       elseif line =~# '^[^"]*"""[^"]*$'
line 47:         let triplequote = 1
line 48:       endif
line 49: 
line 50:       if backtick
line 51:         if line =~# '^[^`]*`[^`]*$'
line 52:           let backtick = 0
line 53:         endif
line 54:         continue
line 55:       elseif &filetype ==# 'go' && line =~# '^[^`]*`[^`]*$'
line 56:         let backtick = 1
line 57:       endif
line 58: 
line 59:       if line =~# '^\s*<\!--'
line 60:         let xmlcomment = 1
line 61:       endif
line 62:       if xmlcomment
line 63:         if line =~# '-->'
line 64:           let xmlcomment = 0
line 65:         endif
line 66:         continue
line 67:       endif
line 68: 
line 69:       " This is correct order because both "<<EOF" and "EOF" matches end
line 70:       if heredoc != ''
line 71:         if line =~# heredoc
line 72:           let heredoc = ''
line 73:         endif
line 74:         continue
line 75:       endif
line 76:       let herematch = matchlist(line, '\C<<\W*\([A-Z]\+\)\s*$')
line 77:       if len(herematch) > 0
line 78:         let heredoc = herematch[1] . '$'
line 79:       endif
line 80: 
line 81:       if line[0] == "\t"
line 82:         let spaces_minus_tabs -= 1
line 83:       else
line 84:         if line[0] == " "
line 85:           let spaces_minus_tabs += 1
line 86:         endif
line 87:         let indent = len(matchstr(line, '^ *'))
line 88:         while stack[-1] > indent
line 89:           call remove(stack, -1)
line 90:         endwhile
line 91: 
line 92:         let indent_inc = indent - stack[-1]
line 93: 
line 94:         if indent_inc == 0 && len(stack) > 1
line 95:           let indent_inc = indent - stack[-2]
line 96:         endif
line 97: 
line 98:         if has_key(indents, indent_inc)
line 99:           let indents[indent_inc] += 1
line 100:           let prev_indent = indent
line 101:         endif
line 102: 
line 103:         if stack[-1] != indent
line 104:           call add(stack, indent)
line 105:         endif
line 106:       endif
line 107:     endfor
line 14:     for line in a:lines
line 15:       let lineno += 1
line 16: 
line 17:       if line =~# '^\s*$'
line 18:         continue
line 14:     for line in a:lines
line 15:       let lineno += 1
line 16: 
line 17:       if line =~# '^\s*$'
line 18:         continue
line 19:       endif
line 20: 
line 21:       if line =~# '^\s*/\*'
line 22:         let ccomment = 1
line 23:       endif
line 24:       if ccomment
line 25:         if line =~# '\*/'
line 26:           let ccomment = 0
line 27:         endif
line 28:         continue
line 29:       endif
line 30: 
line 31:       if line =~# '^=\w'
line 32:         let podcomment = 1
line 33:       endif
line 34:       if podcomment
line 35:         if line =~# '^=\%(end\|cut\)\>'
line 36:           let podcomment = 0
line 37:         endif
line 38:         continue
line 39:       endif
line 40: 
line 41:       if triplequote
line 42:         if line =~# '^[^"]*"""[^"]*$'
line 43:           let triplequote = 0
line 44:         endif
line 45:         continue
line 46:       elseif line =~# '^[^"]*"""[^"]*$'
line 47:         let triplequote = 1
line 48:       endif
line 49: 
line 50:       if backtick
line 51:         if line =~# '^[^`]*`[^`]*$'
line 52:           let backtick = 0
line 53:         endif
line 54:         continue
line 55:       elseif &filetype ==# 'go' && line =~# '^[^`]*`[^`]*$'
line 56:         let backtick = 1
line 57:       endif
line 58: 
line 59:       if line =~# '^\s*<\!--'
line 60:         let xmlcomment = 1
line 61:       endif
line 62:       if xmlcomment
line 63:         if line =~# '-->'
line 64:           let xmlcomment = 0
line 65:         endif
line 66:         continue
line 67:       endif
line 68: 
line 69:       " This is correct order because both "<<EOF" and "EOF" matches end
line 70:       if heredoc != ''
line 71:         if line =~# heredoc
line 72:           let heredoc = ''
line 73:         endif
line 74:         continue
line 75:       endif
line 76:       let herematch = matchlist(line, '\C<<\W*\([A-Z]\+\)\s*$')
line 77:       if len(herematch) > 0
line 78:         let heredoc = herematch[1] . '$'
line 79:       endif
line 80: 
line 81:       if line[0] == "\t"
line 82:         let spaces_minus_tabs -= 1
line 83:       else
line 84:         if line[0] == " "
line 85:           let spaces_minus_tabs += 1
line 86:         endif
line 87:         let indent = len(matchstr(line, '^ *'))
line 88:         while stack[-1] > indent
line 89:           call remove(stack, -1)
line 90:         endwhile
line 91: 
line 92:         let indent_inc = indent - stack[-1]
line 93: 
line 94:         if indent_inc == 0 && len(stack) > 1
line 95:           let indent_inc = indent - stack[-2]
line 96:         endif
line 97: 
line 98:         if has_key(indents, indent_inc)
line 99:           let indents[indent_inc] += 1
line 100:           let prev_indent = indent
line 101:         endif
line 102: 
line 103:         if stack[-1] != indent
line 104:           call add(stack, indent)
line 105:         endif
line 106:       endif
line 107:     endfor
line 14:     for line in a:lines
line 15:       let lineno += 1
line 16: 
line 17:       if line =~# '^\s*$'
line 18:         continue
line 19:       endif
line 20: 
line 21:       if line =~# '^\s*/\*'
line 22:         let ccomment = 1
line 23:       endif
line 24:       if ccomment
line 25:         if line =~# '\*/'
line 26:           let ccomment = 0
line 27:         endif
line 28:         continue
line 29:       endif
line 30: 
line 31:       if line =~# '^=\w'
line 32:         let podcomment = 1
line 33:       endif
line 34:       if podcomment
line 35:         if line =~# '^=\%(end\|cut\)\>'
line 36:           let podcomment = 0
line 37:         endif
line 38:         continue
line 39:       endif
line 40: 
line 41:       if triplequote
line 42:         if line =~# '^[^"]*"""[^"]*$'
line 43:           let triplequote = 0
line 44:         endif
line 45:         continue
line 46:       elseif line =~# '^[^"]*"""[^"]*$'
line 47:         let triplequote = 1
line 48:       endif
line 49: 
line 50:       if backtick
line 51:         if line =~# '^[^`]*`[^`]*$'
line 52:           let backtick = 0
line 53:         endif
line 54:         continue
line 55:       elseif &filetype ==# 'go' && line =~# '^[^`]*`[^`]*$'
line 56:         let backtick = 1
line 57:       endif
line 58: 
line 59:       if line =~# '^\s*<\!--'
line 60:         let xmlcomment = 1
line 61:       endif
line 62:       if xmlcomment
line 63:         if line =~# '-->'
line 64:           let xmlcomment = 0
line 65:         endif
line 66:         continue
line 67:       endif
line 68: 
line 69:       " This is correct order because both "<<EOF" and "EOF" matches end
line 70:       if heredoc != ''
line 71:         if line =~# heredoc
line 72:           let heredoc = ''
line 73:         endif
line 74:         continue
line 75:       endif
line 76:       let herematch = matchlist(line, '\C<<\W*\([A-Z]\+\)\s*$')
line 77:       if len(herematch) > 0
line 78:         let heredoc = herematch[1] . '$'
line 79:       endif
line 80: 
line 81:       if line[0] == "\t"
line 82:         let spaces_minus_tabs -= 1
line 83:       else
line 84:         if line[0] == " "
line 85:           let spaces_minus_tabs += 1
line 86:         endif
line 87:         let indent = len(matchstr(line, '^ *'))
line 88:         while stack[-1] > indent
line 89:           call remove(stack, -1)
line 90:         endwhile
line 91: 
line 92:         let indent_inc = indent - stack[-1]
line 93: 
line 94:         if indent_inc == 0 && len(stack) > 1
line 95:           let indent_inc = indent - stack[-2]
line 96:         endif
line 97: 
line 98:         if has_key(indents, indent_inc)
line 99:           let indents[indent_inc] += 1
line 100:           let prev_indent = indent
line 101:         endif
line 102: 
line 103:         if stack[-1] != indent
line 104:           call add(stack, indent)
line 105:         endif
line 106:       endif
line 107:     endfor
line 14:     for line in a:lines
line 15:       let lineno += 1
line 16: 
line 17:       if line =~# '^\s*$'
line 18:         continue
line 19:       endif
line 20: 
line 21:       if line =~# '^\s*/\*'
line 22:         let ccomment = 1
line 23:       endif
line 24:       if ccomment
line 25:         if line =~# '\*/'
line 26:           let ccomment = 0
line 27:         endif
line 28:         continue
line 29:       endif
line 30: 
line 31:       if line =~# '^=\w'
line 32:         let podcomment = 1
line 33:       endif
line 34:       if podcomment
line 35:         if line =~# '^=\%(end\|cut\)\>'
line 36:           let podcomment = 0
line 37:         endif
line 38:         continue
line 39:       endif
line 40: 
line 41:       if triplequote
line 42:         if line =~# '^[^"]*"""[^"]*$'
line 43:           let triplequote = 0
line 44:         endif
line 45:         continue
line 46:       elseif line =~# '^[^"]*"""[^"]*$'
line 47:         let triplequote = 1
line 48:       endif
line 49: 
line 50:       if backtick
line 51:         if line =~# '^[^`]*`[^`]*$'
line 52:           let backtick = 0
line 53:         endif
line 54:         continue
line 55:       elseif &filetype ==# 'go' && line =~# '^[^`]*`[^`]*$'
line 56:         let backtick = 1
line 57:       endif
line 58: 
line 59:       if line =~# '^\s*<\!--'
line 60:         let xmlcomment = 1
line 61:       endif
line 62:       if xmlcomment
line 63:         if line =~# '-->'
line 64:           let xmlcomment = 0
line 65:         endif
line 66:         continue
line 67:       endif
line 68: 
line 69:       " This is correct order because both "<<EOF" and "EOF" matches end
line 70:       if heredoc != ''
line 71:         if line =~# heredoc
line 72:           let heredoc = ''
line 73:         endif
line 74:         continue
line 75:       endif
line 76:       let herematch = matchlist(line, '\C<<\W*\([A-Z]\+\)\s*$')
line 77:       if len(herematch) > 0
line 78:         let heredoc = herematch[1] . '$'
line 79:       endif
line 80: 
line 81:       if line[0] == "\t"
line 82:         let spaces_minus_tabs -= 1
line 83:       else
line 84:         if line[0] == " "
line 85:           let spaces_minus_tabs += 1
line 86:         endif
line 87:         let indent = len(matchstr(line, '^ *'))
line 88:         while stack[-1] > indent
line 89:           call remove(stack, -1)
line 90:         endwhile
line 91: 
line 92:         let indent_inc = indent - stack[-1]
line 93: 
line 94:         if indent_inc == 0 && len(stack) > 1
line 95:           let indent_inc = indent - stack[-2]
line 96:         endif
line 97: 
line 98:         if has_key(indents, indent_inc)
line 99:           let indents[indent_inc] += 1
line 100:           let prev_indent = indent
line 101:         endif
line 102: 
line 103:         if stack[-1] != indent
line 104:           call add(stack, indent)
line 105:         endif
line 106:       endif
line 107:     endfor
line 14:     for line in a:lines
line 15:       let lineno += 1
line 16: 
line 17:       if line =~# '^\s*$'
line 18:         continue
line 19:       endif
line 20: 
line 21:       if line =~# '^\s*/\*'
line 22:         let ccomment = 1
line 23:       endif
line 24:       if ccomment
line 25:         if line =~# '\*/'
line 26:           let ccomment = 0
line 27:         endif
line 28:         continue
line 29:       endif
line 30: 
line 31:       if line =~# '^=\w'
line 32:         let podcomment = 1
line 33:       endif
line 34:       if podcomment
line 35:         if line =~# '^=\%(end\|cut\)\>'
line 36:           let podcomment = 0
line 37:         endif
line 38:         continue
line 39:       endif
line 40: 
line 41:       if triplequote
line 42:         if line =~# '^[^"]*"""[^"]*$'
line 43:           let triplequote = 0
line 44:         endif
line 45:         continue
line 46:       elseif line =~# '^[^"]*"""[^"]*$'
line 47:         let triplequote = 1
line 48:       endif
line 49: 
line 50:       if backtick
line 51:         if line =~# '^[^`]*`[^`]*$'
line 52:           let backtick = 0
line 53:         endif
line 54:         continue
line 55:       elseif &filetype ==# 'go' && line =~# '^[^`]*`[^`]*$'
line 56:         let backtick = 1
line 57:       endif
line 58: 
line 59:       if line =~# '^\s*<\!--'
line 60:         let xmlcomment = 1
line 61:       endif
line 62:       if xmlcomment
line 63:         if line =~# '-->'
line 64:           let xmlcomment = 0
line 65:         endif
line 66:         continue
line 67:       endif
line 68: 
line 69:       " This is correct order because both "<<EOF" and "EOF" matches end
line 70:       if heredoc != ''
line 71:         if line =~# heredoc
line 72:           let heredoc = ''
line 73:         endif
line 74:         continue
line 75:       endif
line 76:       let herematch = matchlist(line, '\C<<\W*\([A-Z]\+\)\s*$')
line 77:       if len(herematch) > 0
line 78:         let heredoc = herematch[1] . '$'
line 79:       endif
line 80: 
line 81:       if line[0] == "\t"
line 82:         let spaces_minus_tabs -= 1
line 83:       else
line 84:         if line[0] == " "
line 85:           let spaces_minus_tabs += 1
line 86:         endif
line 87:         let indent = len(matchstr(line, '^ *'))
line 88:         while stack[-1] > indent
line 89:           call remove(stack, -1)
line 90:         endwhile
line 91: 
line 92:         let indent_inc = indent - stack[-1]
line 93: 
line 94:         if indent_inc == 0 && len(stack) > 1
line 95:           let indent_inc = indent - stack[-2]
line 96:         endif
line 97: 
line 98:         if has_key(indents, indent_inc)
line 99:           let indents[indent_inc] += 1
line 100:           let prev_indent = indent
line 101:         endif
line 102: 
line 103:         if stack[-1] != indent
line 104:           call add(stack, indent)
line 105:         endif
line 106:       endif
line 107:     endfor
line 14:     for line in a:lines
line 15:       let lineno += 1
line 16: 
line 17:       if line =~# '^\s*$'
line 18:         continue
line 19:       endif
line 20: 
line 21:       if line =~# '^\s*/\*'
line 22:         let ccomment = 1
line 23:       endif
line 24:       if ccomment
line 25:         if line =~# '\*/'
line 26:           let ccomment = 0
line 27:         endif
line 28:         continue
line 29:       endif
line 30: 
line 31:       if line =~# '^=\w'
line 32:         let podcomment = 1
line 33:       endif
line 34:       if podcomment
line 35:         if line =~# '^=\%(end\|cut\)\>'
line 36:           let podcomment = 0
line 37:         endif
line 38:         continue
line 39:       endif
line 40: 
line 41:       if triplequote
line 42:         if line =~# '^[^"]*"""[^"]*$'
line 43:           let triplequote = 0
line 44:         endif
line 45:         continue
line 46:       elseif line =~# '^[^"]*"""[^"]*$'
line 47:         let triplequote = 1
line 48:       endif
line 49: 
line 50:       if backtick
line 51:         if line =~# '^[^`]*`[^`]*$'
line 52:           let backtick = 0
line 53:         endif
line 54:         continue
line 55:       elseif &filetype ==# 'go' && line =~# '^[^`]*`[^`]*$'
line 56:         let backtick = 1
line 57:       endif
line 58: 
line 59:       if line =~# '^\s*<\!--'
line 60:         let xmlcomment = 1
line 61:       endif
line 62:       if xmlcomment
line 63:         if line =~# '-->'
line 64:           let xmlcomment = 0
line 65:         endif
line 66:         continue
line 67:       endif
line 68: 
line 69:       " This is correct order because both "<<EOF" and "EOF" matches end
line 70:       if heredoc != ''
line 71:         if line =~# heredoc
line 72:           let heredoc = ''
line 73:         endif
line 74:         continue
line 75:       endif
line 76:       let herematch = matchlist(line, '\C<<\W*\([A-Z]\+\)\s*$')
line 77:       if len(herematch) > 0
line 78:         let heredoc = herematch[1] . '$'
line 79:       endif
line 80: 
line 81:       if line[0] == "\t"
line 82:         let spaces_minus_tabs -= 1
line 83:       else
line 84:         if line[0] == " "
line 85:           let spaces_minus_tabs += 1
line 86:         endif
line 87:         let indent = len(matchstr(line, '^ *'))
line 88:         while stack[-1] > indent
line 89:           call remove(stack, -1)
line 90:         endwhile
line 91: 
line 92:         let indent_inc = indent - stack[-1]
line 93: 
line 94:         if indent_inc == 0 && len(stack) > 1
line 95:           let indent_inc = indent - stack[-2]
line 96:         endif
line 97: 
line 98:         if has_key(indents, indent_inc)
line 99:           let indents[indent_inc] += 1
line 100:           let prev_indent = indent
line 101:         endif
line 102: 
line 103:         if stack[-1] != indent
line 104:           call add(stack, indent)
line 105:         endif
line 106:       endif
line 107:     endfor
line 14:     for line in a:lines
line 15:       let lineno += 1
line 16: 
line 17:       if line =~# '^\s*$'
line 18:         continue
line 19:       endif
line 20: 
line 21:       if line =~# '^\s*/\*'
line 22:         let ccomment = 1
line 23:       endif
line 24:       if ccomment
line 25:         if line =~# '\*/'
line 26:           let ccomment = 0
line 27:         endif
line 28:         continue
line 29:       endif
line 30: 
line 31:       if line =~# '^=\w'
line 32:         let podcomment = 1
line 33:       endif
line 34:       if podcomment
line 35:         if line =~# '^=\%(end\|cut\)\>'
line 36:           let podcomment = 0
line 37:         endif
line 38:         continue
line 39:       endif
line 40: 
line 41:       if triplequote
line 42:         if line =~# '^[^"]*"""[^"]*$'
line 43:           let triplequote = 0
line 44:         endif
line 45:         continue
line 46:       elseif line =~# '^[^"]*"""[^"]*$'
line 47:         let triplequote = 1
line 48:       endif
line 49: 
line 50:       if backtick
line 51:         if line =~# '^[^`]*`[^`]*$'
line 52:           let backtick = 0
line 53:         endif
line 54:         continue
line 55:       elseif &filetype ==# 'go' && line =~# '^[^`]*`[^`]*$'
line 56:         let backtick = 1
line 57:       endif
line 58: 
line 59:       if line =~# '^\s*<\!--'
line 60:         let xmlcomment = 1
line 61:       endif
line 62:       if xmlcomment
line 63:         if line =~# '-->'
line 64:           let xmlcomment = 0
line 65:         endif
line 66:         continue
line 67:       endif
line 68: 
line 69:       " This is correct order because both "<<EOF" and "EOF" matches end
line 70:       if heredoc != ''
line 71:         if line =~# heredoc
line 72:           let heredoc = ''
line 73:         endif
line 74:         continue
line 75:       endif
line 76:       let herematch = matchlist(line, '\C<<\W*\([A-Z]\+\)\s*$')
line 77:       if len(herematch) > 0
line 78:         let heredoc = herematch[1] . '$'
line 79:       endif
line 80: 
line 81:       if line[0] == "\t"
line 82:         let spaces_minus_tabs -= 1
line 83:       else
line 84:         if line[0] == " "
line 85:           let spaces_minus_tabs += 1
line 86:         endif
line 87:         let indent = len(matchstr(line, '^ *'))
line 88:         while stack[-1] > indent
line 89:           call remove(stack, -1)
line 90:         endwhile
line 91: 
line 92:         let indent_inc = indent - stack[-1]
line 93: 
line 94:         if indent_inc == 0 && len(stack) > 1
line 95:           let indent_inc = indent - stack[-2]
line 96:         endif
line 97: 
line 98:         if has_key(indents, indent_inc)
line 99:           let indents[indent_inc] += 1
line 100:           let prev_indent = indent
line 101:         endif
line 102: 
line 103:         if stack[-1] != indent
line 104:           call add(stack, indent)
line 105:         endif
line 106:       endif
line 107:     endfor
line 14:     for line in a:lines
line 15:       let lineno += 1
line 16: 
line 17:       if line =~# '^\s*$'
line 18:         continue
line 19:       endif
line 20: 
line 21:       if line =~# '^\s*/\*'
line 22:         let ccomment = 1
line 23:       endif
line 24:       if ccomment
line 25:         if line =~# '\*/'
line 26:           let ccomment = 0
line 27:         endif
line 28:         continue
line 29:       endif
line 30: 
line 31:       if line =~# '^=\w'
line 32:         let podcomment = 1
line 33:       endif
line 34:       if podcomment
line 35:         if line =~# '^=\%(end\|cut\)\>'
line 36:           let podcomment = 0
line 37:         endif
line 38:         continue
line 39:       endif
line 40: 
line 41:       if triplequote
line 42:         if line =~# '^[^"]*"""[^"]*$'
line 43:           let triplequote = 0
line 44:         endif
line 45:         continue
line 46:       elseif line =~# '^[^"]*"""[^"]*$'
line 47:         let triplequote = 1
line 48:       endif
line 49: 
line 50:       if backtick
line 51:         if line =~# '^[^`]*`[^`]*$'
line 52:           let backtick = 0
line 53:         endif
line 54:         continue
line 55:       elseif &filetype ==# 'go' && line =~# '^[^`]*`[^`]*$'
line 56:         let backtick = 1
line 57:       endif
line 58: 
line 59:       if line =~# '^\s*<\!--'
line 60:         let xmlcomment = 1
line 61:       endif
line 62:       if xmlcomment
line 63:         if line =~# '-->'
line 64:           let xmlcomment = 0
line 65:         endif
line 66:         continue
line 67:       endif
line 68: 
line 69:       " This is correct order because both "<<EOF" and "EOF" matches end
line 70:       if heredoc != ''
line 71:         if line =~# heredoc
line 72:           let heredoc = ''
line 73:         endif
line 74:         continue
line 75:       endif
line 76:       let herematch = matchlist(line, '\C<<\W*\([A-Z]\+\)\s*$')
line 77:       if len(herematch) > 0
line 78:         let heredoc = herematch[1] . '$'
line 79:       endif
line 80: 
line 81:       if line[0] == "\t"
line 82:         let spaces_minus_tabs -= 1
line 83:       else
line 84:         if line[0] == " "
line 85:           let spaces_minus_tabs += 1
line 86:         endif
line 87:         let indent = len(matchstr(line, '^ *'))
line 88:         while stack[-1] > indent
line 89:           call remove(stack, -1)
line 90:         endwhile
line 91: 
line 92:         let indent_inc = indent - stack[-1]
line 93: 
line 94:         if indent_inc == 0 && len(stack) > 1
line 95:           let indent_inc = indent - stack[-2]
line 96:         endif
line 97: 
line 98:         if has_key(indents, indent_inc)
line 99:           let indents[indent_inc] += 1
line 100:           let prev_indent = indent
line 101:         endif
line 102: 
line 103:         if stack[-1] != indent
line 104:           call add(stack, indent)
line 105:         endif
line 106:       endif
line 107:     endfor
line 14:     for line in a:lines
line 15:       let lineno += 1
line 16: 
line 17:       if line =~# '^\s*$'
line 18:         continue
line 19:       endif
line 20: 
line 21:       if line =~# '^\s*/\*'
line 22:         let ccomment = 1
line 23:       endif
line 24:       if ccomment
line 25:         if line =~# '\*/'
line 26:           let ccomment = 0
line 27:         endif
line 28:         continue
line 29:       endif
line 30: 
line 31:       if line =~# '^=\w'
line 32:         let podcomment = 1
line 33:       endif
line 34:       if podcomment
line 35:         if line =~# '^=\%(end\|cut\)\>'
line 36:           let podcomment = 0
line 37:         endif
line 38:         continue
line 39:       endif
line 40: 
line 41:       if triplequote
line 42:         if line =~# '^[^"]*"""[^"]*$'
line 43:           let triplequote = 0
line 44:         endif
line 45:         continue
line 46:       elseif line =~# '^[^"]*"""[^"]*$'
line 47:         let triplequote = 1
line 48:       endif
line 49: 
line 50:       if backtick
line 51:         if line =~# '^[^`]*`[^`]*$'
line 52:           let backtick = 0
line 53:         endif
line 54:         continue
line 55:       elseif &filetype ==# 'go' && line =~# '^[^`]*`[^`]*$'
line 56:         let backtick = 1
line 57:       endif
line 58: 
line 59:       if line =~# '^\s*<\!--'
line 60:         let xmlcomment = 1
line 61:       endif
line 62:       if xmlcomment
line 63:         if line =~# '-->'
line 64:           let xmlcomment = 0
line 65:         endif
line 66:         continue
line 67:       endif
line 68: 
line 69:       " This is correct order because both "<<EOF" and "EOF" matches end
line 70:       if heredoc != ''
line 71:         if line =~# heredoc
line 72:           let heredoc = ''
line 73:         endif
line 74:         continue
line 75:       endif
line 76:       let herematch = matchlist(line, '\C<<\W*\([A-Z]\+\)\s*$')
line 77:       if len(herematch) > 0
line 78:         let heredoc = herematch[1] . '$'
line 79:       endif
line 80: 
line 81:       if line[0] == "\t"
line 82:         let spaces_minus_tabs -= 1
line 83:       else
line 84:         if line[0] == " "
line 85:           let spaces_minus_tabs += 1
line 86:         endif
line 87:         let indent = len(matchstr(line, '^ *'))
line 88:         while stack[-1] > indent
line 89:           call remove(stack, -1)
line 90:         endwhile
line 91: 
line 92:         let indent_inc = indent - stack[-1]
line 93: 
line 94:         if indent_inc == 0 && len(stack) > 1
line 95:           let indent_inc = indent - stack[-2]
line 96:         endif
line 97: 
line 98:         if has_key(indents, indent_inc)
line 99:           let indents[indent_inc] += 1
line 100:           let prev_indent = indent
line 101:         endif
line 102: 
line 103:         if stack[-1] != indent
line 104:           call add(stack, indent)
line 105:         endif
line 106:       endif
line 107:     endfor
line 14:     for line in a:lines
line 15:       let lineno += 1
line 16: 
line 17:       if line =~# '^\s*$'
line 18:         continue
line 19:       endif
line 20: 
line 21:       if line =~# '^\s*/\*'
line 22:         let ccomment = 1
line 23:       endif
line 24:       if ccomment
line 25:         if line =~# '\*/'
line 26:           let ccomment = 0
line 27:         endif
line 28:         continue
line 29:       endif
line 30: 
line 31:       if line =~# '^=\w'
line 32:         let podcomment = 1
line 33:       endif
line 34:       if podcomment
line 35:         if line =~# '^=\%(end\|cut\)\>'
line 36:           let podcomment = 0
line 37:         endif
line 38:         continue
line 39:       endif
line 40: 
line 41:       if triplequote
line 42:         if line =~# '^[^"]*"""[^"]*$'
line 43:           let triplequote = 0
line 44:         endif
line 45:         continue
line 46:       elseif line =~# '^[^"]*"""[^"]*$'
line 47:         let triplequote = 1
line 48:       endif
line 49: 
line 50:       if backtick
line 51:         if line =~# '^[^`]*`[^`]*$'
line 52:           let backtick = 0
line 53:         endif
line 54:         continue
line 55:       elseif &filetype ==# 'go' && line =~# '^[^`]*`[^`]*$'
line 56:         let backtick = 1
line 57:       endif
line 58: 
line 59:       if line =~# '^\s*<\!--'
line 60:         let xmlcomment = 1
line 61:       endif
line 62:       if xmlcomment
line 63:         if line =~# '-->'
line 64:           let xmlcomment = 0
line 65:         endif
line 66:         continue
line 67:       endif
line 68: 
line 69:       " This is correct order because both "<<EOF" and "EOF" matches end
line 70:       if heredoc != ''
line 71:         if line =~# heredoc
line 72:           let heredoc = ''
line 73:         endif
line 74:         continue
line 75:       endif
line 76:       let herematch = matchlist(line, '\C<<\W*\([A-Z]\+\)\s*$')
line 77:       if len(herematch) > 0
line 78:         let heredoc = herematch[1] . '$'
line 79:       endif
line 80: 
line 81:       if line[0] == "\t"
line 82:         let spaces_minus_tabs -= 1
line 83:       else
line 84:         if line[0] == " "
line 85:           let spaces_minus_tabs += 1
line 86:         endif
line 87:         let indent = len(matchstr(line, '^ *'))
line 88:         while stack[-1] > indent
line 89:           call remove(stack, -1)
line 90:         endwhile
line 91: 
line 92:         let indent_inc = indent - stack[-1]
line 93: 
line 94:         if indent_inc == 0 && len(stack) > 1
line 95:           let indent_inc = indent - stack[-2]
line 96:         endif
line 97: 
line 98:         if has_key(indents, indent_inc)
line 99:           let indents[indent_inc] += 1
line 100:           let prev_indent = indent
line 101:         endif
line 102: 
line 103:         if stack[-1] != indent
line 104:           call add(stack, indent)
line 105:         endif
line 106:       endif
line 107:     endfor
line 14:     for line in a:lines
line 15:       let lineno += 1
line 16: 
line 17:       if line =~# '^\s*$'
line 18:         continue
line 19:       endif
line 20: 
line 21:       if line =~# '^\s*/\*'
line 22:         let ccomment = 1
line 23:       endif
line 24:       if ccomment
line 25:         if line =~# '\*/'
line 26:           let ccomment = 0
line 27:         endif
line 28:         continue
line 29:       endif
line 30: 
line 31:       if line =~# '^=\w'
line 32:         let podcomment = 1
line 33:       endif
line 34:       if podcomment
line 35:         if line =~# '^=\%(end\|cut\)\>'
line 36:           let podcomment = 0
line 37:         endif
line 38:         continue
line 39:       endif
line 40: 
line 41:       if triplequote
line 42:         if line =~# '^[^"]*"""[^"]*$'
line 43:           let triplequote = 0
line 44:         endif
line 45:         continue
line 46:       elseif line =~# '^[^"]*"""[^"]*$'
line 47:         let triplequote = 1
line 48:       endif
line 49: 
line 50:       if backtick
line 51:         if line =~# '^[^`]*`[^`]*$'
line 52:           let backtick = 0
line 53:         endif
line 54:         continue
line 55:       elseif &filetype ==# 'go' && line =~# '^[^`]*`[^`]*$'
line 56:         let backtick = 1
line 57:       endif
line 58: 
line 59:       if line =~# '^\s*<\!--'
line 60:         let xmlcomment = 1
line 61:       endif
line 62:       if xmlcomment
line 63:         if line =~# '-->'
line 64:           let xmlcomment = 0
line 65:         endif
line 66:         continue
line 67:       endif
line 68: 
line 69:       " This is correct order because both "<<EOF" and "EOF" matches end
line 70:       if heredoc != ''
line 71:         if line =~# heredoc
line 72:           let heredoc = ''
line 73:         endif
line 74:         continue
line 75:       endif
line 76:       let herematch = matchlist(line, '\C<<\W*\([A-Z]\+\)\s*$')
line 77:       if len(herematch) > 0
line 78:         let heredoc = herematch[1] . '$'
line 79:       endif
line 80: 
line 81:       if line[0] == "\t"
line 82:         let spaces_minus_tabs -= 1
line 83:       else
line 84:         if line[0] == " "
line 85:           let spaces_minus_tabs += 1
line 86:         endif
line 87:         let indent = len(matchstr(line, '^ *'))
line 88:         while stack[-1] > indent
line 89:           call remove(stack, -1)
line 90:         endwhile
line 91: 
line 92:         let indent_inc = indent - stack[-1]
line 93: 
line 94:         if indent_inc == 0 && len(stack) > 1
line 95:           let indent_inc = indent - stack[-2]
line 96:         endif
line 97: 
line 98:         if has_key(indents, indent_inc)
line 99:           let indents[indent_inc] += 1
line 100:           let prev_indent = indent
line 101:         endif
line 102: 
line 103:         if stack[-1] != indent
line 104:           call add(stack, indent)
line 105:         endif
line 106:       endif
line 107:     endfor
line 14:     for line in a:lines
line 15:       let lineno += 1
line 16: 
line 17:       if line =~# '^\s*$'
line 18:         continue
line 19:       endif
line 20: 
line 21:       if line =~# '^\s*/\*'
line 22:         let ccomment = 1
line 23:       endif
line 24:       if ccomment
line 25:         if line =~# '\*/'
line 26:           let ccomment = 0
line 27:         endif
line 28:         continue
line 29:       endif
line 30: 
line 31:       if line =~# '^=\w'
line 32:         let podcomment = 1
line 33:       endif
line 34:       if podcomment
line 35:         if line =~# '^=\%(end\|cut\)\>'
line 36:           let podcomment = 0
line 37:         endif
line 38:         continue
line 39:       endif
line 40: 
line 41:       if triplequote
line 42:         if line =~# '^[^"]*"""[^"]*$'
line 43:           let triplequote = 0
line 44:         endif
line 45:         continue
line 46:       elseif line =~# '^[^"]*"""[^"]*$'
line 47:         let triplequote = 1
line 48:       endif
line 49: 
line 50:       if backtick
line 51:         if line =~# '^[^`]*`[^`]*$'
line 52:           let backtick = 0
line 53:         endif
line 54:         continue
line 55:       elseif &filetype ==# 'go' && line =~# '^[^`]*`[^`]*$'
line 56:         let backtick = 1
line 57:       endif
line 58: 
line 59:       if line =~# '^\s*<\!--'
line 60:         let xmlcomment = 1
line 61:       endif
line 62:       if xmlcomment
line 63:         if line =~# '-->'
line 64:           let xmlcomment = 0
line 65:         endif
line 66:         continue
line 67:       endif
line 68: 
line 69:       " This is correct order because both "<<EOF" and "EOF" matches end
line 70:       if heredoc != ''
line 71:         if line =~# heredoc
line 72:           let heredoc = ''
line 73:         endif
line 74:         continue
line 75:       endif
line 76:       let herematch = matchlist(line, '\C<<\W*\([A-Z]\+\)\s*$')
line 77:       if len(herematch) > 0
line 78:         let heredoc = herematch[1] . '$'
line 79:       endif
line 80: 
line 81:       if line[0] == "\t"
line 82:         let spaces_minus_tabs -= 1
line 83:       else
line 84:         if line[0] == " "
line 85:           let spaces_minus_tabs += 1
line 86:         endif
line 87:         let indent = len(matchstr(line, '^ *'))
line 88:         while stack[-1] > indent
line 89:           call remove(stack, -1)
line 90:         endwhile
line 91: 
line 92:         let indent_inc = indent - stack[-1]
line 93: 
line 94:         if indent_inc == 0 && len(stack) > 1
line 95:           let indent_inc = indent - stack[-2]
line 96:         endif
line 97: 
line 98:         if has_key(indents, indent_inc)
line 99:           let indents[indent_inc] += 1
line 100:           let prev_indent = indent
line 101:         endif
line 102: 
line 103:         if stack[-1] != indent
line 104:           call add(stack, indent)
line 105:         endif
line 106:       endif
line 107:     endfor
line 14:     for line in a:lines
line 15:       let lineno += 1
line 16: 
line 17:       if line =~# '^\s*$'
line 18:         continue
line 19:       endif
line 20: 
line 21:       if line =~# '^\s*/\*'
line 22:         let ccomment = 1
line 23:       endif
line 24:       if ccomment
line 25:         if line =~# '\*/'
line 26:           let ccomment = 0
line 27:         endif
line 28:         continue
line 29:       endif
line 30: 
line 31:       if line =~# '^=\w'
line 32:         let podcomment = 1
line 33:       endif
line 34:       if podcomment
line 35:         if line =~# '^=\%(end\|cut\)\>'
line 36:           let podcomment = 0
line 37:         endif
line 38:         continue
line 39:       endif
line 40: 
line 41:       if triplequote
line 42:         if line =~# '^[^"]*"""[^"]*$'
line 43:           let triplequote = 0
line 44:         endif
line 45:         continue
line 46:       elseif line =~# '^[^"]*"""[^"]*$'
line 47:         let triplequote = 1
line 48:       endif
line 49: 
line 50:       if backtick
line 51:         if line =~# '^[^`]*`[^`]*$'
line 52:           let backtick = 0
line 53:         endif
line 54:         continue
line 55:       elseif &filetype ==# 'go' && line =~# '^[^`]*`[^`]*$'
line 56:         let backtick = 1
line 57:       endif
line 58: 
line 59:       if line =~# '^\s*<\!--'
line 60:         let xmlcomment = 1
line 61:       endif
line 62:       if xmlcomment
line 63:         if line =~# '-->'
line 64:           let xmlcomment = 0
line 65:         endif
line 66:         continue
line 67:       endif
line 68: 
line 69:       " This is correct order because both "<<EOF" and "EOF" matches end
line 70:       if heredoc != ''
line 71:         if line =~# heredoc
line 72:           let heredoc = ''
line 73:         endif
line 74:         continue
line 75:       endif
line 76:       let herematch = matchlist(line, '\C<<\W*\([A-Z]\+\)\s*$')
line 77:       if len(herematch) > 0
line 78:         let heredoc = herematch[1] . '$'
line 79:       endif
line 80: 
line 81:       if line[0] == "\t"
line 82:         let spaces_minus_tabs -= 1
line 83:       else
line 84:         if line[0] == " "
line 85:           let spaces_minus_tabs += 1
line 86:         endif
line 87:         let indent = len(matchstr(line, '^ *'))
line 88:         while stack[-1] > indent
line 89:           call remove(stack, -1)
line 90:         endwhile
line 91: 
line 92:         let indent_inc = indent - stack[-1]
line 93: 
line 94:         if indent_inc == 0 && len(stack) > 1
line 95:           let indent_inc = indent - stack[-2]
line 96:         endif
line 97: 
line 98:         if has_key(indents, indent_inc)
line 99:           let indents[indent_inc] += 1
line 100:           let prev_indent = indent
line 101:         endif
line 102: 
line 103:         if stack[-1] != indent
line 104:           call add(stack, indent)
line 105:         endif
line 106:       endif
line 107:     endfor
line 14:     for line in a:lines
line 15:       let lineno += 1
line 16: 
line 17:       if line =~# '^\s*$'
line 18:         continue
line 19:       endif
line 20: 
line 21:       if line =~# '^\s*/\*'
line 22:         let ccomment = 1
line 23:       endif
line 24:       if ccomment
line 25:         if line =~# '\*/'
line 26:           let ccomment = 0
line 27:         endif
line 28:         continue
line 29:       endif
line 30: 
line 31:       if line =~# '^=\w'
line 32:         let podcomment = 1
line 33:       endif
line 34:       if podcomment
line 35:         if line =~# '^=\%(end\|cut\)\>'
line 36:           let podcomment = 0
line 37:         endif
line 38:         continue
line 39:       endif
line 40: 
line 41:       if triplequote
line 42:         if line =~# '^[^"]*"""[^"]*$'
line 43:           let triplequote = 0
line 44:         endif
line 45:         continue
line 46:       elseif line =~# '^[^"]*"""[^"]*$'
line 47:         let triplequote = 1
line 48:       endif
line 49: 
line 50:       if backtick
line 51:         if line =~# '^[^`]*`[^`]*$'
line 52:           let backtick = 0
line 53:         endif
line 54:         continue
line 55:       elseif &filetype ==# 'go' && line =~# '^[^`]*`[^`]*$'
line 56:         let backtick = 1
line 57:       endif
line 58: 
line 59:       if line =~# '^\s*<\!--'
line 60:         let xmlcomment = 1
line 61:       endif
line 62:       if xmlcomment
line 63:         if line =~# '-->'
line 64:           let xmlcomment = 0
line 65:         endif
line 66:         continue
line 67:       endif
line 68: 
line 69:       " This is correct order because both "<<EOF" and "EOF" matches end
line 70:       if heredoc != ''
line 71:         if line =~# heredoc
line 72:           let heredoc = ''
line 73:         endif
line 74:         continue
line 75:       endif
line 76:       let herematch = matchlist(line, '\C<<\W*\([A-Z]\+\)\s*$')
line 77:       if len(herematch) > 0
line 78:         let heredoc = herematch[1] . '$'
line 79:       endif
line 80: 
line 81:       if line[0] == "\t"
line 82:         let spaces_minus_tabs -= 1
line 83:       else
line 84:         if line[0] == " "
line 85:           let spaces_minus_tabs += 1
line 86:         endif
line 87:         let indent = len(matchstr(line, '^ *'))
line 88:         while stack[-1] > indent
line 89:           call remove(stack, -1)
line 90:         endwhile
line 88:         while stack[-1] > indent
line 89:           call remove(stack, -1)
line 90:         endwhile
line 91: 
line 92:         let indent_inc = indent - stack[-1]
line 93: 
line 94:         if indent_inc == 0 && len(stack) > 1
line 95:           let indent_inc = indent - stack[-2]
line 96:         endif
line 97: 
line 98:         if has_key(indents, indent_inc)
line 99:           let indents[indent_inc] += 1
line 100:           let prev_indent = indent
line 101:         endif
line 102: 
line 103:         if stack[-1] != indent
line 104:           call add(stack, indent)
line 105:         endif
line 106:       endif
line 107:     endfor
line 14:     for line in a:lines
line 15:       let lineno += 1
line 16: 
line 17:       if line =~# '^\s*$'
line 18:         continue
line 19:       endif
line 20: 
line 21:       if line =~# '^\s*/\*'
line 22:         let ccomment = 1
line 23:       endif
line 24:       if ccomment
line 25:         if line =~# '\*/'
line 26:           let ccomment = 0
line 27:         endif
line 28:         continue
line 29:       endif
line 30: 
line 31:       if line =~# '^=\w'
line 32:         let podcomment = 1
line 33:       endif
line 34:       if podcomment
line 35:         if line =~# '^=\%(end\|cut\)\>'
line 36:           let podcomment = 0
line 37:         endif
line 38:         continue
line 39:       endif
line 40: 
line 41:       if triplequote
line 42:         if line =~# '^[^"]*"""[^"]*$'
line 43:           let triplequote = 0
line 44:         endif
line 45:         continue
line 46:       elseif line =~# '^[^"]*"""[^"]*$'
line 47:         let triplequote = 1
line 48:       endif
line 49: 
line 50:       if backtick
line 51:         if line =~# '^[^`]*`[^`]*$'
line 52:           let backtick = 0
line 53:         endif
line 54:         continue
line 55:       elseif &filetype ==# 'go' && line =~# '^[^`]*`[^`]*$'
line 56:         let backtick = 1
line 57:       endif
line 58: 
line 59:       if line =~# '^\s*<\!--'
line 60:         let xmlcomment = 1
line 61:       endif
line 62:       if xmlcomment
line 63:         if line =~# '-->'
line 64:           let xmlcomment = 0
line 65:         endif
line 66:         continue
line 67:       endif
line 68: 
line 69:       " This is correct order because both "<<EOF" and "EOF" matches end
line 70:       if heredoc != ''
line 71:         if line =~# heredoc
line 72:           let heredoc = ''
line 73:         endif
line 74:         continue
line 75:       endif
line 76:       let herematch = matchlist(line, '\C<<\W*\([A-Z]\+\)\s*$')
line 77:       if len(herematch) > 0
line 78:         let heredoc = herematch[1] . '$'
line 79:       endif
line 80: 
line 81:       if line[0] == "\t"
line 82:         let spaces_minus_tabs -= 1
line 83:       else
line 84:         if line[0] == " "
line 85:           let spaces_minus_tabs += 1
line 86:         endif
line 87:         let indent = len(matchstr(line, '^ *'))
line 88:         while stack[-1] > indent
line 89:           call remove(stack, -1)
line 90:         endwhile
line 91: 
line 92:         let indent_inc = indent - stack[-1]
line 93: 
line 94:         if indent_inc == 0 && len(stack) > 1
line 95:           let indent_inc = indent - stack[-2]
line 96:         endif
line 97: 
line 98:         if has_key(indents, indent_inc)
line 99:           let indents[indent_inc] += 1
line 100:           let prev_indent = indent
line 101:         endif
line 102: 
line 103:         if stack[-1] != indent
line 104:           call add(stack, indent)
line 105:         endif
line 106:       endif
line 107:     endfor
line 14:     for line in a:lines
line 15:       let lineno += 1
line 16: 
line 17:       if line =~# '^\s*$'
line 18:         continue
line 19:       endif
line 20: 
line 21:       if line =~# '^\s*/\*'
line 22:         let ccomment = 1
line 23:       endif
line 24:       if ccomment
line 25:         if line =~# '\*/'
line 26:           let ccomment = 0
line 27:         endif
line 28:         continue
line 29:       endif
line 30: 
line 31:       if line =~# '^=\w'
line 32:         let podcomment = 1
line 33:       endif
line 34:       if podcomment
line 35:         if line =~# '^=\%(end\|cut\)\>'
line 36:           let podcomment = 0
line 37:         endif
line 38:         continue
line 39:       endif
line 40: 
line 41:       if triplequote
line 42:         if line =~# '^[^"]*"""[^"]*$'
line 43:           let triplequote = 0
line 44:         endif
line 45:         continue
line 46:       elseif line =~# '^[^"]*"""[^"]*$'
line 47:         let triplequote = 1
line 48:       endif
line 49: 
line 50:       if backtick
line 51:         if line =~# '^[^`]*`[^`]*$'
line 52:           let backtick = 0
line 53:         endif
line 54:         continue
line 55:       elseif &filetype ==# 'go' && line =~# '^[^`]*`[^`]*$'
line 56:         let backtick = 1
line 57:       endif
line 58: 
line 59:       if line =~# '^\s*<\!--'
line 60:         let xmlcomment = 1
line 61:       endif
line 62:       if xmlcomment
line 63:         if line =~# '-->'
line 64:           let xmlcomment = 0
line 65:         endif
line 66:         continue
line 67:       endif
line 68: 
line 69:       " This is correct order because both "<<EOF" and "EOF" matches end
line 70:       if heredoc != ''
line 71:         if line =~# heredoc
line 72:           let heredoc = ''
line 73:         endif
line 74:         continue
line 75:       endif
line 76:       let herematch = matchlist(line, '\C<<\W*\([A-Z]\+\)\s*$')
line 77:       if len(herematch) > 0
line 78:         let heredoc = herematch[1] . '$'
line 79:       endif
line 80: 
line 81:       if line[0] == "\t"
line 82:         let spaces_minus_tabs -= 1
line 83:       else
line 84:         if line[0] == " "
line 85:           let spaces_minus_tabs += 1
line 86:         endif
line 87:         let indent = len(matchstr(line, '^ *'))
line 88:         while stack[-1] > indent
line 89:           call remove(stack, -1)
line 90:         endwhile
line 91: 
line 92:         let indent_inc = indent - stack[-1]
line 93: 
line 94:         if indent_inc == 0 && len(stack) > 1
line 95:           let indent_inc = indent - stack[-2]
line 96:         endif
line 97: 
line 98:         if has_key(indents, indent_inc)
line 99:           let indents[indent_inc] += 1
line 100:           let prev_indent = indent
line 101:         endif
line 102: 
line 103:         if stack[-1] != indent
line 104:           call add(stack, indent)
line 105:         endif
line 106:       endif
line 107:     endfor
line 14:     for line in a:lines
line 15:       let lineno += 1
line 16: 
line 17:       if line =~# '^\s*$'
line 18:         continue
line 19:       endif
line 20: 
line 21:       if line =~# '^\s*/\*'
line 22:         let ccomment = 1
line 23:       endif
line 24:       if ccomment
line 25:         if line =~# '\*/'
line 26:           let ccomment = 0
line 27:         endif
line 28:         continue
line 29:       endif
line 30: 
line 31:       if line =~# '^=\w'
line 32:         let podcomment = 1
line 33:       endif
line 34:       if podcomment
line 35:         if line =~# '^=\%(end\|cut\)\>'
line 36:           let podcomment = 0
line 37:         endif
line 38:         continue
line 39:       endif
line 40: 
line 41:       if triplequote
line 42:         if line =~# '^[^"]*"""[^"]*$'
line 43:           let triplequote = 0
line 44:         endif
line 45:         continue
line 46:       elseif line =~# '^[^"]*"""[^"]*$'
line 47:         let triplequote = 1
line 48:       endif
line 49: 
line 50:       if backtick
line 51:         if line =~# '^[^`]*`[^`]*$'
line 52:           let backtick = 0
line 53:         endif
line 54:         continue
line 55:       elseif &filetype ==# 'go' && line =~# '^[^`]*`[^`]*$'
line 56:         let backtick = 1
line 57:       endif
line 58: 
line 59:       if line =~# '^\s*<\!--'
line 60:         let xmlcomment = 1
line 61:       endif
line 62:       if xmlcomment
line 63:         if line =~# '-->'
line 64:           let xmlcomment = 0
line 65:         endif
line 66:         continue
line 67:       endif
line 68: 
line 69:       " This is correct order because both "<<EOF" and "EOF" matches end
line 70:       if heredoc != ''
line 71:         if line =~# heredoc
line 72:           let heredoc = ''
line 73:         endif
line 74:         continue
line 75:       endif
line 76:       let herematch = matchlist(line, '\C<<\W*\([A-Z]\+\)\s*$')
line 77:       if len(herematch) > 0
line 78:         let heredoc = herematch[1] . '$'
line 79:       endif
line 80: 
line 81:       if line[0] == "\t"
line 82:         let spaces_minus_tabs -= 1
line 83:       else
line 84:         if line[0] == " "
line 85:           let spaces_minus_tabs += 1
line 86:         endif
line 87:         let indent = len(matchstr(line, '^ *'))
line 88:         while stack[-1] > indent
line 89:           call remove(stack, -1)
line 90:         endwhile
line 91: 
line 92:         let indent_inc = indent - stack[-1]
line 93: 
line 94:         if indent_inc == 0 && len(stack) > 1
line 95:           let indent_inc = indent - stack[-2]
line 96:         endif
line 97: 
line 98:         if has_key(indents, indent_inc)
line 99:           let indents[indent_inc] += 1
line 100:           let prev_indent = indent
line 101:         endif
line 102: 
line 103:         if stack[-1] != indent
line 104:           call add(stack, indent)
line 105:         endif
line 106:       endif
line 107:     endfor
line 14:     for line in a:lines
line 15:       let lineno += 1
line 16: 
line 17:       if line =~# '^\s*$'
line 18:         continue
line 19:       endif
line 20: 
line 21:       if line =~# '^\s*/\*'
line 22:         let ccomment = 1
line 23:       endif
line 24:       if ccomment
line 25:         if line =~# '\*/'
line 26:           let ccomment = 0
line 27:         endif
line 28:         continue
line 29:       endif
line 30: 
line 31:       if line =~# '^=\w'
line 32:         let podcomment = 1
line 33:       endif
line 34:       if podcomment
line 35:         if line =~# '^=\%(end\|cut\)\>'
line 36:           let podcomment = 0
line 37:         endif
line 38:         continue
line 39:       endif
line 40: 
line 41:       if triplequote
line 42:         if line =~# '^[^"]*"""[^"]*$'
line 43:           let triplequote = 0
line 44:         endif
line 45:         continue
line 46:       elseif line =~# '^[^"]*"""[^"]*$'
line 47:         let triplequote = 1
line 48:       endif
line 49: 
line 50:       if backtick
line 51:         if line =~# '^[^`]*`[^`]*$'
line 52:           let backtick = 0
line 53:         endif
line 54:         continue
line 55:       elseif &filetype ==# 'go' && line =~# '^[^`]*`[^`]*$'
line 56:         let backtick = 1
line 57:       endif
line 58: 
line 59:       if line =~# '^\s*<\!--'
line 60:         let xmlcomment = 1
line 61:       endif
line 62:       if xmlcomment
line 63:         if line =~# '-->'
line 64:           let xmlcomment = 0
line 65:         endif
line 66:         continue
line 67:       endif
line 68: 
line 69:       " This is correct order because both "<<EOF" and "EOF" matches end
line 70:       if heredoc != ''
line 71:         if line =~# heredoc
line 72:           let heredoc = ''
line 73:         endif
line 74:         continue
line 75:       endif
line 76:       let herematch = matchlist(line, '\C<<\W*\([A-Z]\+\)\s*$')
line 77:       if len(herematch) > 0
line 78:         let heredoc = herematch[1] . '$'
line 79:       endif
line 80: 
line 81:       if line[0] == "\t"
line 82:         let spaces_minus_tabs -= 1
line 83:       else
line 84:         if line[0] == " "
line 85:           let spaces_minus_tabs += 1
line 86:         endif
line 87:         let indent = len(matchstr(line, '^ *'))
line 88:         while stack[-1] > indent
line 89:           call remove(stack, -1)
line 90:         endwhile
line 91: 
line 92:         let indent_inc = indent - stack[-1]
line 93: 
line 94:         if indent_inc == 0 && len(stack) > 1
line 95:           let indent_inc = indent - stack[-2]
line 96:         endif
line 97: 
line 98:         if has_key(indents, indent_inc)
line 99:           let indents[indent_inc] += 1
line 100:           let prev_indent = indent
line 101:         endif
line 102: 
line 103:         if stack[-1] != indent
line 104:           call add(stack, indent)
line 105:         endif
line 106:       endif
line 107:     endfor
line 14:     for line in a:lines
line 15:       let lineno += 1
line 16: 
line 17:       if line =~# '^\s*$'
line 18:         continue
line 19:       endif
line 20: 
line 21:       if line =~# '^\s*/\*'
line 22:         let ccomment = 1
line 23:       endif
line 24:       if ccomment
line 25:         if line =~# '\*/'
line 26:           let ccomment = 0
line 27:         endif
line 28:         continue
line 29:       endif
line 30: 
line 31:       if line =~# '^=\w'
line 32:         let podcomment = 1
line 33:       endif
line 34:       if podcomment
line 35:         if line =~# '^=\%(end\|cut\)\>'
line 36:           let podcomment = 0
line 37:         endif
line 38:         continue
line 39:       endif
line 40: 
line 41:       if triplequote
line 42:         if line =~# '^[^"]*"""[^"]*$'
line 43:           let triplequote = 0
line 44:         endif
line 45:         continue
line 46:       elseif line =~# '^[^"]*"""[^"]*$'
line 47:         let triplequote = 1
line 48:       endif
line 49: 
line 50:       if backtick
line 51:         if line =~# '^[^`]*`[^`]*$'
line 52:           let backtick = 0
line 53:         endif
line 54:         continue
line 55:       elseif &filetype ==# 'go' && line =~# '^[^`]*`[^`]*$'
line 56:         let backtick = 1
line 57:       endif
line 58: 
line 59:       if line =~# '^\s*<\!--'
line 60:         let xmlcomment = 1
line 61:       endif
line 62:       if xmlcomment
line 63:         if line =~# '-->'
line 64:           let xmlcomment = 0
line 65:         endif
line 66:         continue
line 67:       endif
line 68: 
line 69:       " This is correct order because both "<<EOF" and "EOF" matches end
line 70:       if heredoc != ''
line 71:         if line =~# heredoc
line 72:           let heredoc = ''
line 73:         endif
line 74:         continue
line 75:       endif
line 76:       let herematch = matchlist(line, '\C<<\W*\([A-Z]\+\)\s*$')
line 77:       if len(herematch) > 0
line 78:         let heredoc = herematch[1] . '$'
line 79:       endif
line 80: 
line 81:       if line[0] == "\t"
line 82:         let spaces_minus_tabs -= 1
line 83:       else
line 84:         if line[0] == " "
line 85:           let spaces_minus_tabs += 1
line 86:         endif
line 87:         let indent = len(matchstr(line, '^ *'))
line 88:         while stack[-1] > indent
line 89:           call remove(stack, -1)
line 90:         endwhile
line 91: 
line 92:         let indent_inc = indent - stack[-1]
line 93: 
line 94:         if indent_inc == 0 && len(stack) > 1
line 95:           let indent_inc = indent - stack[-2]
line 96:         endif
line 97: 
line 98:         if has_key(indents, indent_inc)
line 99:           let indents[indent_inc] += 1
line 100:           let prev_indent = indent
line 101:         endif
line 102: 
line 103:         if stack[-1] != indent
line 104:           call add(stack, indent)
line 105:         endif
line 106:       endif
line 107:     endfor
line 14:     for line in a:lines
line 15:       let lineno += 1
line 16: 
line 17:       if line =~# '^\s*$'
line 18:         continue
line 19:       endif
line 20: 
line 21:       if line =~# '^\s*/\*'
line 22:         let ccomment = 1
line 23:       endif
line 24:       if ccomment
line 25:         if line =~# '\*/'
line 26:           let ccomment = 0
line 27:         endif
line 28:         continue
line 29:       endif
line 30: 
line 31:       if line =~# '^=\w'
line 32:         let podcomment = 1
line 33:       endif
line 34:       if podcomment
line 35:         if line =~# '^=\%(end\|cut\)\>'
line 36:           let podcomment = 0
line 37:         endif
line 38:         continue
line 39:       endif
line 40: 
line 41:       if triplequote
line 42:         if line =~# '^[^"]*"""[^"]*$'
line 43:           let triplequote = 0
line 44:         endif
line 45:         continue
line 46:       elseif line =~# '^[^"]*"""[^"]*$'
line 47:         let triplequote = 1
line 48:       endif
line 49: 
line 50:       if backtick
line 51:         if line =~# '^[^`]*`[^`]*$'
line 52:           let backtick = 0
line 53:         endif
line 54:         continue
line 55:       elseif &filetype ==# 'go' && line =~# '^[^`]*`[^`]*$'
line 56:         let backtick = 1
line 57:       endif
line 58: 
line 59:       if line =~# '^\s*<\!--'
line 60:         let xmlcomment = 1
line 61:       endif
line 62:       if xmlcomment
line 63:         if line =~# '-->'
line 64:           let xmlcomment = 0
line 65:         endif
line 66:         continue
line 67:       endif
line 68: 
line 69:       " This is correct order because both "<<EOF" and "EOF" matches end
line 70:       if heredoc != ''
line 71:         if line =~# heredoc
line 72:           let heredoc = ''
line 73:         endif
line 74:         continue
line 75:       endif
line 76:       let herematch = matchlist(line, '\C<<\W*\([A-Z]\+\)\s*$')
line 77:       if len(herematch) > 0
line 78:         let heredoc = herematch[1] . '$'
line 79:       endif
line 80: 
line 81:       if line[0] == "\t"
line 82:         let spaces_minus_tabs -= 1
line 83:       else
line 84:         if line[0] == " "
line 85:           let spaces_minus_tabs += 1
line 86:         endif
line 87:         let indent = len(matchstr(line, '^ *'))
line 88:         while stack[-1] > indent
line 89:           call remove(stack, -1)
line 90:         endwhile
line 91: 
line 92:         let indent_inc = indent - stack[-1]
line 93: 
line 94:         if indent_inc == 0 && len(stack) > 1
line 95:           let indent_inc = indent - stack[-2]
line 96:         endif
line 97: 
line 98:         if has_key(indents, indent_inc)
line 99:           let indents[indent_inc] += 1
line 100:           let prev_indent = indent
line 101:         endif
line 102: 
line 103:         if stack[-1] != indent
line 104:           call add(stack, indent)
line 105:         endif
line 106:       endif
line 107:     endfor
line 14:     for line in a:lines
line 15:       let lineno += 1
line 16: 
line 17:       if line =~# '^\s*$'
line 18:         continue
line 19:       endif
line 20: 
line 21:       if line =~# '^\s*/\*'
line 22:         let ccomment = 1
line 23:       endif
line 24:       if ccomment
line 25:         if line =~# '\*/'
line 26:           let ccomment = 0
line 27:         endif
line 28:         continue
line 29:       endif
line 30: 
line 31:       if line =~# '^=\w'
line 32:         let podcomment = 1
line 33:       endif
line 34:       if podcomment
line 35:         if line =~# '^=\%(end\|cut\)\>'
line 36:           let podcomment = 0
line 37:         endif
line 38:         continue
line 39:       endif
line 40: 
line 41:       if triplequote
line 42:         if line =~# '^[^"]*"""[^"]*$'
line 43:           let triplequote = 0
line 44:         endif
line 45:         continue
line 46:       elseif line =~# '^[^"]*"""[^"]*$'
line 47:         let triplequote = 1
line 48:       endif
line 49: 
line 50:       if backtick
line 51:         if line =~# '^[^`]*`[^`]*$'
line 52:           let backtick = 0
line 53:         endif
line 54:         continue
line 55:       elseif &filetype ==# 'go' && line =~# '^[^`]*`[^`]*$'
line 56:         let backtick = 1
line 57:       endif
line 58: 
line 59:       if line =~# '^\s*<\!--'
line 60:         let xmlcomment = 1
line 61:       endif
line 62:       if xmlcomment
line 63:         if line =~# '-->'
line 64:           let xmlcomment = 0
line 65:         endif
line 66:         continue
line 67:       endif
line 68: 
line 69:       " This is correct order because both "<<EOF" and "EOF" matches end
line 70:       if heredoc != ''
line 71:         if line =~# heredoc
line 72:           let heredoc = ''
line 73:         endif
line 74:         continue
line 75:       endif
line 76:       let herematch = matchlist(line, '\C<<\W*\([A-Z]\+\)\s*$')
line 77:       if len(herematch) > 0
line 78:         let heredoc = herematch[1] . '$'
line 79:       endif
line 80: 
line 81:       if line[0] == "\t"
line 82:         let spaces_minus_tabs -= 1
line 83:       else
line 84:         if line[0] == " "
line 85:           let spaces_minus_tabs += 1
line 86:         endif
line 87:         let indent = len(matchstr(line, '^ *'))
line 88:         while stack[-1] > indent
line 89:           call remove(stack, -1)
line 90:         endwhile
line 91: 
line 92:         let indent_inc = indent - stack[-1]
line 93: 
line 94:         if indent_inc == 0 && len(stack) > 1
line 95:           let indent_inc = indent - stack[-2]
line 96:         endif
line 97: 
line 98:         if has_key(indents, indent_inc)
line 99:           let indents[indent_inc] += 1
line 100:           let prev_indent = indent
line 101:         endif
line 102: 
line 103:         if stack[-1] != indent
line 104:           call add(stack, indent)
line 105:         endif
line 106:       endif
line 107:     endfor
line 14:     for line in a:lines
line 15:       let lineno += 1
line 16: 
line 17:       if line =~# '^\s*$'
line 18:         continue
line 19:       endif
line 20: 
line 21:       if line =~# '^\s*/\*'
line 22:         let ccomment = 1
line 23:       endif
line 24:       if ccomment
line 25:         if line =~# '\*/'
line 26:           let ccomment = 0
line 27:         endif
line 28:         continue
line 29:       endif
line 30: 
line 31:       if line =~# '^=\w'
line 32:         let podcomment = 1
line 33:       endif
line 34:       if podcomment
line 35:         if line =~# '^=\%(end\|cut\)\>'
line 36:           let podcomment = 0
line 37:         endif
line 38:         continue
line 39:       endif
line 40: 
line 41:       if triplequote
line 42:         if line =~# '^[^"]*"""[^"]*$'
line 43:           let triplequote = 0
line 44:         endif
line 45:         continue
line 46:       elseif line =~# '^[^"]*"""[^"]*$'
line 47:         let triplequote = 1
line 48:       endif
line 49: 
line 50:       if backtick
line 51:         if line =~# '^[^`]*`[^`]*$'
line 52:           let backtick = 0
line 53:         endif
line 54:         continue
line 55:       elseif &filetype ==# 'go' && line =~# '^[^`]*`[^`]*$'
line 56:         let backtick = 1
line 57:       endif
line 58: 
line 59:       if line =~# '^\s*<\!--'
line 60:         let xmlcomment = 1
line 61:       endif
line 62:       if xmlcomment
line 63:         if line =~# '-->'
line 64:           let xmlcomment = 0
line 65:         endif
line 66:         continue
line 67:       endif
line 68: 
line 69:       " This is correct order because both "<<EOF" and "EOF" matches end
line 70:       if heredoc != ''
line 71:         if line =~# heredoc
line 72:           let heredoc = ''
line 73:         endif
line 74:         continue
line 75:       endif
line 76:       let herematch = matchlist(line, '\C<<\W*\([A-Z]\+\)\s*$')
line 77:       if len(herematch) > 0
line 78:         let heredoc = herematch[1] . '$'
line 79:       endif
line 80: 
line 81:       if line[0] == "\t"
line 82:         let spaces_minus_tabs -= 1
line 83:       else
line 84:         if line[0] == " "
line 85:           let spaces_minus_tabs += 1
line 86:         endif
line 87:         let indent = len(matchstr(line, '^ *'))
line 88:         while stack[-1] > indent
line 89:           call remove(stack, -1)
line 90:         endwhile
line 91: 
line 92:         let indent_inc = indent - stack[-1]
line 93: 
line 94:         if indent_inc == 0 && len(stack) > 1
line 95:           let indent_inc = indent - stack[-2]
line 96:         endif
line 97: 
line 98:         if has_key(indents, indent_inc)
line 99:           let indents[indent_inc] += 1
line 100:           let prev_indent = indent
line 101:         endif
line 102: 
line 103:         if stack[-1] != indent
line 104:           call add(stack, indent)
line 105:         endif
line 106:       endif
line 107:     endfor
line 14:     for line in a:lines
line 15:       let lineno += 1
line 16: 
line 17:       if line =~# '^\s*$'
line 18:         continue
line 19:       endif
line 20: 
line 21:       if line =~# '^\s*/\*'
line 22:         let ccomment = 1
line 23:       endif
line 24:       if ccomment
line 25:         if line =~# '\*/'
line 26:           let ccomment = 0
line 27:         endif
line 28:         continue
line 29:       endif
line 30: 
line 31:       if line =~# '^=\w'
line 32:         let podcomment = 1
line 33:       endif
line 34:       if podcomment
line 35:         if line =~# '^=\%(end\|cut\)\>'
line 36:           let podcomment = 0
line 37:         endif
line 38:         continue
line 39:       endif
line 40: 
line 41:       if triplequote
line 42:         if line =~# '^[^"]*"""[^"]*$'
line 43:           let triplequote = 0
line 44:         endif
line 45:         continue
line 46:       elseif line =~# '^[^"]*"""[^"]*$'
line 47:         let triplequote = 1
line 48:       endif
line 49: 
line 50:       if backtick
line 51:         if line =~# '^[^`]*`[^`]*$'
line 52:           let backtick = 0
line 53:         endif
line 54:         continue
line 55:       elseif &filetype ==# 'go' && line =~# '^[^`]*`[^`]*$'
line 56:         let backtick = 1
line 57:       endif
line 58: 
line 59:       if line =~# '^\s*<\!--'
line 60:         let xmlcomment = 1
line 61:       endif
line 62:       if xmlcomment
line 63:         if line =~# '-->'
line 64:           let xmlcomment = 0
line 65:         endif
line 66:         continue
line 67:       endif
line 68: 
line 69:       " This is correct order because both "<<EOF" and "EOF" matches end
line 70:       if heredoc != ''
line 71:         if line =~# heredoc
line 72:           let heredoc = ''
line 73:         endif
line 74:         continue
line 75:       endif
line 76:       let herematch = matchlist(line, '\C<<\W*\([A-Z]\+\)\s*$')
line 77:       if len(herematch) > 0
line 78:         let heredoc = herematch[1] . '$'
line 79:       endif
line 80: 
line 81:       if line[0] == "\t"
line 82:         let spaces_minus_tabs -= 1
line 83:       else
line 84:         if line[0] == " "
line 85:           let spaces_minus_tabs += 1
line 86:         endif
line 87:         let indent = len(matchstr(line, '^ *'))
line 88:         while stack[-1] > indent
line 89:           call remove(stack, -1)
line 90:         endwhile
line 91: 
line 92:         let indent_inc = indent - stack[-1]
line 93: 
line 94:         if indent_inc == 0 && len(stack) > 1
line 95:           let indent_inc = indent - stack[-2]
line 96:         endif
line 97: 
line 98:         if has_key(indents, indent_inc)
line 99:           let indents[indent_inc] += 1
line 100:           let prev_indent = indent
line 101:         endif
line 102: 
line 103:         if stack[-1] != indent
line 104:           call add(stack, indent)
line 105:         endif
line 106:       endif
line 107:     endfor
line 14:     for line in a:lines
line 15:       let lineno += 1
line 16: 
line 17:       if line =~# '^\s*$'
line 18:         continue
line 19:       endif
line 20: 
line 21:       if line =~# '^\s*/\*'
line 22:         let ccomment = 1
line 23:       endif
line 24:       if ccomment
line 25:         if line =~# '\*/'
line 26:           let ccomment = 0
line 27:         endif
line 28:         continue
line 29:       endif
line 30: 
line 31:       if line =~# '^=\w'
line 32:         let podcomment = 1
line 33:       endif
line 34:       if podcomment
line 35:         if line =~# '^=\%(end\|cut\)\>'
line 36:           let podcomment = 0
line 37:         endif
line 38:         continue
line 39:       endif
line 40: 
line 41:       if triplequote
line 42:         if line =~# '^[^"]*"""[^"]*$'
line 43:           let triplequote = 0
line 44:         endif
line 45:         continue
line 46:       elseif line =~# '^[^"]*"""[^"]*$'
line 47:         let triplequote = 1
line 48:       endif
line 49: 
line 50:       if backtick
line 51:         if line =~# '^[^`]*`[^`]*$'
line 52:           let backtick = 0
line 53:         endif
line 54:         continue
line 55:       elseif &filetype ==# 'go' && line =~# '^[^`]*`[^`]*$'
line 56:         let backtick = 1
line 57:       endif
line 58: 
line 59:       if line =~# '^\s*<\!--'
line 60:         let xmlcomment = 1
line 61:       endif
line 62:       if xmlcomment
line 63:         if line =~# '-->'
line 64:           let xmlcomment = 0
line 65:         endif
line 66:         continue
line 67:       endif
line 68: 
line 69:       " This is correct order because both "<<EOF" and "EOF" matches end
line 70:       if heredoc != ''
line 71:         if line =~# heredoc
line 72:           let heredoc = ''
line 73:         endif
line 74:         continue
line 75:       endif
line 76:       let herematch = matchlist(line, '\C<<\W*\([A-Z]\+\)\s*$')
line 77:       if len(herematch) > 0
line 78:         let heredoc = herematch[1] . '$'
line 79:       endif
line 80: 
line 81:       if line[0] == "\t"
line 82:         let spaces_minus_tabs -= 1
line 83:       else
line 84:         if line[0] == " "
line 85:           let spaces_minus_tabs += 1
line 86:         endif
line 87:         let indent = len(matchstr(line, '^ *'))
line 88:         while stack[-1] > indent
line 89:           call remove(stack, -1)
line 90:         endwhile
line 91: 
line 92:         let indent_inc = indent - stack[-1]
line 93: 
line 94:         if indent_inc == 0 && len(stack) > 1
line 95:           let indent_inc = indent - stack[-2]
line 96:         endif
line 97: 
line 98:         if has_key(indents, indent_inc)
line 99:           let indents[indent_inc] += 1
line 100:           let prev_indent = indent
line 101:         endif
line 102: 
line 103:         if stack[-1] != indent
line 104:           call add(stack, indent)
line 105:         endif
line 106:       endif
line 107:     endfor
line 14:     for line in a:lines
line 15:       let lineno += 1
line 16: 
line 17:       if line =~# '^\s*$'
line 18:         continue
line 19:       endif
line 20: 
line 21:       if line =~# '^\s*/\*'
line 22:         let ccomment = 1
line 23:       endif
line 24:       if ccomment
line 25:         if line =~# '\*/'
line 26:           let ccomment = 0
line 27:         endif
line 28:         continue
line 29:       endif
line 30: 
line 31:       if line =~# '^=\w'
line 32:         let podcomment = 1
line 33:       endif
line 34:       if podcomment
line 35:         if line =~# '^=\%(end\|cut\)\>'
line 36:           let podcomment = 0
line 37:         endif
line 38:         continue
line 39:       endif
line 40: 
line 41:       if triplequote
line 42:         if line =~# '^[^"]*"""[^"]*$'
line 43:           let triplequote = 0
line 44:         endif
line 45:         continue
line 46:       elseif line =~# '^[^"]*"""[^"]*$'
line 47:         let triplequote = 1
line 48:       endif
line 49: 
line 50:       if backtick
line 51:         if line =~# '^[^`]*`[^`]*$'
line 52:           let backtick = 0
line 53:         endif
line 54:         continue
line 55:       elseif &filetype ==# 'go' && line =~# '^[^`]*`[^`]*$'
line 56:         let backtick = 1
line 57:       endif
line 58: 
line 59:       if line =~# '^\s*<\!--'
line 60:         let xmlcomment = 1
line 61:       endif
line 62:       if xmlcomment
line 63:         if line =~# '-->'
line 64:           let xmlcomment = 0
line 65:         endif
line 66:         continue
line 67:       endif
line 68: 
line 69:       " This is correct order because both "<<EOF" and "EOF" matches end
line 70:       if heredoc != ''
line 71:         if line =~# heredoc
line 72:           let heredoc = ''
line 73:         endif
line 74:         continue
line 75:       endif
line 76:       let herematch = matchlist(line, '\C<<\W*\([A-Z]\+\)\s*$')
line 77:       if len(herematch) > 0
line 78:         let heredoc = herematch[1] . '$'
line 79:       endif
line 80: 
line 81:       if line[0] == "\t"
line 82:         let spaces_minus_tabs -= 1
line 83:       else
line 84:         if line[0] == " "
line 85:           let spaces_minus_tabs += 1
line 86:         endif
line 87:         let indent = len(matchstr(line, '^ *'))
line 88:         while stack[-1] > indent
line 89:           call remove(stack, -1)
line 90:         endwhile
line 91: 
line 92:         let indent_inc = indent - stack[-1]
line 93: 
line 94:         if indent_inc == 0 && len(stack) > 1
line 95:           let indent_inc = indent - stack[-2]
line 96:         endif
line 97: 
line 98:         if has_key(indents, indent_inc)
line 99:           let indents[indent_inc] += 1
line 100:           let prev_indent = indent
line 101:         endif
line 102: 
line 103:         if stack[-1] != indent
line 104:           call add(stack, indent)
line 105:         endif
line 106:       endif
line 107:     endfor
line 14:     for line in a:lines
line 15:       let lineno += 1
line 16: 
line 17:       if line =~# '^\s*$'
line 18:         continue
line 19:       endif
line 20: 
line 21:       if line =~# '^\s*/\*'
line 22:         let ccomment = 1
line 23:       endif
line 24:       if ccomment
line 25:         if line =~# '\*/'
line 26:           let ccomment = 0
line 27:         endif
line 28:         continue
line 29:       endif
line 30: 
line 31:       if line =~# '^=\w'
line 32:         let podcomment = 1
line 33:       endif
line 34:       if podcomment
line 35:         if line =~# '^=\%(end\|cut\)\>'
line 36:           let podcomment = 0
line 37:         endif
line 38:         continue
line 39:       endif
line 40: 
line 41:       if triplequote
line 42:         if line =~# '^[^"]*"""[^"]*$'
line 43:           let triplequote = 0
line 44:         endif
line 45:         continue
line 46:       elseif line =~# '^[^"]*"""[^"]*$'
line 47:         let triplequote = 1
line 48:       endif
line 49: 
line 50:       if backtick
line 51:         if line =~# '^[^`]*`[^`]*$'
line 52:           let backtick = 0
line 53:         endif
line 54:         continue
line 55:       elseif &filetype ==# 'go' && line =~# '^[^`]*`[^`]*$'
line 56:         let backtick = 1
line 57:       endif
line 58: 
line 59:       if line =~# '^\s*<\!--'
line 60:         let xmlcomment = 1
line 61:       endif
line 62:       if xmlcomment
line 63:         if line =~# '-->'
line 64:           let xmlcomment = 0
line 65:         endif
line 66:         continue
line 67:       endif
line 68: 
line 69:       " This is correct order because both "<<EOF" and "EOF" matches end
line 70:       if heredoc != ''
line 71:         if line =~# heredoc
line 72:           let heredoc = ''
line 73:         endif
line 74:         continue
line 75:       endif
line 76:       let herematch = matchlist(line, '\C<<\W*\([A-Z]\+\)\s*$')
line 77:       if len(herematch) > 0
line 78:         let heredoc = herematch[1] . '$'
line 79:       endif
line 80: 
line 81:       if line[0] == "\t"
line 82:         let spaces_minus_tabs -= 1
line 83:       else
line 84:         if line[0] == " "
line 85:           let spaces_minus_tabs += 1
line 86:         endif
line 87:         let indent = len(matchstr(line, '^ *'))
line 88:         while stack[-1] > indent
line 89:           call remove(stack, -1)
line 90:         endwhile
line 91: 
line 92:         let indent_inc = indent - stack[-1]
line 93: 
line 94:         if indent_inc == 0 && len(stack) > 1
line 95:           let indent_inc = indent - stack[-2]
line 96:         endif
line 97: 
line 98:         if has_key(indents, indent_inc)
line 99:           let indents[indent_inc] += 1
line 100:           let prev_indent = indent
line 101:         endif
line 102: 
line 103:         if stack[-1] != indent
line 104:           call add(stack, indent)
line 105:         endif
line 106:       endif
line 107:     endfor
line 14:     for line in a:lines
line 15:       let lineno += 1
line 16: 
line 17:       if line =~# '^\s*$'
line 18:         continue
line 19:       endif
line 20: 
line 21:       if line =~# '^\s*/\*'
line 22:         let ccomment = 1
line 23:       endif
line 24:       if ccomment
line 25:         if line =~# '\*/'
line 26:           let ccomment = 0
line 27:         endif
line 28:         continue
line 29:       endif
line 30: 
line 31:       if line =~# '^=\w'
line 32:         let podcomment = 1
line 33:       endif
line 34:       if podcomment
line 35:         if line =~# '^=\%(end\|cut\)\>'
line 36:           let podcomment = 0
line 37:         endif
line 38:         continue
line 39:       endif
line 40: 
line 41:       if triplequote
line 42:         if line =~# '^[^"]*"""[^"]*$'
line 43:           let triplequote = 0
line 44:         endif
line 45:         continue
line 46:       elseif line =~# '^[^"]*"""[^"]*$'
line 47:         let triplequote = 1
line 48:       endif
line 49: 
line 50:       if backtick
line 51:         if line =~# '^[^`]*`[^`]*$'
line 52:           let backtick = 0
line 53:         endif
line 54:         continue
line 55:       elseif &filetype ==# 'go' && line =~# '^[^`]*`[^`]*$'
line 56:         let backtick = 1
line 57:       endif
line 58: 
line 59:       if line =~# '^\s*<\!--'
line 60:         let xmlcomment = 1
line 61:       endif
line 62:       if xmlcomment
line 63:         if line =~# '-->'
line 64:           let xmlcomment = 0
line 65:         endif
line 66:         continue
line 67:       endif
line 68: 
line 69:       " This is correct order because both "<<EOF" and "EOF" matches end
line 70:       if heredoc != ''
line 71:         if line =~# heredoc
line 72:           let heredoc = ''
line 73:         endif
line 74:         continue
line 75:       endif
line 76:       let herematch = matchlist(line, '\C<<\W*\([A-Z]\+\)\s*$')
line 77:       if len(herematch) > 0
line 78:         let heredoc = herematch[1] . '$'
line 79:       endif
line 80: 
line 81:       if line[0] == "\t"
line 82:         let spaces_minus_tabs -= 1
line 83:       else
line 84:         if line[0] == " "
line 85:           let spaces_minus_tabs += 1
line 86:         endif
line 87:         let indent = len(matchstr(line, '^ *'))
line 88:         while stack[-1] > indent
line 89:           call remove(stack, -1)
line 90:         endwhile
line 91: 
line 92:         let indent_inc = indent - stack[-1]
line 93: 
line 94:         if indent_inc == 0 && len(stack) > 1
line 95:           let indent_inc = indent - stack[-2]
line 96:         endif
line 97: 
line 98:         if has_key(indents, indent_inc)
line 99:           let indents[indent_inc] += 1
line 100:           let prev_indent = indent
line 101:         endif
line 102: 
line 103:         if stack[-1] != indent
line 104:           call add(stack, indent)
line 105:         endif
line 106:       endif
line 107:     endfor
line 14:     for line in a:lines
line 15:       let lineno += 1
line 16: 
line 17:       if line =~# '^\s*$'
line 18:         continue
line 19:       endif
line 20: 
line 21:       if line =~# '^\s*/\*'
line 22:         let ccomment = 1
line 23:       endif
line 24:       if ccomment
line 25:         if line =~# '\*/'
line 26:           let ccomment = 0
line 27:         endif
line 28:         continue
line 29:       endif
line 30: 
line 31:       if line =~# '^=\w'
line 32:         let podcomment = 1
line 33:       endif
line 34:       if podcomment
line 35:         if line =~# '^=\%(end\|cut\)\>'
line 36:           let podcomment = 0
line 37:         endif
line 38:         continue
line 39:       endif
line 40: 
line 41:       if triplequote
line 42:         if line =~# '^[^"]*"""[^"]*$'
line 43:           let triplequote = 0
line 44:         endif
line 45:         continue
line 46:       elseif line =~# '^[^"]*"""[^"]*$'
line 47:         let triplequote = 1
line 48:       endif
line 49: 
line 50:       if backtick
line 51:         if line =~# '^[^`]*`[^`]*$'
line 52:           let backtick = 0
line 53:         endif
line 54:         continue
line 55:       elseif &filetype ==# 'go' && line =~# '^[^`]*`[^`]*$'
line 56:         let backtick = 1
line 57:       endif
line 58: 
line 59:       if line =~# '^\s*<\!--'
line 60:         let xmlcomment = 1
line 61:       endif
line 62:       if xmlcomment
line 63:         if line =~# '-->'
line 64:           let xmlcomment = 0
line 65:         endif
line 66:         continue
line 67:       endif
line 68: 
line 69:       " This is correct order because both "<<EOF" and "EOF" matches end
line 70:       if heredoc != ''
line 71:         if line =~# heredoc
line 72:           let heredoc = ''
line 73:         endif
line 74:         continue
line 75:       endif
line 76:       let herematch = matchlist(line, '\C<<\W*\([A-Z]\+\)\s*$')
line 77:       if len(herematch) > 0
line 78:         let heredoc = herematch[1] . '$'
line 79:       endif
line 80: 
line 81:       if line[0] == "\t"
line 82:         let spaces_minus_tabs -= 1
line 83:       else
line 84:         if line[0] == " "
line 85:           let spaces_minus_tabs += 1
line 86:         endif
line 87:         let indent = len(matchstr(line, '^ *'))
line 88:         while stack[-1] > indent
line 89:           call remove(stack, -1)
line 90:         endwhile
line 88:         while stack[-1] > indent
line 89:           call remove(stack, -1)
line 90:         endwhile
line 91: 
line 92:         let indent_inc = indent - stack[-1]
line 93: 
line 94:         if indent_inc == 0 && len(stack) > 1
line 95:           let indent_inc = indent - stack[-2]
line 96:         endif
line 97: 
line 98:         if has_key(indents, indent_inc)
line 99:           let indents[indent_inc] += 1
line 100:           let prev_indent = indent
line 101:         endif
line 102: 
line 103:         if stack[-1] != indent
line 104:           call add(stack, indent)
line 105:         endif
line 106:       endif
line 107:     endfor
line 14:     for line in a:lines
line 15:       let lineno += 1
line 16: 
line 17:       if line =~# '^\s*$'
line 18:         continue
line 19:       endif
line 20: 
line 21:       if line =~# '^\s*/\*'
line 22:         let ccomment = 1
line 23:       endif
line 24:       if ccomment
line 25:         if line =~# '\*/'
line 26:           let ccomment = 0
line 27:         endif
line 28:         continue
line 29:       endif
line 30: 
line 31:       if line =~# '^=\w'
line 32:         let podcomment = 1
line 33:       endif
line 34:       if podcomment
line 35:         if line =~# '^=\%(end\|cut\)\>'
line 36:           let podcomment = 0
line 37:         endif
line 38:         continue
line 39:       endif
line 40: 
line 41:       if triplequote
line 42:         if line =~# '^[^"]*"""[^"]*$'
line 43:           let triplequote = 0
line 44:         endif
line 45:         continue
line 46:       elseif line =~# '^[^"]*"""[^"]*$'
line 47:         let triplequote = 1
line 48:       endif
line 49: 
line 50:       if backtick
line 51:         if line =~# '^[^`]*`[^`]*$'
line 52:           let backtick = 0
line 53:         endif
line 54:         continue
line 55:       elseif &filetype ==# 'go' && line =~# '^[^`]*`[^`]*$'
line 56:         let backtick = 1
line 57:       endif
line 58: 
line 59:       if line =~# '^\s*<\!--'
line 60:         let xmlcomment = 1
line 61:       endif
line 62:       if xmlcomment
line 63:         if line =~# '-->'
line 64:           let xmlcomment = 0
line 65:         endif
line 66:         continue
line 67:       endif
line 68: 
line 69:       " This is correct order because both "<<EOF" and "EOF" matches end
line 70:       if heredoc != ''
line 71:         if line =~# heredoc
line 72:           let heredoc = ''
line 73:         endif
line 74:         continue
line 75:       endif
line 76:       let herematch = matchlist(line, '\C<<\W*\([A-Z]\+\)\s*$')
line 77:       if len(herematch) > 0
line 78:         let heredoc = herematch[1] . '$'
line 79:       endif
line 80: 
line 81:       if line[0] == "\t"
line 82:         let spaces_minus_tabs -= 1
line 83:       else
line 84:         if line[0] == " "
line 85:           let spaces_minus_tabs += 1
line 86:         endif
line 87:         let indent = len(matchstr(line, '^ *'))
line 88:         while stack[-1] > indent
line 89:           call remove(stack, -1)
line 90:         endwhile
line 91: 
line 92:         let indent_inc = indent - stack[-1]
line 93: 
line 94:         if indent_inc == 0 && len(stack) > 1
line 95:           let indent_inc = indent - stack[-2]
line 96:         endif
line 97: 
line 98:         if has_key(indents, indent_inc)
line 99:           let indents[indent_inc] += 1
line 100:           let prev_indent = indent
line 101:         endif
line 102: 
line 103:         if stack[-1] != indent
line 104:           call add(stack, indent)
line 105:         endif
line 106:       endif
line 107:     endfor
line 14:     for line in a:lines
line 15:       let lineno += 1
line 16: 
line 17:       if line =~# '^\s*$'
line 18:         continue
line 19:       endif
line 20: 
line 21:       if line =~# '^\s*/\*'
line 22:         let ccomment = 1
line 23:       endif
line 24:       if ccomment
line 25:         if line =~# '\*/'
line 26:           let ccomment = 0
line 27:         endif
line 28:         continue
line 29:       endif
line 30: 
line 31:       if line =~# '^=\w'
line 32:         let podcomment = 1
line 33:       endif
line 34:       if podcomment
line 35:         if line =~# '^=\%(end\|cut\)\>'
line 36:           let podcomment = 0
line 37:         endif
line 38:         continue
line 39:       endif
line 40: 
line 41:       if triplequote
line 42:         if line =~# '^[^"]*"""[^"]*$'
line 43:           let triplequote = 0
line 44:         endif
line 45:         continue
line 46:       elseif line =~# '^[^"]*"""[^"]*$'
line 47:         let triplequote = 1
line 48:       endif
line 49: 
line 50:       if backtick
line 51:         if line =~# '^[^`]*`[^`]*$'
line 52:           let backtick = 0
line 53:         endif
line 54:         continue
line 55:       elseif &filetype ==# 'go' && line =~# '^[^`]*`[^`]*$'
line 56:         let backtick = 1
line 57:       endif
line 58: 
line 59:       if line =~# '^\s*<\!--'
line 60:         let xmlcomment = 1
line 61:       endif
line 62:       if xmlcomment
line 63:         if line =~# '-->'
line 64:           let xmlcomment = 0
line 65:         endif
line 66:         continue
line 67:       endif
line 68: 
line 69:       " This is correct order because both "<<EOF" and "EOF" matches end
line 70:       if heredoc != ''
line 71:         if line =~# heredoc
line 72:           let heredoc = ''
line 73:         endif
line 74:         continue
line 75:       endif
line 76:       let herematch = matchlist(line, '\C<<\W*\([A-Z]\+\)\s*$')
line 77:       if len(herematch) > 0
line 78:         let heredoc = herematch[1] . '$'
line 79:       endif
line 80: 
line 81:       if line[0] == "\t"
line 82:         let spaces_minus_tabs -= 1
line 83:       else
line 84:         if line[0] == " "
line 85:           let spaces_minus_tabs += 1
line 86:         endif
line 87:         let indent = len(matchstr(line, '^ *'))
line 88:         while stack[-1] > indent
line 89:           call remove(stack, -1)
line 90:         endwhile
line 91: 
line 92:         let indent_inc = indent - stack[-1]
line 93: 
line 94:         if indent_inc == 0 && len(stack) > 1
line 95:           let indent_inc = indent - stack[-2]
line 96:         endif
line 97: 
line 98:         if has_key(indents, indent_inc)
line 99:           let indents[indent_inc] += 1
line 100:           let prev_indent = indent
line 101:         endif
line 102: 
line 103:         if stack[-1] != indent
line 104:           call add(stack, indent)
line 105:         endif
line 106:       endif
line 107:     endfor
line 14:     for line in a:lines
line 15:       let lineno += 1
line 16: 
line 17:       if line =~# '^\s*$'
line 18:         continue
line 19:       endif
line 20: 
line 21:       if line =~# '^\s*/\*'
line 22:         let ccomment = 1
line 23:       endif
line 24:       if ccomment
line 25:         if line =~# '\*/'
line 26:           let ccomment = 0
line 27:         endif
line 28:         continue
line 29:       endif
line 30: 
line 31:       if line =~# '^=\w'
line 32:         let podcomment = 1
line 33:       endif
line 34:       if podcomment
line 35:         if line =~# '^=\%(end\|cut\)\>'
line 36:           let podcomment = 0
line 37:         endif
line 38:         continue
line 39:       endif
line 40: 
line 41:       if triplequote
line 42:         if line =~# '^[^"]*"""[^"]*$'
line 43:           let triplequote = 0
line 44:         endif
line 45:         continue
line 46:       elseif line =~# '^[^"]*"""[^"]*$'
line 47:         let triplequote = 1
line 48:       endif
line 49: 
line 50:       if backtick
line 51:         if line =~# '^[^`]*`[^`]*$'
line 52:           let backtick = 0
line 53:         endif
line 54:         continue
line 55:       elseif &filetype ==# 'go' && line =~# '^[^`]*`[^`]*$'
line 56:         let backtick = 1
line 57:       endif
line 58: 
line 59:       if line =~# '^\s*<\!--'
line 60:         let xmlcomment = 1
line 61:       endif
line 62:       if xmlcomment
line 63:         if line =~# '-->'
line 64:           let xmlcomment = 0
line 65:         endif
line 66:         continue
line 67:       endif
line 68: 
line 69:       " This is correct order because both "<<EOF" and "EOF" matches end
line 70:       if heredoc != ''
line 71:         if line =~# heredoc
line 72:           let heredoc = ''
line 73:         endif
line 74:         continue
line 75:       endif
line 76:       let herematch = matchlist(line, '\C<<\W*\([A-Z]\+\)\s*$')
line 77:       if len(herematch) > 0
line 78:         let heredoc = herematch[1] . '$'
line 79:       endif
line 80: 
line 81:       if line[0] == "\t"
line 82:         let spaces_minus_tabs -= 1
line 83:       else
line 84:         if line[0] == " "
line 85:           let spaces_minus_tabs += 1
line 86:         endif
line 87:         let indent = len(matchstr(line, '^ *'))
line 88:         while stack[-1] > indent
line 89:           call remove(stack, -1)
line 90:         endwhile
line 91: 
line 92:         let indent_inc = indent - stack[-1]
line 93: 
line 94:         if indent_inc == 0 && len(stack) > 1
line 95:           let indent_inc = indent - stack[-2]
line 96:         endif
line 97: 
line 98:         if has_key(indents, indent_inc)
line 99:           let indents[indent_inc] += 1
line 100:           let prev_indent = indent
line 101:         endif
line 102: 
line 103:         if stack[-1] != indent
line 104:           call add(stack, indent)
line 105:         endif
line 106:       endif
line 107:     endfor
line 14:     for line in a:lines
line 15:       let lineno += 1
line 16: 
line 17:       if line =~# '^\s*$'
line 18:         continue
line 19:       endif
line 20: 
line 21:       if line =~# '^\s*/\*'
line 22:         let ccomment = 1
line 23:       endif
line 24:       if ccomment
line 25:         if line =~# '\*/'
line 26:           let ccomment = 0
line 27:         endif
line 28:         continue
line 29:       endif
line 30: 
line 31:       if line =~# '^=\w'
line 32:         let podcomment = 1
line 33:       endif
line 34:       if podcomment
line 35:         if line =~# '^=\%(end\|cut\)\>'
line 36:           let podcomment = 0
line 37:         endif
line 38:         continue
line 39:       endif
line 40: 
line 41:       if triplequote
line 42:         if line =~# '^[^"]*"""[^"]*$'
line 43:           let triplequote = 0
line 44:         endif
line 45:         continue
line 46:       elseif line =~# '^[^"]*"""[^"]*$'
line 47:         let triplequote = 1
line 48:       endif
line 49: 
line 50:       if backtick
line 51:         if line =~# '^[^`]*`[^`]*$'
line 52:           let backtick = 0
line 53:         endif
line 54:         continue
line 55:       elseif &filetype ==# 'go' && line =~# '^[^`]*`[^`]*$'
line 56:         let backtick = 1
line 57:       endif
line 58: 
line 59:       if line =~# '^\s*<\!--'
line 60:         let xmlcomment = 1
line 61:       endif
line 62:       if xmlcomment
line 63:         if line =~# '-->'
line 64:           let xmlcomment = 0
line 65:         endif
line 66:         continue
line 67:       endif
line 68: 
line 69:       " This is correct order because both "<<EOF" and "EOF" matches end
line 70:       if heredoc != ''
line 71:         if line =~# heredoc
line 72:           let heredoc = ''
line 73:         endif
line 74:         continue
line 75:       endif
line 76:       let herematch = matchlist(line, '\C<<\W*\([A-Z]\+\)\s*$')
line 77:       if len(herematch) > 0
line 78:         let heredoc = herematch[1] . '$'
line 79:       endif
line 80: 
line 81:       if line[0] == "\t"
line 82:         let spaces_minus_tabs -= 1
line 83:       else
line 84:         if line[0] == " "
line 85:           let spaces_minus_tabs += 1
line 86:         endif
line 87:         let indent = len(matchstr(line, '^ *'))
line 88:         while stack[-1] > indent
line 89:           call remove(stack, -1)
line 90:         endwhile
line 91: 
line 92:         let indent_inc = indent - stack[-1]
line 93: 
line 94:         if indent_inc == 0 && len(stack) > 1
line 95:           let indent_inc = indent - stack[-2]
line 96:         endif
line 97: 
line 98:         if has_key(indents, indent_inc)
line 99:           let indents[indent_inc] += 1
line 100:           let prev_indent = indent
line 101:         endif
line 102: 
line 103:         if stack[-1] != indent
line 104:           call add(stack, indent)
line 105:         endif
line 106:       endif
line 107:     endfor
line 14:     for line in a:lines
line 15:       let lineno += 1
line 16: 
line 17:       if line =~# '^\s*$'
line 18:         continue
line 19:       endif
line 20: 
line 21:       if line =~# '^\s*/\*'
line 22:         let ccomment = 1
line 23:       endif
line 24:       if ccomment
line 25:         if line =~# '\*/'
line 26:           let ccomment = 0
line 27:         endif
line 28:         continue
line 29:       endif
line 30: 
line 31:       if line =~# '^=\w'
line 32:         let podcomment = 1
line 33:       endif
line 34:       if podcomment
line 35:         if line =~# '^=\%(end\|cut\)\>'
line 36:           let podcomment = 0
line 37:         endif
line 38:         continue
line 39:       endif
line 40: 
line 41:       if triplequote
line 42:         if line =~# '^[^"]*"""[^"]*$'
line 43:           let triplequote = 0
line 44:         endif
line 45:         continue
line 46:       elseif line =~# '^[^"]*"""[^"]*$'
line 47:         let triplequote = 1
line 48:       endif
line 49: 
line 50:       if backtick
line 51:         if line =~# '^[^`]*`[^`]*$'
line 52:           let backtick = 0
line 53:         endif
line 54:         continue
line 55:       elseif &filetype ==# 'go' && line =~# '^[^`]*`[^`]*$'
line 56:         let backtick = 1
line 57:       endif
line 58: 
line 59:       if line =~# '^\s*<\!--'
line 60:         let xmlcomment = 1
line 61:       endif
line 62:       if xmlcomment
line 63:         if line =~# '-->'
line 64:           let xmlcomment = 0
line 65:         endif
line 66:         continue
line 67:       endif
line 68: 
line 69:       " This is correct order because both "<<EOF" and "EOF" matches end
line 70:       if heredoc != ''
line 71:         if line =~# heredoc
line 72:           let heredoc = ''
line 73:         endif
line 74:         continue
line 75:       endif
line 76:       let herematch = matchlist(line, '\C<<\W*\([A-Z]\+\)\s*$')
line 77:       if len(herematch) > 0
line 78:         let heredoc = herematch[1] . '$'
line 79:       endif
line 80: 
line 81:       if line[0] == "\t"
line 82:         let spaces_minus_tabs -= 1
line 83:       else
line 84:         if line[0] == " "
line 85:           let spaces_minus_tabs += 1
line 86:         endif
line 87:         let indent = len(matchstr(line, '^ *'))
line 88:         while stack[-1] > indent
line 89:           call remove(stack, -1)
line 90:         endwhile
line 91: 
line 92:         let indent_inc = indent - stack[-1]
line 93: 
line 94:         if indent_inc == 0 && len(stack) > 1
line 95:           let indent_inc = indent - stack[-2]
line 96:         endif
line 97: 
line 98:         if has_key(indents, indent_inc)
line 99:           let indents[indent_inc] += 1
line 100:           let prev_indent = indent
line 101:         endif
line 102: 
line 103:         if stack[-1] != indent
line 104:           call add(stack, indent)
line 105:         endif
line 106:       endif
line 107:     endfor
line 14:     for line in a:lines
line 15:       let lineno += 1
line 16: 
line 17:       if line =~# '^\s*$'
line 18:         continue
line 19:       endif
line 20: 
line 21:       if line =~# '^\s*/\*'
line 22:         let ccomment = 1
line 23:       endif
line 24:       if ccomment
line 25:         if line =~# '\*/'
line 26:           let ccomment = 0
line 27:         endif
line 28:         continue
line 29:       endif
line 30: 
line 31:       if line =~# '^=\w'
line 32:         let podcomment = 1
line 33:       endif
line 34:       if podcomment
line 35:         if line =~# '^=\%(end\|cut\)\>'
line 36:           let podcomment = 0
line 37:         endif
line 38:         continue
line 39:       endif
line 40: 
line 41:       if triplequote
line 42:         if line =~# '^[^"]*"""[^"]*$'
line 43:           let triplequote = 0
line 44:         endif
line 45:         continue
line 46:       elseif line =~# '^[^"]*"""[^"]*$'
line 47:         let triplequote = 1
line 48:       endif
line 49: 
line 50:       if backtick
line 51:         if line =~# '^[^`]*`[^`]*$'
line 52:           let backtick = 0
line 53:         endif
line 54:         continue
line 55:       elseif &filetype ==# 'go' && line =~# '^[^`]*`[^`]*$'
line 56:         let backtick = 1
line 57:       endif
line 58: 
line 59:       if line =~# '^\s*<\!--'
line 60:         let xmlcomment = 1
line 61:       endif
line 62:       if xmlcomment
line 63:         if line =~# '-->'
line 64:           let xmlcomment = 0
line 65:         endif
line 66:         continue
line 67:       endif
line 68: 
line 69:       " This is correct order because both "<<EOF" and "EOF" matches end
line 70:       if heredoc != ''
line 71:         if line =~# heredoc
line 72:           let heredoc = ''
line 73:         endif
line 74:         continue
line 75:       endif
line 76:       let herematch = matchlist(line, '\C<<\W*\([A-Z]\+\)\s*$')
line 77:       if len(herematch) > 0
line 78:         let heredoc = herematch[1] . '$'
line 79:       endif
line 80: 
line 81:       if line[0] == "\t"
line 82:         let spaces_minus_tabs -= 1
line 83:       else
line 84:         if line[0] == " "
line 85:           let spaces_minus_tabs += 1
line 86:         endif
line 87:         let indent = len(matchstr(line, '^ *'))
line 88:         while stack[-1] > indent
line 89:           call remove(stack, -1)
line 90:         endwhile
line 91: 
line 92:         let indent_inc = indent - stack[-1]
line 93: 
line 94:         if indent_inc == 0 && len(stack) > 1
line 95:           let indent_inc = indent - stack[-2]
line 96:         endif
line 97: 
line 98:         if has_key(indents, indent_inc)
line 99:           let indents[indent_inc] += 1
line 100:           let prev_indent = indent
line 101:         endif
line 102: 
line 103:         if stack[-1] != indent
line 104:           call add(stack, indent)
line 105:         endif
line 106:       endif
line 107:     endfor
line 14:     for line in a:lines
line 15:       let lineno += 1
line 16: 
line 17:       if line =~# '^\s*$'
line 18:         continue
line 19:       endif
line 20: 
line 21:       if line =~# '^\s*/\*'
line 22:         let ccomment = 1
line 23:       endif
line 24:       if ccomment
line 25:         if line =~# '\*/'
line 26:           let ccomment = 0
line 27:         endif
line 28:         continue
line 29:       endif
line 30: 
line 31:       if line =~# '^=\w'
line 32:         let podcomment = 1
line 33:       endif
line 34:       if podcomment
line 35:         if line =~# '^=\%(end\|cut\)\>'
line 36:           let podcomment = 0
line 37:         endif
line 38:         continue
line 39:       endif
line 40: 
line 41:       if triplequote
line 42:         if line =~# '^[^"]*"""[^"]*$'
line 43:           let triplequote = 0
line 44:         endif
line 45:         continue
line 46:       elseif line =~# '^[^"]*"""[^"]*$'
line 47:         let triplequote = 1
line 48:       endif
line 49: 
line 50:       if backtick
line 51:         if line =~# '^[^`]*`[^`]*$'
line 52:           let backtick = 0
line 53:         endif
line 54:         continue
line 55:       elseif &filetype ==# 'go' && line =~# '^[^`]*`[^`]*$'
line 56:         let backtick = 1
line 57:       endif
line 58: 
line 59:       if line =~# '^\s*<\!--'
line 60:         let xmlcomment = 1
line 61:       endif
line 62:       if xmlcomment
line 63:         if line =~# '-->'
line 64:           let xmlcomment = 0
line 65:         endif
line 66:         continue
line 67:       endif
line 68: 
line 69:       " This is correct order because both "<<EOF" and "EOF" matches end
line 70:       if heredoc != ''
line 71:         if line =~# heredoc
line 72:           let heredoc = ''
line 73:         endif
line 74:         continue
line 75:       endif
line 76:       let herematch = matchlist(line, '\C<<\W*\([A-Z]\+\)\s*$')
line 77:       if len(herematch) > 0
line 78:         let heredoc = herematch[1] . '$'
line 79:       endif
line 80: 
line 81:       if line[0] == "\t"
line 82:         let spaces_minus_tabs -= 1
line 83:       else
line 84:         if line[0] == " "
line 85:           let spaces_minus_tabs += 1
line 86:         endif
line 87:         let indent = len(matchstr(line, '^ *'))
line 88:         while stack[-1] > indent
line 89:           call remove(stack, -1)
line 90:         endwhile
line 91: 
line 92:         let indent_inc = indent - stack[-1]
line 93: 
line 94:         if indent_inc == 0 && len(stack) > 1
line 95:           let indent_inc = indent - stack[-2]
line 96:         endif
line 97: 
line 98:         if has_key(indents, indent_inc)
line 99:           let indents[indent_inc] += 1
line 100:           let prev_indent = indent
line 101:         endif
line 102: 
line 103:         if stack[-1] != indent
line 104:           call add(stack, indent)
line 105:         endif
line 106:       endif
line 107:     endfor
line 14:     for line in a:lines
line 15:       let lineno += 1
line 16: 
line 17:       if line =~# '^\s*$'
line 18:         continue
line 19:       endif
line 20: 
line 21:       if line =~# '^\s*/\*'
line 22:         let ccomment = 1
line 23:       endif
line 24:       if ccomment
line 25:         if line =~# '\*/'
line 26:           let ccomment = 0
line 27:         endif
line 28:         continue
line 29:       endif
line 30: 
line 31:       if line =~# '^=\w'
line 32:         let podcomment = 1
line 33:       endif
line 34:       if podcomment
line 35:         if line =~# '^=\%(end\|cut\)\>'
line 36:           let podcomment = 0
line 37:         endif
line 38:         continue
line 39:       endif
line 40: 
line 41:       if triplequote
line 42:         if line =~# '^[^"]*"""[^"]*$'
line 43:           let triplequote = 0
line 44:         endif
line 45:         continue
line 46:       elseif line =~# '^[^"]*"""[^"]*$'
line 47:         let triplequote = 1
line 48:       endif
line 49: 
line 50:       if backtick
line 51:         if line =~# '^[^`]*`[^`]*$'
line 52:           let backtick = 0
line 53:         endif
line 54:         continue
line 55:       elseif &filetype ==# 'go' && line =~# '^[^`]*`[^`]*$'
line 56:         let backtick = 1
line 57:       endif
line 58: 
line 59:       if line =~# '^\s*<\!--'
line 60:         let xmlcomment = 1
line 61:       endif
line 62:       if xmlcomment
line 63:         if line =~# '-->'
line 64:           let xmlcomment = 0
line 65:         endif
line 66:         continue
line 67:       endif
line 68: 
line 69:       " This is correct order because both "<<EOF" and "EOF" matches end
line 70:       if heredoc != ''
line 71:         if line =~# heredoc
line 72:           let heredoc = ''
line 73:         endif
line 74:         continue
line 75:       endif
line 76:       let herematch = matchlist(line, '\C<<\W*\([A-Z]\+\)\s*$')
line 77:       if len(herematch) > 0
line 78:         let heredoc = herematch[1] . '$'
line 79:       endif
line 80: 
line 81:       if line[0] == "\t"
line 82:         let spaces_minus_tabs -= 1
line 83:       else
line 84:         if line[0] == " "
line 85:           let spaces_minus_tabs += 1
line 86:         endif
line 87:         let indent = len(matchstr(line, '^ *'))
line 88:         while stack[-1] > indent
line 89:           call remove(stack, -1)
line 90:         endwhile
line 91: 
line 92:         let indent_inc = indent - stack[-1]
line 93: 
line 94:         if indent_inc == 0 && len(stack) > 1
line 95:           let indent_inc = indent - stack[-2]
line 96:         endif
line 97: 
line 98:         if has_key(indents, indent_inc)
line 99:           let indents[indent_inc] += 1
line 100:           let prev_indent = indent
line 101:         endif
line 102: 
line 103:         if stack[-1] != indent
line 104:           call add(stack, indent)
line 105:         endif
line 106:       endif
line 107:     endfor
line 14:     for line in a:lines
line 15:       let lineno += 1
line 16: 
line 17:       if line =~# '^\s*$'
line 18:         continue
line 19:       endif
line 20: 
line 21:       if line =~# '^\s*/\*'
line 22:         let ccomment = 1
line 23:       endif
line 24:       if ccomment
line 25:         if line =~# '\*/'
line 26:           let ccomment = 0
line 27:         endif
line 28:         continue
line 29:       endif
line 30: 
line 31:       if line =~# '^=\w'
line 32:         let podcomment = 1
line 33:       endif
line 34:       if podcomment
line 35:         if line =~# '^=\%(end\|cut\)\>'
line 36:           let podcomment = 0
line 37:         endif
line 38:         continue
line 39:       endif
line 40: 
line 41:       if triplequote
line 42:         if line =~# '^[^"]*"""[^"]*$'
line 43:           let triplequote = 0
line 44:         endif
line 45:         continue
line 46:       elseif line =~# '^[^"]*"""[^"]*$'
line 47:         let triplequote = 1
line 48:       endif
line 49: 
line 50:       if backtick
line 51:         if line =~# '^[^`]*`[^`]*$'
line 52:           let backtick = 0
line 53:         endif
line 54:         continue
line 55:       elseif &filetype ==# 'go' && line =~# '^[^`]*`[^`]*$'
line 56:         let backtick = 1
line 57:       endif
line 58: 
line 59:       if line =~# '^\s*<\!--'
line 60:         let xmlcomment = 1
line 61:       endif
line 62:       if xmlcomment
line 63:         if line =~# '-->'
line 64:           let xmlcomment = 0
line 65:         endif
line 66:         continue
line 67:       endif
line 68: 
line 69:       " This is correct order because both "<<EOF" and "EOF" matches end
line 70:       if heredoc != ''
line 71:         if line =~# heredoc
line 72:           let heredoc = ''
line 73:         endif
line 74:         continue
line 75:       endif
line 76:       let herematch = matchlist(line, '\C<<\W*\([A-Z]\+\)\s*$')
line 77:       if len(herematch) > 0
line 78:         let heredoc = herematch[1] . '$'
line 79:       endif
line 80: 
line 81:       if line[0] == "\t"
line 82:         let spaces_minus_tabs -= 1
line 83:       else
line 84:         if line[0] == " "
line 85:           let spaces_minus_tabs += 1
line 86:         endif
line 87:         let indent = len(matchstr(line, '^ *'))
line 88:         while stack[-1] > indent
line 89:           call remove(stack, -1)
line 90:         endwhile
line 91: 
line 92:         let indent_inc = indent - stack[-1]
line 93: 
line 94:         if indent_inc == 0 && len(stack) > 1
line 95:           let indent_inc = indent - stack[-2]
line 96:         endif
line 97: 
line 98:         if has_key(indents, indent_inc)
line 99:           let indents[indent_inc] += 1
line 100:           let prev_indent = indent
line 101:         endif
line 102: 
line 103:         if stack[-1] != indent
line 104:           call add(stack, indent)
line 105:         endif
line 106:       endif
line 107:     endfor
line 14:     for line in a:lines
line 15:       let lineno += 1
line 16: 
line 17:       if line =~# '^\s*$'
line 18:         continue
line 19:       endif
line 20: 
line 21:       if line =~# '^\s*/\*'
line 22:         let ccomment = 1
line 23:       endif
line 24:       if ccomment
line 25:         if line =~# '\*/'
line 26:           let ccomment = 0
line 27:         endif
line 28:         continue
line 29:       endif
line 30: 
line 31:       if line =~# '^=\w'
line 32:         let podcomment = 1
line 33:       endif
line 34:       if podcomment
line 35:         if line =~# '^=\%(end\|cut\)\>'
line 36:           let podcomment = 0
line 37:         endif
line 38:         continue
line 39:       endif
line 40: 
line 41:       if triplequote
line 42:         if line =~# '^[^"]*"""[^"]*$'
line 43:           let triplequote = 0
line 44:         endif
line 45:         continue
line 46:       elseif line =~# '^[^"]*"""[^"]*$'
line 47:         let triplequote = 1
line 48:       endif
line 49: 
line 50:       if backtick
line 51:         if line =~# '^[^`]*`[^`]*$'
line 52:           let backtick = 0
line 53:         endif
line 54:         continue
line 55:       elseif &filetype ==# 'go' && line =~# '^[^`]*`[^`]*$'
line 56:         let backtick = 1
line 57:       endif
line 58: 
line 59:       if line =~# '^\s*<\!--'
line 60:         let xmlcomment = 1
line 61:       endif
line 62:       if xmlcomment
line 63:         if line =~# '-->'
line 64:           let xmlcomment = 0
line 65:         endif
line 66:         continue
line 67:       endif
line 68: 
line 69:       " This is correct order because both "<<EOF" and "EOF" matches end
line 70:       if heredoc != ''
line 71:         if line =~# heredoc
line 72:           let heredoc = ''
line 73:         endif
line 74:         continue
line 75:       endif
line 76:       let herematch = matchlist(line, '\C<<\W*\([A-Z]\+\)\s*$')
line 77:       if len(herematch) > 0
line 78:         let heredoc = herematch[1] . '$'
line 79:       endif
line 80: 
line 81:       if line[0] == "\t"
line 82:         let spaces_minus_tabs -= 1
line 83:       else
line 84:         if line[0] == " "
line 85:           let spaces_minus_tabs += 1
line 86:         endif
line 87:         let indent = len(matchstr(line, '^ *'))
line 88:         while stack[-1] > indent
line 89:           call remove(stack, -1)
line 90:         endwhile
line 88:         while stack[-1] > indent
line 89:           call remove(stack, -1)
line 90:         endwhile
line 91: 
line 92:         let indent_inc = indent - stack[-1]
line 93: 
line 94:         if indent_inc == 0 && len(stack) > 1
line 95:           let indent_inc = indent - stack[-2]
line 96:         endif
line 97: 
line 98:         if has_key(indents, indent_inc)
line 99:           let indents[indent_inc] += 1
line 100:           let prev_indent = indent
line 101:         endif
line 102: 
line 103:         if stack[-1] != indent
line 104:           call add(stack, indent)
line 105:         endif
line 106:       endif
line 107:     endfor
line 14:     for line in a:lines
line 15:       let lineno += 1
line 16: 
line 17:       if line =~# '^\s*$'
line 18:         continue
line 19:       endif
line 20: 
line 21:       if line =~# '^\s*/\*'
line 22:         let ccomment = 1
line 23:       endif
line 24:       if ccomment
line 25:         if line =~# '\*/'
line 26:           let ccomment = 0
line 27:         endif
line 28:         continue
line 29:       endif
line 30: 
line 31:       if line =~# '^=\w'
line 32:         let podcomment = 1
line 33:       endif
line 34:       if podcomment
line 35:         if line =~# '^=\%(end\|cut\)\>'
line 36:           let podcomment = 0
line 37:         endif
line 38:         continue
line 39:       endif
line 40: 
line 41:       if triplequote
line 42:         if line =~# '^[^"]*"""[^"]*$'
line 43:           let triplequote = 0
line 44:         endif
line 45:         continue
line 46:       elseif line =~# '^[^"]*"""[^"]*$'
line 47:         let triplequote = 1
line 48:       endif
line 49: 
line 50:       if backtick
line 51:         if line =~# '^[^`]*`[^`]*$'
line 52:           let backtick = 0
line 53:         endif
line 54:         continue
line 55:       elseif &filetype ==# 'go' && line =~# '^[^`]*`[^`]*$'
line 56:         let backtick = 1
line 57:       endif
line 58: 
line 59:       if line =~# '^\s*<\!--'
line 60:         let xmlcomment = 1
line 61:       endif
line 62:       if xmlcomment
line 63:         if line =~# '-->'
line 64:           let xmlcomment = 0
line 65:         endif
line 66:         continue
line 67:       endif
line 68: 
line 69:       " This is correct order because both "<<EOF" and "EOF" matches end
line 70:       if heredoc != ''
line 71:         if line =~# heredoc
line 72:           let heredoc = ''
line 73:         endif
line 74:         continue
line 75:       endif
line 76:       let herematch = matchlist(line, '\C<<\W*\([A-Z]\+\)\s*$')
line 77:       if len(herematch) > 0
line 78:         let heredoc = herematch[1] . '$'
line 79:       endif
line 80: 
line 81:       if line[0] == "\t"
line 82:         let spaces_minus_tabs -= 1
line 83:       else
line 84:         if line[0] == " "
line 85:           let spaces_minus_tabs += 1
line 86:         endif
line 87:         let indent = len(matchstr(line, '^ *'))
line 88:         while stack[-1] > indent
line 89:           call remove(stack, -1)
line 90:         endwhile
line 91: 
line 92:         let indent_inc = indent - stack[-1]
line 93: 
line 94:         if indent_inc == 0 && len(stack) > 1
line 95:           let indent_inc = indent - stack[-2]
line 96:         endif
line 97: 
line 98:         if has_key(indents, indent_inc)
line 99:           let indents[indent_inc] += 1
line 100:           let prev_indent = indent
line 101:         endif
line 102: 
line 103:         if stack[-1] != indent
line 104:           call add(stack, indent)
line 105:         endif
line 106:       endif
line 107:     endfor
line 14:     for line in a:lines
line 15:       let lineno += 1
line 16: 
line 17:       if line =~# '^\s*$'
line 18:         continue
line 19:       endif
line 20: 
line 21:       if line =~# '^\s*/\*'
line 22:         let ccomment = 1
line 23:       endif
line 24:       if ccomment
line 25:         if line =~# '\*/'
line 26:           let ccomment = 0
line 27:         endif
line 28:         continue
line 29:       endif
line 30: 
line 31:       if line =~# '^=\w'
line 32:         let podcomment = 1
line 33:       endif
line 34:       if podcomment
line 35:         if line =~# '^=\%(end\|cut\)\>'
line 36:           let podcomment = 0
line 37:         endif
line 38:         continue
line 39:       endif
line 40: 
line 41:       if triplequote
line 42:         if line =~# '^[^"]*"""[^"]*$'
line 43:           let triplequote = 0
line 44:         endif
line 45:         continue
line 46:       elseif line =~# '^[^"]*"""[^"]*$'
line 47:         let triplequote = 1
line 48:       endif
line 49: 
line 50:       if backtick
line 51:         if line =~# '^[^`]*`[^`]*$'
line 52:           let backtick = 0
line 53:         endif
line 54:         continue
line 55:       elseif &filetype ==# 'go' && line =~# '^[^`]*`[^`]*$'
line 56:         let backtick = 1
line 57:       endif
line 58: 
line 59:       if line =~# '^\s*<\!--'
line 60:         let xmlcomment = 1
line 61:       endif
line 62:       if xmlcomment
line 63:         if line =~# '-->'
line 64:           let xmlcomment = 0
line 65:         endif
line 66:         continue
line 67:       endif
line 68: 
line 69:       " This is correct order because both "<<EOF" and "EOF" matches end
line 70:       if heredoc != ''
line 71:         if line =~# heredoc
line 72:           let heredoc = ''
line 73:         endif
line 74:         continue
line 75:       endif
line 76:       let herematch = matchlist(line, '\C<<\W*\([A-Z]\+\)\s*$')
line 77:       if len(herematch) > 0
line 78:         let heredoc = herematch[1] . '$'
line 79:       endif
line 80: 
line 81:       if line[0] == "\t"
line 82:         let spaces_minus_tabs -= 1
line 83:       else
line 84:         if line[0] == " "
line 85:           let spaces_minus_tabs += 1
line 86:         endif
line 87:         let indent = len(matchstr(line, '^ *'))
line 88:         while stack[-1] > indent
line 89:           call remove(stack, -1)
line 90:         endwhile
line 91: 
line 92:         let indent_inc = indent - stack[-1]
line 93: 
line 94:         if indent_inc == 0 && len(stack) > 1
line 95:           let indent_inc = indent - stack[-2]
line 96:         endif
line 97: 
line 98:         if has_key(indents, indent_inc)
line 99:           let indents[indent_inc] += 1
line 100:           let prev_indent = indent
line 101:         endif
line 102: 
line 103:         if stack[-1] != indent
line 104:           call add(stack, indent)
line 105:         endif
line 106:       endif
line 107:     endfor
line 14:     for line in a:lines
line 15:       let lineno += 1
line 16: 
line 17:       if line =~# '^\s*$'
line 18:         continue
line 19:       endif
line 20: 
line 21:       if line =~# '^\s*/\*'
line 22:         let ccomment = 1
line 23:       endif
line 24:       if ccomment
line 25:         if line =~# '\*/'
line 26:           let ccomment = 0
line 27:         endif
line 28:         continue
line 29:       endif
line 30: 
line 31:       if line =~# '^=\w'
line 32:         let podcomment = 1
line 33:       endif
line 34:       if podcomment
line 35:         if line =~# '^=\%(end\|cut\)\>'
line 36:           let podcomment = 0
line 37:         endif
line 38:         continue
line 39:       endif
line 40: 
line 41:       if triplequote
line 42:         if line =~# '^[^"]*"""[^"]*$'
line 43:           let triplequote = 0
line 44:         endif
line 45:         continue
line 46:       elseif line =~# '^[^"]*"""[^"]*$'
line 47:         let triplequote = 1
line 48:       endif
line 49: 
line 50:       if backtick
line 51:         if line =~# '^[^`]*`[^`]*$'
line 52:           let backtick = 0
line 53:         endif
line 54:         continue
line 55:       elseif &filetype ==# 'go' && line =~# '^[^`]*`[^`]*$'
line 56:         let backtick = 1
line 57:       endif
line 58: 
line 59:       if line =~# '^\s*<\!--'
line 60:         let xmlcomment = 1
line 61:       endif
line 62:       if xmlcomment
line 63:         if line =~# '-->'
line 64:           let xmlcomment = 0
line 65:         endif
line 66:         continue
line 67:       endif
line 68: 
line 69:       " This is correct order because both "<<EOF" and "EOF" matches end
line 70:       if heredoc != ''
line 71:         if line =~# heredoc
line 72:           let heredoc = ''
line 73:         endif
line 74:         continue
line 75:       endif
line 76:       let herematch = matchlist(line, '\C<<\W*\([A-Z]\+\)\s*$')
line 77:       if len(herematch) > 0
line 78:         let heredoc = herematch[1] . '$'
line 79:       endif
line 80: 
line 81:       if line[0] == "\t"
line 82:         let spaces_minus_tabs -= 1
line 83:       else
line 84:         if line[0] == " "
line 85:           let spaces_minus_tabs += 1
line 86:         endif
line 87:         let indent = len(matchstr(line, '^ *'))
line 88:         while stack[-1] > indent
line 89:           call remove(stack, -1)
line 90:         endwhile
line 91: 
line 92:         let indent_inc = indent - stack[-1]
line 93: 
line 94:         if indent_inc == 0 && len(stack) > 1
line 95:           let indent_inc = indent - stack[-2]
line 96:         endif
line 97: 
line 98:         if has_key(indents, indent_inc)
line 99:           let indents[indent_inc] += 1
line 100:           let prev_indent = indent
line 101:         endif
line 102: 
line 103:         if stack[-1] != indent
line 104:           call add(stack, indent)
line 105:         endif
line 106:       endif
line 107:     endfor
line 14:     for line in a:lines
line 15:       let lineno += 1
line 16: 
line 17:       if line =~# '^\s*$'
line 18:         continue
line 19:       endif
line 20: 
line 21:       if line =~# '^\s*/\*'
line 22:         let ccomment = 1
line 23:       endif
line 24:       if ccomment
line 25:         if line =~# '\*/'
line 26:           let ccomment = 0
line 27:         endif
line 28:         continue
line 29:       endif
line 30: 
line 31:       if line =~# '^=\w'
line 32:         let podcomment = 1
line 33:       endif
line 34:       if podcomment
line 35:         if line =~# '^=\%(end\|cut\)\>'
line 36:           let podcomment = 0
line 37:         endif
line 38:         continue
line 39:       endif
line 40: 
line 41:       if triplequote
line 42:         if line =~# '^[^"]*"""[^"]*$'
line 43:           let triplequote = 0
line 44:         endif
line 45:         continue
line 46:       elseif line =~# '^[^"]*"""[^"]*$'
line 47:         let triplequote = 1
line 48:       endif
line 49: 
line 50:       if backtick
line 51:         if line =~# '^[^`]*`[^`]*$'
line 52:           let backtick = 0
line 53:         endif
line 54:         continue
line 55:       elseif &filetype ==# 'go' && line =~# '^[^`]*`[^`]*$'
line 56:         let backtick = 1
line 57:       endif
line 58: 
line 59:       if line =~# '^\s*<\!--'
line 60:         let xmlcomment = 1
line 61:       endif
line 62:       if xmlcomment
line 63:         if line =~# '-->'
line 64:           let xmlcomment = 0
line 65:         endif
line 66:         continue
line 67:       endif
line 68: 
line 69:       " This is correct order because both "<<EOF" and "EOF" matches end
line 70:       if heredoc != ''
line 71:         if line =~# heredoc
line 72:           let heredoc = ''
line 73:         endif
line 74:         continue
line 75:       endif
line 76:       let herematch = matchlist(line, '\C<<\W*\([A-Z]\+\)\s*$')
line 77:       if len(herematch) > 0
line 78:         let heredoc = herematch[1] . '$'
line 79:       endif
line 80: 
line 81:       if line[0] == "\t"
line 82:         let spaces_minus_tabs -= 1
line 83:       else
line 84:         if line[0] == " "
line 85:           let spaces_minus_tabs += 1
line 86:         endif
line 87:         let indent = len(matchstr(line, '^ *'))
line 88:         while stack[-1] > indent
line 89:           call remove(stack, -1)
line 90:         endwhile
line 88:         while stack[-1] > indent
line 89:           call remove(stack, -1)
line 90:         endwhile
line 91: 
line 92:         let indent_inc = indent - stack[-1]
line 93: 
line 94:         if indent_inc == 0 && len(stack) > 1
line 95:           let indent_inc = indent - stack[-2]
line 96:         endif
line 97: 
line 98:         if has_key(indents, indent_inc)
line 99:           let indents[indent_inc] += 1
line 100:           let prev_indent = indent
line 101:         endif
line 102: 
line 103:         if stack[-1] != indent
line 104:           call add(stack, indent)
line 105:         endif
line 106:       endif
line 107:     endfor
line 14:     for line in a:lines
line 15:       let lineno += 1
line 16: 
line 17:       if line =~# '^\s*$'
line 18:         continue
line 14:     for line in a:lines
line 15:       let lineno += 1
line 16: 
line 17:       if line =~# '^\s*$'
line 18:         continue
line 19:       endif
line 20: 
line 21:       if line =~# '^\s*/\*'
line 22:         let ccomment = 1
line 23:       endif
line 24:       if ccomment
line 25:         if line =~# '\*/'
line 26:           let ccomment = 0
line 27:         endif
line 28:         continue
line 29:       endif
line 30: 
line 31:       if line =~# '^=\w'
line 32:         let podcomment = 1
line 33:       endif
line 34:       if podcomment
line 35:         if line =~# '^=\%(end\|cut\)\>'
line 36:           let podcomment = 0
line 37:         endif
line 38:         continue
line 39:       endif
line 40: 
line 41:       if triplequote
line 42:         if line =~# '^[^"]*"""[^"]*$'
line 43:           let triplequote = 0
line 44:         endif
line 45:         continue
line 46:       elseif line =~# '^[^"]*"""[^"]*$'
line 47:         let triplequote = 1
line 48:       endif
line 49: 
line 50:       if backtick
line 51:         if line =~# '^[^`]*`[^`]*$'
line 52:           let backtick = 0
line 53:         endif
line 54:         continue
line 55:       elseif &filetype ==# 'go' && line =~# '^[^`]*`[^`]*$'
line 56:         let backtick = 1
line 57:       endif
line 58: 
line 59:       if line =~# '^\s*<\!--'
line 60:         let xmlcomment = 1
line 61:       endif
line 62:       if xmlcomment
line 63:         if line =~# '-->'
line 64:           let xmlcomment = 0
line 65:         endif
line 66:         continue
line 67:       endif
line 68: 
line 69:       " This is correct order because both "<<EOF" and "EOF" matches end
line 70:       if heredoc != ''
line 71:         if line =~# heredoc
line 72:           let heredoc = ''
line 73:         endif
line 74:         continue
line 75:       endif
line 76:       let herematch = matchlist(line, '\C<<\W*\([A-Z]\+\)\s*$')
line 77:       if len(herematch) > 0
line 78:         let heredoc = herematch[1] . '$'
line 79:       endif
line 80: 
line 81:       if line[0] == "\t"
line 82:         let spaces_minus_tabs -= 1
line 83:       else
line 84:         if line[0] == " "
line 85:           let spaces_minus_tabs += 1
line 86:         endif
line 87:         let indent = len(matchstr(line, '^ *'))
line 88:         while stack[-1] > indent
line 89:           call remove(stack, -1)
line 90:         endwhile
line 91: 
line 92:         let indent_inc = indent - stack[-1]
line 93: 
line 94:         if indent_inc == 0 && len(stack) > 1
line 95:           let indent_inc = indent - stack[-2]
line 96:         endif
line 97: 
line 98:         if has_key(indents, indent_inc)
line 99:           let indents[indent_inc] += 1
line 100:           let prev_indent = indent
line 101:         endif
line 102: 
line 103:         if stack[-1] != indent
line 104:           call add(stack, indent)
line 105:         endif
line 106:       endif
line 107:     endfor
line 14:     for line in a:lines
line 15:       let lineno += 1
line 16: 
line 17:       if line =~# '^\s*$'
line 18:         continue
line 19:       endif
line 20: 
line 21:       if line =~# '^\s*/\*'
line 22:         let ccomment = 1
line 23:       endif
line 24:       if ccomment
line 25:         if line =~# '\*/'
line 26:           let ccomment = 0
line 27:         endif
line 28:         continue
line 29:       endif
line 30: 
line 31:       if line =~# '^=\w'
line 32:         let podcomment = 1
line 33:       endif
line 34:       if podcomment
line 35:         if line =~# '^=\%(end\|cut\)\>'
line 36:           let podcomment = 0
line 37:         endif
line 38:         continue
line 39:       endif
line 40: 
line 41:       if triplequote
line 42:         if line =~# '^[^"]*"""[^"]*$'
line 43:           let triplequote = 0
line 44:         endif
line 45:         continue
line 46:       elseif line =~# '^[^"]*"""[^"]*$'
line 47:         let triplequote = 1
line 48:       endif
line 49: 
line 50:       if backtick
line 51:         if line =~# '^[^`]*`[^`]*$'
line 52:           let backtick = 0
line 53:         endif
line 54:         continue
line 55:       elseif &filetype ==# 'go' && line =~# '^[^`]*`[^`]*$'
line 56:         let backtick = 1
line 57:       endif
line 58: 
line 59:       if line =~# '^\s*<\!--'
line 60:         let xmlcomment = 1
line 61:       endif
line 62:       if xmlcomment
line 63:         if line =~# '-->'
line 64:           let xmlcomment = 0
line 65:         endif
line 66:         continue
line 67:       endif
line 68: 
line 69:       " This is correct order because both "<<EOF" and "EOF" matches end
line 70:       if heredoc != ''
line 71:         if line =~# heredoc
line 72:           let heredoc = ''
line 73:         endif
line 74:         continue
line 75:       endif
line 76:       let herematch = matchlist(line, '\C<<\W*\([A-Z]\+\)\s*$')
line 77:       if len(herematch) > 0
line 78:         let heredoc = herematch[1] . '$'
line 79:       endif
line 80: 
line 81:       if line[0] == "\t"
line 82:         let spaces_minus_tabs -= 1
line 83:       else
line 84:         if line[0] == " "
line 85:           let spaces_minus_tabs += 1
line 86:         endif
line 87:         let indent = len(matchstr(line, '^ *'))
line 88:         while stack[-1] > indent
line 89:           call remove(stack, -1)
line 90:         endwhile
line 91: 
line 92:         let indent_inc = indent - stack[-1]
line 93: 
line 94:         if indent_inc == 0 && len(stack) > 1
line 95:           let indent_inc = indent - stack[-2]
line 96:         endif
line 97: 
line 98:         if has_key(indents, indent_inc)
line 99:           let indents[indent_inc] += 1
line 100:           let prev_indent = indent
line 101:         endif
line 102: 
line 103:         if stack[-1] != indent
line 104:           call add(stack, indent)
line 105:         endif
line 106:       endif
line 107:     endfor
line 14:     for line in a:lines
line 15:       let lineno += 1
line 16: 
line 17:       if line =~# '^\s*$'
line 18:         continue
line 19:       endif
line 20: 
line 21:       if line =~# '^\s*/\*'
line 22:         let ccomment = 1
line 23:       endif
line 24:       if ccomment
line 25:         if line =~# '\*/'
line 26:           let ccomment = 0
line 27:         endif
line 28:         continue
line 29:       endif
line 30: 
line 31:       if line =~# '^=\w'
line 32:         let podcomment = 1
line 33:       endif
line 34:       if podcomment
line 35:         if line =~# '^=\%(end\|cut\)\>'
line 36:           let podcomment = 0
line 37:         endif
line 38:         continue
line 39:       endif
line 40: 
line 41:       if triplequote
line 42:         if line =~# '^[^"]*"""[^"]*$'
line 43:           let triplequote = 0
line 44:         endif
line 45:         continue
line 46:       elseif line =~# '^[^"]*"""[^"]*$'
line 47:         let triplequote = 1
line 48:       endif
line 49: 
line 50:       if backtick
line 51:         if line =~# '^[^`]*`[^`]*$'
line 52:           let backtick = 0
line 53:         endif
line 54:         continue
line 55:       elseif &filetype ==# 'go' && line =~# '^[^`]*`[^`]*$'
line 56:         let backtick = 1
line 57:       endif
line 58: 
line 59:       if line =~# '^\s*<\!--'
line 60:         let xmlcomment = 1
line 61:       endif
line 62:       if xmlcomment
line 63:         if line =~# '-->'
line 64:           let xmlcomment = 0
line 65:         endif
line 66:         continue
line 67:       endif
line 68: 
line 69:       " This is correct order because both "<<EOF" and "EOF" matches end
line 70:       if heredoc != ''
line 71:         if line =~# heredoc
line 72:           let heredoc = ''
line 73:         endif
line 74:         continue
line 75:       endif
line 76:       let herematch = matchlist(line, '\C<<\W*\([A-Z]\+\)\s*$')
line 77:       if len(herematch) > 0
line 78:         let heredoc = herematch[1] . '$'
line 79:       endif
line 80: 
line 81:       if line[0] == "\t"
line 82:         let spaces_minus_tabs -= 1
line 83:       else
line 84:         if line[0] == " "
line 85:           let spaces_minus_tabs += 1
line 86:         endif
line 87:         let indent = len(matchstr(line, '^ *'))
line 88:         while stack[-1] > indent
line 89:           call remove(stack, -1)
line 90:         endwhile
line 91: 
line 92:         let indent_inc = indent - stack[-1]
line 93: 
line 94:         if indent_inc == 0 && len(stack) > 1
line 95:           let indent_inc = indent - stack[-2]
line 96:         endif
line 97: 
line 98:         if has_key(indents, indent_inc)
line 99:           let indents[indent_inc] += 1
line 100:           let prev_indent = indent
line 101:         endif
line 102: 
line 103:         if stack[-1] != indent
line 104:           call add(stack, indent)
line 105:         endif
line 106:       endif
line 107:     endfor
line 14:     for line in a:lines
line 15:       let lineno += 1
line 16: 
line 17:       if line =~# '^\s*$'
line 18:         continue
line 19:       endif
line 20: 
line 21:       if line =~# '^\s*/\*'
line 22:         let ccomment = 1
line 23:       endif
line 24:       if ccomment
line 25:         if line =~# '\*/'
line 26:           let ccomment = 0
line 27:         endif
line 28:         continue
line 29:       endif
line 30: 
line 31:       if line =~# '^=\w'
line 32:         let podcomment = 1
line 33:       endif
line 34:       if podcomment
line 35:         if line =~# '^=\%(end\|cut\)\>'
line 36:           let podcomment = 0
line 37:         endif
line 38:         continue
line 39:       endif
line 40: 
line 41:       if triplequote
line 42:         if line =~# '^[^"]*"""[^"]*$'
line 43:           let triplequote = 0
line 44:         endif
line 45:         continue
line 46:       elseif line =~# '^[^"]*"""[^"]*$'
line 47:         let triplequote = 1
line 48:       endif
line 49: 
line 50:       if backtick
line 51:         if line =~# '^[^`]*`[^`]*$'
line 52:           let backtick = 0
line 53:         endif
line 54:         continue
line 55:       elseif &filetype ==# 'go' && line =~# '^[^`]*`[^`]*$'
line 56:         let backtick = 1
line 57:       endif
line 58: 
line 59:       if line =~# '^\s*<\!--'
line 60:         let xmlcomment = 1
line 61:       endif
line 62:       if xmlcomment
line 63:         if line =~# '-->'
line 64:           let xmlcomment = 0
line 65:         endif
line 66:         continue
line 67:       endif
line 68: 
line 69:       " This is correct order because both "<<EOF" and "EOF" matches end
line 70:       if heredoc != ''
line 71:         if line =~# heredoc
line 72:           let heredoc = ''
line 73:         endif
line 74:         continue
line 75:       endif
line 76:       let herematch = matchlist(line, '\C<<\W*\([A-Z]\+\)\s*$')
line 77:       if len(herematch) > 0
line 78:         let heredoc = herematch[1] . '$'
line 79:       endif
line 80: 
line 81:       if line[0] == "\t"
line 82:         let spaces_minus_tabs -= 1
line 83:       else
line 84:         if line[0] == " "
line 85:           let spaces_minus_tabs += 1
line 86:         endif
line 87:         let indent = len(matchstr(line, '^ *'))
line 88:         while stack[-1] > indent
line 89:           call remove(stack, -1)
line 90:         endwhile
line 88:         while stack[-1] > indent
line 89:           call remove(stack, -1)
line 90:         endwhile
line 91: 
line 92:         let indent_inc = indent - stack[-1]
line 93: 
line 94:         if indent_inc == 0 && len(stack) > 1
line 95:           let indent_inc = indent - stack[-2]
line 96:         endif
line 97: 
line 98:         if has_key(indents, indent_inc)
line 99:           let indents[indent_inc] += 1
line 100:           let prev_indent = indent
line 101:         endif
line 102: 
line 103:         if stack[-1] != indent
line 104:           call add(stack, indent)
line 105:         endif
line 106:       endif
line 107:     endfor
line 14:     for line in a:lines
line 15:       let lineno += 1
line 16: 
line 17:       if line =~# '^\s*$'
line 18:         continue
line 19:       endif
line 20: 
line 21:       if line =~# '^\s*/\*'
line 22:         let ccomment = 1
line 23:       endif
line 24:       if ccomment
line 25:         if line =~# '\*/'
line 26:           let ccomment = 0
line 27:         endif
line 28:         continue
line 29:       endif
line 30: 
line 31:       if line =~# '^=\w'
line 32:         let podcomment = 1
line 33:       endif
line 34:       if podcomment
line 35:         if line =~# '^=\%(end\|cut\)\>'
line 36:           let podcomment = 0
line 37:         endif
line 38:         continue
line 39:       endif
line 40: 
line 41:       if triplequote
line 42:         if line =~# '^[^"]*"""[^"]*$'
line 43:           let triplequote = 0
line 44:         endif
line 45:         continue
line 46:       elseif line =~# '^[^"]*"""[^"]*$'
line 47:         let triplequote = 1
line 48:       endif
line 49: 
line 50:       if backtick
line 51:         if line =~# '^[^`]*`[^`]*$'
line 52:           let backtick = 0
line 53:         endif
line 54:         continue
line 55:       elseif &filetype ==# 'go' && line =~# '^[^`]*`[^`]*$'
line 56:         let backtick = 1
line 57:       endif
line 58: 
line 59:       if line =~# '^\s*<\!--'
line 60:         let xmlcomment = 1
line 61:       endif
line 62:       if xmlcomment
line 63:         if line =~# '-->'
line 64:           let xmlcomment = 0
line 65:         endif
line 66:         continue
line 67:       endif
line 68: 
line 69:       " This is correct order because both "<<EOF" and "EOF" matches end
line 70:       if heredoc != ''
line 71:         if line =~# heredoc
line 72:           let heredoc = ''
line 73:         endif
line 74:         continue
line 75:       endif
line 76:       let herematch = matchlist(line, '\C<<\W*\([A-Z]\+\)\s*$')
line 77:       if len(herematch) > 0
line 78:         let heredoc = herematch[1] . '$'
line 79:       endif
line 80: 
line 81:       if line[0] == "\t"
line 82:         let spaces_minus_tabs -= 1
line 83:       else
line 84:         if line[0] == " "
line 85:           let spaces_minus_tabs += 1
line 86:         endif
line 87:         let indent = len(matchstr(line, '^ *'))
line 88:         while stack[-1] > indent
line 89:           call remove(stack, -1)
line 90:         endwhile
line 91: 
line 92:         let indent_inc = indent - stack[-1]
line 93: 
line 94:         if indent_inc == 0 && len(stack) > 1
line 95:           let indent_inc = indent - stack[-2]
line 96:         endif
line 97: 
line 98:         if has_key(indents, indent_inc)
line 99:           let indents[indent_inc] += 1
line 100:           let prev_indent = indent
line 101:         endif
line 102: 
line 103:         if stack[-1] != indent
line 104:           call add(stack, indent)
line 105:         endif
line 106:       endif
line 107:     endfor
line 14:     for line in a:lines
line 15:       let lineno += 1
line 16: 
line 17:       if line =~# '^\s*$'
line 18:         continue
line 19:       endif
line 20: 
line 21:       if line =~# '^\s*/\*'
line 22:         let ccomment = 1
line 23:       endif
line 24:       if ccomment
line 25:         if line =~# '\*/'
line 26:           let ccomment = 0
line 27:         endif
line 28:         continue
line 29:       endif
line 30: 
line 31:       if line =~# '^=\w'
line 32:         let podcomment = 1
line 33:       endif
line 34:       if podcomment
line 35:         if line =~# '^=\%(end\|cut\)\>'
line 36:           let podcomment = 0
line 37:         endif
line 38:         continue
line 39:       endif
line 40: 
line 41:       if triplequote
line 42:         if line =~# '^[^"]*"""[^"]*$'
line 43:           let triplequote = 0
line 44:         endif
line 45:         continue
line 46:       elseif line =~# '^[^"]*"""[^"]*$'
line 47:         let triplequote = 1
line 48:       endif
line 49: 
line 50:       if backtick
line 51:         if line =~# '^[^`]*`[^`]*$'
line 52:           let backtick = 0
line 53:         endif
line 54:         continue
line 55:       elseif &filetype ==# 'go' && line =~# '^[^`]*`[^`]*$'
line 56:         let backtick = 1
line 57:       endif
line 58: 
line 59:       if line =~# '^\s*<\!--'
line 60:         let xmlcomment = 1
line 61:       endif
line 62:       if xmlcomment
line 63:         if line =~# '-->'
line 64:           let xmlcomment = 0
line 65:         endif
line 66:         continue
line 67:       endif
line 68: 
line 69:       " This is correct order because both "<<EOF" and "EOF" matches end
line 70:       if heredoc != ''
line 71:         if line =~# heredoc
line 72:           let heredoc = ''
line 73:         endif
line 74:         continue
line 75:       endif
line 76:       let herematch = matchlist(line, '\C<<\W*\([A-Z]\+\)\s*$')
line 77:       if len(herematch) > 0
line 78:         let heredoc = herematch[1] . '$'
line 79:       endif
line 80: 
line 81:       if line[0] == "\t"
line 82:         let spaces_minus_tabs -= 1
line 83:       else
line 84:         if line[0] == " "
line 85:           let spaces_minus_tabs += 1
line 86:         endif
line 87:         let indent = len(matchstr(line, '^ *'))
line 88:         while stack[-1] > indent
line 89:           call remove(stack, -1)
line 90:         endwhile
line 88:         while stack[-1] > indent
line 89:           call remove(stack, -1)
line 90:         endwhile
line 91: 
line 92:         let indent_inc = indent - stack[-1]
line 93: 
line 94:         if indent_inc == 0 && len(stack) > 1
line 95:           let indent_inc = indent - stack[-2]
line 96:         endif
line 97: 
line 98:         if has_key(indents, indent_inc)
line 99:           let indents[indent_inc] += 1
line 100:           let prev_indent = indent
line 101:         endif
line 102: 
line 103:         if stack[-1] != indent
line 104:           call add(stack, indent)
line 105:         endif
line 106:       endif
line 107:     endfor
line 14:     for line in a:lines
line 15:       let lineno += 1
line 16: 
line 17:       if line =~# '^\s*$'
line 18:         continue
line 14:     for line in a:lines
line 15:       let lineno += 1
line 16: 
line 17:       if line =~# '^\s*$'
line 18:         continue
line 19:       endif
line 20: 
line 21:       if line =~# '^\s*/\*'
line 22:         let ccomment = 1
line 23:       endif
line 24:       if ccomment
line 25:         if line =~# '\*/'
line 26:           let ccomment = 0
line 27:         endif
line 28:         continue
line 29:       endif
line 30: 
line 31:       if line =~# '^=\w'
line 32:         let podcomment = 1
line 33:       endif
line 34:       if podcomment
line 35:         if line =~# '^=\%(end\|cut\)\>'
line 36:           let podcomment = 0
line 37:         endif
line 38:         continue
line 39:       endif
line 40: 
line 41:       if triplequote
line 42:         if line =~# '^[^"]*"""[^"]*$'
line 43:           let triplequote = 0
line 44:         endif
line 45:         continue
line 46:       elseif line =~# '^[^"]*"""[^"]*$'
line 47:         let triplequote = 1
line 48:       endif
line 49: 
line 50:       if backtick
line 51:         if line =~# '^[^`]*`[^`]*$'
line 52:           let backtick = 0
line 53:         endif
line 54:         continue
line 55:       elseif &filetype ==# 'go' && line =~# '^[^`]*`[^`]*$'
line 56:         let backtick = 1
line 57:       endif
line 58: 
line 59:       if line =~# '^\s*<\!--'
line 60:         let xmlcomment = 1
line 61:       endif
line 62:       if xmlcomment
line 63:         if line =~# '-->'
line 64:           let xmlcomment = 0
line 65:         endif
line 66:         continue
line 67:       endif
line 68: 
line 69:       " This is correct order because both "<<EOF" and "EOF" matches end
line 70:       if heredoc != ''
line 71:         if line =~# heredoc
line 72:           let heredoc = ''
line 73:         endif
line 74:         continue
line 75:       endif
line 76:       let herematch = matchlist(line, '\C<<\W*\([A-Z]\+\)\s*$')
line 77:       if len(herematch) > 0
line 78:         let heredoc = herematch[1] . '$'
line 79:       endif
line 80: 
line 81:       if line[0] == "\t"
line 82:         let spaces_minus_tabs -= 1
line 83:       else
line 84:         if line[0] == " "
line 85:           let spaces_minus_tabs += 1
line 86:         endif
line 87:         let indent = len(matchstr(line, '^ *'))
line 88:         while stack[-1] > indent
line 89:           call remove(stack, -1)
line 90:         endwhile
line 91: 
line 92:         let indent_inc = indent - stack[-1]
line 93: 
line 94:         if indent_inc == 0 && len(stack) > 1
line 95:           let indent_inc = indent - stack[-2]
line 96:         endif
line 97: 
line 98:         if has_key(indents, indent_inc)
line 99:           let indents[indent_inc] += 1
line 100:           let prev_indent = indent
line 101:         endif
line 102: 
line 103:         if stack[-1] != indent
line 104:           call add(stack, indent)
line 105:         endif
line 106:       endif
line 107:     endfor
line 14:     for line in a:lines
line 15:       let lineno += 1
line 16: 
line 17:       if line =~# '^\s*$'
line 18:         continue
line 19:       endif
line 20: 
line 21:       if line =~# '^\s*/\*'
line 22:         let ccomment = 1
line 23:       endif
line 24:       if ccomment
line 25:         if line =~# '\*/'
line 26:           let ccomment = 0
line 27:         endif
line 28:         continue
line 29:       endif
line 30: 
line 31:       if line =~# '^=\w'
line 32:         let podcomment = 1
line 33:       endif
line 34:       if podcomment
line 35:         if line =~# '^=\%(end\|cut\)\>'
line 36:           let podcomment = 0
line 37:         endif
line 38:         continue
line 39:       endif
line 40: 
line 41:       if triplequote
line 42:         if line =~# '^[^"]*"""[^"]*$'
line 43:           let triplequote = 0
line 44:         endif
line 45:         continue
line 46:       elseif line =~# '^[^"]*"""[^"]*$'
line 47:         let triplequote = 1
line 48:       endif
line 49: 
line 50:       if backtick
line 51:         if line =~# '^[^`]*`[^`]*$'
line 52:           let backtick = 0
line 53:         endif
line 54:         continue
line 55:       elseif &filetype ==# 'go' && line =~# '^[^`]*`[^`]*$'
line 56:         let backtick = 1
line 57:       endif
line 58: 
line 59:       if line =~# '^\s*<\!--'
line 60:         let xmlcomment = 1
line 61:       endif
line 62:       if xmlcomment
line 63:         if line =~# '-->'
line 64:           let xmlcomment = 0
line 65:         endif
line 66:         continue
line 67:       endif
line 68: 
line 69:       " This is correct order because both "<<EOF" and "EOF" matches end
line 70:       if heredoc != ''
line 71:         if line =~# heredoc
line 72:           let heredoc = ''
line 73:         endif
line 74:         continue
line 75:       endif
line 76:       let herematch = matchlist(line, '\C<<\W*\([A-Z]\+\)\s*$')
line 77:       if len(herematch) > 0
line 78:         let heredoc = herematch[1] . '$'
line 79:       endif
line 80: 
line 81:       if line[0] == "\t"
line 82:         let spaces_minus_tabs -= 1
line 83:       else
line 84:         if line[0] == " "
line 85:           let spaces_minus_tabs += 1
line 86:         endif
line 87:         let indent = len(matchstr(line, '^ *'))
line 88:         while stack[-1] > indent
line 89:           call remove(stack, -1)
line 90:         endwhile
line 91: 
line 92:         let indent_inc = indent - stack[-1]
line 93: 
line 94:         if indent_inc == 0 && len(stack) > 1
line 95:           let indent_inc = indent - stack[-2]
line 96:         endif
line 97: 
line 98:         if has_key(indents, indent_inc)
line 99:           let indents[indent_inc] += 1
line 100:           let prev_indent = indent
line 101:         endif
line 102: 
line 103:         if stack[-1] != indent
line 104:           call add(stack, indent)
line 105:         endif
line 106:       endif
line 107:     endfor
line 14:     for line in a:lines
line 15:       let lineno += 1
line 16: 
line 17:       if line =~# '^\s*$'
line 18:         continue
line 19:       endif
line 20: 
line 21:       if line =~# '^\s*/\*'
line 22:         let ccomment = 1
line 23:       endif
line 24:       if ccomment
line 25:         if line =~# '\*/'
line 26:           let ccomment = 0
line 27:         endif
line 28:         continue
line 29:       endif
line 30: 
line 31:       if line =~# '^=\w'
line 32:         let podcomment = 1
line 33:       endif
line 34:       if podcomment
line 35:         if line =~# '^=\%(end\|cut\)\>'
line 36:           let podcomment = 0
line 37:         endif
line 38:         continue
line 39:       endif
line 40: 
line 41:       if triplequote
line 42:         if line =~# '^[^"]*"""[^"]*$'
line 43:           let triplequote = 0
line 44:         endif
line 45:         continue
line 46:       elseif line =~# '^[^"]*"""[^"]*$'
line 47:         let triplequote = 1
line 48:       endif
line 49: 
line 50:       if backtick
line 51:         if line =~# '^[^`]*`[^`]*$'
line 52:           let backtick = 0
line 53:         endif
line 54:         continue
line 55:       elseif &filetype ==# 'go' && line =~# '^[^`]*`[^`]*$'
line 56:         let backtick = 1
line 57:       endif
line 58: 
line 59:       if line =~# '^\s*<\!--'
line 60:         let xmlcomment = 1
line 61:       endif
line 62:       if xmlcomment
line 63:         if line =~# '-->'
line 64:           let xmlcomment = 0
line 65:         endif
line 66:         continue
line 67:       endif
line 68: 
line 69:       " This is correct order because both "<<EOF" and "EOF" matches end
line 70:       if heredoc != ''
line 71:         if line =~# heredoc
line 72:           let heredoc = ''
line 73:         endif
line 74:         continue
line 75:       endif
line 76:       let herematch = matchlist(line, '\C<<\W*\([A-Z]\+\)\s*$')
line 77:       if len(herematch) > 0
line 78:         let heredoc = herematch[1] . '$'
line 79:       endif
line 80: 
line 81:       if line[0] == "\t"
line 82:         let spaces_minus_tabs -= 1
line 83:       else
line 84:         if line[0] == " "
line 85:           let spaces_minus_tabs += 1
line 86:         endif
line 87:         let indent = len(matchstr(line, '^ *'))
line 88:         while stack[-1] > indent
line 89:           call remove(stack, -1)
line 90:         endwhile
line 91: 
line 92:         let indent_inc = indent - stack[-1]
line 93: 
line 94:         if indent_inc == 0 && len(stack) > 1
line 95:           let indent_inc = indent - stack[-2]
line 96:         endif
line 97: 
line 98:         if has_key(indents, indent_inc)
line 99:           let indents[indent_inc] += 1
line 100:           let prev_indent = indent
line 101:         endif
line 102: 
line 103:         if stack[-1] != indent
line 104:           call add(stack, indent)
line 105:         endif
line 106:       endif
line 107:     endfor
line 14:     for line in a:lines
line 15:       let lineno += 1
line 16: 
line 17:       if line =~# '^\s*$'
line 18:         continue
line 19:       endif
line 20: 
line 21:       if line =~# '^\s*/\*'
line 22:         let ccomment = 1
line 23:       endif
line 24:       if ccomment
line 25:         if line =~# '\*/'
line 26:           let ccomment = 0
line 27:         endif
line 28:         continue
line 29:       endif
line 30: 
line 31:       if line =~# '^=\w'
line 32:         let podcomment = 1
line 33:       endif
line 34:       if podcomment
line 35:         if line =~# '^=\%(end\|cut\)\>'
line 36:           let podcomment = 0
line 37:         endif
line 38:         continue
line 39:       endif
line 40: 
line 41:       if triplequote
line 42:         if line =~# '^[^"]*"""[^"]*$'
line 43:           let triplequote = 0
line 44:         endif
line 45:         continue
line 46:       elseif line =~# '^[^"]*"""[^"]*$'
line 47:         let triplequote = 1
line 48:       endif
line 49: 
line 50:       if backtick
line 51:         if line =~# '^[^`]*`[^`]*$'
line 52:           let backtick = 0
line 53:         endif
line 54:         continue
line 55:       elseif &filetype ==# 'go' && line =~# '^[^`]*`[^`]*$'
line 56:         let backtick = 1
line 57:       endif
line 58: 
line 59:       if line =~# '^\s*<\!--'
line 60:         let xmlcomment = 1
line 61:       endif
line 62:       if xmlcomment
line 63:         if line =~# '-->'
line 64:           let xmlcomment = 0
line 65:         endif
line 66:         continue
line 67:       endif
line 68: 
line 69:       " This is correct order because both "<<EOF" and "EOF" matches end
line 70:       if heredoc != ''
line 71:         if line =~# heredoc
line 72:           let heredoc = ''
line 73:         endif
line 74:         continue
line 75:       endif
line 76:       let herematch = matchlist(line, '\C<<\W*\([A-Z]\+\)\s*$')
line 77:       if len(herematch) > 0
line 78:         let heredoc = herematch[1] . '$'
line 79:       endif
line 80: 
line 81:       if line[0] == "\t"
line 82:         let spaces_minus_tabs -= 1
line 83:       else
line 84:         if line[0] == " "
line 85:           let spaces_minus_tabs += 1
line 86:         endif
line 87:         let indent = len(matchstr(line, '^ *'))
line 88:         while stack[-1] > indent
line 89:           call remove(stack, -1)
line 90:         endwhile
line 91: 
line 92:         let indent_inc = indent - stack[-1]
line 93: 
line 94:         if indent_inc == 0 && len(stack) > 1
line 95:           let indent_inc = indent - stack[-2]
line 96:         endif
line 97: 
line 98:         if has_key(indents, indent_inc)
line 99:           let indents[indent_inc] += 1
line 100:           let prev_indent = indent
line 101:         endif
line 102: 
line 103:         if stack[-1] != indent
line 104:           call add(stack, indent)
line 105:         endif
line 106:       endif
line 107:     endfor
line 14:     for line in a:lines
line 15:       let lineno += 1
line 16: 
line 17:       if line =~# '^\s*$'
line 18:         continue
line 19:       endif
line 20: 
line 21:       if line =~# '^\s*/\*'
line 22:         let ccomment = 1
line 23:       endif
line 24:       if ccomment
line 25:         if line =~# '\*/'
line 26:           let ccomment = 0
line 27:         endif
line 28:         continue
line 29:       endif
line 30: 
line 31:       if line =~# '^=\w'
line 32:         let podcomment = 1
line 33:       endif
line 34:       if podcomment
line 35:         if line =~# '^=\%(end\|cut\)\>'
line 36:           let podcomment = 0
line 37:         endif
line 38:         continue
line 39:       endif
line 40: 
line 41:       if triplequote
line 42:         if line =~# '^[^"]*"""[^"]*$'
line 43:           let triplequote = 0
line 44:         endif
line 45:         continue
line 46:       elseif line =~# '^[^"]*"""[^"]*$'
line 47:         let triplequote = 1
line 48:       endif
line 49: 
line 50:       if backtick
line 51:         if line =~# '^[^`]*`[^`]*$'
line 52:           let backtick = 0
line 53:         endif
line 54:         continue
line 55:       elseif &filetype ==# 'go' && line =~# '^[^`]*`[^`]*$'
line 56:         let backtick = 1
line 57:       endif
line 58: 
line 59:       if line =~# '^\s*<\!--'
line 60:         let xmlcomment = 1
line 61:       endif
line 62:       if xmlcomment
line 63:         if line =~# '-->'
line 64:           let xmlcomment = 0
line 65:         endif
line 66:         continue
line 67:       endif
line 68: 
line 69:       " This is correct order because both "<<EOF" and "EOF" matches end
line 70:       if heredoc != ''
line 71:         if line =~# heredoc
line 72:           let heredoc = ''
line 73:         endif
line 74:         continue
line 75:       endif
line 76:       let herematch = matchlist(line, '\C<<\W*\([A-Z]\+\)\s*$')
line 77:       if len(herematch) > 0
line 78:         let heredoc = herematch[1] . '$'
line 79:       endif
line 80: 
line 81:       if line[0] == "\t"
line 82:         let spaces_minus_tabs -= 1
line 83:       else
line 84:         if line[0] == " "
line 85:           let spaces_minus_tabs += 1
line 86:         endif
line 87:         let indent = len(matchstr(line, '^ *'))
line 88:         while stack[-1] > indent
line 89:           call remove(stack, -1)
line 90:         endwhile
line 91: 
line 92:         let indent_inc = indent - stack[-1]
line 93: 
line 94:         if indent_inc == 0 && len(stack) > 1
line 95:           let indent_inc = indent - stack[-2]
line 96:         endif
line 97: 
line 98:         if has_key(indents, indent_inc)
line 99:           let indents[indent_inc] += 1
line 100:           let prev_indent = indent
line 101:         endif
line 102: 
line 103:         if stack[-1] != indent
line 104:           call add(stack, indent)
line 105:         endif
line 106:       endif
line 107:     endfor
line 14:     for line in a:lines
line 15:       let lineno += 1
line 16: 
line 17:       if line =~# '^\s*$'
line 18:         continue
line 19:       endif
line 20: 
line 21:       if line =~# '^\s*/\*'
line 22:         let ccomment = 1
line 23:       endif
line 24:       if ccomment
line 25:         if line =~# '\*/'
line 26:           let ccomment = 0
line 27:         endif
line 28:         continue
line 29:       endif
line 30: 
line 31:       if line =~# '^=\w'
line 32:         let podcomment = 1
line 33:       endif
line 34:       if podcomment
line 35:         if line =~# '^=\%(end\|cut\)\>'
line 36:           let podcomment = 0
line 37:         endif
line 38:         continue
line 39:       endif
line 40: 
line 41:       if triplequote
line 42:         if line =~# '^[^"]*"""[^"]*$'
line 43:           let triplequote = 0
line 44:         endif
line 45:         continue
line 46:       elseif line =~# '^[^"]*"""[^"]*$'
line 47:         let triplequote = 1
line 48:       endif
line 49: 
line 50:       if backtick
line 51:         if line =~# '^[^`]*`[^`]*$'
line 52:           let backtick = 0
line 53:         endif
line 54:         continue
line 55:       elseif &filetype ==# 'go' && line =~# '^[^`]*`[^`]*$'
line 56:         let backtick = 1
line 57:       endif
line 58: 
line 59:       if line =~# '^\s*<\!--'
line 60:         let xmlcomment = 1
line 61:       endif
line 62:       if xmlcomment
line 63:         if line =~# '-->'
line 64:           let xmlcomment = 0
line 65:         endif
line 66:         continue
line 67:       endif
line 68: 
line 69:       " This is correct order because both "<<EOF" and "EOF" matches end
line 70:       if heredoc != ''
line 71:         if line =~# heredoc
line 72:           let heredoc = ''
line 73:         endif
line 74:         continue
line 75:       endif
line 76:       let herematch = matchlist(line, '\C<<\W*\([A-Z]\+\)\s*$')
line 77:       if len(herematch) > 0
line 78:         let heredoc = herematch[1] . '$'
line 79:       endif
line 80: 
line 81:       if line[0] == "\t"
line 82:         let spaces_minus_tabs -= 1
line 83:       else
line 84:         if line[0] == " "
line 85:           let spaces_minus_tabs += 1
line 86:         endif
line 87:         let indent = len(matchstr(line, '^ *'))
line 88:         while stack[-1] > indent
line 89:           call remove(stack, -1)
line 90:         endwhile
line 91: 
line 92:         let indent_inc = indent - stack[-1]
line 93: 
line 94:         if indent_inc == 0 && len(stack) > 1
line 95:           let indent_inc = indent - stack[-2]
line 96:         endif
line 97: 
line 98:         if has_key(indents, indent_inc)
line 99:           let indents[indent_inc] += 1
line 100:           let prev_indent = indent
line 101:         endif
line 102: 
line 103:         if stack[-1] != indent
line 104:           call add(stack, indent)
line 105:         endif
line 106:       endif
line 107:     endfor
line 14:     for line in a:lines
line 15:       let lineno += 1
line 16: 
line 17:       if line =~# '^\s*$'
line 18:         continue
line 19:       endif
line 20: 
line 21:       if line =~# '^\s*/\*'
line 22:         let ccomment = 1
line 23:       endif
line 24:       if ccomment
line 25:         if line =~# '\*/'
line 26:           let ccomment = 0
line 27:         endif
line 28:         continue
line 29:       endif
line 30: 
line 31:       if line =~# '^=\w'
line 32:         let podcomment = 1
line 33:       endif
line 34:       if podcomment
line 35:         if line =~# '^=\%(end\|cut\)\>'
line 36:           let podcomment = 0
line 37:         endif
line 38:         continue
line 39:       endif
line 40: 
line 41:       if triplequote
line 42:         if line =~# '^[^"]*"""[^"]*$'
line 43:           let triplequote = 0
line 44:         endif
line 45:         continue
line 46:       elseif line =~# '^[^"]*"""[^"]*$'
line 47:         let triplequote = 1
line 48:       endif
line 49: 
line 50:       if backtick
line 51:         if line =~# '^[^`]*`[^`]*$'
line 52:           let backtick = 0
line 53:         endif
line 54:         continue
line 55:       elseif &filetype ==# 'go' && line =~# '^[^`]*`[^`]*$'
line 56:         let backtick = 1
line 57:       endif
line 58: 
line 59:       if line =~# '^\s*<\!--'
line 60:         let xmlcomment = 1
line 61:       endif
line 62:       if xmlcomment
line 63:         if line =~# '-->'
line 64:           let xmlcomment = 0
line 65:         endif
line 66:         continue
line 67:       endif
line 68: 
line 69:       " This is correct order because both "<<EOF" and "EOF" matches end
line 70:       if heredoc != ''
line 71:         if line =~# heredoc
line 72:           let heredoc = ''
line 73:         endif
line 74:         continue
line 75:       endif
line 76:       let herematch = matchlist(line, '\C<<\W*\([A-Z]\+\)\s*$')
line 77:       if len(herematch) > 0
line 78:         let heredoc = herematch[1] . '$'
line 79:       endif
line 80: 
line 81:       if line[0] == "\t"
line 82:         let spaces_minus_tabs -= 1
line 83:       else
line 84:         if line[0] == " "
line 85:           let spaces_minus_tabs += 1
line 86:         endif
line 87:         let indent = len(matchstr(line, '^ *'))
line 88:         while stack[-1] > indent
line 89:           call remove(stack, -1)
line 90:         endwhile
line 91: 
line 92:         let indent_inc = indent - stack[-1]
line 93: 
line 94:         if indent_inc == 0 && len(stack) > 1
line 95:           let indent_inc = indent - stack[-2]
line 96:         endif
line 97: 
line 98:         if has_key(indents, indent_inc)
line 99:           let indents[indent_inc] += 1
line 100:           let prev_indent = indent
line 101:         endif
line 102: 
line 103:         if stack[-1] != indent
line 104:           call add(stack, indent)
line 105:         endif
line 106:       endif
line 107:     endfor
line 14:     for line in a:lines
line 15:       let lineno += 1
line 16: 
line 17:       if line =~# '^\s*$'
line 18:         continue
line 19:       endif
line 20: 
line 21:       if line =~# '^\s*/\*'
line 22:         let ccomment = 1
line 23:       endif
line 24:       if ccomment
line 25:         if line =~# '\*/'
line 26:           let ccomment = 0
line 27:         endif
line 28:         continue
line 29:       endif
line 30: 
line 31:       if line =~# '^=\w'
line 32:         let podcomment = 1
line 33:       endif
line 34:       if podcomment
line 35:         if line =~# '^=\%(end\|cut\)\>'
line 36:           let podcomment = 0
line 37:         endif
line 38:         continue
line 39:       endif
line 40: 
line 41:       if triplequote
line 42:         if line =~# '^[^"]*"""[^"]*$'
line 43:           let triplequote = 0
line 44:         endif
line 45:         continue
line 46:       elseif line =~# '^[^"]*"""[^"]*$'
line 47:         let triplequote = 1
line 48:       endif
line 49: 
line 50:       if backtick
line 51:         if line =~# '^[^`]*`[^`]*$'
line 52:           let backtick = 0
line 53:         endif
line 54:         continue
line 55:       elseif &filetype ==# 'go' && line =~# '^[^`]*`[^`]*$'
line 56:         let backtick = 1
line 57:       endif
line 58: 
line 59:       if line =~# '^\s*<\!--'
line 60:         let xmlcomment = 1
line 61:       endif
line 62:       if xmlcomment
line 63:         if line =~# '-->'
line 64:           let xmlcomment = 0
line 65:         endif
line 66:         continue
line 67:       endif
line 68: 
line 69:       " This is correct order because both "<<EOF" and "EOF" matches end
line 70:       if heredoc != ''
line 71:         if line =~# heredoc
line 72:           let heredoc = ''
line 73:         endif
line 74:         continue
line 75:       endif
line 76:       let herematch = matchlist(line, '\C<<\W*\([A-Z]\+\)\s*$')
line 77:       if len(herematch) > 0
line 78:         let heredoc = herematch[1] . '$'
line 79:       endif
line 80: 
line 81:       if line[0] == "\t"
line 82:         let spaces_minus_tabs -= 1
line 83:       else
line 84:         if line[0] == " "
line 85:           let spaces_minus_tabs += 1
line 86:         endif
line 87:         let indent = len(matchstr(line, '^ *'))
line 88:         while stack[-1] > indent
line 89:           call remove(stack, -1)
line 90:         endwhile
line 88:         while stack[-1] > indent
line 89:           call remove(stack, -1)
line 90:         endwhile
line 91: 
line 92:         let indent_inc = indent - stack[-1]
line 93: 
line 94:         if indent_inc == 0 && len(stack) > 1
line 95:           let indent_inc = indent - stack[-2]
line 96:         endif
line 97: 
line 98:         if has_key(indents, indent_inc)
line 99:           let indents[indent_inc] += 1
line 100:           let prev_indent = indent
line 101:         endif
line 102: 
line 103:         if stack[-1] != indent
line 104:           call add(stack, indent)
line 105:         endif
line 106:       endif
line 107:     endfor
line 14:     for line in a:lines
line 15:       let lineno += 1
line 16: 
line 17:       if line =~# '^\s*$'
line 18:         continue
line 19:       endif
line 20: 
line 21:       if line =~# '^\s*/\*'
line 22:         let ccomment = 1
line 23:       endif
line 24:       if ccomment
line 25:         if line =~# '\*/'
line 26:           let ccomment = 0
line 27:         endif
line 28:         continue
line 29:       endif
line 30: 
line 31:       if line =~# '^=\w'
line 32:         let podcomment = 1
line 33:       endif
line 34:       if podcomment
line 35:         if line =~# '^=\%(end\|cut\)\>'
line 36:           let podcomment = 0
line 37:         endif
line 38:         continue
line 39:       endif
line 40: 
line 41:       if triplequote
line 42:         if line =~# '^[^"]*"""[^"]*$'
line 43:           let triplequote = 0
line 44:         endif
line 45:         continue
line 46:       elseif line =~# '^[^"]*"""[^"]*$'
line 47:         let triplequote = 1
line 48:       endif
line 49: 
line 50:       if backtick
line 51:         if line =~# '^[^`]*`[^`]*$'
line 52:           let backtick = 0
line 53:         endif
line 54:         continue
line 55:       elseif &filetype ==# 'go' && line =~# '^[^`]*`[^`]*$'
line 56:         let backtick = 1
line 57:       endif
line 58: 
line 59:       if line =~# '^\s*<\!--'
line 60:         let xmlcomment = 1
line 61:       endif
line 62:       if xmlcomment
line 63:         if line =~# '-->'
line 64:           let xmlcomment = 0
line 65:         endif
line 66:         continue
line 67:       endif
line 68: 
line 69:       " This is correct order because both "<<EOF" and "EOF" matches end
line 70:       if heredoc != ''
line 71:         if line =~# heredoc
line 72:           let heredoc = ''
line 73:         endif
line 74:         continue
line 75:       endif
line 76:       let herematch = matchlist(line, '\C<<\W*\([A-Z]\+\)\s*$')
line 77:       if len(herematch) > 0
line 78:         let heredoc = herematch[1] . '$'
line 79:       endif
line 80: 
line 81:       if line[0] == "\t"
line 82:         let spaces_minus_tabs -= 1
line 83:       else
line 84:         if line[0] == " "
line 85:           let spaces_minus_tabs += 1
line 86:         endif
line 87:         let indent = len(matchstr(line, '^ *'))
line 88:         while stack[-1] > indent
line 89:           call remove(stack, -1)
line 90:         endwhile
line 91: 
line 92:         let indent_inc = indent - stack[-1]
line 93: 
line 94:         if indent_inc == 0 && len(stack) > 1
line 95:           let indent_inc = indent - stack[-2]
line 96:         endif
line 97: 
line 98:         if has_key(indents, indent_inc)
line 99:           let indents[indent_inc] += 1
line 100:           let prev_indent = indent
line 101:         endif
line 102: 
line 103:         if stack[-1] != indent
line 104:           call add(stack, indent)
line 105:         endif
line 106:       endif
line 107:     endfor
line 14:     for line in a:lines
line 15:       let lineno += 1
line 16: 
line 17:       if line =~# '^\s*$'
line 18:         continue
line 19:       endif
line 20: 
line 21:       if line =~# '^\s*/\*'
line 22:         let ccomment = 1
line 23:       endif
line 24:       if ccomment
line 25:         if line =~# '\*/'
line 26:           let ccomment = 0
line 27:         endif
line 28:         continue
line 29:       endif
line 30: 
line 31:       if line =~# '^=\w'
line 32:         let podcomment = 1
line 33:       endif
line 34:       if podcomment
line 35:         if line =~# '^=\%(end\|cut\)\>'
line 36:           let podcomment = 0
line 37:         endif
line 38:         continue
line 39:       endif
line 40: 
line 41:       if triplequote
line 42:         if line =~# '^[^"]*"""[^"]*$'
line 43:           let triplequote = 0
line 44:         endif
line 45:         continue
line 46:       elseif line =~# '^[^"]*"""[^"]*$'
line 47:         let triplequote = 1
line 48:       endif
line 49: 
line 50:       if backtick
line 51:         if line =~# '^[^`]*`[^`]*$'
line 52:           let backtick = 0
line 53:         endif
line 54:         continue
line 55:       elseif &filetype ==# 'go' && line =~# '^[^`]*`[^`]*$'
line 56:         let backtick = 1
line 57:       endif
line 58: 
line 59:       if line =~# '^\s*<\!--'
line 60:         let xmlcomment = 1
line 61:       endif
line 62:       if xmlcomment
line 63:         if line =~# '-->'
line 64:           let xmlcomment = 0
line 65:         endif
line 66:         continue
line 67:       endif
line 68: 
line 69:       " This is correct order because both "<<EOF" and "EOF" matches end
line 70:       if heredoc != ''
line 71:         if line =~# heredoc
line 72:           let heredoc = ''
line 73:         endif
line 74:         continue
line 75:       endif
line 76:       let herematch = matchlist(line, '\C<<\W*\([A-Z]\+\)\s*$')
line 77:       if len(herematch) > 0
line 78:         let heredoc = herematch[1] . '$'
line 79:       endif
line 80: 
line 81:       if line[0] == "\t"
line 82:         let spaces_minus_tabs -= 1
line 83:       else
line 84:         if line[0] == " "
line 85:           let spaces_minus_tabs += 1
line 86:         endif
line 87:         let indent = len(matchstr(line, '^ *'))
line 88:         while stack[-1] > indent
line 89:           call remove(stack, -1)
line 90:         endwhile
line 91: 
line 92:         let indent_inc = indent - stack[-1]
line 93: 
line 94:         if indent_inc == 0 && len(stack) > 1
line 95:           let indent_inc = indent - stack[-2]
line 96:         endif
line 97: 
line 98:         if has_key(indents, indent_inc)
line 99:           let indents[indent_inc] += 1
line 100:           let prev_indent = indent
line 101:         endif
line 102: 
line 103:         if stack[-1] != indent
line 104:           call add(stack, indent)
line 105:         endif
line 106:       endif
line 107:     endfor
line 14:     for line in a:lines
line 15:       let lineno += 1
line 16: 
line 17:       if line =~# '^\s*$'
line 18:         continue
line 19:       endif
line 20: 
line 21:       if line =~# '^\s*/\*'
line 22:         let ccomment = 1
line 23:       endif
line 24:       if ccomment
line 25:         if line =~# '\*/'
line 26:           let ccomment = 0
line 27:         endif
line 28:         continue
line 29:       endif
line 30: 
line 31:       if line =~# '^=\w'
line 32:         let podcomment = 1
line 33:       endif
line 34:       if podcomment
line 35:         if line =~# '^=\%(end\|cut\)\>'
line 36:           let podcomment = 0
line 37:         endif
line 38:         continue
line 39:       endif
line 40: 
line 41:       if triplequote
line 42:         if line =~# '^[^"]*"""[^"]*$'
line 43:           let triplequote = 0
line 44:         endif
line 45:         continue
line 46:       elseif line =~# '^[^"]*"""[^"]*$'
line 47:         let triplequote = 1
line 48:       endif
line 49: 
line 50:       if backtick
line 51:         if line =~# '^[^`]*`[^`]*$'
line 52:           let backtick = 0
line 53:         endif
line 54:         continue
line 55:       elseif &filetype ==# 'go' && line =~# '^[^`]*`[^`]*$'
line 56:         let backtick = 1
line 57:       endif
line 58: 
line 59:       if line =~# '^\s*<\!--'
line 60:         let xmlcomment = 1
line 61:       endif
line 62:       if xmlcomment
line 63:         if line =~# '-->'
line 64:           let xmlcomment = 0
line 65:         endif
line 66:         continue
line 67:       endif
line 68: 
line 69:       " This is correct order because both "<<EOF" and "EOF" matches end
line 70:       if heredoc != ''
line 71:         if line =~# heredoc
line 72:           let heredoc = ''
line 73:         endif
line 74:         continue
line 75:       endif
line 76:       let herematch = matchlist(line, '\C<<\W*\([A-Z]\+\)\s*$')
line 77:       if len(herematch) > 0
line 78:         let heredoc = herematch[1] . '$'
line 79:       endif
line 80: 
line 81:       if line[0] == "\t"
line 82:         let spaces_minus_tabs -= 1
line 83:       else
line 84:         if line[0] == " "
line 85:           let spaces_minus_tabs += 1
line 86:         endif
line 87:         let indent = len(matchstr(line, '^ *'))
line 88:         while stack[-1] > indent
line 89:           call remove(stack, -1)
line 90:         endwhile
line 91: 
line 92:         let indent_inc = indent - stack[-1]
line 93: 
line 94:         if indent_inc == 0 && len(stack) > 1
line 95:           let indent_inc = indent - stack[-2]
line 96:         endif
line 97: 
line 98:         if has_key(indents, indent_inc)
line 99:           let indents[indent_inc] += 1
line 100:           let prev_indent = indent
line 101:         endif
line 102: 
line 103:         if stack[-1] != indent
line 104:           call add(stack, indent)
line 105:         endif
line 106:       endif
line 107:     endfor
line 14:     for line in a:lines
line 15:       let lineno += 1
line 16: 
line 17:       if line =~# '^\s*$'
line 18:         continue
line 19:       endif
line 20: 
line 21:       if line =~# '^\s*/\*'
line 22:         let ccomment = 1
line 23:       endif
line 24:       if ccomment
line 25:         if line =~# '\*/'
line 26:           let ccomment = 0
line 27:         endif
line 28:         continue
line 29:       endif
line 30: 
line 31:       if line =~# '^=\w'
line 32:         let podcomment = 1
line 33:       endif
line 34:       if podcomment
line 35:         if line =~# '^=\%(end\|cut\)\>'
line 36:           let podcomment = 0
line 37:         endif
line 38:         continue
line 39:       endif
line 40: 
line 41:       if triplequote
line 42:         if line =~# '^[^"]*"""[^"]*$'
line 43:           let triplequote = 0
line 44:         endif
line 45:         continue
line 46:       elseif line =~# '^[^"]*"""[^"]*$'
line 47:         let triplequote = 1
line 48:       endif
line 49: 
line 50:       if backtick
line 51:         if line =~# '^[^`]*`[^`]*$'
line 52:           let backtick = 0
line 53:         endif
line 54:         continue
line 55:       elseif &filetype ==# 'go' && line =~# '^[^`]*`[^`]*$'
line 56:         let backtick = 1
line 57:       endif
line 58: 
line 59:       if line =~# '^\s*<\!--'
line 60:         let xmlcomment = 1
line 61:       endif
line 62:       if xmlcomment
line 63:         if line =~# '-->'
line 64:           let xmlcomment = 0
line 65:         endif
line 66:         continue
line 67:       endif
line 68: 
line 69:       " This is correct order because both "<<EOF" and "EOF" matches end
line 70:       if heredoc != ''
line 71:         if line =~# heredoc
line 72:           let heredoc = ''
line 73:         endif
line 74:         continue
line 75:       endif
line 76:       let herematch = matchlist(line, '\C<<\W*\([A-Z]\+\)\s*$')
line 77:       if len(herematch) > 0
line 78:         let heredoc = herematch[1] . '$'
line 79:       endif
line 80: 
line 81:       if line[0] == "\t"
line 82:         let spaces_minus_tabs -= 1
line 83:       else
line 84:         if line[0] == " "
line 85:           let spaces_minus_tabs += 1
line 86:         endif
line 87:         let indent = len(matchstr(line, '^ *'))
line 88:         while stack[-1] > indent
line 89:           call remove(stack, -1)
line 90:         endwhile
line 91: 
line 92:         let indent_inc = indent - stack[-1]
line 93: 
line 94:         if indent_inc == 0 && len(stack) > 1
line 95:           let indent_inc = indent - stack[-2]
line 96:         endif
line 97: 
line 98:         if has_key(indents, indent_inc)
line 99:           let indents[indent_inc] += 1
line 100:           let prev_indent = indent
line 101:         endif
line 102: 
line 103:         if stack[-1] != indent
line 104:           call add(stack, indent)
line 105:         endif
line 106:       endif
line 107:     endfor
line 14:     for line in a:lines
line 15:       let lineno += 1
line 16: 
line 17:       if line =~# '^\s*$'
line 18:         continue
line 19:       endif
line 20: 
line 21:       if line =~# '^\s*/\*'
line 22:         let ccomment = 1
line 23:       endif
line 24:       if ccomment
line 25:         if line =~# '\*/'
line 26:           let ccomment = 0
line 27:         endif
line 28:         continue
line 29:       endif
line 30: 
line 31:       if line =~# '^=\w'
line 32:         let podcomment = 1
line 33:       endif
line 34:       if podcomment
line 35:         if line =~# '^=\%(end\|cut\)\>'
line 36:           let podcomment = 0
line 37:         endif
line 38:         continue
line 39:       endif
line 40: 
line 41:       if triplequote
line 42:         if line =~# '^[^"]*"""[^"]*$'
line 43:           let triplequote = 0
line 44:         endif
line 45:         continue
line 46:       elseif line =~# '^[^"]*"""[^"]*$'
line 47:         let triplequote = 1
line 48:       endif
line 49: 
line 50:       if backtick
line 51:         if line =~# '^[^`]*`[^`]*$'
line 52:           let backtick = 0
line 53:         endif
line 54:         continue
line 55:       elseif &filetype ==# 'go' && line =~# '^[^`]*`[^`]*$'
line 56:         let backtick = 1
line 57:       endif
line 58: 
line 59:       if line =~# '^\s*<\!--'
line 60:         let xmlcomment = 1
line 61:       endif
line 62:       if xmlcomment
line 63:         if line =~# '-->'
line 64:           let xmlcomment = 0
line 65:         endif
line 66:         continue
line 67:       endif
line 68: 
line 69:       " This is correct order because both "<<EOF" and "EOF" matches end
line 70:       if heredoc != ''
line 71:         if line =~# heredoc
line 72:           let heredoc = ''
line 73:         endif
line 74:         continue
line 75:       endif
line 76:       let herematch = matchlist(line, '\C<<\W*\([A-Z]\+\)\s*$')
line 77:       if len(herematch) > 0
line 78:         let heredoc = herematch[1] . '$'
line 79:       endif
line 80: 
line 81:       if line[0] == "\t"
line 82:         let spaces_minus_tabs -= 1
line 83:       else
line 84:         if line[0] == " "
line 85:           let spaces_minus_tabs += 1
line 86:         endif
line 87:         let indent = len(matchstr(line, '^ *'))
line 88:         while stack[-1] > indent
line 89:           call remove(stack, -1)
line 90:         endwhile
line 91: 
line 92:         let indent_inc = indent - stack[-1]
line 93: 
line 94:         if indent_inc == 0 && len(stack) > 1
line 95:           let indent_inc = indent - stack[-2]
line 96:         endif
line 97: 
line 98:         if has_key(indents, indent_inc)
line 99:           let indents[indent_inc] += 1
line 100:           let prev_indent = indent
line 101:         endif
line 102: 
line 103:         if stack[-1] != indent
line 104:           call add(stack, indent)
line 105:         endif
line 106:       endif
line 107:     endfor
line 14:     for line in a:lines
line 15:       let lineno += 1
line 16: 
line 17:       if line =~# '^\s*$'
line 18:         continue
line 19:       endif
line 20: 
line 21:       if line =~# '^\s*/\*'
line 22:         let ccomment = 1
line 23:       endif
line 24:       if ccomment
line 25:         if line =~# '\*/'
line 26:           let ccomment = 0
line 27:         endif
line 28:         continue
line 29:       endif
line 30: 
line 31:       if line =~# '^=\w'
line 32:         let podcomment = 1
line 33:       endif
line 34:       if podcomment
line 35:         if line =~# '^=\%(end\|cut\)\>'
line 36:           let podcomment = 0
line 37:         endif
line 38:         continue
line 39:       endif
line 40: 
line 41:       if triplequote
line 42:         if line =~# '^[^"]*"""[^"]*$'
line 43:           let triplequote = 0
line 44:         endif
line 45:         continue
line 46:       elseif line =~# '^[^"]*"""[^"]*$'
line 47:         let triplequote = 1
line 48:       endif
line 49: 
line 50:       if backtick
line 51:         if line =~# '^[^`]*`[^`]*$'
line 52:           let backtick = 0
line 53:         endif
line 54:         continue
line 55:       elseif &filetype ==# 'go' && line =~# '^[^`]*`[^`]*$'
line 56:         let backtick = 1
line 57:       endif
line 58: 
line 59:       if line =~# '^\s*<\!--'
line 60:         let xmlcomment = 1
line 61:       endif
line 62:       if xmlcomment
line 63:         if line =~# '-->'
line 64:           let xmlcomment = 0
line 65:         endif
line 66:         continue
line 67:       endif
line 68: 
line 69:       " This is correct order because both "<<EOF" and "EOF" matches end
line 70:       if heredoc != ''
line 71:         if line =~# heredoc
line 72:           let heredoc = ''
line 73:         endif
line 74:         continue
line 75:       endif
line 76:       let herematch = matchlist(line, '\C<<\W*\([A-Z]\+\)\s*$')
line 77:       if len(herematch) > 0
line 78:         let heredoc = herematch[1] . '$'
line 79:       endif
line 80: 
line 81:       if line[0] == "\t"
line 82:         let spaces_minus_tabs -= 1
line 83:       else
line 84:         if line[0] == " "
line 85:           let spaces_minus_tabs += 1
line 86:         endif
line 87:         let indent = len(matchstr(line, '^ *'))
line 88:         while stack[-1] > indent
line 89:           call remove(stack, -1)
line 90:         endwhile
line 91: 
line 92:         let indent_inc = indent - stack[-1]
line 93: 
line 94:         if indent_inc == 0 && len(stack) > 1
line 95:           let indent_inc = indent - stack[-2]
line 96:         endif
line 97: 
line 98:         if has_key(indents, indent_inc)
line 99:           let indents[indent_inc] += 1
line 100:           let prev_indent = indent
line 101:         endif
line 102: 
line 103:         if stack[-1] != indent
line 104:           call add(stack, indent)
line 105:         endif
line 106:       endif
line 107:     endfor
line 14:     for line in a:lines
line 15:       let lineno += 1
line 16: 
line 17:       if line =~# '^\s*$'
line 18:         continue
line 19:       endif
line 20: 
line 21:       if line =~# '^\s*/\*'
line 22:         let ccomment = 1
line 23:       endif
line 24:       if ccomment
line 25:         if line =~# '\*/'
line 26:           let ccomment = 0
line 27:         endif
line 28:         continue
line 29:       endif
line 30: 
line 31:       if line =~# '^=\w'
line 32:         let podcomment = 1
line 33:       endif
line 34:       if podcomment
line 35:         if line =~# '^=\%(end\|cut\)\>'
line 36:           let podcomment = 0
line 37:         endif
line 38:         continue
line 39:       endif
line 40: 
line 41:       if triplequote
line 42:         if line =~# '^[^"]*"""[^"]*$'
line 43:           let triplequote = 0
line 44:         endif
line 45:         continue
line 46:       elseif line =~# '^[^"]*"""[^"]*$'
line 47:         let triplequote = 1
line 48:       endif
line 49: 
line 50:       if backtick
line 51:         if line =~# '^[^`]*`[^`]*$'
line 52:           let backtick = 0
line 53:         endif
line 54:         continue
line 55:       elseif &filetype ==# 'go' && line =~# '^[^`]*`[^`]*$'
line 56:         let backtick = 1
line 57:       endif
line 58: 
line 59:       if line =~# '^\s*<\!--'
line 60:         let xmlcomment = 1
line 61:       endif
line 62:       if xmlcomment
line 63:         if line =~# '-->'
line 64:           let xmlcomment = 0
line 65:         endif
line 66:         continue
line 67:       endif
line 68: 
line 69:       " This is correct order because both "<<EOF" and "EOF" matches end
line 70:       if heredoc != ''
line 71:         if line =~# heredoc
line 72:           let heredoc = ''
line 73:         endif
line 74:         continue
line 75:       endif
line 76:       let herematch = matchlist(line, '\C<<\W*\([A-Z]\+\)\s*$')
line 77:       if len(herematch) > 0
line 78:         let heredoc = herematch[1] . '$'
line 79:       endif
line 80: 
line 81:       if line[0] == "\t"
line 82:         let spaces_minus_tabs -= 1
line 83:       else
line 84:         if line[0] == " "
line 85:           let spaces_minus_tabs += 1
line 86:         endif
line 87:         let indent = len(matchstr(line, '^ *'))
line 88:         while stack[-1] > indent
line 89:           call remove(stack, -1)
line 90:         endwhile
line 91: 
line 92:         let indent_inc = indent - stack[-1]
line 93: 
line 94:         if indent_inc == 0 && len(stack) > 1
line 95:           let indent_inc = indent - stack[-2]
line 96:         endif
line 97: 
line 98:         if has_key(indents, indent_inc)
line 99:           let indents[indent_inc] += 1
line 100:           let prev_indent = indent
line 101:         endif
line 102: 
line 103:         if stack[-1] != indent
line 104:           call add(stack, indent)
line 105:         endif
line 106:       endif
line 107:     endfor
line 14:     for line in a:lines
line 15:       let lineno += 1
line 16: 
line 17:       if line =~# '^\s*$'
line 18:         continue
line 19:       endif
line 20: 
line 21:       if line =~# '^\s*/\*'
line 22:         let ccomment = 1
line 23:       endif
line 24:       if ccomment
line 25:         if line =~# '\*/'
line 26:           let ccomment = 0
line 27:         endif
line 28:         continue
line 29:       endif
line 30: 
line 31:       if line =~# '^=\w'
line 32:         let podcomment = 1
line 33:       endif
line 34:       if podcomment
line 35:         if line =~# '^=\%(end\|cut\)\>'
line 36:           let podcomment = 0
line 37:         endif
line 38:         continue
line 39:       endif
line 40: 
line 41:       if triplequote
line 42:         if line =~# '^[^"]*"""[^"]*$'
line 43:           let triplequote = 0
line 44:         endif
line 45:         continue
line 46:       elseif line =~# '^[^"]*"""[^"]*$'
line 47:         let triplequote = 1
line 48:       endif
line 49: 
line 50:       if backtick
line 51:         if line =~# '^[^`]*`[^`]*$'
line 52:           let backtick = 0
line 53:         endif
line 54:         continue
line 55:       elseif &filetype ==# 'go' && line =~# '^[^`]*`[^`]*$'
line 56:         let backtick = 1
line 57:       endif
line 58: 
line 59:       if line =~# '^\s*<\!--'
line 60:         let xmlcomment = 1
line 61:       endif
line 62:       if xmlcomment
line 63:         if line =~# '-->'
line 64:           let xmlcomment = 0
line 65:         endif
line 66:         continue
line 67:       endif
line 68: 
line 69:       " This is correct order because both "<<EOF" and "EOF" matches end
line 70:       if heredoc != ''
line 71:         if line =~# heredoc
line 72:           let heredoc = ''
line 73:         endif
line 74:         continue
line 75:       endif
line 76:       let herematch = matchlist(line, '\C<<\W*\([A-Z]\+\)\s*$')
line 77:       if len(herematch) > 0
line 78:         let heredoc = herematch[1] . '$'
line 79:       endif
line 80: 
line 81:       if line[0] == "\t"
line 82:         let spaces_minus_tabs -= 1
line 83:       else
line 84:         if line[0] == " "
line 85:           let spaces_minus_tabs += 1
line 86:         endif
line 87:         let indent = len(matchstr(line, '^ *'))
line 88:         while stack[-1] > indent
line 89:           call remove(stack, -1)
line 90:         endwhile
line 91: 
line 92:         let indent_inc = indent - stack[-1]
line 93: 
line 94:         if indent_inc == 0 && len(stack) > 1
line 95:           let indent_inc = indent - stack[-2]
line 96:         endif
line 97: 
line 98:         if has_key(indents, indent_inc)
line 99:           let indents[indent_inc] += 1
line 100:           let prev_indent = indent
line 101:         endif
line 102: 
line 103:         if stack[-1] != indent
line 104:           call add(stack, indent)
line 105:         endif
line 106:       endif
line 107:     endfor
line 14:     for line in a:lines
line 15:       let lineno += 1
line 16: 
line 17:       if line =~# '^\s*$'
line 18:         continue
line 19:       endif
line 20: 
line 21:       if line =~# '^\s*/\*'
line 22:         let ccomment = 1
line 23:       endif
line 24:       if ccomment
line 25:         if line =~# '\*/'
line 26:           let ccomment = 0
line 27:         endif
line 28:         continue
line 29:       endif
line 30: 
line 31:       if line =~# '^=\w'
line 32:         let podcomment = 1
line 33:       endif
line 34:       if podcomment
line 35:         if line =~# '^=\%(end\|cut\)\>'
line 36:           let podcomment = 0
line 37:         endif
line 38:         continue
line 39:       endif
line 40: 
line 41:       if triplequote
line 42:         if line =~# '^[^"]*"""[^"]*$'
line 43:           let triplequote = 0
line 44:         endif
line 45:         continue
line 46:       elseif line =~# '^[^"]*"""[^"]*$'
line 47:         let triplequote = 1
line 48:       endif
line 49: 
line 50:       if backtick
line 51:         if line =~# '^[^`]*`[^`]*$'
line 52:           let backtick = 0
line 53:         endif
line 54:         continue
line 55:       elseif &filetype ==# 'go' && line =~# '^[^`]*`[^`]*$'
line 56:         let backtick = 1
line 57:       endif
line 58: 
line 59:       if line =~# '^\s*<\!--'
line 60:         let xmlcomment = 1
line 61:       endif
line 62:       if xmlcomment
line 63:         if line =~# '-->'
line 64:           let xmlcomment = 0
line 65:         endif
line 66:         continue
line 67:       endif
line 68: 
line 69:       " This is correct order because both "<<EOF" and "EOF" matches end
line 70:       if heredoc != ''
line 71:         if line =~# heredoc
line 72:           let heredoc = ''
line 73:         endif
line 74:         continue
line 75:       endif
line 76:       let herematch = matchlist(line, '\C<<\W*\([A-Z]\+\)\s*$')
line 77:       if len(herematch) > 0
line 78:         let heredoc = herematch[1] . '$'
line 79:       endif
line 80: 
line 81:       if line[0] == "\t"
line 82:         let spaces_minus_tabs -= 1
line 83:       else
line 84:         if line[0] == " "
line 85:           let spaces_minus_tabs += 1
line 86:         endif
line 87:         let indent = len(matchstr(line, '^ *'))
line 88:         while stack[-1] > indent
line 89:           call remove(stack, -1)
line 90:         endwhile
line 91: 
line 92:         let indent_inc = indent - stack[-1]
line 93: 
line 94:         if indent_inc == 0 && len(stack) > 1
line 95:           let indent_inc = indent - stack[-2]
line 96:         endif
line 97: 
line 98:         if has_key(indents, indent_inc)
line 99:           let indents[indent_inc] += 1
line 100:           let prev_indent = indent
line 101:         endif
line 102: 
line 103:         if stack[-1] != indent
line 104:           call add(stack, indent)
line 105:         endif
line 106:       endif
line 107:     endfor
line 14:     for line in a:lines
line 15:       let lineno += 1
line 16: 
line 17:       if line =~# '^\s*$'
line 18:         continue
line 19:       endif
line 20: 
line 21:       if line =~# '^\s*/\*'
line 22:         let ccomment = 1
line 23:       endif
line 24:       if ccomment
line 25:         if line =~# '\*/'
line 26:           let ccomment = 0
line 27:         endif
line 28:         continue
line 29:       endif
line 30: 
line 31:       if line =~# '^=\w'
line 32:         let podcomment = 1
line 33:       endif
line 34:       if podcomment
line 35:         if line =~# '^=\%(end\|cut\)\>'
line 36:           let podcomment = 0
line 37:         endif
line 38:         continue
line 39:       endif
line 40: 
line 41:       if triplequote
line 42:         if line =~# '^[^"]*"""[^"]*$'
line 43:           let triplequote = 0
line 44:         endif
line 45:         continue
line 46:       elseif line =~# '^[^"]*"""[^"]*$'
line 47:         let triplequote = 1
line 48:       endif
line 49: 
line 50:       if backtick
line 51:         if line =~# '^[^`]*`[^`]*$'
line 52:           let backtick = 0
line 53:         endif
line 54:         continue
line 55:       elseif &filetype ==# 'go' && line =~# '^[^`]*`[^`]*$'
line 56:         let backtick = 1
line 57:       endif
line 58: 
line 59:       if line =~# '^\s*<\!--'
line 60:         let xmlcomment = 1
line 61:       endif
line 62:       if xmlcomment
line 63:         if line =~# '-->'
line 64:           let xmlcomment = 0
line 65:         endif
line 66:         continue
line 67:       endif
line 68: 
line 69:       " This is correct order because both "<<EOF" and "EOF" matches end
line 70:       if heredoc != ''
line 71:         if line =~# heredoc
line 72:           let heredoc = ''
line 73:         endif
line 74:         continue
line 75:       endif
line 76:       let herematch = matchlist(line, '\C<<\W*\([A-Z]\+\)\s*$')
line 77:       if len(herematch) > 0
line 78:         let heredoc = herematch[1] . '$'
line 79:       endif
line 80: 
line 81:       if line[0] == "\t"
line 82:         let spaces_minus_tabs -= 1
line 83:       else
line 84:         if line[0] == " "
line 85:           let spaces_minus_tabs += 1
line 86:         endif
line 87:         let indent = len(matchstr(line, '^ *'))
line 88:         while stack[-1] > indent
line 89:           call remove(stack, -1)
line 90:         endwhile
line 91: 
line 92:         let indent_inc = indent - stack[-1]
line 93: 
line 94:         if indent_inc == 0 && len(stack) > 1
line 95:           let indent_inc = indent - stack[-2]
line 96:         endif
line 97: 
line 98:         if has_key(indents, indent_inc)
line 99:           let indents[indent_inc] += 1
line 100:           let prev_indent = indent
line 101:         endif
line 102: 
line 103:         if stack[-1] != indent
line 104:           call add(stack, indent)
line 105:         endif
line 106:       endif
line 107:     endfor
line 14:     for line in a:lines
line 15:       let lineno += 1
line 16: 
line 17:       if line =~# '^\s*$'
line 18:         continue
line 19:       endif
line 20: 
line 21:       if line =~# '^\s*/\*'
line 22:         let ccomment = 1
line 23:       endif
line 24:       if ccomment
line 25:         if line =~# '\*/'
line 26:           let ccomment = 0
line 27:         endif
line 28:         continue
line 29:       endif
line 30: 
line 31:       if line =~# '^=\w'
line 32:         let podcomment = 1
line 33:       endif
line 34:       if podcomment
line 35:         if line =~# '^=\%(end\|cut\)\>'
line 36:           let podcomment = 0
line 37:         endif
line 38:         continue
line 39:       endif
line 40: 
line 41:       if triplequote
line 42:         if line =~# '^[^"]*"""[^"]*$'
line 43:           let triplequote = 0
line 44:         endif
line 45:         continue
line 46:       elseif line =~# '^[^"]*"""[^"]*$'
line 47:         let triplequote = 1
line 48:       endif
line 49: 
line 50:       if backtick
line 51:         if line =~# '^[^`]*`[^`]*$'
line 52:           let backtick = 0
line 53:         endif
line 54:         continue
line 55:       elseif &filetype ==# 'go' && line =~# '^[^`]*`[^`]*$'
line 56:         let backtick = 1
line 57:       endif
line 58: 
line 59:       if line =~# '^\s*<\!--'
line 60:         let xmlcomment = 1
line 61:       endif
line 62:       if xmlcomment
line 63:         if line =~# '-->'
line 64:           let xmlcomment = 0
line 65:         endif
line 66:         continue
line 67:       endif
line 68: 
line 69:       " This is correct order because both "<<EOF" and "EOF" matches end
line 70:       if heredoc != ''
line 71:         if line =~# heredoc
line 72:           let heredoc = ''
line 73:         endif
line 74:         continue
line 75:       endif
line 76:       let herematch = matchlist(line, '\C<<\W*\([A-Z]\+\)\s*$')
line 77:       if len(herematch) > 0
line 78:         let heredoc = herematch[1] . '$'
line 79:       endif
line 80: 
line 81:       if line[0] == "\t"
line 82:         let spaces_minus_tabs -= 1
line 83:       else
line 84:         if line[0] == " "
line 85:           let spaces_minus_tabs += 1
line 86:         endif
line 87:         let indent = len(matchstr(line, '^ *'))
line 88:         while stack[-1] > indent
line 89:           call remove(stack, -1)
line 90:         endwhile
line 91: 
line 92:         let indent_inc = indent - stack[-1]
line 93: 
line 94:         if indent_inc == 0 && len(stack) > 1
line 95:           let indent_inc = indent - stack[-2]
line 96:         endif
line 97: 
line 98:         if has_key(indents, indent_inc)
line 99:           let indents[indent_inc] += 1
line 100:           let prev_indent = indent
line 101:         endif
line 102: 
line 103:         if stack[-1] != indent
line 104:           call add(stack, indent)
line 105:         endif
line 106:       endif
line 107:     endfor
line 14:     for line in a:lines
line 15:       let lineno += 1
line 16: 
line 17:       if line =~# '^\s*$'
line 18:         continue
line 19:       endif
line 20: 
line 21:       if line =~# '^\s*/\*'
line 22:         let ccomment = 1
line 23:       endif
line 24:       if ccomment
line 25:         if line =~# '\*/'
line 26:           let ccomment = 0
line 27:         endif
line 28:         continue
line 29:       endif
line 30: 
line 31:       if line =~# '^=\w'
line 32:         let podcomment = 1
line 33:       endif
line 34:       if podcomment
line 35:         if line =~# '^=\%(end\|cut\)\>'
line 36:           let podcomment = 0
line 37:         endif
line 38:         continue
line 39:       endif
line 40: 
line 41:       if triplequote
line 42:         if line =~# '^[^"]*"""[^"]*$'
line 43:           let triplequote = 0
line 44:         endif
line 45:         continue
line 46:       elseif line =~# '^[^"]*"""[^"]*$'
line 47:         let triplequote = 1
line 48:       endif
line 49: 
line 50:       if backtick
line 51:         if line =~# '^[^`]*`[^`]*$'
line 52:           let backtick = 0
line 53:         endif
line 54:         continue
line 55:       elseif &filetype ==# 'go' && line =~# '^[^`]*`[^`]*$'
line 56:         let backtick = 1
line 57:       endif
line 58: 
line 59:       if line =~# '^\s*<\!--'
line 60:         let xmlcomment = 1
line 61:       endif
line 62:       if xmlcomment
line 63:         if line =~# '-->'
line 64:           let xmlcomment = 0
line 65:         endif
line 66:         continue
line 67:       endif
line 68: 
line 69:       " This is correct order because both "<<EOF" and "EOF" matches end
line 70:       if heredoc != ''
line 71:         if line =~# heredoc
line 72:           let heredoc = ''
line 73:         endif
line 74:         continue
line 75:       endif
line 76:       let herematch = matchlist(line, '\C<<\W*\([A-Z]\+\)\s*$')
line 77:       if len(herematch) > 0
line 78:         let heredoc = herematch[1] . '$'
line 79:       endif
line 80: 
line 81:       if line[0] == "\t"
line 82:         let spaces_minus_tabs -= 1
line 83:       else
line 84:         if line[0] == " "
line 85:           let spaces_minus_tabs += 1
line 86:         endif
line 87:         let indent = len(matchstr(line, '^ *'))
line 88:         while stack[-1] > indent
line 89:           call remove(stack, -1)
line 90:         endwhile
line 91: 
line 92:         let indent_inc = indent - stack[-1]
line 93: 
line 94:         if indent_inc == 0 && len(stack) > 1
line 95:           let indent_inc = indent - stack[-2]
line 96:         endif
line 97: 
line 98:         if has_key(indents, indent_inc)
line 99:           let indents[indent_inc] += 1
line 100:           let prev_indent = indent
line 101:         endif
line 102: 
line 103:         if stack[-1] != indent
line 104:           call add(stack, indent)
line 105:         endif
line 106:       endif
line 107:     endfor
line 14:     for line in a:lines
line 15:       let lineno += 1
line 16: 
line 17:       if line =~# '^\s*$'
line 18:         continue
line 19:       endif
line 20: 
line 21:       if line =~# '^\s*/\*'
line 22:         let ccomment = 1
line 23:       endif
line 24:       if ccomment
line 25:         if line =~# '\*/'
line 26:           let ccomment = 0
line 27:         endif
line 28:         continue
line 29:       endif
line 30: 
line 31:       if line =~# '^=\w'
line 32:         let podcomment = 1
line 33:       endif
line 34:       if podcomment
line 35:         if line =~# '^=\%(end\|cut\)\>'
line 36:           let podcomment = 0
line 37:         endif
line 38:         continue
line 39:       endif
line 40: 
line 41:       if triplequote
line 42:         if line =~# '^[^"]*"""[^"]*$'
line 43:           let triplequote = 0
line 44:         endif
line 45:         continue
line 46:       elseif line =~# '^[^"]*"""[^"]*$'
line 47:         let triplequote = 1
line 48:       endif
line 49: 
line 50:       if backtick
line 51:         if line =~# '^[^`]*`[^`]*$'
line 52:           let backtick = 0
line 53:         endif
line 54:         continue
line 55:       elseif &filetype ==# 'go' && line =~# '^[^`]*`[^`]*$'
line 56:         let backtick = 1
line 57:       endif
line 58: 
line 59:       if line =~# '^\s*<\!--'
line 60:         let xmlcomment = 1
line 61:       endif
line 62:       if xmlcomment
line 63:         if line =~# '-->'
line 64:           let xmlcomment = 0
line 65:         endif
line 66:         continue
line 67:       endif
line 68: 
line 69:       " This is correct order because both "<<EOF" and "EOF" matches end
line 70:       if heredoc != ''
line 71:         if line =~# heredoc
line 72:           let heredoc = ''
line 73:         endif
line 74:         continue
line 75:       endif
line 76:       let herematch = matchlist(line, '\C<<\W*\([A-Z]\+\)\s*$')
line 77:       if len(herematch) > 0
line 78:         let heredoc = herematch[1] . '$'
line 79:       endif
line 80: 
line 81:       if line[0] == "\t"
line 82:         let spaces_minus_tabs -= 1
line 83:       else
line 84:         if line[0] == " "
line 85:           let spaces_minus_tabs += 1
line 86:         endif
line 87:         let indent = len(matchstr(line, '^ *'))
line 88:         while stack[-1] > indent
line 89:           call remove(stack, -1)
line 90:         endwhile
line 91: 
line 92:         let indent_inc = indent - stack[-1]
line 93: 
line 94:         if indent_inc == 0 && len(stack) > 1
line 95:           let indent_inc = indent - stack[-2]
line 96:         endif
line 97: 
line 98:         if has_key(indents, indent_inc)
line 99:           let indents[indent_inc] += 1
line 100:           let prev_indent = indent
line 101:         endif
line 102: 
line 103:         if stack[-1] != indent
line 104:           call add(stack, indent)
line 105:         endif
line 106:       endif
line 107:     endfor
line 14:     for line in a:lines
line 15:       let lineno += 1
line 16: 
line 17:       if line =~# '^\s*$'
line 18:         continue
line 19:       endif
line 20: 
line 21:       if line =~# '^\s*/\*'
line 22:         let ccomment = 1
line 23:       endif
line 24:       if ccomment
line 25:         if line =~# '\*/'
line 26:           let ccomment = 0
line 27:         endif
line 28:         continue
line 29:       endif
line 30: 
line 31:       if line =~# '^=\w'
line 32:         let podcomment = 1
line 33:       endif
line 34:       if podcomment
line 35:         if line =~# '^=\%(end\|cut\)\>'
line 36:           let podcomment = 0
line 37:         endif
line 38:         continue
line 39:       endif
line 40: 
line 41:       if triplequote
line 42:         if line =~# '^[^"]*"""[^"]*$'
line 43:           let triplequote = 0
line 44:         endif
line 45:         continue
line 46:       elseif line =~# '^[^"]*"""[^"]*$'
line 47:         let triplequote = 1
line 48:       endif
line 49: 
line 50:       if backtick
line 51:         if line =~# '^[^`]*`[^`]*$'
line 52:           let backtick = 0
line 53:         endif
line 54:         continue
line 55:       elseif &filetype ==# 'go' && line =~# '^[^`]*`[^`]*$'
line 56:         let backtick = 1
line 57:       endif
line 58: 
line 59:       if line =~# '^\s*<\!--'
line 60:         let xmlcomment = 1
line 61:       endif
line 62:       if xmlcomment
line 63:         if line =~# '-->'
line 64:           let xmlcomment = 0
line 65:         endif
line 66:         continue
line 67:       endif
line 68: 
line 69:       " This is correct order because both "<<EOF" and "EOF" matches end
line 70:       if heredoc != ''
line 71:         if line =~# heredoc
line 72:           let heredoc = ''
line 73:         endif
line 74:         continue
line 75:       endif
line 76:       let herematch = matchlist(line, '\C<<\W*\([A-Z]\+\)\s*$')
line 77:       if len(herematch) > 0
line 78:         let heredoc = herematch[1] . '$'
line 79:       endif
line 80: 
line 81:       if line[0] == "\t"
line 82:         let spaces_minus_tabs -= 1
line 83:       else
line 84:         if line[0] == " "
line 85:           let spaces_minus_tabs += 1
line 86:         endif
line 87:         let indent = len(matchstr(line, '^ *'))
line 88:         while stack[-1] > indent
line 89:           call remove(stack, -1)
line 90:         endwhile
line 91: 
line 92:         let indent_inc = indent - stack[-1]
line 93: 
line 94:         if indent_inc == 0 && len(stack) > 1
line 95:           let indent_inc = indent - stack[-2]
line 96:         endif
line 97: 
line 98:         if has_key(indents, indent_inc)
line 99:           let indents[indent_inc] += 1
line 100:           let prev_indent = indent
line 101:         endif
line 102: 
line 103:         if stack[-1] != indent
line 104:           call add(stack, indent)
line 105:         endif
line 106:       endif
line 107:     endfor
line 14:     for line in a:lines
line 15:       let lineno += 1
line 16: 
line 17:       if line =~# '^\s*$'
line 18:         continue
line 19:       endif
line 20: 
line 21:       if line =~# '^\s*/\*'
line 22:         let ccomment = 1
line 23:       endif
line 24:       if ccomment
line 25:         if line =~# '\*/'
line 26:           let ccomment = 0
line 27:         endif
line 28:         continue
line 29:       endif
line 30: 
line 31:       if line =~# '^=\w'
line 32:         let podcomment = 1
line 33:       endif
line 34:       if podcomment
line 35:         if line =~# '^=\%(end\|cut\)\>'
line 36:           let podcomment = 0
line 37:         endif
line 38:         continue
line 39:       endif
line 40: 
line 41:       if triplequote
line 42:         if line =~# '^[^"]*"""[^"]*$'
line 43:           let triplequote = 0
line 44:         endif
line 45:         continue
line 46:       elseif line =~# '^[^"]*"""[^"]*$'
line 47:         let triplequote = 1
line 48:       endif
line 49: 
line 50:       if backtick
line 51:         if line =~# '^[^`]*`[^`]*$'
line 52:           let backtick = 0
line 53:         endif
line 54:         continue
line 55:       elseif &filetype ==# 'go' && line =~# '^[^`]*`[^`]*$'
line 56:         let backtick = 1
line 57:       endif
line 58: 
line 59:       if line =~# '^\s*<\!--'
line 60:         let xmlcomment = 1
line 61:       endif
line 62:       if xmlcomment
line 63:         if line =~# '-->'
line 64:           let xmlcomment = 0
line 65:         endif
line 66:         continue
line 67:       endif
line 68: 
line 69:       " This is correct order because both "<<EOF" and "EOF" matches end
line 70:       if heredoc != ''
line 71:         if line =~# heredoc
line 72:           let heredoc = ''
line 73:         endif
line 74:         continue
line 75:       endif
line 76:       let herematch = matchlist(line, '\C<<\W*\([A-Z]\+\)\s*$')
line 77:       if len(herematch) > 0
line 78:         let heredoc = herematch[1] . '$'
line 79:       endif
line 80: 
line 81:       if line[0] == "\t"
line 82:         let spaces_minus_tabs -= 1
line 83:       else
line 84:         if line[0] == " "
line 85:           let spaces_minus_tabs += 1
line 86:         endif
line 87:         let indent = len(matchstr(line, '^ *'))
line 88:         while stack[-1] > indent
line 89:           call remove(stack, -1)
line 90:         endwhile
line 91: 
line 92:         let indent_inc = indent - stack[-1]
line 93: 
line 94:         if indent_inc == 0 && len(stack) > 1
line 95:           let indent_inc = indent - stack[-2]
line 96:         endif
line 97: 
line 98:         if has_key(indents, indent_inc)
line 99:           let indents[indent_inc] += 1
line 100:           let prev_indent = indent
line 101:         endif
line 102: 
line 103:         if stack[-1] != indent
line 104:           call add(stack, indent)
line 105:         endif
line 106:       endif
line 107:     endfor
line 14:     for line in a:lines
line 15:       let lineno += 1
line 16: 
line 17:       if line =~# '^\s*$'
line 18:         continue
line 19:       endif
line 20: 
line 21:       if line =~# '^\s*/\*'
line 22:         let ccomment = 1
line 23:       endif
line 24:       if ccomment
line 25:         if line =~# '\*/'
line 26:           let ccomment = 0
line 27:         endif
line 28:         continue
line 29:       endif
line 30: 
line 31:       if line =~# '^=\w'
line 32:         let podcomment = 1
line 33:       endif
line 34:       if podcomment
line 35:         if line =~# '^=\%(end\|cut\)\>'
line 36:           let podcomment = 0
line 37:         endif
line 38:         continue
line 39:       endif
line 40: 
line 41:       if triplequote
line 42:         if line =~# '^[^"]*"""[^"]*$'
line 43:           let triplequote = 0
line 44:         endif
line 45:         continue
line 46:       elseif line =~# '^[^"]*"""[^"]*$'
line 47:         let triplequote = 1
line 48:       endif
line 49: 
line 50:       if backtick
line 51:         if line =~# '^[^`]*`[^`]*$'
line 52:           let backtick = 0
line 53:         endif
line 54:         continue
line 55:       elseif &filetype ==# 'go' && line =~# '^[^`]*`[^`]*$'
line 56:         let backtick = 1
line 57:       endif
line 58: 
line 59:       if line =~# '^\s*<\!--'
line 60:         let xmlcomment = 1
line 61:       endif
line 62:       if xmlcomment
line 63:         if line =~# '-->'
line 64:           let xmlcomment = 0
line 65:         endif
line 66:         continue
line 67:       endif
line 68: 
line 69:       " This is correct order because both "<<EOF" and "EOF" matches end
line 70:       if heredoc != ''
line 71:         if line =~# heredoc
line 72:           let heredoc = ''
line 73:         endif
line 74:         continue
line 75:       endif
line 76:       let herematch = matchlist(line, '\C<<\W*\([A-Z]\+\)\s*$')
line 77:       if len(herematch) > 0
line 78:         let heredoc = herematch[1] . '$'
line 79:       endif
line 80: 
line 81:       if line[0] == "\t"
line 82:         let spaces_minus_tabs -= 1
line 83:       else
line 84:         if line[0] == " "
line 85:           let spaces_minus_tabs += 1
line 86:         endif
line 87:         let indent = len(matchstr(line, '^ *'))
line 88:         while stack[-1] > indent
line 89:           call remove(stack, -1)
line 90:         endwhile
line 91: 
line 92:         let indent_inc = indent - stack[-1]
line 93: 
line 94:         if indent_inc == 0 && len(stack) > 1
line 95:           let indent_inc = indent - stack[-2]
line 96:         endif
line 97: 
line 98:         if has_key(indents, indent_inc)
line 99:           let indents[indent_inc] += 1
line 100:           let prev_indent = indent
line 101:         endif
line 102: 
line 103:         if stack[-1] != indent
line 104:           call add(stack, indent)
line 105:         endif
line 106:       endif
line 107:     endfor
line 14:     for line in a:lines
line 15:       let lineno += 1
line 16: 
line 17:       if line =~# '^\s*$'
line 18:         continue
line 19:       endif
line 20: 
line 21:       if line =~# '^\s*/\*'
line 22:         let ccomment = 1
line 23:       endif
line 24:       if ccomment
line 25:         if line =~# '\*/'
line 26:           let ccomment = 0
line 27:         endif
line 28:         continue
line 29:       endif
line 30: 
line 31:       if line =~# '^=\w'
line 32:         let podcomment = 1
line 33:       endif
line 34:       if podcomment
line 35:         if line =~# '^=\%(end\|cut\)\>'
line 36:           let podcomment = 0
line 37:         endif
line 38:         continue
line 39:       endif
line 40: 
line 41:       if triplequote
line 42:         if line =~# '^[^"]*"""[^"]*$'
line 43:           let triplequote = 0
line 44:         endif
line 45:         continue
line 46:       elseif line =~# '^[^"]*"""[^"]*$'
line 47:         let triplequote = 1
line 48:       endif
line 49: 
line 50:       if backtick
line 51:         if line =~# '^[^`]*`[^`]*$'
line 52:           let backtick = 0
line 53:         endif
line 54:         continue
line 55:       elseif &filetype ==# 'go' && line =~# '^[^`]*`[^`]*$'
line 56:         let backtick = 1
line 57:       endif
line 58: 
line 59:       if line =~# '^\s*<\!--'
line 60:         let xmlcomment = 1
line 61:       endif
line 62:       if xmlcomment
line 63:         if line =~# '-->'
line 64:           let xmlcomment = 0
line 65:         endif
line 66:         continue
line 67:       endif
line 68: 
line 69:       " This is correct order because both "<<EOF" and "EOF" matches end
line 70:       if heredoc != ''
line 71:         if line =~# heredoc
line 72:           let heredoc = ''
line 73:         endif
line 74:         continue
line 75:       endif
line 76:       let herematch = matchlist(line, '\C<<\W*\([A-Z]\+\)\s*$')
line 77:       if len(herematch) > 0
line 78:         let heredoc = herematch[1] . '$'
line 79:       endif
line 80: 
line 81:       if line[0] == "\t"
line 82:         let spaces_minus_tabs -= 1
line 83:       else
line 84:         if line[0] == " "
line 85:           let spaces_minus_tabs += 1
line 86:         endif
line 87:         let indent = len(matchstr(line, '^ *'))
line 88:         while stack[-1] > indent
line 89:           call remove(stack, -1)
line 90:         endwhile
line 91: 
line 92:         let indent_inc = indent - stack[-1]
line 93: 
line 94:         if indent_inc == 0 && len(stack) > 1
line 95:           let indent_inc = indent - stack[-2]
line 96:         endif
line 97: 
line 98:         if has_key(indents, indent_inc)
line 99:           let indents[indent_inc] += 1
line 100:           let prev_indent = indent
line 101:         endif
line 102: 
line 103:         if stack[-1] != indent
line 104:           call add(stack, indent)
line 105:         endif
line 106:       endif
line 107:     endfor
line 14:     for line in a:lines
line 15:       let lineno += 1
line 16: 
line 17:       if line =~# '^\s*$'
line 18:         continue
line 19:       endif
line 20: 
line 21:       if line =~# '^\s*/\*'
line 22:         let ccomment = 1
line 23:       endif
line 24:       if ccomment
line 25:         if line =~# '\*/'
line 26:           let ccomment = 0
line 27:         endif
line 28:         continue
line 29:       endif
line 30: 
line 31:       if line =~# '^=\w'
line 32:         let podcomment = 1
line 33:       endif
line 34:       if podcomment
line 35:         if line =~# '^=\%(end\|cut\)\>'
line 36:           let podcomment = 0
line 37:         endif
line 38:         continue
line 39:       endif
line 40: 
line 41:       if triplequote
line 42:         if line =~# '^[^"]*"""[^"]*$'
line 43:           let triplequote = 0
line 44:         endif
line 45:         continue
line 46:       elseif line =~# '^[^"]*"""[^"]*$'
line 47:         let triplequote = 1
line 48:       endif
line 49: 
line 50:       if backtick
line 51:         if line =~# '^[^`]*`[^`]*$'
line 52:           let backtick = 0
line 53:         endif
line 54:         continue
line 55:       elseif &filetype ==# 'go' && line =~# '^[^`]*`[^`]*$'
line 56:         let backtick = 1
line 57:       endif
line 58: 
line 59:       if line =~# '^\s*<\!--'
line 60:         let xmlcomment = 1
line 61:       endif
line 62:       if xmlcomment
line 63:         if line =~# '-->'
line 64:           let xmlcomment = 0
line 65:         endif
line 66:         continue
line 67:       endif
line 68: 
line 69:       " This is correct order because both "<<EOF" and "EOF" matches end
line 70:       if heredoc != ''
line 71:         if line =~# heredoc
line 72:           let heredoc = ''
line 73:         endif
line 74:         continue
line 75:       endif
line 76:       let herematch = matchlist(line, '\C<<\W*\([A-Z]\+\)\s*$')
line 77:       if len(herematch) > 0
line 78:         let heredoc = herematch[1] . '$'
line 79:       endif
line 80: 
line 81:       if line[0] == "\t"
line 82:         let spaces_minus_tabs -= 1
line 83:       else
line 84:         if line[0] == " "
line 85:           let spaces_minus_tabs += 1
line 86:         endif
line 87:         let indent = len(matchstr(line, '^ *'))
line 88:         while stack[-1] > indent
line 89:           call remove(stack, -1)
line 90:         endwhile
line 91: 
line 92:         let indent_inc = indent - stack[-1]
line 93: 
line 94:         if indent_inc == 0 && len(stack) > 1
line 95:           let indent_inc = indent - stack[-2]
line 96:         endif
line 97: 
line 98:         if has_key(indents, indent_inc)
line 99:           let indents[indent_inc] += 1
line 100:           let prev_indent = indent
line 101:         endif
line 102: 
line 103:         if stack[-1] != indent
line 104:           call add(stack, indent)
line 105:         endif
line 106:       endif
line 107:     endfor
line 14:     for line in a:lines
line 15:       let lineno += 1
line 16: 
line 17:       if line =~# '^\s*$'
line 18:         continue
line 19:       endif
line 20: 
line 21:       if line =~# '^\s*/\*'
line 22:         let ccomment = 1
line 23:       endif
line 24:       if ccomment
line 25:         if line =~# '\*/'
line 26:           let ccomment = 0
line 27:         endif
line 28:         continue
line 29:       endif
line 30: 
line 31:       if line =~# '^=\w'
line 32:         let podcomment = 1
line 33:       endif
line 34:       if podcomment
line 35:         if line =~# '^=\%(end\|cut\)\>'
line 36:           let podcomment = 0
line 37:         endif
line 38:         continue
line 39:       endif
line 40: 
line 41:       if triplequote
line 42:         if line =~# '^[^"]*"""[^"]*$'
line 43:           let triplequote = 0
line 44:         endif
line 45:         continue
line 46:       elseif line =~# '^[^"]*"""[^"]*$'
line 47:         let triplequote = 1
line 48:       endif
line 49: 
line 50:       if backtick
line 51:         if line =~# '^[^`]*`[^`]*$'
line 52:           let backtick = 0
line 53:         endif
line 54:         continue
line 55:       elseif &filetype ==# 'go' && line =~# '^[^`]*`[^`]*$'
line 56:         let backtick = 1
line 57:       endif
line 58: 
line 59:       if line =~# '^\s*<\!--'
line 60:         let xmlcomment = 1
line 61:       endif
line 62:       if xmlcomment
line 63:         if line =~# '-->'
line 64:           let xmlcomment = 0
line 65:         endif
line 66:         continue
line 67:       endif
line 68: 
line 69:       " This is correct order because both "<<EOF" and "EOF" matches end
line 70:       if heredoc != ''
line 71:         if line =~# heredoc
line 72:           let heredoc = ''
line 73:         endif
line 74:         continue
line 75:       endif
line 76:       let herematch = matchlist(line, '\C<<\W*\([A-Z]\+\)\s*$')
line 77:       if len(herematch) > 0
line 78:         let heredoc = herematch[1] . '$'
line 79:       endif
line 80: 
line 81:       if line[0] == "\t"
line 82:         let spaces_minus_tabs -= 1
line 83:       else
line 84:         if line[0] == " "
line 85:           let spaces_minus_tabs += 1
line 86:         endif
line 87:         let indent = len(matchstr(line, '^ *'))
line 88:         while stack[-1] > indent
line 89:           call remove(stack, -1)
line 90:         endwhile
line 91: 
line 92:         let indent_inc = indent - stack[-1]
line 93: 
line 94:         if indent_inc == 0 && len(stack) > 1
line 95:           let indent_inc = indent - stack[-2]
line 96:         endif
line 97: 
line 98:         if has_key(indents, indent_inc)
line 99:           let indents[indent_inc] += 1
line 100:           let prev_indent = indent
line 101:         endif
line 102: 
line 103:         if stack[-1] != indent
line 104:           call add(stack, indent)
line 105:         endif
line 106:       endif
line 107:     endfor
line 14:     for line in a:lines
line 15:       let lineno += 1
line 16: 
line 17:       if line =~# '^\s*$'
line 18:         continue
line 19:       endif
line 20: 
line 21:       if line =~# '^\s*/\*'
line 22:         let ccomment = 1
line 23:       endif
line 24:       if ccomment
line 25:         if line =~# '\*/'
line 26:           let ccomment = 0
line 27:         endif
line 28:         continue
line 29:       endif
line 30: 
line 31:       if line =~# '^=\w'
line 32:         let podcomment = 1
line 33:       endif
line 34:       if podcomment
line 35:         if line =~# '^=\%(end\|cut\)\>'
line 36:           let podcomment = 0
line 37:         endif
line 38:         continue
line 39:       endif
line 40: 
line 41:       if triplequote
line 42:         if line =~# '^[^"]*"""[^"]*$'
line 43:           let triplequote = 0
line 44:         endif
line 45:         continue
line 46:       elseif line =~# '^[^"]*"""[^"]*$'
line 47:         let triplequote = 1
line 48:       endif
line 49: 
line 50:       if backtick
line 51:         if line =~# '^[^`]*`[^`]*$'
line 52:           let backtick = 0
line 53:         endif
line 54:         continue
line 55:       elseif &filetype ==# 'go' && line =~# '^[^`]*`[^`]*$'
line 56:         let backtick = 1
line 57:       endif
line 58: 
line 59:       if line =~# '^\s*<\!--'
line 60:         let xmlcomment = 1
line 61:       endif
line 62:       if xmlcomment
line 63:         if line =~# '-->'
line 64:           let xmlcomment = 0
line 65:         endif
line 66:         continue
line 67:       endif
line 68: 
line 69:       " This is correct order because both "<<EOF" and "EOF" matches end
line 70:       if heredoc != ''
line 71:         if line =~# heredoc
line 72:           let heredoc = ''
line 73:         endif
line 74:         continue
line 75:       endif
line 76:       let herematch = matchlist(line, '\C<<\W*\([A-Z]\+\)\s*$')
line 77:       if len(herematch) > 0
line 78:         let heredoc = herematch[1] . '$'
line 79:       endif
line 80: 
line 81:       if line[0] == "\t"
line 82:         let spaces_minus_tabs -= 1
line 83:       else
line 84:         if line[0] == " "
line 85:           let spaces_minus_tabs += 1
line 86:         endif
line 87:         let indent = len(matchstr(line, '^ *'))
line 88:         while stack[-1] > indent
line 89:           call remove(stack, -1)
line 90:         endwhile
line 91: 
line 92:         let indent_inc = indent - stack[-1]
line 93: 
line 94:         if indent_inc == 0 && len(stack) > 1
line 95:           let indent_inc = indent - stack[-2]
line 96:         endif
line 97: 
line 98:         if has_key(indents, indent_inc)
line 99:           let indents[indent_inc] += 1
line 100:           let prev_indent = indent
line 101:         endif
line 102: 
line 103:         if stack[-1] != indent
line 104:           call add(stack, indent)
line 105:         endif
line 106:       endif
line 107:     endfor
line 14:     for line in a:lines
line 15:       let lineno += 1
line 16: 
line 17:       if line =~# '^\s*$'
line 18:         continue
line 19:       endif
line 20: 
line 21:       if line =~# '^\s*/\*'
line 22:         let ccomment = 1
line 23:       endif
line 24:       if ccomment
line 25:         if line =~# '\*/'
line 26:           let ccomment = 0
line 27:         endif
line 28:         continue
line 29:       endif
line 30: 
line 31:       if line =~# '^=\w'
line 32:         let podcomment = 1
line 33:       endif
line 34:       if podcomment
line 35:         if line =~# '^=\%(end\|cut\)\>'
line 36:           let podcomment = 0
line 37:         endif
line 38:         continue
line 39:       endif
line 40: 
line 41:       if triplequote
line 42:         if line =~# '^[^"]*"""[^"]*$'
line 43:           let triplequote = 0
line 44:         endif
line 45:         continue
line 46:       elseif line =~# '^[^"]*"""[^"]*$'
line 47:         let triplequote = 1
line 48:       endif
line 49: 
line 50:       if backtick
line 51:         if line =~# '^[^`]*`[^`]*$'
line 52:           let backtick = 0
line 53:         endif
line 54:         continue
line 55:       elseif &filetype ==# 'go' && line =~# '^[^`]*`[^`]*$'
line 56:         let backtick = 1
line 57:       endif
line 58: 
line 59:       if line =~# '^\s*<\!--'
line 60:         let xmlcomment = 1
line 61:       endif
line 62:       if xmlcomment
line 63:         if line =~# '-->'
line 64:           let xmlcomment = 0
line 65:         endif
line 66:         continue
line 67:       endif
line 68: 
line 69:       " This is correct order because both "<<EOF" and "EOF" matches end
line 70:       if heredoc != ''
line 71:         if line =~# heredoc
line 72:           let heredoc = ''
line 73:         endif
line 74:         continue
line 75:       endif
line 76:       let herematch = matchlist(line, '\C<<\W*\([A-Z]\+\)\s*$')
line 77:       if len(herematch) > 0
line 78:         let heredoc = herematch[1] . '$'
line 79:       endif
line 80: 
line 81:       if line[0] == "\t"
line 82:         let spaces_minus_tabs -= 1
line 83:       else
line 84:         if line[0] == " "
line 85:           let spaces_minus_tabs += 1
line 86:         endif
line 87:         let indent = len(matchstr(line, '^ *'))
line 88:         while stack[-1] > indent
line 89:           call remove(stack, -1)
line 90:         endwhile
line 91: 
line 92:         let indent_inc = indent - stack[-1]
line 93: 
line 94:         if indent_inc == 0 && len(stack) > 1
line 95:           let indent_inc = indent - stack[-2]
line 96:         endif
line 97: 
line 98:         if has_key(indents, indent_inc)
line 99:           let indents[indent_inc] += 1
line 100:           let prev_indent = indent
line 101:         endif
line 102: 
line 103:         if stack[-1] != indent
line 104:           call add(stack, indent)
line 105:         endif
line 106:       endif
line 107:     endfor
line 14:     for line in a:lines
line 15:       let lineno += 1
line 16: 
line 17:       if line =~# '^\s*$'
line 18:         continue
line 19:       endif
line 20: 
line 21:       if line =~# '^\s*/\*'
line 22:         let ccomment = 1
line 23:       endif
line 24:       if ccomment
line 25:         if line =~# '\*/'
line 26:           let ccomment = 0
line 27:         endif
line 28:         continue
line 29:       endif
line 30: 
line 31:       if line =~# '^=\w'
line 32:         let podcomment = 1
line 33:       endif
line 34:       if podcomment
line 35:         if line =~# '^=\%(end\|cut\)\>'
line 36:           let podcomment = 0
line 37:         endif
line 38:         continue
line 39:       endif
line 40: 
line 41:       if triplequote
line 42:         if line =~# '^[^"]*"""[^"]*$'
line 43:           let triplequote = 0
line 44:         endif
line 45:         continue
line 46:       elseif line =~# '^[^"]*"""[^"]*$'
line 47:         let triplequote = 1
line 48:       endif
line 49: 
line 50:       if backtick
line 51:         if line =~# '^[^`]*`[^`]*$'
line 52:           let backtick = 0
line 53:         endif
line 54:         continue
line 55:       elseif &filetype ==# 'go' && line =~# '^[^`]*`[^`]*$'
line 56:         let backtick = 1
line 57:       endif
line 58: 
line 59:       if line =~# '^\s*<\!--'
line 60:         let xmlcomment = 1
line 61:       endif
line 62:       if xmlcomment
line 63:         if line =~# '-->'
line 64:           let xmlcomment = 0
line 65:         endif
line 66:         continue
line 67:       endif
line 68: 
line 69:       " This is correct order because both "<<EOF" and "EOF" matches end
line 70:       if heredoc != ''
line 71:         if line =~# heredoc
line 72:           let heredoc = ''
line 73:         endif
line 74:         continue
line 75:       endif
line 76:       let herematch = matchlist(line, '\C<<\W*\([A-Z]\+\)\s*$')
line 77:       if len(herematch) > 0
line 78:         let heredoc = herematch[1] . '$'
line 79:       endif
line 80: 
line 81:       if line[0] == "\t"
line 82:         let spaces_minus_tabs -= 1
line 83:       else
line 84:         if line[0] == " "
line 85:           let spaces_minus_tabs += 1
line 86:         endif
line 87:         let indent = len(matchstr(line, '^ *'))
line 88:         while stack[-1] > indent
line 89:           call remove(stack, -1)
line 90:         endwhile
line 88:         while stack[-1] > indent
line 89:           call remove(stack, -1)
line 90:         endwhile
line 91: 
line 92:         let indent_inc = indent - stack[-1]
line 93: 
line 94:         if indent_inc == 0 && len(stack) > 1
line 95:           let indent_inc = indent - stack[-2]
line 96:         endif
line 97: 
line 98:         if has_key(indents, indent_inc)
line 99:           let indents[indent_inc] += 1
line 100:           let prev_indent = indent
line 101:         endif
line 102: 
line 103:         if stack[-1] != indent
line 104:           call add(stack, indent)
line 105:         endif
line 106:       endif
line 107:     endfor
line 14:     for line in a:lines
line 15:       let lineno += 1
line 16: 
line 17:       if line =~# '^\s*$'
line 18:         continue
line 19:       endif
line 20: 
line 21:       if line =~# '^\s*/\*'
line 22:         let ccomment = 1
line 23:       endif
line 24:       if ccomment
line 25:         if line =~# '\*/'
line 26:           let ccomment = 0
line 27:         endif
line 28:         continue
line 29:       endif
line 30: 
line 31:       if line =~# '^=\w'
line 32:         let podcomment = 1
line 33:       endif
line 34:       if podcomment
line 35:         if line =~# '^=\%(end\|cut\)\>'
line 36:           let podcomment = 0
line 37:         endif
line 38:         continue
line 39:       endif
line 40: 
line 41:       if triplequote
line 42:         if line =~# '^[^"]*"""[^"]*$'
line 43:           let triplequote = 0
line 44:         endif
line 45:         continue
line 46:       elseif line =~# '^[^"]*"""[^"]*$'
line 47:         let triplequote = 1
line 48:       endif
line 49: 
line 50:       if backtick
line 51:         if line =~# '^[^`]*`[^`]*$'
line 52:           let backtick = 0
line 53:         endif
line 54:         continue
line 55:       elseif &filetype ==# 'go' && line =~# '^[^`]*`[^`]*$'
line 56:         let backtick = 1
line 57:       endif
line 58: 
line 59:       if line =~# '^\s*<\!--'
line 60:         let xmlcomment = 1
line 61:       endif
line 62:       if xmlcomment
line 63:         if line =~# '-->'
line 64:           let xmlcomment = 0
line 65:         endif
line 66:         continue
line 67:       endif
line 68: 
line 69:       " This is correct order because both "<<EOF" and "EOF" matches end
line 70:       if heredoc != ''
line 71:         if line =~# heredoc
line 72:           let heredoc = ''
line 73:         endif
line 74:         continue
line 75:       endif
line 76:       let herematch = matchlist(line, '\C<<\W*\([A-Z]\+\)\s*$')
line 77:       if len(herematch) > 0
line 78:         let heredoc = herematch[1] . '$'
line 79:       endif
line 80: 
line 81:       if line[0] == "\t"
line 82:         let spaces_minus_tabs -= 1
line 83:       else
line 84:         if line[0] == " "
line 85:           let spaces_minus_tabs += 1
line 86:         endif
line 87:         let indent = len(matchstr(line, '^ *'))
line 88:         while stack[-1] > indent
line 89:           call remove(stack, -1)
line 90:         endwhile
line 88:         while stack[-1] > indent
line 89:           call remove(stack, -1)
line 90:         endwhile
line 91: 
line 92:         let indent_inc = indent - stack[-1]
line 93: 
line 94:         if indent_inc == 0 && len(stack) > 1
line 95:           let indent_inc = indent - stack[-2]
line 96:         endif
line 97: 
line 98:         if has_key(indents, indent_inc)
line 99:           let indents[indent_inc] += 1
line 100:           let prev_indent = indent
line 101:         endif
line 102: 
line 103:         if stack[-1] != indent
line 104:           call add(stack, indent)
line 105:         endif
line 106:       endif
line 107:     endfor
line 14:     for line in a:lines
line 15:       let lineno += 1
line 16: 
line 17:       if line =~# '^\s*$'
line 18:         continue
line 14:     for line in a:lines
line 15:       let lineno += 1
line 16: 
line 17:       if line =~# '^\s*$'
line 18:         continue
line 19:       endif
line 20: 
line 21:       if line =~# '^\s*/\*'
line 22:         let ccomment = 1
line 23:       endif
line 24:       if ccomment
line 25:         if line =~# '\*/'
line 26:           let ccomment = 0
line 27:         endif
line 28:         continue
line 29:       endif
line 30: 
line 31:       if line =~# '^=\w'
line 32:         let podcomment = 1
line 33:       endif
line 34:       if podcomment
line 35:         if line =~# '^=\%(end\|cut\)\>'
line 36:           let podcomment = 0
line 37:         endif
line 38:         continue
line 39:       endif
line 40: 
line 41:       if triplequote
line 42:         if line =~# '^[^"]*"""[^"]*$'
line 43:           let triplequote = 0
line 44:         endif
line 45:         continue
line 46:       elseif line =~# '^[^"]*"""[^"]*$'
line 47:         let triplequote = 1
line 48:       endif
line 49: 
line 50:       if backtick
line 51:         if line =~# '^[^`]*`[^`]*$'
line 52:           let backtick = 0
line 53:         endif
line 54:         continue
line 55:       elseif &filetype ==# 'go' && line =~# '^[^`]*`[^`]*$'
line 56:         let backtick = 1
line 57:       endif
line 58: 
line 59:       if line =~# '^\s*<\!--'
line 60:         let xmlcomment = 1
line 61:       endif
line 62:       if xmlcomment
line 63:         if line =~# '-->'
line 64:           let xmlcomment = 0
line 65:         endif
line 66:         continue
line 67:       endif
line 68: 
line 69:       " This is correct order because both "<<EOF" and "EOF" matches end
line 70:       if heredoc != ''
line 71:         if line =~# heredoc
line 72:           let heredoc = ''
line 73:         endif
line 74:         continue
line 75:       endif
line 76:       let herematch = matchlist(line, '\C<<\W*\([A-Z]\+\)\s*$')
line 77:       if len(herematch) > 0
line 78:         let heredoc = herematch[1] . '$'
line 79:       endif
line 80: 
line 81:       if line[0] == "\t"
line 82:         let spaces_minus_tabs -= 1
line 83:       else
line 84:         if line[0] == " "
line 85:           let spaces_minus_tabs += 1
line 86:         endif
line 87:         let indent = len(matchstr(line, '^ *'))
line 88:         while stack[-1] > indent
line 89:           call remove(stack, -1)
line 90:         endwhile
line 91: 
line 92:         let indent_inc = indent - stack[-1]
line 93: 
line 94:         if indent_inc == 0 && len(stack) > 1
line 95:           let indent_inc = indent - stack[-2]
line 96:         endif
line 97: 
line 98:         if has_key(indents, indent_inc)
line 99:           let indents[indent_inc] += 1
line 100:           let prev_indent = indent
line 101:         endif
line 102: 
line 103:         if stack[-1] != indent
line 104:           call add(stack, indent)
line 105:         endif
line 106:       endif
line 107:     endfor
line 14:     for line in a:lines
line 15:       let lineno += 1
line 16: 
line 17:       if line =~# '^\s*$'
line 18:         continue
line 19:       endif
line 20: 
line 21:       if line =~# '^\s*/\*'
line 22:         let ccomment = 1
line 23:       endif
line 24:       if ccomment
line 25:         if line =~# '\*/'
line 26:           let ccomment = 0
line 27:         endif
line 28:         continue
line 29:       endif
line 30: 
line 31:       if line =~# '^=\w'
line 32:         let podcomment = 1
line 33:       endif
line 34:       if podcomment
line 35:         if line =~# '^=\%(end\|cut\)\>'
line 36:           let podcomment = 0
line 37:         endif
line 38:         continue
line 39:       endif
line 40: 
line 41:       if triplequote
line 42:         if line =~# '^[^"]*"""[^"]*$'
line 43:           let triplequote = 0
line 44:         endif
line 45:         continue
line 46:       elseif line =~# '^[^"]*"""[^"]*$'
line 47:         let triplequote = 1
line 48:       endif
line 49: 
line 50:       if backtick
line 51:         if line =~# '^[^`]*`[^`]*$'
line 52:           let backtick = 0
line 53:         endif
line 54:         continue
line 55:       elseif &filetype ==# 'go' && line =~# '^[^`]*`[^`]*$'
line 56:         let backtick = 1
line 57:       endif
line 58: 
line 59:       if line =~# '^\s*<\!--'
line 60:         let xmlcomment = 1
line 61:       endif
line 62:       if xmlcomment
line 63:         if line =~# '-->'
line 64:           let xmlcomment = 0
line 65:         endif
line 66:         continue
line 67:       endif
line 68: 
line 69:       " This is correct order because both "<<EOF" and "EOF" matches end
line 70:       if heredoc != ''
line 71:         if line =~# heredoc
line 72:           let heredoc = ''
line 73:         endif
line 74:         continue
line 75:       endif
line 76:       let herematch = matchlist(line, '\C<<\W*\([A-Z]\+\)\s*$')
line 77:       if len(herematch) > 0
line 78:         let heredoc = herematch[1] . '$'
line 79:       endif
line 80: 
line 81:       if line[0] == "\t"
line 82:         let spaces_minus_tabs -= 1
line 83:       else
line 84:         if line[0] == " "
line 85:           let spaces_minus_tabs += 1
line 86:         endif
line 87:         let indent = len(matchstr(line, '^ *'))
line 88:         while stack[-1] > indent
line 89:           call remove(stack, -1)
line 90:         endwhile
line 91: 
line 92:         let indent_inc = indent - stack[-1]
line 93: 
line 94:         if indent_inc == 0 && len(stack) > 1
line 95:           let indent_inc = indent - stack[-2]
line 96:         endif
line 97: 
line 98:         if has_key(indents, indent_inc)
line 99:           let indents[indent_inc] += 1
line 100:           let prev_indent = indent
line 101:         endif
line 102: 
line 103:         if stack[-1] != indent
line 104:           call add(stack, indent)
line 105:         endif
line 106:       endif
line 107:     endfor
line 14:     for line in a:lines
line 15:       let lineno += 1
line 16: 
line 17:       if line =~# '^\s*$'
line 18:         continue
line 19:       endif
line 20: 
line 21:       if line =~# '^\s*/\*'
line 22:         let ccomment = 1
line 23:       endif
line 24:       if ccomment
line 25:         if line =~# '\*/'
line 26:           let ccomment = 0
line 27:         endif
line 28:         continue
line 29:       endif
line 30: 
line 31:       if line =~# '^=\w'
line 32:         let podcomment = 1
line 33:       endif
line 34:       if podcomment
line 35:         if line =~# '^=\%(end\|cut\)\>'
line 36:           let podcomment = 0
line 37:         endif
line 38:         continue
line 39:       endif
line 40: 
line 41:       if triplequote
line 42:         if line =~# '^[^"]*"""[^"]*$'
line 43:           let triplequote = 0
line 44:         endif
line 45:         continue
line 46:       elseif line =~# '^[^"]*"""[^"]*$'
line 47:         let triplequote = 1
line 48:       endif
line 49: 
line 50:       if backtick
line 51:         if line =~# '^[^`]*`[^`]*$'
line 52:           let backtick = 0
line 53:         endif
line 54:         continue
line 55:       elseif &filetype ==# 'go' && line =~# '^[^`]*`[^`]*$'
line 56:         let backtick = 1
line 57:       endif
line 58: 
line 59:       if line =~# '^\s*<\!--'
line 60:         let xmlcomment = 1
line 61:       endif
line 62:       if xmlcomment
line 63:         if line =~# '-->'
line 64:           let xmlcomment = 0
line 65:         endif
line 66:         continue
line 67:       endif
line 68: 
line 69:       " This is correct order because both "<<EOF" and "EOF" matches end
line 70:       if heredoc != ''
line 71:         if line =~# heredoc
line 72:           let heredoc = ''
line 73:         endif
line 74:         continue
line 75:       endif
line 76:       let herematch = matchlist(line, '\C<<\W*\([A-Z]\+\)\s*$')
line 77:       if len(herematch) > 0
line 78:         let heredoc = herematch[1] . '$'
line 79:       endif
line 80: 
line 81:       if line[0] == "\t"
line 82:         let spaces_minus_tabs -= 1
line 83:       else
line 84:         if line[0] == " "
line 85:           let spaces_minus_tabs += 1
line 86:         endif
line 87:         let indent = len(matchstr(line, '^ *'))
line 88:         while stack[-1] > indent
line 89:           call remove(stack, -1)
line 90:         endwhile
line 91: 
line 92:         let indent_inc = indent - stack[-1]
line 93: 
line 94:         if indent_inc == 0 && len(stack) > 1
line 95:           let indent_inc = indent - stack[-2]
line 96:         endif
line 97: 
line 98:         if has_key(indents, indent_inc)
line 99:           let indents[indent_inc] += 1
line 100:           let prev_indent = indent
line 101:         endif
line 102: 
line 103:         if stack[-1] != indent
line 104:           call add(stack, indent)
line 105:         endif
line 106:       endif
line 107:     endfor
line 14:     for line in a:lines
line 15:       let lineno += 1
line 16: 
line 17:       if line =~# '^\s*$'
line 18:         continue
line 19:       endif
line 20: 
line 21:       if line =~# '^\s*/\*'
line 22:         let ccomment = 1
line 23:       endif
line 24:       if ccomment
line 25:         if line =~# '\*/'
line 26:           let ccomment = 0
line 27:         endif
line 28:         continue
line 29:       endif
line 30: 
line 31:       if line =~# '^=\w'
line 32:         let podcomment = 1
line 33:       endif
line 34:       if podcomment
line 35:         if line =~# '^=\%(end\|cut\)\>'
line 36:           let podcomment = 0
line 37:         endif
line 38:         continue
line 39:       endif
line 40: 
line 41:       if triplequote
line 42:         if line =~# '^[^"]*"""[^"]*$'
line 43:           let triplequote = 0
line 44:         endif
line 45:         continue
line 46:       elseif line =~# '^[^"]*"""[^"]*$'
line 47:         let triplequote = 1
line 48:       endif
line 49: 
line 50:       if backtick
line 51:         if line =~# '^[^`]*`[^`]*$'
line 52:           let backtick = 0
line 53:         endif
line 54:         continue
line 55:       elseif &filetype ==# 'go' && line =~# '^[^`]*`[^`]*$'
line 56:         let backtick = 1
line 57:       endif
line 58: 
line 59:       if line =~# '^\s*<\!--'
line 60:         let xmlcomment = 1
line 61:       endif
line 62:       if xmlcomment
line 63:         if line =~# '-->'
line 64:           let xmlcomment = 0
line 65:         endif
line 66:         continue
line 67:       endif
line 68: 
line 69:       " This is correct order because both "<<EOF" and "EOF" matches end
line 70:       if heredoc != ''
line 71:         if line =~# heredoc
line 72:           let heredoc = ''
line 73:         endif
line 74:         continue
line 75:       endif
line 76:       let herematch = matchlist(line, '\C<<\W*\([A-Z]\+\)\s*$')
line 77:       if len(herematch) > 0
line 78:         let heredoc = herematch[1] . '$'
line 79:       endif
line 80: 
line 81:       if line[0] == "\t"
line 82:         let spaces_minus_tabs -= 1
line 83:       else
line 84:         if line[0] == " "
line 85:           let spaces_minus_tabs += 1
line 86:         endif
line 87:         let indent = len(matchstr(line, '^ *'))
line 88:         while stack[-1] > indent
line 89:           call remove(stack, -1)
line 90:         endwhile
line 91: 
line 92:         let indent_inc = indent - stack[-1]
line 93: 
line 94:         if indent_inc == 0 && len(stack) > 1
line 95:           let indent_inc = indent - stack[-2]
line 96:         endif
line 97: 
line 98:         if has_key(indents, indent_inc)
line 99:           let indents[indent_inc] += 1
line 100:           let prev_indent = indent
line 101:         endif
line 102: 
line 103:         if stack[-1] != indent
line 104:           call add(stack, indent)
line 105:         endif
line 106:       endif
line 107:     endfor
line 14:     for line in a:lines
line 15:       let lineno += 1
line 16: 
line 17:       if line =~# '^\s*$'
line 18:         continue
line 19:       endif
line 20: 
line 21:       if line =~# '^\s*/\*'
line 22:         let ccomment = 1
line 23:       endif
line 24:       if ccomment
line 25:         if line =~# '\*/'
line 26:           let ccomment = 0
line 27:         endif
line 28:         continue
line 29:       endif
line 30: 
line 31:       if line =~# '^=\w'
line 32:         let podcomment = 1
line 33:       endif
line 34:       if podcomment
line 35:         if line =~# '^=\%(end\|cut\)\>'
line 36:           let podcomment = 0
line 37:         endif
line 38:         continue
line 39:       endif
line 40: 
line 41:       if triplequote
line 42:         if line =~# '^[^"]*"""[^"]*$'
line 43:           let triplequote = 0
line 44:         endif
line 45:         continue
line 46:       elseif line =~# '^[^"]*"""[^"]*$'
line 47:         let triplequote = 1
line 48:       endif
line 49: 
line 50:       if backtick
line 51:         if line =~# '^[^`]*`[^`]*$'
line 52:           let backtick = 0
line 53:         endif
line 54:         continue
line 55:       elseif &filetype ==# 'go' && line =~# '^[^`]*`[^`]*$'
line 56:         let backtick = 1
line 57:       endif
line 58: 
line 59:       if line =~# '^\s*<\!--'
line 60:         let xmlcomment = 1
line 61:       endif
line 62:       if xmlcomment
line 63:         if line =~# '-->'
line 64:           let xmlcomment = 0
line 65:         endif
line 66:         continue
line 67:       endif
line 68: 
line 69:       " This is correct order because both "<<EOF" and "EOF" matches end
line 70:       if heredoc != ''
line 71:         if line =~# heredoc
line 72:           let heredoc = ''
line 73:         endif
line 74:         continue
line 75:       endif
line 76:       let herematch = matchlist(line, '\C<<\W*\([A-Z]\+\)\s*$')
line 77:       if len(herematch) > 0
line 78:         let heredoc = herematch[1] . '$'
line 79:       endif
line 80: 
line 81:       if line[0] == "\t"
line 82:         let spaces_minus_tabs -= 1
line 83:       else
line 84:         if line[0] == " "
line 85:           let spaces_minus_tabs += 1
line 86:         endif
line 87:         let indent = len(matchstr(line, '^ *'))
line 88:         while stack[-1] > indent
line 89:           call remove(stack, -1)
line 90:         endwhile
line 88:         while stack[-1] > indent
line 89:           call remove(stack, -1)
line 90:         endwhile
line 91: 
line 92:         let indent_inc = indent - stack[-1]
line 93: 
line 94:         if indent_inc == 0 && len(stack) > 1
line 95:           let indent_inc = indent - stack[-2]
line 96:         endif
line 97: 
line 98:         if has_key(indents, indent_inc)
line 99:           let indents[indent_inc] += 1
line 100:           let prev_indent = indent
line 101:         endif
line 102: 
line 103:         if stack[-1] != indent
line 104:           call add(stack, indent)
line 105:         endif
line 106:       endif
line 107:     endfor
line 14:     for line in a:lines
line 15:       let lineno += 1
line 16: 
line 17:       if line =~# '^\s*$'
line 18:         continue
line 14:     for line in a:lines
line 15:       let lineno += 1
line 16: 
line 17:       if line =~# '^\s*$'
line 18:         continue
line 19:       endif
line 20: 
line 21:       if line =~# '^\s*/\*'
line 22:         let ccomment = 1
line 23:       endif
line 24:       if ccomment
line 25:         if line =~# '\*/'
line 26:           let ccomment = 0
line 27:         endif
line 28:         continue
line 29:       endif
line 30: 
line 31:       if line =~# '^=\w'
line 32:         let podcomment = 1
line 33:       endif
line 34:       if podcomment
line 35:         if line =~# '^=\%(end\|cut\)\>'
line 36:           let podcomment = 0
line 37:         endif
line 38:         continue
line 39:       endif
line 40: 
line 41:       if triplequote
line 42:         if line =~# '^[^"]*"""[^"]*$'
line 43:           let triplequote = 0
line 44:         endif
line 45:         continue
line 46:       elseif line =~# '^[^"]*"""[^"]*$'
line 47:         let triplequote = 1
line 48:       endif
line 49: 
line 50:       if backtick
line 51:         if line =~# '^[^`]*`[^`]*$'
line 52:           let backtick = 0
line 53:         endif
line 54:         continue
line 55:       elseif &filetype ==# 'go' && line =~# '^[^`]*`[^`]*$'
line 56:         let backtick = 1
line 57:       endif
line 58: 
line 59:       if line =~# '^\s*<\!--'
line 60:         let xmlcomment = 1
line 61:       endif
line 62:       if xmlcomment
line 63:         if line =~# '-->'
line 64:           let xmlcomment = 0
line 65:         endif
line 66:         continue
line 67:       endif
line 68: 
line 69:       " This is correct order because both "<<EOF" and "EOF" matches end
line 70:       if heredoc != ''
line 71:         if line =~# heredoc
line 72:           let heredoc = ''
line 73:         endif
line 74:         continue
line 75:       endif
line 76:       let herematch = matchlist(line, '\C<<\W*\([A-Z]\+\)\s*$')
line 77:       if len(herematch) > 0
line 78:         let heredoc = herematch[1] . '$'
line 79:       endif
line 80: 
line 81:       if line[0] == "\t"
line 82:         let spaces_minus_tabs -= 1
line 83:       else
line 84:         if line[0] == " "
line 85:           let spaces_minus_tabs += 1
line 86:         endif
line 87:         let indent = len(matchstr(line, '^ *'))
line 88:         while stack[-1] > indent
line 89:           call remove(stack, -1)
line 90:         endwhile
line 91: 
line 92:         let indent_inc = indent - stack[-1]
line 93: 
line 94:         if indent_inc == 0 && len(stack) > 1
line 95:           let indent_inc = indent - stack[-2]
line 96:         endif
line 97: 
line 98:         if has_key(indents, indent_inc)
line 99:           let indents[indent_inc] += 1
line 100:           let prev_indent = indent
line 101:         endif
line 102: 
line 103:         if stack[-1] != indent
line 104:           call add(stack, indent)
line 105:         endif
line 106:       endif
line 107:     endfor
line 14:     for line in a:lines
line 15:       let lineno += 1
line 16: 
line 17:       if line =~# '^\s*$'
line 18:         continue
line 19:       endif
line 20: 
line 21:       if line =~# '^\s*/\*'
line 22:         let ccomment = 1
line 23:       endif
line 24:       if ccomment
line 25:         if line =~# '\*/'
line 26:           let ccomment = 0
line 27:         endif
line 28:         continue
line 29:       endif
line 30: 
line 31:       if line =~# '^=\w'
line 32:         let podcomment = 1
line 33:       endif
line 34:       if podcomment
line 35:         if line =~# '^=\%(end\|cut\)\>'
line 36:           let podcomment = 0
line 37:         endif
line 38:         continue
line 39:       endif
line 40: 
line 41:       if triplequote
line 42:         if line =~# '^[^"]*"""[^"]*$'
line 43:           let triplequote = 0
line 44:         endif
line 45:         continue
line 46:       elseif line =~# '^[^"]*"""[^"]*$'
line 47:         let triplequote = 1
line 48:       endif
line 49: 
line 50:       if backtick
line 51:         if line =~# '^[^`]*`[^`]*$'
line 52:           let backtick = 0
line 53:         endif
line 54:         continue
line 55:       elseif &filetype ==# 'go' && line =~# '^[^`]*`[^`]*$'
line 56:         let backtick = 1
line 57:       endif
line 58: 
line 59:       if line =~# '^\s*<\!--'
line 60:         let xmlcomment = 1
line 61:       endif
line 62:       if xmlcomment
line 63:         if line =~# '-->'
line 64:           let xmlcomment = 0
line 65:         endif
line 66:         continue
line 67:       endif
line 68: 
line 69:       " This is correct order because both "<<EOF" and "EOF" matches end
line 70:       if heredoc != ''
line 71:         if line =~# heredoc
line 72:           let heredoc = ''
line 73:         endif
line 74:         continue
line 75:       endif
line 76:       let herematch = matchlist(line, '\C<<\W*\([A-Z]\+\)\s*$')
line 77:       if len(herematch) > 0
line 78:         let heredoc = herematch[1] . '$'
line 79:       endif
line 80: 
line 81:       if line[0] == "\t"
line 82:         let spaces_minus_tabs -= 1
line 83:       else
line 84:         if line[0] == " "
line 85:           let spaces_minus_tabs += 1
line 86:         endif
line 87:         let indent = len(matchstr(line, '^ *'))
line 88:         while stack[-1] > indent
line 89:           call remove(stack, -1)
line 90:         endwhile
line 91: 
line 92:         let indent_inc = indent - stack[-1]
line 93: 
line 94:         if indent_inc == 0 && len(stack) > 1
line 95:           let indent_inc = indent - stack[-2]
line 96:         endif
line 97: 
line 98:         if has_key(indents, indent_inc)
line 99:           let indents[indent_inc] += 1
line 100:           let prev_indent = indent
line 101:         endif
line 102: 
line 103:         if stack[-1] != indent
line 104:           call add(stack, indent)
line 105:         endif
line 106:       endif
line 107:     endfor
line 14:     for line in a:lines
line 15:       let lineno += 1
line 16: 
line 17:       if line =~# '^\s*$'
line 18:         continue
line 19:       endif
line 20: 
line 21:       if line =~# '^\s*/\*'
line 22:         let ccomment = 1
line 23:       endif
line 24:       if ccomment
line 25:         if line =~# '\*/'
line 26:           let ccomment = 0
line 27:         endif
line 28:         continue
line 29:       endif
line 30: 
line 31:       if line =~# '^=\w'
line 32:         let podcomment = 1
line 33:       endif
line 34:       if podcomment
line 35:         if line =~# '^=\%(end\|cut\)\>'
line 36:           let podcomment = 0
line 37:         endif
line 38:         continue
line 39:       endif
line 40: 
line 41:       if triplequote
line 42:         if line =~# '^[^"]*"""[^"]*$'
line 43:           let triplequote = 0
line 44:         endif
line 45:         continue
line 46:       elseif line =~# '^[^"]*"""[^"]*$'
line 47:         let triplequote = 1
line 48:       endif
line 49: 
line 50:       if backtick
line 51:         if line =~# '^[^`]*`[^`]*$'
line 52:           let backtick = 0
line 53:         endif
line 54:         continue
line 55:       elseif &filetype ==# 'go' && line =~# '^[^`]*`[^`]*$'
line 56:         let backtick = 1
line 57:       endif
line 58: 
line 59:       if line =~# '^\s*<\!--'
line 60:         let xmlcomment = 1
line 61:       endif
line 62:       if xmlcomment
line 63:         if line =~# '-->'
line 64:           let xmlcomment = 0
line 65:         endif
line 66:         continue
line 67:       endif
line 68: 
line 69:       " This is correct order because both "<<EOF" and "EOF" matches end
line 70:       if heredoc != ''
line 71:         if line =~# heredoc
line 72:           let heredoc = ''
line 73:         endif
line 74:         continue
line 75:       endif
line 76:       let herematch = matchlist(line, '\C<<\W*\([A-Z]\+\)\s*$')
line 77:       if len(herematch) > 0
line 78:         let heredoc = herematch[1] . '$'
line 79:       endif
line 80: 
line 81:       if line[0] == "\t"
line 82:         let spaces_minus_tabs -= 1
line 83:       else
line 84:         if line[0] == " "
line 85:           let spaces_minus_tabs += 1
line 86:         endif
line 87:         let indent = len(matchstr(line, '^ *'))
line 88:         while stack[-1] > indent
line 89:           call remove(stack, -1)
line 90:         endwhile
line 91: 
line 92:         let indent_inc = indent - stack[-1]
line 93: 
line 94:         if indent_inc == 0 && len(stack) > 1
line 95:           let indent_inc = indent - stack[-2]
line 96:         endif
line 97: 
line 98:         if has_key(indents, indent_inc)
line 99:           let indents[indent_inc] += 1
line 100:           let prev_indent = indent
line 101:         endif
line 102: 
line 103:         if stack[-1] != indent
line 104:           call add(stack, indent)
line 105:         endif
line 106:       endif
line 107:     endfor
line 14:     for line in a:lines
line 15:       let lineno += 1
line 16: 
line 17:       if line =~# '^\s*$'
line 18:         continue
line 19:       endif
line 20: 
line 21:       if line =~# '^\s*/\*'
line 22:         let ccomment = 1
line 23:       endif
line 24:       if ccomment
line 25:         if line =~# '\*/'
line 26:           let ccomment = 0
line 27:         endif
line 28:         continue
line 29:       endif
line 30: 
line 31:       if line =~# '^=\w'
line 32:         let podcomment = 1
line 33:       endif
line 34:       if podcomment
line 35:         if line =~# '^=\%(end\|cut\)\>'
line 36:           let podcomment = 0
line 37:         endif
line 38:         continue
line 39:       endif
line 40: 
line 41:       if triplequote
line 42:         if line =~# '^[^"]*"""[^"]*$'
line 43:           let triplequote = 0
line 44:         endif
line 45:         continue
line 46:       elseif line =~# '^[^"]*"""[^"]*$'
line 47:         let triplequote = 1
line 48:       endif
line 49: 
line 50:       if backtick
line 51:         if line =~# '^[^`]*`[^`]*$'
line 52:           let backtick = 0
line 53:         endif
line 54:         continue
line 55:       elseif &filetype ==# 'go' && line =~# '^[^`]*`[^`]*$'
line 56:         let backtick = 1
line 57:       endif
line 58: 
line 59:       if line =~# '^\s*<\!--'
line 60:         let xmlcomment = 1
line 61:       endif
line 62:       if xmlcomment
line 63:         if line =~# '-->'
line 64:           let xmlcomment = 0
line 65:         endif
line 66:         continue
line 67:       endif
line 68: 
line 69:       " This is correct order because both "<<EOF" and "EOF" matches end
line 70:       if heredoc != ''
line 71:         if line =~# heredoc
line 72:           let heredoc = ''
line 73:         endif
line 74:         continue
line 75:       endif
line 76:       let herematch = matchlist(line, '\C<<\W*\([A-Z]\+\)\s*$')
line 77:       if len(herematch) > 0
line 78:         let heredoc = herematch[1] . '$'
line 79:       endif
line 80: 
line 81:       if line[0] == "\t"
line 82:         let spaces_minus_tabs -= 1
line 83:       else
line 84:         if line[0] == " "
line 85:           let spaces_minus_tabs += 1
line 86:         endif
line 87:         let indent = len(matchstr(line, '^ *'))
line 88:         while stack[-1] > indent
line 89:           call remove(stack, -1)
line 90:         endwhile
line 91: 
line 92:         let indent_inc = indent - stack[-1]
line 93: 
line 94:         if indent_inc == 0 && len(stack) > 1
line 95:           let indent_inc = indent - stack[-2]
line 96:         endif
line 97: 
line 98:         if has_key(indents, indent_inc)
line 99:           let indents[indent_inc] += 1
line 100:           let prev_indent = indent
line 101:         endif
line 102: 
line 103:         if stack[-1] != indent
line 104:           call add(stack, indent)
line 105:         endif
line 106:       endif
line 107:     endfor
line 14:     for line in a:lines
line 15:       let lineno += 1
line 16: 
line 17:       if line =~# '^\s*$'
line 18:         continue
line 19:       endif
line 20: 
line 21:       if line =~# '^\s*/\*'
line 22:         let ccomment = 1
line 23:       endif
line 24:       if ccomment
line 25:         if line =~# '\*/'
line 26:           let ccomment = 0
line 27:         endif
line 28:         continue
line 29:       endif
line 30: 
line 31:       if line =~# '^=\w'
line 32:         let podcomment = 1
line 33:       endif
line 34:       if podcomment
line 35:         if line =~# '^=\%(end\|cut\)\>'
line 36:           let podcomment = 0
line 37:         endif
line 38:         continue
line 39:       endif
line 40: 
line 41:       if triplequote
line 42:         if line =~# '^[^"]*"""[^"]*$'
line 43:           let triplequote = 0
line 44:         endif
line 45:         continue
line 46:       elseif line =~# '^[^"]*"""[^"]*$'
line 47:         let triplequote = 1
line 48:       endif
line 49: 
line 50:       if backtick
line 51:         if line =~# '^[^`]*`[^`]*$'
line 52:           let backtick = 0
line 53:         endif
line 54:         continue
line 55:       elseif &filetype ==# 'go' && line =~# '^[^`]*`[^`]*$'
line 56:         let backtick = 1
line 57:       endif
line 58: 
line 59:       if line =~# '^\s*<\!--'
line 60:         let xmlcomment = 1
line 61:       endif
line 62:       if xmlcomment
line 63:         if line =~# '-->'
line 64:           let xmlcomment = 0
line 65:         endif
line 66:         continue
line 67:       endif
line 68: 
line 69:       " This is correct order because both "<<EOF" and "EOF" matches end
line 70:       if heredoc != ''
line 71:         if line =~# heredoc
line 72:           let heredoc = ''
line 73:         endif
line 74:         continue
line 75:       endif
line 76:       let herematch = matchlist(line, '\C<<\W*\([A-Z]\+\)\s*$')
line 77:       if len(herematch) > 0
line 78:         let heredoc = herematch[1] . '$'
line 79:       endif
line 80: 
line 81:       if line[0] == "\t"
line 82:         let spaces_minus_tabs -= 1
line 83:       else
line 84:         if line[0] == " "
line 85:           let spaces_minus_tabs += 1
line 86:         endif
line 87:         let indent = len(matchstr(line, '^ *'))
line 88:         while stack[-1] > indent
line 89:           call remove(stack, -1)
line 90:         endwhile
line 91: 
line 92:         let indent_inc = indent - stack[-1]
line 93: 
line 94:         if indent_inc == 0 && len(stack) > 1
line 95:           let indent_inc = indent - stack[-2]
line 96:         endif
line 97: 
line 98:         if has_key(indents, indent_inc)
line 99:           let indents[indent_inc] += 1
line 100:           let prev_indent = indent
line 101:         endif
line 102: 
line 103:         if stack[-1] != indent
line 104:           call add(stack, indent)
line 105:         endif
line 106:       endif
line 107:     endfor
line 14:     for line in a:lines
line 15:       let lineno += 1
line 16: 
line 17:       if line =~# '^\s*$'
line 18:         continue
line 19:       endif
line 20: 
line 21:       if line =~# '^\s*/\*'
line 22:         let ccomment = 1
line 23:       endif
line 24:       if ccomment
line 25:         if line =~# '\*/'
line 26:           let ccomment = 0
line 27:         endif
line 28:         continue
line 29:       endif
line 30: 
line 31:       if line =~# '^=\w'
line 32:         let podcomment = 1
line 33:       endif
line 34:       if podcomment
line 35:         if line =~# '^=\%(end\|cut\)\>'
line 36:           let podcomment = 0
line 37:         endif
line 38:         continue
line 39:       endif
line 40: 
line 41:       if triplequote
line 42:         if line =~# '^[^"]*"""[^"]*$'
line 43:           let triplequote = 0
line 44:         endif
line 45:         continue
line 46:       elseif line =~# '^[^"]*"""[^"]*$'
line 47:         let triplequote = 1
line 48:       endif
line 49: 
line 50:       if backtick
line 51:         if line =~# '^[^`]*`[^`]*$'
line 52:           let backtick = 0
line 53:         endif
line 54:         continue
line 55:       elseif &filetype ==# 'go' && line =~# '^[^`]*`[^`]*$'
line 56:         let backtick = 1
line 57:       endif
line 58: 
line 59:       if line =~# '^\s*<\!--'
line 60:         let xmlcomment = 1
line 61:       endif
line 62:       if xmlcomment
line 63:         if line =~# '-->'
line 64:           let xmlcomment = 0
line 65:         endif
line 66:         continue
line 67:       endif
line 68: 
line 69:       " This is correct order because both "<<EOF" and "EOF" matches end
line 70:       if heredoc != ''
line 71:         if line =~# heredoc
line 72:           let heredoc = ''
line 73:         endif
line 74:         continue
line 75:       endif
line 76:       let herematch = matchlist(line, '\C<<\W*\([A-Z]\+\)\s*$')
line 77:       if len(herematch) > 0
line 78:         let heredoc = herematch[1] . '$'
line 79:       endif
line 80: 
line 81:       if line[0] == "\t"
line 82:         let spaces_minus_tabs -= 1
line 83:       else
line 84:         if line[0] == " "
line 85:           let spaces_minus_tabs += 1
line 86:         endif
line 87:         let indent = len(matchstr(line, '^ *'))
line 88:         while stack[-1] > indent
line 89:           call remove(stack, -1)
line 90:         endwhile
line 91: 
line 92:         let indent_inc = indent - stack[-1]
line 93: 
line 94:         if indent_inc == 0 && len(stack) > 1
line 95:           let indent_inc = indent - stack[-2]
line 96:         endif
line 97: 
line 98:         if has_key(indents, indent_inc)
line 99:           let indents[indent_inc] += 1
line 100:           let prev_indent = indent
line 101:         endif
line 102: 
line 103:         if stack[-1] != indent
line 104:           call add(stack, indent)
line 105:         endif
line 106:       endif
line 107:     endfor
line 14:     for line in a:lines
line 15:       let lineno += 1
line 16: 
line 17:       if line =~# '^\s*$'
line 18:         continue
line 19:       endif
line 20: 
line 21:       if line =~# '^\s*/\*'
line 22:         let ccomment = 1
line 23:       endif
line 24:       if ccomment
line 25:         if line =~# '\*/'
line 26:           let ccomment = 0
line 27:         endif
line 28:         continue
line 29:       endif
line 30: 
line 31:       if line =~# '^=\w'
line 32:         let podcomment = 1
line 33:       endif
line 34:       if podcomment
line 35:         if line =~# '^=\%(end\|cut\)\>'
line 36:           let podcomment = 0
line 37:         endif
line 38:         continue
line 39:       endif
line 40: 
line 41:       if triplequote
line 42:         if line =~# '^[^"]*"""[^"]*$'
line 43:           let triplequote = 0
line 44:         endif
line 45:         continue
line 46:       elseif line =~# '^[^"]*"""[^"]*$'
line 47:         let triplequote = 1
line 48:       endif
line 49: 
line 50:       if backtick
line 51:         if line =~# '^[^`]*`[^`]*$'
line 52:           let backtick = 0
line 53:         endif
line 54:         continue
line 55:       elseif &filetype ==# 'go' && line =~# '^[^`]*`[^`]*$'
line 56:         let backtick = 1
line 57:       endif
line 58: 
line 59:       if line =~# '^\s*<\!--'
line 60:         let xmlcomment = 1
line 61:       endif
line 62:       if xmlcomment
line 63:         if line =~# '-->'
line 64:           let xmlcomment = 0
line 65:         endif
line 66:         continue
line 67:       endif
line 68: 
line 69:       " This is correct order because both "<<EOF" and "EOF" matches end
line 70:       if heredoc != ''
line 71:         if line =~# heredoc
line 72:           let heredoc = ''
line 73:         endif
line 74:         continue
line 75:       endif
line 76:       let herematch = matchlist(line, '\C<<\W*\([A-Z]\+\)\s*$')
line 77:       if len(herematch) > 0
line 78:         let heredoc = herematch[1] . '$'
line 79:       endif
line 80: 
line 81:       if line[0] == "\t"
line 82:         let spaces_minus_tabs -= 1
line 83:       else
line 84:         if line[0] == " "
line 85:           let spaces_minus_tabs += 1
line 86:         endif
line 87:         let indent = len(matchstr(line, '^ *'))
line 88:         while stack[-1] > indent
line 89:           call remove(stack, -1)
line 90:         endwhile
line 91: 
line 92:         let indent_inc = indent - stack[-1]
line 93: 
line 94:         if indent_inc == 0 && len(stack) > 1
line 95:           let indent_inc = indent - stack[-2]
line 96:         endif
line 97: 
line 98:         if has_key(indents, indent_inc)
line 99:           let indents[indent_inc] += 1
line 100:           let prev_indent = indent
line 101:         endif
line 102: 
line 103:         if stack[-1] != indent
line 104:           call add(stack, indent)
line 105:         endif
line 106:       endif
line 107:     endfor
line 14:     for line in a:lines
line 15:       let lineno += 1
line 16: 
line 17:       if line =~# '^\s*$'
line 18:         continue
line 19:       endif
line 20: 
line 21:       if line =~# '^\s*/\*'
line 22:         let ccomment = 1
line 23:       endif
line 24:       if ccomment
line 25:         if line =~# '\*/'
line 26:           let ccomment = 0
line 27:         endif
line 28:         continue
line 29:       endif
line 30: 
line 31:       if line =~# '^=\w'
line 32:         let podcomment = 1
line 33:       endif
line 34:       if podcomment
line 35:         if line =~# '^=\%(end\|cut\)\>'
line 36:           let podcomment = 0
line 37:         endif
line 38:         continue
line 39:       endif
line 40: 
line 41:       if triplequote
line 42:         if line =~# '^[^"]*"""[^"]*$'
line 43:           let triplequote = 0
line 44:         endif
line 45:         continue
line 46:       elseif line =~# '^[^"]*"""[^"]*$'
line 47:         let triplequote = 1
line 48:       endif
line 49: 
line 50:       if backtick
line 51:         if line =~# '^[^`]*`[^`]*$'
line 52:           let backtick = 0
line 53:         endif
line 54:         continue
line 55:       elseif &filetype ==# 'go' && line =~# '^[^`]*`[^`]*$'
line 56:         let backtick = 1
line 57:       endif
line 58: 
line 59:       if line =~# '^\s*<\!--'
line 60:         let xmlcomment = 1
line 61:       endif
line 62:       if xmlcomment
line 63:         if line =~# '-->'
line 64:           let xmlcomment = 0
line 65:         endif
line 66:         continue
line 67:       endif
line 68: 
line 69:       " This is correct order because both "<<EOF" and "EOF" matches end
line 70:       if heredoc != ''
line 71:         if line =~# heredoc
line 72:           let heredoc = ''
line 73:         endif
line 74:         continue
line 75:       endif
line 76:       let herematch = matchlist(line, '\C<<\W*\([A-Z]\+\)\s*$')
line 77:       if len(herematch) > 0
line 78:         let heredoc = herematch[1] . '$'
line 79:       endif
line 80: 
line 81:       if line[0] == "\t"
line 82:         let spaces_minus_tabs -= 1
line 83:       else
line 84:         if line[0] == " "
line 85:           let spaces_minus_tabs += 1
line 86:         endif
line 87:         let indent = len(matchstr(line, '^ *'))
line 88:         while stack[-1] > indent
line 89:           call remove(stack, -1)
line 90:         endwhile
line 91: 
line 92:         let indent_inc = indent - stack[-1]
line 93: 
line 94:         if indent_inc == 0 && len(stack) > 1
line 95:           let indent_inc = indent - stack[-2]
line 96:         endif
line 97: 
line 98:         if has_key(indents, indent_inc)
line 99:           let indents[indent_inc] += 1
line 100:           let prev_indent = indent
line 101:         endif
line 102: 
line 103:         if stack[-1] != indent
line 104:           call add(stack, indent)
line 105:         endif
line 106:       endif
line 107:     endfor
line 14:     for line in a:lines
line 15:       let lineno += 1
line 16: 
line 17:       if line =~# '^\s*$'
line 18:         continue
line 19:       endif
line 20: 
line 21:       if line =~# '^\s*/\*'
line 22:         let ccomment = 1
line 23:       endif
line 24:       if ccomment
line 25:         if line =~# '\*/'
line 26:           let ccomment = 0
line 27:         endif
line 28:         continue
line 29:       endif
line 30: 
line 31:       if line =~# '^=\w'
line 32:         let podcomment = 1
line 33:       endif
line 34:       if podcomment
line 35:         if line =~# '^=\%(end\|cut\)\>'
line 36:           let podcomment = 0
line 37:         endif
line 38:         continue
line 39:       endif
line 40: 
line 41:       if triplequote
line 42:         if line =~# '^[^"]*"""[^"]*$'
line 43:           let triplequote = 0
line 44:         endif
line 45:         continue
line 46:       elseif line =~# '^[^"]*"""[^"]*$'
line 47:         let triplequote = 1
line 48:       endif
line 49: 
line 50:       if backtick
line 51:         if line =~# '^[^`]*`[^`]*$'
line 52:           let backtick = 0
line 53:         endif
line 54:         continue
line 55:       elseif &filetype ==# 'go' && line =~# '^[^`]*`[^`]*$'
line 56:         let backtick = 1
line 57:       endif
line 58: 
line 59:       if line =~# '^\s*<\!--'
line 60:         let xmlcomment = 1
line 61:       endif
line 62:       if xmlcomment
line 63:         if line =~# '-->'
line 64:           let xmlcomment = 0
line 65:         endif
line 66:         continue
line 67:       endif
line 68: 
line 69:       " This is correct order because both "<<EOF" and "EOF" matches end
line 70:       if heredoc != ''
line 71:         if line =~# heredoc
line 72:           let heredoc = ''
line 73:         endif
line 74:         continue
line 75:       endif
line 76:       let herematch = matchlist(line, '\C<<\W*\([A-Z]\+\)\s*$')
line 77:       if len(herematch) > 0
line 78:         let heredoc = herematch[1] . '$'
line 79:       endif
line 80: 
line 81:       if line[0] == "\t"
line 82:         let spaces_minus_tabs -= 1
line 83:       else
line 84:         if line[0] == " "
line 85:           let spaces_minus_tabs += 1
line 86:         endif
line 87:         let indent = len(matchstr(line, '^ *'))
line 88:         while stack[-1] > indent
line 89:           call remove(stack, -1)
line 90:         endwhile
line 91: 
line 92:         let indent_inc = indent - stack[-1]
line 93: 
line 94:         if indent_inc == 0 && len(stack) > 1
line 95:           let indent_inc = indent - stack[-2]
line 96:         endif
line 97: 
line 98:         if has_key(indents, indent_inc)
line 99:           let indents[indent_inc] += 1
line 100:           let prev_indent = indent
line 101:         endif
line 102: 
line 103:         if stack[-1] != indent
line 104:           call add(stack, indent)
line 105:         endif
line 106:       endif
line 107:     endfor
line 14:     for line in a:lines
line 15:       let lineno += 1
line 16: 
line 17:       if line =~# '^\s*$'
line 18:         continue
line 19:       endif
line 20: 
line 21:       if line =~# '^\s*/\*'
line 22:         let ccomment = 1
line 23:       endif
line 24:       if ccomment
line 25:         if line =~# '\*/'
line 26:           let ccomment = 0
line 27:         endif
line 28:         continue
line 29:       endif
line 30: 
line 31:       if line =~# '^=\w'
line 32:         let podcomment = 1
line 33:       endif
line 34:       if podcomment
line 35:         if line =~# '^=\%(end\|cut\)\>'
line 36:           let podcomment = 0
line 37:         endif
line 38:         continue
line 39:       endif
line 40: 
line 41:       if triplequote
line 42:         if line =~# '^[^"]*"""[^"]*$'
line 43:           let triplequote = 0
line 44:         endif
line 45:         continue
line 46:       elseif line =~# '^[^"]*"""[^"]*$'
line 47:         let triplequote = 1
line 48:       endif
line 49: 
line 50:       if backtick
line 51:         if line =~# '^[^`]*`[^`]*$'
line 52:           let backtick = 0
line 53:         endif
line 54:         continue
line 55:       elseif &filetype ==# 'go' && line =~# '^[^`]*`[^`]*$'
line 56:         let backtick = 1
line 57:       endif
line 58: 
line 59:       if line =~# '^\s*<\!--'
line 60:         let xmlcomment = 1
line 61:       endif
line 62:       if xmlcomment
line 63:         if line =~# '-->'
line 64:           let xmlcomment = 0
line 65:         endif
line 66:         continue
line 67:       endif
line 68: 
line 69:       " This is correct order because both "<<EOF" and "EOF" matches end
line 70:       if heredoc != ''
line 71:         if line =~# heredoc
line 72:           let heredoc = ''
line 73:         endif
line 74:         continue
line 75:       endif
line 76:       let herematch = matchlist(line, '\C<<\W*\([A-Z]\+\)\s*$')
line 77:       if len(herematch) > 0
line 78:         let heredoc = herematch[1] . '$'
line 79:       endif
line 80: 
line 81:       if line[0] == "\t"
line 82:         let spaces_minus_tabs -= 1
line 83:       else
line 84:         if line[0] == " "
line 85:           let spaces_minus_tabs += 1
line 86:         endif
line 87:         let indent = len(matchstr(line, '^ *'))
line 88:         while stack[-1] > indent
line 89:           call remove(stack, -1)
line 90:         endwhile
line 91: 
line 92:         let indent_inc = indent - stack[-1]
line 93: 
line 94:         if indent_inc == 0 && len(stack) > 1
line 95:           let indent_inc = indent - stack[-2]
line 96:         endif
line 97: 
line 98:         if has_key(indents, indent_inc)
line 99:           let indents[indent_inc] += 1
line 100:           let prev_indent = indent
line 101:         endif
line 102: 
line 103:         if stack[-1] != indent
line 104:           call add(stack, indent)
line 105:         endif
line 106:       endif
line 107:     endfor
line 14:     for line in a:lines
line 15:       let lineno += 1
line 16: 
line 17:       if line =~# '^\s*$'
line 18:         continue
line 19:       endif
line 20: 
line 21:       if line =~# '^\s*/\*'
line 22:         let ccomment = 1
line 23:       endif
line 24:       if ccomment
line 25:         if line =~# '\*/'
line 26:           let ccomment = 0
line 27:         endif
line 28:         continue
line 29:       endif
line 30: 
line 31:       if line =~# '^=\w'
line 32:         let podcomment = 1
line 33:       endif
line 34:       if podcomment
line 35:         if line =~# '^=\%(end\|cut\)\>'
line 36:           let podcomment = 0
line 37:         endif
line 38:         continue
line 39:       endif
line 40: 
line 41:       if triplequote
line 42:         if line =~# '^[^"]*"""[^"]*$'
line 43:           let triplequote = 0
line 44:         endif
line 45:         continue
line 46:       elseif line =~# '^[^"]*"""[^"]*$'
line 47:         let triplequote = 1
line 48:       endif
line 49: 
line 50:       if backtick
line 51:         if line =~# '^[^`]*`[^`]*$'
line 52:           let backtick = 0
line 53:         endif
line 54:         continue
line 55:       elseif &filetype ==# 'go' && line =~# '^[^`]*`[^`]*$'
line 56:         let backtick = 1
line 57:       endif
line 58: 
line 59:       if line =~# '^\s*<\!--'
line 60:         let xmlcomment = 1
line 61:       endif
line 62:       if xmlcomment
line 63:         if line =~# '-->'
line 64:           let xmlcomment = 0
line 65:         endif
line 66:         continue
line 67:       endif
line 68: 
line 69:       " This is correct order because both "<<EOF" and "EOF" matches end
line 70:       if heredoc != ''
line 71:         if line =~# heredoc
line 72:           let heredoc = ''
line 73:         endif
line 74:         continue
line 75:       endif
line 76:       let herematch = matchlist(line, '\C<<\W*\([A-Z]\+\)\s*$')
line 77:       if len(herematch) > 0
line 78:         let heredoc = herematch[1] . '$'
line 79:       endif
line 80: 
line 81:       if line[0] == "\t"
line 82:         let spaces_minus_tabs -= 1
line 83:       else
line 84:         if line[0] == " "
line 85:           let spaces_minus_tabs += 1
line 86:         endif
line 87:         let indent = len(matchstr(line, '^ *'))
line 88:         while stack[-1] > indent
line 89:           call remove(stack, -1)
line 90:         endwhile
line 91: 
line 92:         let indent_inc = indent - stack[-1]
line 93: 
line 94:         if indent_inc == 0 && len(stack) > 1
line 95:           let indent_inc = indent - stack[-2]
line 96:         endif
line 97: 
line 98:         if has_key(indents, indent_inc)
line 99:           let indents[indent_inc] += 1
line 100:           let prev_indent = indent
line 101:         endif
line 102: 
line 103:         if stack[-1] != indent
line 104:           call add(stack, indent)
line 105:         endif
line 106:       endif
line 107:     endfor
line 14:     for line in a:lines
line 15:       let lineno += 1
line 16: 
line 17:       if line =~# '^\s*$'
line 18:         continue
line 19:       endif
line 20: 
line 21:       if line =~# '^\s*/\*'
line 22:         let ccomment = 1
line 23:       endif
line 24:       if ccomment
line 25:         if line =~# '\*/'
line 26:           let ccomment = 0
line 27:         endif
line 28:         continue
line 29:       endif
line 30: 
line 31:       if line =~# '^=\w'
line 32:         let podcomment = 1
line 33:       endif
line 34:       if podcomment
line 35:         if line =~# '^=\%(end\|cut\)\>'
line 36:           let podcomment = 0
line 37:         endif
line 38:         continue
line 39:       endif
line 40: 
line 41:       if triplequote
line 42:         if line =~# '^[^"]*"""[^"]*$'
line 43:           let triplequote = 0
line 44:         endif
line 45:         continue
line 46:       elseif line =~# '^[^"]*"""[^"]*$'
line 47:         let triplequote = 1
line 48:       endif
line 49: 
line 50:       if backtick
line 51:         if line =~# '^[^`]*`[^`]*$'
line 52:           let backtick = 0
line 53:         endif
line 54:         continue
line 55:       elseif &filetype ==# 'go' && line =~# '^[^`]*`[^`]*$'
line 56:         let backtick = 1
line 57:       endif
line 58: 
line 59:       if line =~# '^\s*<\!--'
line 60:         let xmlcomment = 1
line 61:       endif
line 62:       if xmlcomment
line 63:         if line =~# '-->'
line 64:           let xmlcomment = 0
line 65:         endif
line 66:         continue
line 67:       endif
line 68: 
line 69:       " This is correct order because both "<<EOF" and "EOF" matches end
line 70:       if heredoc != ''
line 71:         if line =~# heredoc
line 72:           let heredoc = ''
line 73:         endif
line 74:         continue
line 75:       endif
line 76:       let herematch = matchlist(line, '\C<<\W*\([A-Z]\+\)\s*$')
line 77:       if len(herematch) > 0
line 78:         let heredoc = herematch[1] . '$'
line 79:       endif
line 80: 
line 81:       if line[0] == "\t"
line 82:         let spaces_minus_tabs -= 1
line 83:       else
line 84:         if line[0] == " "
line 85:           let spaces_minus_tabs += 1
line 86:         endif
line 87:         let indent = len(matchstr(line, '^ *'))
line 88:         while stack[-1] > indent
line 89:           call remove(stack, -1)
line 90:         endwhile
line 91: 
line 92:         let indent_inc = indent - stack[-1]
line 93: 
line 94:         if indent_inc == 0 && len(stack) > 1
line 95:           let indent_inc = indent - stack[-2]
line 96:         endif
line 97: 
line 98:         if has_key(indents, indent_inc)
line 99:           let indents[indent_inc] += 1
line 100:           let prev_indent = indent
line 101:         endif
line 102: 
line 103:         if stack[-1] != indent
line 104:           call add(stack, indent)
line 105:         endif
line 106:       endif
line 107:     endfor
line 14:     for line in a:lines
line 15:       let lineno += 1
line 16: 
line 17:       if line =~# '^\s*$'
line 18:         continue
line 19:       endif
line 20: 
line 21:       if line =~# '^\s*/\*'
line 22:         let ccomment = 1
line 23:       endif
line 24:       if ccomment
line 25:         if line =~# '\*/'
line 26:           let ccomment = 0
line 27:         endif
line 28:         continue
line 29:       endif
line 30: 
line 31:       if line =~# '^=\w'
line 32:         let podcomment = 1
line 33:       endif
line 34:       if podcomment
line 35:         if line =~# '^=\%(end\|cut\)\>'
line 36:           let podcomment = 0
line 37:         endif
line 38:         continue
line 39:       endif
line 40: 
line 41:       if triplequote
line 42:         if line =~# '^[^"]*"""[^"]*$'
line 43:           let triplequote = 0
line 44:         endif
line 45:         continue
line 46:       elseif line =~# '^[^"]*"""[^"]*$'
line 47:         let triplequote = 1
line 48:       endif
line 49: 
line 50:       if backtick
line 51:         if line =~# '^[^`]*`[^`]*$'
line 52:           let backtick = 0
line 53:         endif
line 54:         continue
line 55:       elseif &filetype ==# 'go' && line =~# '^[^`]*`[^`]*$'
line 56:         let backtick = 1
line 57:       endif
line 58: 
line 59:       if line =~# '^\s*<\!--'
line 60:         let xmlcomment = 1
line 61:       endif
line 62:       if xmlcomment
line 63:         if line =~# '-->'
line 64:           let xmlcomment = 0
line 65:         endif
line 66:         continue
line 67:       endif
line 68: 
line 69:       " This is correct order because both "<<EOF" and "EOF" matches end
line 70:       if heredoc != ''
line 71:         if line =~# heredoc
line 72:           let heredoc = ''
line 73:         endif
line 74:         continue
line 75:       endif
line 76:       let herematch = matchlist(line, '\C<<\W*\([A-Z]\+\)\s*$')
line 77:       if len(herematch) > 0
line 78:         let heredoc = herematch[1] . '$'
line 79:       endif
line 80: 
line 81:       if line[0] == "\t"
line 82:         let spaces_minus_tabs -= 1
line 83:       else
line 84:         if line[0] == " "
line 85:           let spaces_minus_tabs += 1
line 86:         endif
line 87:         let indent = len(matchstr(line, '^ *'))
line 88:         while stack[-1] > indent
line 89:           call remove(stack, -1)
line 90:         endwhile
line 91: 
line 92:         let indent_inc = indent - stack[-1]
line 93: 
line 94:         if indent_inc == 0 && len(stack) > 1
line 95:           let indent_inc = indent - stack[-2]
line 96:         endif
line 97: 
line 98:         if has_key(indents, indent_inc)
line 99:           let indents[indent_inc] += 1
line 100:           let prev_indent = indent
line 101:         endif
line 102: 
line 103:         if stack[-1] != indent
line 104:           call add(stack, indent)
line 105:         endif
line 106:       endif
line 107:     endfor
line 14:     for line in a:lines
line 15:       let lineno += 1
line 16: 
line 17:       if line =~# '^\s*$'
line 18:         continue
line 19:       endif
line 20: 
line 21:       if line =~# '^\s*/\*'
line 22:         let ccomment = 1
line 23:       endif
line 24:       if ccomment
line 25:         if line =~# '\*/'
line 26:           let ccomment = 0
line 27:         endif
line 28:         continue
line 29:       endif
line 30: 
line 31:       if line =~# '^=\w'
line 32:         let podcomment = 1
line 33:       endif
line 34:       if podcomment
line 35:         if line =~# '^=\%(end\|cut\)\>'
line 36:           let podcomment = 0
line 37:         endif
line 38:         continue
line 39:       endif
line 40: 
line 41:       if triplequote
line 42:         if line =~# '^[^"]*"""[^"]*$'
line 43:           let triplequote = 0
line 44:         endif
line 45:         continue
line 46:       elseif line =~# '^[^"]*"""[^"]*$'
line 47:         let triplequote = 1
line 48:       endif
line 49: 
line 50:       if backtick
line 51:         if line =~# '^[^`]*`[^`]*$'
line 52:           let backtick = 0
line 53:         endif
line 54:         continue
line 55:       elseif &filetype ==# 'go' && line =~# '^[^`]*`[^`]*$'
line 56:         let backtick = 1
line 57:       endif
line 58: 
line 59:       if line =~# '^\s*<\!--'
line 60:         let xmlcomment = 1
line 61:       endif
line 62:       if xmlcomment
line 63:         if line =~# '-->'
line 64:           let xmlcomment = 0
line 65:         endif
line 66:         continue
line 67:       endif
line 68: 
line 69:       " This is correct order because both "<<EOF" and "EOF" matches end
line 70:       if heredoc != ''
line 71:         if line =~# heredoc
line 72:           let heredoc = ''
line 73:         endif
line 74:         continue
line 75:       endif
line 76:       let herematch = matchlist(line, '\C<<\W*\([A-Z]\+\)\s*$')
line 77:       if len(herematch) > 0
line 78:         let heredoc = herematch[1] . '$'
line 79:       endif
line 80: 
line 81:       if line[0] == "\t"
line 82:         let spaces_minus_tabs -= 1
line 83:       else
line 84:         if line[0] == " "
line 85:           let spaces_minus_tabs += 1
line 86:         endif
line 87:         let indent = len(matchstr(line, '^ *'))
line 88:         while stack[-1] > indent
line 89:           call remove(stack, -1)
line 90:         endwhile
line 88:         while stack[-1] > indent
line 89:           call remove(stack, -1)
line 90:         endwhile
line 91: 
line 92:         let indent_inc = indent - stack[-1]
line 93: 
line 94:         if indent_inc == 0 && len(stack) > 1
line 95:           let indent_inc = indent - stack[-2]
line 96:         endif
line 97: 
line 98:         if has_key(indents, indent_inc)
line 99:           let indents[indent_inc] += 1
line 100:           let prev_indent = indent
line 101:         endif
line 102: 
line 103:         if stack[-1] != indent
line 104:           call add(stack, indent)
line 105:         endif
line 106:       endif
line 107:     endfor
line 14:     for line in a:lines
line 15:       let lineno += 1
line 16: 
line 17:       if line =~# '^\s*$'
line 18:         continue
line 19:       endif
line 20: 
line 21:       if line =~# '^\s*/\*'
line 22:         let ccomment = 1
line 23:       endif
line 24:       if ccomment
line 25:         if line =~# '\*/'
line 26:           let ccomment = 0
line 27:         endif
line 28:         continue
line 29:       endif
line 30: 
line 31:       if line =~# '^=\w'
line 32:         let podcomment = 1
line 33:       endif
line 34:       if podcomment
line 35:         if line =~# '^=\%(end\|cut\)\>'
line 36:           let podcomment = 0
line 37:         endif
line 38:         continue
line 39:       endif
line 40: 
line 41:       if triplequote
line 42:         if line =~# '^[^"]*"""[^"]*$'
line 43:           let triplequote = 0
line 44:         endif
line 45:         continue
line 46:       elseif line =~# '^[^"]*"""[^"]*$'
line 47:         let triplequote = 1
line 48:       endif
line 49: 
line 50:       if backtick
line 51:         if line =~# '^[^`]*`[^`]*$'
line 52:           let backtick = 0
line 53:         endif
line 54:         continue
line 55:       elseif &filetype ==# 'go' && line =~# '^[^`]*`[^`]*$'
line 56:         let backtick = 1
line 57:       endif
line 58: 
line 59:       if line =~# '^\s*<\!--'
line 60:         let xmlcomment = 1
line 61:       endif
line 62:       if xmlcomment
line 63:         if line =~# '-->'
line 64:           let xmlcomment = 0
line 65:         endif
line 66:         continue
line 67:       endif
line 68: 
line 69:       " This is correct order because both "<<EOF" and "EOF" matches end
line 70:       if heredoc != ''
line 71:         if line =~# heredoc
line 72:           let heredoc = ''
line 73:         endif
line 74:         continue
line 75:       endif
line 76:       let herematch = matchlist(line, '\C<<\W*\([A-Z]\+\)\s*$')
line 77:       if len(herematch) > 0
line 78:         let heredoc = herematch[1] . '$'
line 79:       endif
line 80: 
line 81:       if line[0] == "\t"
line 82:         let spaces_minus_tabs -= 1
line 83:       else
line 84:         if line[0] == " "
line 85:           let spaces_minus_tabs += 1
line 86:         endif
line 87:         let indent = len(matchstr(line, '^ *'))
line 88:         while stack[-1] > indent
line 89:           call remove(stack, -1)
line 90:         endwhile
line 88:         while stack[-1] > indent
line 89:           call remove(stack, -1)
line 90:         endwhile
line 91: 
line 92:         let indent_inc = indent - stack[-1]
line 93: 
line 94:         if indent_inc == 0 && len(stack) > 1
line 95:           let indent_inc = indent - stack[-2]
line 96:         endif
line 97: 
line 98:         if has_key(indents, indent_inc)
line 99:           let indents[indent_inc] += 1
line 100:           let prev_indent = indent
line 101:         endif
line 102: 
line 103:         if stack[-1] != indent
line 104:           call add(stack, indent)
line 105:         endif
line 106:       endif
line 107:     endfor
line 14:     for line in a:lines
line 15:       let lineno += 1
line 16: 
line 17:       if line =~# '^\s*$'
line 18:         continue
line 19:       endif
line 20: 
line 21:       if line =~# '^\s*/\*'
line 22:         let ccomment = 1
line 23:       endif
line 24:       if ccomment
line 25:         if line =~# '\*/'
line 26:           let ccomment = 0
line 27:         endif
line 28:         continue
line 29:       endif
line 30: 
line 31:       if line =~# '^=\w'
line 32:         let podcomment = 1
line 33:       endif
line 34:       if podcomment
line 35:         if line =~# '^=\%(end\|cut\)\>'
line 36:           let podcomment = 0
line 37:         endif
line 38:         continue
line 39:       endif
line 40: 
line 41:       if triplequote
line 42:         if line =~# '^[^"]*"""[^"]*$'
line 43:           let triplequote = 0
line 44:         endif
line 45:         continue
line 46:       elseif line =~# '^[^"]*"""[^"]*$'
line 47:         let triplequote = 1
line 48:       endif
line 49: 
line 50:       if backtick
line 51:         if line =~# '^[^`]*`[^`]*$'
line 52:           let backtick = 0
line 53:         endif
line 54:         continue
line 55:       elseif &filetype ==# 'go' && line =~# '^[^`]*`[^`]*$'
line 56:         let backtick = 1
line 57:       endif
line 58: 
line 59:       if line =~# '^\s*<\!--'
line 60:         let xmlcomment = 1
line 61:       endif
line 62:       if xmlcomment
line 63:         if line =~# '-->'
line 64:           let xmlcomment = 0
line 65:         endif
line 66:         continue
line 67:       endif
line 68: 
line 69:       " This is correct order because both "<<EOF" and "EOF" matches end
line 70:       if heredoc != ''
line 71:         if line =~# heredoc
line 72:           let heredoc = ''
line 73:         endif
line 74:         continue
line 75:       endif
line 76:       let herematch = matchlist(line, '\C<<\W*\([A-Z]\+\)\s*$')
line 77:       if len(herematch) > 0
line 78:         let heredoc = herematch[1] . '$'
line 79:       endif
line 80: 
line 81:       if line[0] == "\t"
line 82:         let spaces_minus_tabs -= 1
line 83:       else
line 84:         if line[0] == " "
line 85:           let spaces_minus_tabs += 1
line 86:         endif
line 87:         let indent = len(matchstr(line, '^ *'))
line 88:         while stack[-1] > indent
line 89:           call remove(stack, -1)
line 90:         endwhile
line 91: 
line 92:         let indent_inc = indent - stack[-1]
line 93: 
line 94:         if indent_inc == 0 && len(stack) > 1
line 95:           let indent_inc = indent - stack[-2]
line 96:         endif
line 97: 
line 98:         if has_key(indents, indent_inc)
line 99:           let indents[indent_inc] += 1
line 100:           let prev_indent = indent
line 101:         endif
line 102: 
line 103:         if stack[-1] != indent
line 104:           call add(stack, indent)
line 105:         endif
line 106:       endif
line 107:     endfor
line 14:     for line in a:lines
line 15:       let lineno += 1
line 16: 
line 17:       if line =~# '^\s*$'
line 18:         continue
line 19:       endif
line 20: 
line 21:       if line =~# '^\s*/\*'
line 22:         let ccomment = 1
line 23:       endif
line 24:       if ccomment
line 25:         if line =~# '\*/'
line 26:           let ccomment = 0
line 27:         endif
line 28:         continue
line 29:       endif
line 30: 
line 31:       if line =~# '^=\w'
line 32:         let podcomment = 1
line 33:       endif
line 34:       if podcomment
line 35:         if line =~# '^=\%(end\|cut\)\>'
line 36:           let podcomment = 0
line 37:         endif
line 38:         continue
line 39:       endif
line 40: 
line 41:       if triplequote
line 42:         if line =~# '^[^"]*"""[^"]*$'
line 43:           let triplequote = 0
line 44:         endif
line 45:         continue
line 46:       elseif line =~# '^[^"]*"""[^"]*$'
line 47:         let triplequote = 1
line 48:       endif
line 49: 
line 50:       if backtick
line 51:         if line =~# '^[^`]*`[^`]*$'
line 52:           let backtick = 0
line 53:         endif
line 54:         continue
line 55:       elseif &filetype ==# 'go' && line =~# '^[^`]*`[^`]*$'
line 56:         let backtick = 1
line 57:       endif
line 58: 
line 59:       if line =~# '^\s*<\!--'
line 60:         let xmlcomment = 1
line 61:       endif
line 62:       if xmlcomment
line 63:         if line =~# '-->'
line 64:           let xmlcomment = 0
line 65:         endif
line 66:         continue
line 67:       endif
line 68: 
line 69:       " This is correct order because both "<<EOF" and "EOF" matches end
line 70:       if heredoc != ''
line 71:         if line =~# heredoc
line 72:           let heredoc = ''
line 73:         endif
line 74:         continue
line 75:       endif
line 76:       let herematch = matchlist(line, '\C<<\W*\([A-Z]\+\)\s*$')
line 77:       if len(herematch) > 0
line 78:         let heredoc = herematch[1] . '$'
line 79:       endif
line 80: 
line 81:       if line[0] == "\t"
line 82:         let spaces_minus_tabs -= 1
line 83:       else
line 84:         if line[0] == " "
line 85:           let spaces_minus_tabs += 1
line 86:         endif
line 87:         let indent = len(matchstr(line, '^ *'))
line 88:         while stack[-1] > indent
line 89:           call remove(stack, -1)
line 90:         endwhile
line 88:         while stack[-1] > indent
line 89:           call remove(stack, -1)
line 90:         endwhile
line 91: 
line 92:         let indent_inc = indent - stack[-1]
line 93: 
line 94:         if indent_inc == 0 && len(stack) > 1
line 95:           let indent_inc = indent - stack[-2]
line 96:         endif
line 97: 
line 98:         if has_key(indents, indent_inc)
line 99:           let indents[indent_inc] += 1
line 100:           let prev_indent = indent
line 101:         endif
line 102: 
line 103:         if stack[-1] != indent
line 104:           call add(stack, indent)
line 105:         endif
line 106:       endif
line 107:     endfor
line 14:     for line in a:lines
line 15:       let lineno += 1
line 16: 
line 17:       if line =~# '^\s*$'
line 18:         continue
line 19:       endif
line 20: 
line 21:       if line =~# '^\s*/\*'
line 22:         let ccomment = 1
line 23:       endif
line 24:       if ccomment
line 25:         if line =~# '\*/'
line 26:           let ccomment = 0
line 27:         endif
line 28:         continue
line 29:       endif
line 30: 
line 31:       if line =~# '^=\w'
line 32:         let podcomment = 1
line 33:       endif
line 34:       if podcomment
line 35:         if line =~# '^=\%(end\|cut\)\>'
line 36:           let podcomment = 0
line 37:         endif
line 38:         continue
line 39:       endif
line 40: 
line 41:       if triplequote
line 42:         if line =~# '^[^"]*"""[^"]*$'
line 43:           let triplequote = 0
line 44:         endif
line 45:         continue
line 46:       elseif line =~# '^[^"]*"""[^"]*$'
line 47:         let triplequote = 1
line 48:       endif
line 49: 
line 50:       if backtick
line 51:         if line =~# '^[^`]*`[^`]*$'
line 52:           let backtick = 0
line 53:         endif
line 54:         continue
line 55:       elseif &filetype ==# 'go' && line =~# '^[^`]*`[^`]*$'
line 56:         let backtick = 1
line 57:       endif
line 58: 
line 59:       if line =~# '^\s*<\!--'
line 60:         let xmlcomment = 1
line 61:       endif
line 62:       if xmlcomment
line 63:         if line =~# '-->'
line 64:           let xmlcomment = 0
line 65:         endif
line 66:         continue
line 67:       endif
line 68: 
line 69:       " This is correct order because both "<<EOF" and "EOF" matches end
line 70:       if heredoc != ''
line 71:         if line =~# heredoc
line 72:           let heredoc = ''
line 73:         endif
line 74:         continue
line 75:       endif
line 76:       let herematch = matchlist(line, '\C<<\W*\([A-Z]\+\)\s*$')
line 77:       if len(herematch) > 0
line 78:         let heredoc = herematch[1] . '$'
line 79:       endif
line 80: 
line 81:       if line[0] == "\t"
line 82:         let spaces_minus_tabs -= 1
line 83:       else
line 84:         if line[0] == " "
line 85:           let spaces_minus_tabs += 1
line 86:         endif
line 87:         let indent = len(matchstr(line, '^ *'))
line 88:         while stack[-1] > indent
line 89:           call remove(stack, -1)
line 90:         endwhile
line 91: 
line 92:         let indent_inc = indent - stack[-1]
line 93: 
line 94:         if indent_inc == 0 && len(stack) > 1
line 95:           let indent_inc = indent - stack[-2]
line 96:         endif
line 97: 
line 98:         if has_key(indents, indent_inc)
line 99:           let indents[indent_inc] += 1
line 100:           let prev_indent = indent
line 101:         endif
line 102: 
line 103:         if stack[-1] != indent
line 104:           call add(stack, indent)
line 105:         endif
line 106:       endif
line 107:     endfor
line 14:     for line in a:lines
line 15:       let lineno += 1
line 16: 
line 17:       if line =~# '^\s*$'
line 18:         continue
line 19:       endif
line 20: 
line 21:       if line =~# '^\s*/\*'
line 22:         let ccomment = 1
line 23:       endif
line 24:       if ccomment
line 25:         if line =~# '\*/'
line 26:           let ccomment = 0
line 27:         endif
line 28:         continue
line 29:       endif
line 30: 
line 31:       if line =~# '^=\w'
line 32:         let podcomment = 1
line 33:       endif
line 34:       if podcomment
line 35:         if line =~# '^=\%(end\|cut\)\>'
line 36:           let podcomment = 0
line 37:         endif
line 38:         continue
line 39:       endif
line 40: 
line 41:       if triplequote
line 42:         if line =~# '^[^"]*"""[^"]*$'
line 43:           let triplequote = 0
line 44:         endif
line 45:         continue
line 46:       elseif line =~# '^[^"]*"""[^"]*$'
line 47:         let triplequote = 1
line 48:       endif
line 49: 
line 50:       if backtick
line 51:         if line =~# '^[^`]*`[^`]*$'
line 52:           let backtick = 0
line 53:         endif
line 54:         continue
line 55:       elseif &filetype ==# 'go' && line =~# '^[^`]*`[^`]*$'
line 56:         let backtick = 1
line 57:       endif
line 58: 
line 59:       if line =~# '^\s*<\!--'
line 60:         let xmlcomment = 1
line 61:       endif
line 62:       if xmlcomment
line 63:         if line =~# '-->'
line 64:           let xmlcomment = 0
line 65:         endif
line 66:         continue
line 67:       endif
line 68: 
line 69:       " This is correct order because both "<<EOF" and "EOF" matches end
line 70:       if heredoc != ''
line 71:         if line =~# heredoc
line 72:           let heredoc = ''
line 73:         endif
line 74:         continue
line 75:       endif
line 76:       let herematch = matchlist(line, '\C<<\W*\([A-Z]\+\)\s*$')
line 77:       if len(herematch) > 0
line 78:         let heredoc = herematch[1] . '$'
line 79:       endif
line 80: 
line 81:       if line[0] == "\t"
line 82:         let spaces_minus_tabs -= 1
line 83:       else
line 84:         if line[0] == " "
line 85:           let spaces_minus_tabs += 1
line 86:         endif
line 87:         let indent = len(matchstr(line, '^ *'))
line 88:         while stack[-1] > indent
line 89:           call remove(stack, -1)
line 90:         endwhile
line 91: 
line 92:         let indent_inc = indent - stack[-1]
line 93: 
line 94:         if indent_inc == 0 && len(stack) > 1
line 95:           let indent_inc = indent - stack[-2]
line 96:         endif
line 97: 
line 98:         if has_key(indents, indent_inc)
line 99:           let indents[indent_inc] += 1
line 100:           let prev_indent = indent
line 101:         endif
line 102: 
line 103:         if stack[-1] != indent
line 104:           call add(stack, indent)
line 105:         endif
line 106:       endif
line 107:     endfor
line 14:     for line in a:lines
line 15:       let lineno += 1
line 16: 
line 17:       if line =~# '^\s*$'
line 18:         continue
line 19:       endif
line 20: 
line 21:       if line =~# '^\s*/\*'
line 22:         let ccomment = 1
line 23:       endif
line 24:       if ccomment
line 25:         if line =~# '\*/'
line 26:           let ccomment = 0
line 27:         endif
line 28:         continue
line 29:       endif
line 30: 
line 31:       if line =~# '^=\w'
line 32:         let podcomment = 1
line 33:       endif
line 34:       if podcomment
line 35:         if line =~# '^=\%(end\|cut\)\>'
line 36:           let podcomment = 0
line 37:         endif
line 38:         continue
line 39:       endif
line 40: 
line 41:       if triplequote
line 42:         if line =~# '^[^"]*"""[^"]*$'
line 43:           let triplequote = 0
line 44:         endif
line 45:         continue
line 46:       elseif line =~# '^[^"]*"""[^"]*$'
line 47:         let triplequote = 1
line 48:       endif
line 49: 
line 50:       if backtick
line 51:         if line =~# '^[^`]*`[^`]*$'
line 52:           let backtick = 0
line 53:         endif
line 54:         continue
line 55:       elseif &filetype ==# 'go' && line =~# '^[^`]*`[^`]*$'
line 56:         let backtick = 1
line 57:       endif
line 58: 
line 59:       if line =~# '^\s*<\!--'
line 60:         let xmlcomment = 1
line 61:       endif
line 62:       if xmlcomment
line 63:         if line =~# '-->'
line 64:           let xmlcomment = 0
line 65:         endif
line 66:         continue
line 67:       endif
line 68: 
line 69:       " This is correct order because both "<<EOF" and "EOF" matches end
line 70:       if heredoc != ''
line 71:         if line =~# heredoc
line 72:           let heredoc = ''
line 73:         endif
line 74:         continue
line 75:       endif
line 76:       let herematch = matchlist(line, '\C<<\W*\([A-Z]\+\)\s*$')
line 77:       if len(herematch) > 0
line 78:         let heredoc = herematch[1] . '$'
line 79:       endif
line 80: 
line 81:       if line[0] == "\t"
line 82:         let spaces_minus_tabs -= 1
line 83:       else
line 84:         if line[0] == " "
line 85:           let spaces_minus_tabs += 1
line 86:         endif
line 87:         let indent = len(matchstr(line, '^ *'))
line 88:         while stack[-1] > indent
line 89:           call remove(stack, -1)
line 90:         endwhile
line 91: 
line 92:         let indent_inc = indent - stack[-1]
line 93: 
line 94:         if indent_inc == 0 && len(stack) > 1
line 95:           let indent_inc = indent - stack[-2]
line 96:         endif
line 97: 
line 98:         if has_key(indents, indent_inc)
line 99:           let indents[indent_inc] += 1
line 100:           let prev_indent = indent
line 101:         endif
line 102: 
line 103:         if stack[-1] != indent
line 104:           call add(stack, indent)
line 105:         endif
line 106:       endif
line 107:     endfor
line 14:     for line in a:lines
line 15:       let lineno += 1
line 16: 
line 17:       if line =~# '^\s*$'
line 18:         continue
line 19:       endif
line 20: 
line 21:       if line =~# '^\s*/\*'
line 22:         let ccomment = 1
line 23:       endif
line 24:       if ccomment
line 25:         if line =~# '\*/'
line 26:           let ccomment = 0
line 27:         endif
line 28:         continue
line 29:       endif
line 30: 
line 31:       if line =~# '^=\w'
line 32:         let podcomment = 1
line 33:       endif
line 34:       if podcomment
line 35:         if line =~# '^=\%(end\|cut\)\>'
line 36:           let podcomment = 0
line 37:         endif
line 38:         continue
line 39:       endif
line 40: 
line 41:       if triplequote
line 42:         if line =~# '^[^"]*"""[^"]*$'
line 43:           let triplequote = 0
line 44:         endif
line 45:         continue
line 46:       elseif line =~# '^[^"]*"""[^"]*$'
line 47:         let triplequote = 1
line 48:       endif
line 49: 
line 50:       if backtick
line 51:         if line =~# '^[^`]*`[^`]*$'
line 52:           let backtick = 0
line 53:         endif
line 54:         continue
line 55:       elseif &filetype ==# 'go' && line =~# '^[^`]*`[^`]*$'
line 56:         let backtick = 1
line 57:       endif
line 58: 
line 59:       if line =~# '^\s*<\!--'
line 60:         let xmlcomment = 1
line 61:       endif
line 62:       if xmlcomment
line 63:         if line =~# '-->'
line 64:           let xmlcomment = 0
line 65:         endif
line 66:         continue
line 67:       endif
line 68: 
line 69:       " This is correct order because both "<<EOF" and "EOF" matches end
line 70:       if heredoc != ''
line 71:         if line =~# heredoc
line 72:           let heredoc = ''
line 73:         endif
line 74:         continue
line 75:       endif
line 76:       let herematch = matchlist(line, '\C<<\W*\([A-Z]\+\)\s*$')
line 77:       if len(herematch) > 0
line 78:         let heredoc = herematch[1] . '$'
line 79:       endif
line 80: 
line 81:       if line[0] == "\t"
line 82:         let spaces_minus_tabs -= 1
line 83:       else
line 84:         if line[0] == " "
line 85:           let spaces_minus_tabs += 1
line 86:         endif
line 87:         let indent = len(matchstr(line, '^ *'))
line 88:         while stack[-1] > indent
line 89:           call remove(stack, -1)
line 90:         endwhile
line 88:         while stack[-1] > indent
line 89:           call remove(stack, -1)
line 90:         endwhile
line 91: 
line 92:         let indent_inc = indent - stack[-1]
line 93: 
line 94:         if indent_inc == 0 && len(stack) > 1
line 95:           let indent_inc = indent - stack[-2]
line 96:         endif
line 97: 
line 98:         if has_key(indents, indent_inc)
line 99:           let indents[indent_inc] += 1
line 100:           let prev_indent = indent
line 101:         endif
line 102: 
line 103:         if stack[-1] != indent
line 104:           call add(stack, indent)
line 105:         endif
line 106:       endif
line 107:     endfor
line 14:     for line in a:lines
line 15:       let lineno += 1
line 16: 
line 17:       if line =~# '^\s*$'
line 18:         continue
line 19:       endif
line 20: 
line 21:       if line =~# '^\s*/\*'
line 22:         let ccomment = 1
line 23:       endif
line 24:       if ccomment
line 25:         if line =~# '\*/'
line 26:           let ccomment = 0
line 27:         endif
line 28:         continue
line 29:       endif
line 30: 
line 31:       if line =~# '^=\w'
line 32:         let podcomment = 1
line 33:       endif
line 34:       if podcomment
line 35:         if line =~# '^=\%(end\|cut\)\>'
line 36:           let podcomment = 0
line 37:         endif
line 38:         continue
line 39:       endif
line 40: 
line 41:       if triplequote
line 42:         if line =~# '^[^"]*"""[^"]*$'
line 43:           let triplequote = 0
line 44:         endif
line 45:         continue
line 46:       elseif line =~# '^[^"]*"""[^"]*$'
line 47:         let triplequote = 1
line 48:       endif
line 49: 
line 50:       if backtick
line 51:         if line =~# '^[^`]*`[^`]*$'
line 52:           let backtick = 0
line 53:         endif
line 54:         continue
line 55:       elseif &filetype ==# 'go' && line =~# '^[^`]*`[^`]*$'
line 56:         let backtick = 1
line 57:       endif
line 58: 
line 59:       if line =~# '^\s*<\!--'
line 60:         let xmlcomment = 1
line 61:       endif
line 62:       if xmlcomment
line 63:         if line =~# '-->'
line 64:           let xmlcomment = 0
line 65:         endif
line 66:         continue
line 67:       endif
line 68: 
line 69:       " This is correct order because both "<<EOF" and "EOF" matches end
line 70:       if heredoc != ''
line 71:         if line =~# heredoc
line 72:           let heredoc = ''
line 73:         endif
line 74:         continue
line 75:       endif
line 76:       let herematch = matchlist(line, '\C<<\W*\([A-Z]\+\)\s*$')
line 77:       if len(herematch) > 0
line 78:         let heredoc = herematch[1] . '$'
line 79:       endif
line 80: 
line 81:       if line[0] == "\t"
line 82:         let spaces_minus_tabs -= 1
line 83:       else
line 84:         if line[0] == " "
line 85:           let spaces_minus_tabs += 1
line 86:         endif
line 87:         let indent = len(matchstr(line, '^ *'))
line 88:         while stack[-1] > indent
line 89:           call remove(stack, -1)
line 90:         endwhile
line 88:         while stack[-1] > indent
line 89:           call remove(stack, -1)
line 90:         endwhile
line 91: 
line 92:         let indent_inc = indent - stack[-1]
line 93: 
line 94:         if indent_inc == 0 && len(stack) > 1
line 95:           let indent_inc = indent - stack[-2]
line 96:         endif
line 97: 
line 98:         if has_key(indents, indent_inc)
line 99:           let indents[indent_inc] += 1
line 100:           let prev_indent = indent
line 101:         endif
line 102: 
line 103:         if stack[-1] != indent
line 104:           call add(stack, indent)
line 105:         endif
line 106:       endif
line 107:     endfor
line 14:     for line in a:lines
line 15:       let lineno += 1
line 16: 
line 17:       if line =~# '^\s*$'
line 18:         continue
line 19:       endif
line 20: 
line 21:       if line =~# '^\s*/\*'
line 22:         let ccomment = 1
line 23:       endif
line 24:       if ccomment
line 25:         if line =~# '\*/'
line 26:           let ccomment = 0
line 27:         endif
line 28:         continue
line 29:       endif
line 30: 
line 31:       if line =~# '^=\w'
line 32:         let podcomment = 1
line 33:       endif
line 34:       if podcomment
line 35:         if line =~# '^=\%(end\|cut\)\>'
line 36:           let podcomment = 0
line 37:         endif
line 38:         continue
line 39:       endif
line 40: 
line 41:       if triplequote
line 42:         if line =~# '^[^"]*"""[^"]*$'
line 43:           let triplequote = 0
line 44:         endif
line 45:         continue
line 46:       elseif line =~# '^[^"]*"""[^"]*$'
line 47:         let triplequote = 1
line 48:       endif
line 49: 
line 50:       if backtick
line 51:         if line =~# '^[^`]*`[^`]*$'
line 52:           let backtick = 0
line 53:         endif
line 54:         continue
line 55:       elseif &filetype ==# 'go' && line =~# '^[^`]*`[^`]*$'
line 56:         let backtick = 1
line 57:       endif
line 58: 
line 59:       if line =~# '^\s*<\!--'
line 60:         let xmlcomment = 1
line 61:       endif
line 62:       if xmlcomment
line 63:         if line =~# '-->'
line 64:           let xmlcomment = 0
line 65:         endif
line 66:         continue
line 67:       endif
line 68: 
line 69:       " This is correct order because both "<<EOF" and "EOF" matches end
line 70:       if heredoc != ''
line 71:         if line =~# heredoc
line 72:           let heredoc = ''
line 73:         endif
line 74:         continue
line 75:       endif
line 76:       let herematch = matchlist(line, '\C<<\W*\([A-Z]\+\)\s*$')
line 77:       if len(herematch) > 0
line 78:         let heredoc = herematch[1] . '$'
line 79:       endif
line 80: 
line 81:       if line[0] == "\t"
line 82:         let spaces_minus_tabs -= 1
line 83:       else
line 84:         if line[0] == " "
line 85:           let spaces_minus_tabs += 1
line 86:         endif
line 87:         let indent = len(matchstr(line, '^ *'))
line 88:         while stack[-1] > indent
line 89:           call remove(stack, -1)
line 90:         endwhile
line 91: 
line 92:         let indent_inc = indent - stack[-1]
line 93: 
line 94:         if indent_inc == 0 && len(stack) > 1
line 95:           let indent_inc = indent - stack[-2]
line 96:         endif
line 97: 
line 98:         if has_key(indents, indent_inc)
line 99:           let indents[indent_inc] += 1
line 100:           let prev_indent = indent
line 101:         endif
line 102: 
line 103:         if stack[-1] != indent
line 104:           call add(stack, indent)
line 105:         endif
line 106:       endif
line 107:     endfor
line 14:     for line in a:lines
line 15:       let lineno += 1
line 16: 
line 17:       if line =~# '^\s*$'
line 18:         continue
line 19:       endif
line 20: 
line 21:       if line =~# '^\s*/\*'
line 22:         let ccomment = 1
line 23:       endif
line 24:       if ccomment
line 25:         if line =~# '\*/'
line 26:           let ccomment = 0
line 27:         endif
line 28:         continue
line 29:       endif
line 30: 
line 31:       if line =~# '^=\w'
line 32:         let podcomment = 1
line 33:       endif
line 34:       if podcomment
line 35:         if line =~# '^=\%(end\|cut\)\>'
line 36:           let podcomment = 0
line 37:         endif
line 38:         continue
line 39:       endif
line 40: 
line 41:       if triplequote
line 42:         if line =~# '^[^"]*"""[^"]*$'
line 43:           let triplequote = 0
line 44:         endif
line 45:         continue
line 46:       elseif line =~# '^[^"]*"""[^"]*$'
line 47:         let triplequote = 1
line 48:       endif
line 49: 
line 50:       if backtick
line 51:         if line =~# '^[^`]*`[^`]*$'
line 52:           let backtick = 0
line 53:         endif
line 54:         continue
line 55:       elseif &filetype ==# 'go' && line =~# '^[^`]*`[^`]*$'
line 56:         let backtick = 1
line 57:       endif
line 58: 
line 59:       if line =~# '^\s*<\!--'
line 60:         let xmlcomment = 1
line 61:       endif
line 62:       if xmlcomment
line 63:         if line =~# '-->'
line 64:           let xmlcomment = 0
line 65:         endif
line 66:         continue
line 67:       endif
line 68: 
line 69:       " This is correct order because both "<<EOF" and "EOF" matches end
line 70:       if heredoc != ''
line 71:         if line =~# heredoc
line 72:           let heredoc = ''
line 73:         endif
line 74:         continue
line 75:       endif
line 76:       let herematch = matchlist(line, '\C<<\W*\([A-Z]\+\)\s*$')
line 77:       if len(herematch) > 0
line 78:         let heredoc = herematch[1] . '$'
line 79:       endif
line 80: 
line 81:       if line[0] == "\t"
line 82:         let spaces_minus_tabs -= 1
line 83:       else
line 84:         if line[0] == " "
line 85:           let spaces_minus_tabs += 1
line 86:         endif
line 87:         let indent = len(matchstr(line, '^ *'))
line 88:         while stack[-1] > indent
line 89:           call remove(stack, -1)
line 90:         endwhile
line 91: 
line 92:         let indent_inc = indent - stack[-1]
line 93: 
line 94:         if indent_inc == 0 && len(stack) > 1
line 95:           let indent_inc = indent - stack[-2]
line 96:         endif
line 97: 
line 98:         if has_key(indents, indent_inc)
line 99:           let indents[indent_inc] += 1
line 100:           let prev_indent = indent
line 101:         endif
line 102: 
line 103:         if stack[-1] != indent
line 104:           call add(stack, indent)
line 105:         endif
line 106:       endif
line 107:     endfor
line 14:     for line in a:lines
line 15:       let lineno += 1
line 16: 
line 17:       if line =~# '^\s*$'
line 18:         continue
line 19:       endif
line 20: 
line 21:       if line =~# '^\s*/\*'
line 22:         let ccomment = 1
line 23:       endif
line 24:       if ccomment
line 25:         if line =~# '\*/'
line 26:           let ccomment = 0
line 27:         endif
line 28:         continue
line 29:       endif
line 30: 
line 31:       if line =~# '^=\w'
line 32:         let podcomment = 1
line 33:       endif
line 34:       if podcomment
line 35:         if line =~# '^=\%(end\|cut\)\>'
line 36:           let podcomment = 0
line 37:         endif
line 38:         continue
line 39:       endif
line 40: 
line 41:       if triplequote
line 42:         if line =~# '^[^"]*"""[^"]*$'
line 43:           let triplequote = 0
line 44:         endif
line 45:         continue
line 46:       elseif line =~# '^[^"]*"""[^"]*$'
line 47:         let triplequote = 1
line 48:       endif
line 49: 
line 50:       if backtick
line 51:         if line =~# '^[^`]*`[^`]*$'
line 52:           let backtick = 0
line 53:         endif
line 54:         continue
line 55:       elseif &filetype ==# 'go' && line =~# '^[^`]*`[^`]*$'
line 56:         let backtick = 1
line 57:       endif
line 58: 
line 59:       if line =~# '^\s*<\!--'
line 60:         let xmlcomment = 1
line 61:       endif
line 62:       if xmlcomment
line 63:         if line =~# '-->'
line 64:           let xmlcomment = 0
line 65:         endif
line 66:         continue
line 67:       endif
line 68: 
line 69:       " This is correct order because both "<<EOF" and "EOF" matches end
line 70:       if heredoc != ''
line 71:         if line =~# heredoc
line 72:           let heredoc = ''
line 73:         endif
line 74:         continue
line 75:       endif
line 76:       let herematch = matchlist(line, '\C<<\W*\([A-Z]\+\)\s*$')
line 77:       if len(herematch) > 0
line 78:         let heredoc = herematch[1] . '$'
line 79:       endif
line 80: 
line 81:       if line[0] == "\t"
line 82:         let spaces_minus_tabs -= 1
line 83:       else
line 84:         if line[0] == " "
line 85:           let spaces_minus_tabs += 1
line 86:         endif
line 87:         let indent = len(matchstr(line, '^ *'))
line 88:         while stack[-1] > indent
line 89:           call remove(stack, -1)
line 90:         endwhile
line 91: 
line 92:         let indent_inc = indent - stack[-1]
line 93: 
line 94:         if indent_inc == 0 && len(stack) > 1
line 95:           let indent_inc = indent - stack[-2]
line 96:         endif
line 97: 
line 98:         if has_key(indents, indent_inc)
line 99:           let indents[indent_inc] += 1
line 100:           let prev_indent = indent
line 101:         endif
line 102: 
line 103:         if stack[-1] != indent
line 104:           call add(stack, indent)
line 105:         endif
line 106:       endif
line 107:     endfor
line 14:     for line in a:lines
line 15:       let lineno += 1
line 16: 
line 17:       if line =~# '^\s*$'
line 18:         continue
line 19:       endif
line 20: 
line 21:       if line =~# '^\s*/\*'
line 22:         let ccomment = 1
line 23:       endif
line 24:       if ccomment
line 25:         if line =~# '\*/'
line 26:           let ccomment = 0
line 27:         endif
line 28:         continue
line 29:       endif
line 30: 
line 31:       if line =~# '^=\w'
line 32:         let podcomment = 1
line 33:       endif
line 34:       if podcomment
line 35:         if line =~# '^=\%(end\|cut\)\>'
line 36:           let podcomment = 0
line 37:         endif
line 38:         continue
line 39:       endif
line 40: 
line 41:       if triplequote
line 42:         if line =~# '^[^"]*"""[^"]*$'
line 43:           let triplequote = 0
line 44:         endif
line 45:         continue
line 46:       elseif line =~# '^[^"]*"""[^"]*$'
line 47:         let triplequote = 1
line 48:       endif
line 49: 
line 50:       if backtick
line 51:         if line =~# '^[^`]*`[^`]*$'
line 52:           let backtick = 0
line 53:         endif
line 54:         continue
line 55:       elseif &filetype ==# 'go' && line =~# '^[^`]*`[^`]*$'
line 56:         let backtick = 1
line 57:       endif
line 58: 
line 59:       if line =~# '^\s*<\!--'
line 60:         let xmlcomment = 1
line 61:       endif
line 62:       if xmlcomment
line 63:         if line =~# '-->'
line 64:           let xmlcomment = 0
line 65:         endif
line 66:         continue
line 67:       endif
line 68: 
line 69:       " This is correct order because both "<<EOF" and "EOF" matches end
line 70:       if heredoc != ''
line 71:         if line =~# heredoc
line 72:           let heredoc = ''
line 73:         endif
line 74:         continue
line 75:       endif
line 76:       let herematch = matchlist(line, '\C<<\W*\([A-Z]\+\)\s*$')
line 77:       if len(herematch) > 0
line 78:         let heredoc = herematch[1] . '$'
line 79:       endif
line 80: 
line 81:       if line[0] == "\t"
line 82:         let spaces_minus_tabs -= 1
line 83:       else
line 84:         if line[0] == " "
line 85:           let spaces_minus_tabs += 1
line 86:         endif
line 87:         let indent = len(matchstr(line, '^ *'))
line 88:         while stack[-1] > indent
line 89:           call remove(stack, -1)
line 90:         endwhile
line 91: 
line 92:         let indent_inc = indent - stack[-1]
line 93: 
line 94:         if indent_inc == 0 && len(stack) > 1
line 95:           let indent_inc = indent - stack[-2]
line 96:         endif
line 97: 
line 98:         if has_key(indents, indent_inc)
line 99:           let indents[indent_inc] += 1
line 100:           let prev_indent = indent
line 101:         endif
line 102: 
line 103:         if stack[-1] != indent
line 104:           call add(stack, indent)
line 105:         endif
line 106:       endif
line 107:     endfor
line 14:     for line in a:lines
line 15:       let lineno += 1
line 16: 
line 17:       if line =~# '^\s*$'
line 18:         continue
line 19:       endif
line 20: 
line 21:       if line =~# '^\s*/\*'
line 22:         let ccomment = 1
line 23:       endif
line 24:       if ccomment
line 25:         if line =~# '\*/'
line 26:           let ccomment = 0
line 27:         endif
line 28:         continue
line 29:       endif
line 30: 
line 31:       if line =~# '^=\w'
line 32:         let podcomment = 1
line 33:       endif
line 34:       if podcomment
line 35:         if line =~# '^=\%(end\|cut\)\>'
line 36:           let podcomment = 0
line 37:         endif
line 38:         continue
line 39:       endif
line 40: 
line 41:       if triplequote
line 42:         if line =~# '^[^"]*"""[^"]*$'
line 43:           let triplequote = 0
line 44:         endif
line 45:         continue
line 46:       elseif line =~# '^[^"]*"""[^"]*$'
line 47:         let triplequote = 1
line 48:       endif
line 49: 
line 50:       if backtick
line 51:         if line =~# '^[^`]*`[^`]*$'
line 52:           let backtick = 0
line 53:         endif
line 54:         continue
line 55:       elseif &filetype ==# 'go' && line =~# '^[^`]*`[^`]*$'
line 56:         let backtick = 1
line 57:       endif
line 58: 
line 59:       if line =~# '^\s*<\!--'
line 60:         let xmlcomment = 1
line 61:       endif
line 62:       if xmlcomment
line 63:         if line =~# '-->'
line 64:           let xmlcomment = 0
line 65:         endif
line 66:         continue
line 67:       endif
line 68: 
line 69:       " This is correct order because both "<<EOF" and "EOF" matches end
line 70:       if heredoc != ''
line 71:         if line =~# heredoc
line 72:           let heredoc = ''
line 73:         endif
line 74:         continue
line 75:       endif
line 76:       let herematch = matchlist(line, '\C<<\W*\([A-Z]\+\)\s*$')
line 77:       if len(herematch) > 0
line 78:         let heredoc = herematch[1] . '$'
line 79:       endif
line 80: 
line 81:       if line[0] == "\t"
line 82:         let spaces_minus_tabs -= 1
line 83:       else
line 84:         if line[0] == " "
line 85:           let spaces_minus_tabs += 1
line 86:         endif
line 87:         let indent = len(matchstr(line, '^ *'))
line 88:         while stack[-1] > indent
line 89:           call remove(stack, -1)
line 90:         endwhile
line 91: 
line 92:         let indent_inc = indent - stack[-1]
line 93: 
line 94:         if indent_inc == 0 && len(stack) > 1
line 95:           let indent_inc = indent - stack[-2]
line 96:         endif
line 97: 
line 98:         if has_key(indents, indent_inc)
line 99:           let indents[indent_inc] += 1
line 100:           let prev_indent = indent
line 101:         endif
line 102: 
line 103:         if stack[-1] != indent
line 104:           call add(stack, indent)
line 105:         endif
line 106:       endif
line 107:     endfor
line 14:     for line in a:lines
line 15:       let lineno += 1
line 16: 
line 17:       if line =~# '^\s*$'
line 18:         continue
line 19:       endif
line 20: 
line 21:       if line =~# '^\s*/\*'
line 22:         let ccomment = 1
line 23:       endif
line 24:       if ccomment
line 25:         if line =~# '\*/'
line 26:           let ccomment = 0
line 27:         endif
line 28:         continue
line 29:       endif
line 30: 
line 31:       if line =~# '^=\w'
line 32:         let podcomment = 1
line 33:       endif
line 34:       if podcomment
line 35:         if line =~# '^=\%(end\|cut\)\>'
line 36:           let podcomment = 0
line 37:         endif
line 38:         continue
line 39:       endif
line 40: 
line 41:       if triplequote
line 42:         if line =~# '^[^"]*"""[^"]*$'
line 43:           let triplequote = 0
line 44:         endif
line 45:         continue
line 46:       elseif line =~# '^[^"]*"""[^"]*$'
line 47:         let triplequote = 1
line 48:       endif
line 49: 
line 50:       if backtick
line 51:         if line =~# '^[^`]*`[^`]*$'
line 52:           let backtick = 0
line 53:         endif
line 54:         continue
line 55:       elseif &filetype ==# 'go' && line =~# '^[^`]*`[^`]*$'
line 56:         let backtick = 1
line 57:       endif
line 58: 
line 59:       if line =~# '^\s*<\!--'
line 60:         let xmlcomment = 1
line 61:       endif
line 62:       if xmlcomment
line 63:         if line =~# '-->'
line 64:           let xmlcomment = 0
line 65:         endif
line 66:         continue
line 67:       endif
line 68: 
line 69:       " This is correct order because both "<<EOF" and "EOF" matches end
line 70:       if heredoc != ''
line 71:         if line =~# heredoc
line 72:           let heredoc = ''
line 73:         endif
line 74:         continue
line 75:       endif
line 76:       let herematch = matchlist(line, '\C<<\W*\([A-Z]\+\)\s*$')
line 77:       if len(herematch) > 0
line 78:         let heredoc = herematch[1] . '$'
line 79:       endif
line 80: 
line 81:       if line[0] == "\t"
line 82:         let spaces_minus_tabs -= 1
line 83:       else
line 84:         if line[0] == " "
line 85:           let spaces_minus_tabs += 1
line 86:         endif
line 87:         let indent = len(matchstr(line, '^ *'))
line 88:         while stack[-1] > indent
line 89:           call remove(stack, -1)
line 90:         endwhile
line 91: 
line 92:         let indent_inc = indent - stack[-1]
line 93: 
line 94:         if indent_inc == 0 && len(stack) > 1
line 95:           let indent_inc = indent - stack[-2]
line 96:         endif
line 97: 
line 98:         if has_key(indents, indent_inc)
line 99:           let indents[indent_inc] += 1
line 100:           let prev_indent = indent
line 101:         endif
line 102: 
line 103:         if stack[-1] != indent
line 104:           call add(stack, indent)
line 105:         endif
line 106:       endif
line 107:     endfor
line 14:     for line in a:lines
line 15:       let lineno += 1
line 16: 
line 17:       if line =~# '^\s*$'
line 18:         continue
line 19:       endif
line 20: 
line 21:       if line =~# '^\s*/\*'
line 22:         let ccomment = 1
line 23:       endif
line 24:       if ccomment
line 25:         if line =~# '\*/'
line 26:           let ccomment = 0
line 27:         endif
line 28:         continue
line 29:       endif
line 30: 
line 31:       if line =~# '^=\w'
line 32:         let podcomment = 1
line 33:       endif
line 34:       if podcomment
line 35:         if line =~# '^=\%(end\|cut\)\>'
line 36:           let podcomment = 0
line 37:         endif
line 38:         continue
line 39:       endif
line 40: 
line 41:       if triplequote
line 42:         if line =~# '^[^"]*"""[^"]*$'
line 43:           let triplequote = 0
line 44:         endif
line 45:         continue
line 46:       elseif line =~# '^[^"]*"""[^"]*$'
line 47:         let triplequote = 1
line 48:       endif
line 49: 
line 50:       if backtick
line 51:         if line =~# '^[^`]*`[^`]*$'
line 52:           let backtick = 0
line 53:         endif
line 54:         continue
line 55:       elseif &filetype ==# 'go' && line =~# '^[^`]*`[^`]*$'
line 56:         let backtick = 1
line 57:       endif
line 58: 
line 59:       if line =~# '^\s*<\!--'
line 60:         let xmlcomment = 1
line 61:       endif
line 62:       if xmlcomment
line 63:         if line =~# '-->'
line 64:           let xmlcomment = 0
line 65:         endif
line 66:         continue
line 67:       endif
line 68: 
line 69:       " This is correct order because both "<<EOF" and "EOF" matches end
line 70:       if heredoc != ''
line 71:         if line =~# heredoc
line 72:           let heredoc = ''
line 73:         endif
line 74:         continue
line 75:       endif
line 76:       let herematch = matchlist(line, '\C<<\W*\([A-Z]\+\)\s*$')
line 77:       if len(herematch) > 0
line 78:         let heredoc = herematch[1] . '$'
line 79:       endif
line 80: 
line 81:       if line[0] == "\t"
line 82:         let spaces_minus_tabs -= 1
line 83:       else
line 84:         if line[0] == " "
line 85:           let spaces_minus_tabs += 1
line 86:         endif
line 87:         let indent = len(matchstr(line, '^ *'))
line 88:         while stack[-1] > indent
line 89:           call remove(stack, -1)
line 90:         endwhile
line 91: 
line 92:         let indent_inc = indent - stack[-1]
line 93: 
line 94:         if indent_inc == 0 && len(stack) > 1
line 95:           let indent_inc = indent - stack[-2]
line 96:         endif
line 97: 
line 98:         if has_key(indents, indent_inc)
line 99:           let indents[indent_inc] += 1
line 100:           let prev_indent = indent
line 101:         endif
line 102: 
line 103:         if stack[-1] != indent
line 104:           call add(stack, indent)
line 105:         endif
line 106:       endif
line 107:     endfor
line 14:     for line in a:lines
line 15:       let lineno += 1
line 16: 
line 17:       if line =~# '^\s*$'
line 18:         continue
line 19:       endif
line 20: 
line 21:       if line =~# '^\s*/\*'
line 22:         let ccomment = 1
line 23:       endif
line 24:       if ccomment
line 25:         if line =~# '\*/'
line 26:           let ccomment = 0
line 27:         endif
line 28:         continue
line 29:       endif
line 30: 
line 31:       if line =~# '^=\w'
line 32:         let podcomment = 1
line 33:       endif
line 34:       if podcomment
line 35:         if line =~# '^=\%(end\|cut\)\>'
line 36:           let podcomment = 0
line 37:         endif
line 38:         continue
line 39:       endif
line 40: 
line 41:       if triplequote
line 42:         if line =~# '^[^"]*"""[^"]*$'
line 43:           let triplequote = 0
line 44:         endif
line 45:         continue
line 46:       elseif line =~# '^[^"]*"""[^"]*$'
line 47:         let triplequote = 1
line 48:       endif
line 49: 
line 50:       if backtick
line 51:         if line =~# '^[^`]*`[^`]*$'
line 52:           let backtick = 0
line 53:         endif
line 54:         continue
line 55:       elseif &filetype ==# 'go' && line =~# '^[^`]*`[^`]*$'
line 56:         let backtick = 1
line 57:       endif
line 58: 
line 59:       if line =~# '^\s*<\!--'
line 60:         let xmlcomment = 1
line 61:       endif
line 62:       if xmlcomment
line 63:         if line =~# '-->'
line 64:           let xmlcomment = 0
line 65:         endif
line 66:         continue
line 67:       endif
line 68: 
line 69:       " This is correct order because both "<<EOF" and "EOF" matches end
line 70:       if heredoc != ''
line 71:         if line =~# heredoc
line 72:           let heredoc = ''
line 73:         endif
line 74:         continue
line 75:       endif
line 76:       let herematch = matchlist(line, '\C<<\W*\([A-Z]\+\)\s*$')
line 77:       if len(herematch) > 0
line 78:         let heredoc = herematch[1] . '$'
line 79:       endif
line 80: 
line 81:       if line[0] == "\t"
line 82:         let spaces_minus_tabs -= 1
line 83:       else
line 84:         if line[0] == " "
line 85:           let spaces_minus_tabs += 1
line 86:         endif
line 87:         let indent = len(matchstr(line, '^ *'))
line 88:         while stack[-1] > indent
line 89:           call remove(stack, -1)
line 90:         endwhile
line 88:         while stack[-1] > indent
line 89:           call remove(stack, -1)
line 90:         endwhile
line 91: 
line 92:         let indent_inc = indent - stack[-1]
line 93: 
line 94:         if indent_inc == 0 && len(stack) > 1
line 95:           let indent_inc = indent - stack[-2]
line 96:         endif
line 97: 
line 98:         if has_key(indents, indent_inc)
line 99:           let indents[indent_inc] += 1
line 100:           let prev_indent = indent
line 101:         endif
line 102: 
line 103:         if stack[-1] != indent
line 104:           call add(stack, indent)
line 105:         endif
line 106:       endif
line 107:     endfor
line 14:     for line in a:lines
line 15:       let lineno += 1
line 16: 
line 17:       if line =~# '^\s*$'
line 18:         continue
line 19:       endif
line 20: 
line 21:       if line =~# '^\s*/\*'
line 22:         let ccomment = 1
line 23:       endif
line 24:       if ccomment
line 25:         if line =~# '\*/'
line 26:           let ccomment = 0
line 27:         endif
line 28:         continue
line 29:       endif
line 30: 
line 31:       if line =~# '^=\w'
line 32:         let podcomment = 1
line 33:       endif
line 34:       if podcomment
line 35:         if line =~# '^=\%(end\|cut\)\>'
line 36:           let podcomment = 0
line 37:         endif
line 38:         continue
line 39:       endif
line 40: 
line 41:       if triplequote
line 42:         if line =~# '^[^"]*"""[^"]*$'
line 43:           let triplequote = 0
line 44:         endif
line 45:         continue
line 46:       elseif line =~# '^[^"]*"""[^"]*$'
line 47:         let triplequote = 1
line 48:       endif
line 49: 
line 50:       if backtick
line 51:         if line =~# '^[^`]*`[^`]*$'
line 52:           let backtick = 0
line 53:         endif
line 54:         continue
line 55:       elseif &filetype ==# 'go' && line =~# '^[^`]*`[^`]*$'
line 56:         let backtick = 1
line 57:       endif
line 58: 
line 59:       if line =~# '^\s*<\!--'
line 60:         let xmlcomment = 1
line 61:       endif
line 62:       if xmlcomment
line 63:         if line =~# '-->'
line 64:           let xmlcomment = 0
line 65:         endif
line 66:         continue
line 67:       endif
line 68: 
line 69:       " This is correct order because both "<<EOF" and "EOF" matches end
line 70:       if heredoc != ''
line 71:         if line =~# heredoc
line 72:           let heredoc = ''
line 73:         endif
line 74:         continue
line 75:       endif
line 76:       let herematch = matchlist(line, '\C<<\W*\([A-Z]\+\)\s*$')
line 77:       if len(herematch) > 0
line 78:         let heredoc = herematch[1] . '$'
line 79:       endif
line 80: 
line 81:       if line[0] == "\t"
line 82:         let spaces_minus_tabs -= 1
line 83:       else
line 84:         if line[0] == " "
line 85:           let spaces_minus_tabs += 1
line 86:         endif
line 87:         let indent = len(matchstr(line, '^ *'))
line 88:         while stack[-1] > indent
line 89:           call remove(stack, -1)
line 90:         endwhile
line 88:         while stack[-1] > indent
line 89:           call remove(stack, -1)
line 90:         endwhile
line 91: 
line 92:         let indent_inc = indent - stack[-1]
line 93: 
line 94:         if indent_inc == 0 && len(stack) > 1
line 95:           let indent_inc = indent - stack[-2]
line 96:         endif
line 97: 
line 98:         if has_key(indents, indent_inc)
line 99:           let indents[indent_inc] += 1
line 100:           let prev_indent = indent
line 101:         endif
line 102: 
line 103:         if stack[-1] != indent
line 104:           call add(stack, indent)
line 105:         endif
line 106:       endif
line 107:     endfor
line 14:     for line in a:lines
line 15:       let lineno += 1
line 16: 
line 17:       if line =~# '^\s*$'
line 18:         continue
line 19:       endif
line 20: 
line 21:       if line =~# '^\s*/\*'
line 22:         let ccomment = 1
line 23:       endif
line 24:       if ccomment
line 25:         if line =~# '\*/'
line 26:           let ccomment = 0
line 27:         endif
line 28:         continue
line 29:       endif
line 30: 
line 31:       if line =~# '^=\w'
line 32:         let podcomment = 1
line 33:       endif
line 34:       if podcomment
line 35:         if line =~# '^=\%(end\|cut\)\>'
line 36:           let podcomment = 0
line 37:         endif
line 38:         continue
line 39:       endif
line 40: 
line 41:       if triplequote
line 42:         if line =~# '^[^"]*"""[^"]*$'
line 43:           let triplequote = 0
line 44:         endif
line 45:         continue
line 46:       elseif line =~# '^[^"]*"""[^"]*$'
line 47:         let triplequote = 1
line 48:       endif
line 49: 
line 50:       if backtick
line 51:         if line =~# '^[^`]*`[^`]*$'
line 52:           let backtick = 0
line 53:         endif
line 54:         continue
line 55:       elseif &filetype ==# 'go' && line =~# '^[^`]*`[^`]*$'
line 56:         let backtick = 1
line 57:       endif
line 58: 
line 59:       if line =~# '^\s*<\!--'
line 60:         let xmlcomment = 1
line 61:       endif
line 62:       if xmlcomment
line 63:         if line =~# '-->'
line 64:           let xmlcomment = 0
line 65:         endif
line 66:         continue
line 67:       endif
line 68: 
line 69:       " This is correct order because both "<<EOF" and "EOF" matches end
line 70:       if heredoc != ''
line 71:         if line =~# heredoc
line 72:           let heredoc = ''
line 73:         endif
line 74:         continue
line 75:       endif
line 76:       let herematch = matchlist(line, '\C<<\W*\([A-Z]\+\)\s*$')
line 77:       if len(herematch) > 0
line 78:         let heredoc = herematch[1] . '$'
line 79:       endif
line 80: 
line 81:       if line[0] == "\t"
line 82:         let spaces_minus_tabs -= 1
line 83:       else
line 84:         if line[0] == " "
line 85:           let spaces_minus_tabs += 1
line 86:         endif
line 87:         let indent = len(matchstr(line, '^ *'))
line 88:         while stack[-1] > indent
line 89:           call remove(stack, -1)
line 90:         endwhile
line 88:         while stack[-1] > indent
line 89:           call remove(stack, -1)
line 90:         endwhile
line 91: 
line 92:         let indent_inc = indent - stack[-1]
line 93: 
line 94:         if indent_inc == 0 && len(stack) > 1
line 95:           let indent_inc = indent - stack[-2]
line 96:         endif
line 97: 
line 98:         if has_key(indents, indent_inc)
line 99:           let indents[indent_inc] += 1
line 100:           let prev_indent = indent
line 101:         endif
line 102: 
line 103:         if stack[-1] != indent
line 104:           call add(stack, indent)
line 105:         endif
line 106:       endif
line 107:     endfor
line 14:     for line in a:lines
line 15:       let lineno += 1
line 16: 
line 17:       if line =~# '^\s*$'
line 18:         continue
line 19:       endif
line 20: 
line 21:       if line =~# '^\s*/\*'
line 22:         let ccomment = 1
line 23:       endif
line 24:       if ccomment
line 25:         if line =~# '\*/'
line 26:           let ccomment = 0
line 27:         endif
line 28:         continue
line 29:       endif
line 30: 
line 31:       if line =~# '^=\w'
line 32:         let podcomment = 1
line 33:       endif
line 34:       if podcomment
line 35:         if line =~# '^=\%(end\|cut\)\>'
line 36:           let podcomment = 0
line 37:         endif
line 38:         continue
line 39:       endif
line 40: 
line 41:       if triplequote
line 42:         if line =~# '^[^"]*"""[^"]*$'
line 43:           let triplequote = 0
line 44:         endif
line 45:         continue
line 46:       elseif line =~# '^[^"]*"""[^"]*$'
line 47:         let triplequote = 1
line 48:       endif
line 49: 
line 50:       if backtick
line 51:         if line =~# '^[^`]*`[^`]*$'
line 52:           let backtick = 0
line 53:         endif
line 54:         continue
line 55:       elseif &filetype ==# 'go' && line =~# '^[^`]*`[^`]*$'
line 56:         let backtick = 1
line 57:       endif
line 58: 
line 59:       if line =~# '^\s*<\!--'
line 60:         let xmlcomment = 1
line 61:       endif
line 62:       if xmlcomment
line 63:         if line =~# '-->'
line 64:           let xmlcomment = 0
line 65:         endif
line 66:         continue
line 67:       endif
line 68: 
line 69:       " This is correct order because both "<<EOF" and "EOF" matches end
line 70:       if heredoc != ''
line 71:         if line =~# heredoc
line 72:           let heredoc = ''
line 73:         endif
line 74:         continue
line 75:       endif
line 76:       let herematch = matchlist(line, '\C<<\W*\([A-Z]\+\)\s*$')
line 77:       if len(herematch) > 0
line 78:         let heredoc = herematch[1] . '$'
line 79:       endif
line 80: 
line 81:       if line[0] == "\t"
line 82:         let spaces_minus_tabs -= 1
line 83:       else
line 84:         if line[0] == " "
line 85:           let spaces_minus_tabs += 1
line 86:         endif
line 87:         let indent = len(matchstr(line, '^ *'))
line 88:         while stack[-1] > indent
line 89:           call remove(stack, -1)
line 90:         endwhile
line 91: 
line 92:         let indent_inc = indent - stack[-1]
line 93: 
line 94:         if indent_inc == 0 && len(stack) > 1
line 95:           let indent_inc = indent - stack[-2]
line 96:         endif
line 97: 
line 98:         if has_key(indents, indent_inc)
line 99:           let indents[indent_inc] += 1
line 100:           let prev_indent = indent
line 101:         endif
line 102: 
line 103:         if stack[-1] != indent
line 104:           call add(stack, indent)
line 105:         endif
line 106:       endif
line 107:     endfor
line 14:     for line in a:lines
line 15:       let lineno += 1
line 16: 
line 17:       if line =~# '^\s*$'
line 18:         continue
line 19:       endif
line 20: 
line 21:       if line =~# '^\s*/\*'
line 22:         let ccomment = 1
line 23:       endif
line 24:       if ccomment
line 25:         if line =~# '\*/'
line 26:           let ccomment = 0
line 27:         endif
line 28:         continue
line 29:       endif
line 30: 
line 31:       if line =~# '^=\w'
line 32:         let podcomment = 1
line 33:       endif
line 34:       if podcomment
line 35:         if line =~# '^=\%(end\|cut\)\>'
line 36:           let podcomment = 0
line 37:         endif
line 38:         continue
line 39:       endif
line 40: 
line 41:       if triplequote
line 42:         if line =~# '^[^"]*"""[^"]*$'
line 43:           let triplequote = 0
line 44:         endif
line 45:         continue
line 46:       elseif line =~# '^[^"]*"""[^"]*$'
line 47:         let triplequote = 1
line 48:       endif
line 49: 
line 50:       if backtick
line 51:         if line =~# '^[^`]*`[^`]*$'
line 52:           let backtick = 0
line 53:         endif
line 54:         continue
line 55:       elseif &filetype ==# 'go' && line =~# '^[^`]*`[^`]*$'
line 56:         let backtick = 1
line 57:       endif
line 58: 
line 59:       if line =~# '^\s*<\!--'
line 60:         let xmlcomment = 1
line 61:       endif
line 62:       if xmlcomment
line 63:         if line =~# '-->'
line 64:           let xmlcomment = 0
line 65:         endif
line 66:         continue
line 67:       endif
line 68: 
line 69:       " This is correct order because both "<<EOF" and "EOF" matches end
line 70:       if heredoc != ''
line 71:         if line =~# heredoc
line 72:           let heredoc = ''
line 73:         endif
line 74:         continue
line 75:       endif
line 76:       let herematch = matchlist(line, '\C<<\W*\([A-Z]\+\)\s*$')
line 77:       if len(herematch) > 0
line 78:         let heredoc = herematch[1] . '$'
line 79:       endif
line 80: 
line 81:       if line[0] == "\t"
line 82:         let spaces_minus_tabs -= 1
line 83:       else
line 84:         if line[0] == " "
line 85:           let spaces_minus_tabs += 1
line 86:         endif
line 87:         let indent = len(matchstr(line, '^ *'))
line 88:         while stack[-1] > indent
line 89:           call remove(stack, -1)
line 90:         endwhile
line 91: 
line 92:         let indent_inc = indent - stack[-1]
line 93: 
line 94:         if indent_inc == 0 && len(stack) > 1
line 95:           let indent_inc = indent - stack[-2]
line 96:         endif
line 97: 
line 98:         if has_key(indents, indent_inc)
line 99:           let indents[indent_inc] += 1
line 100:           let prev_indent = indent
line 101:         endif
line 102: 
line 103:         if stack[-1] != indent
line 104:           call add(stack, indent)
line 105:         endif
line 106:       endif
line 107:     endfor
line 14:     for line in a:lines
line 15:       let lineno += 1
line 16: 
line 17:       if line =~# '^\s*$'
line 18:         continue
line 19:       endif
line 20: 
line 21:       if line =~# '^\s*/\*'
line 22:         let ccomment = 1
line 23:       endif
line 24:       if ccomment
line 25:         if line =~# '\*/'
line 26:           let ccomment = 0
line 27:         endif
line 28:         continue
line 29:       endif
line 30: 
line 31:       if line =~# '^=\w'
line 32:         let podcomment = 1
line 33:       endif
line 34:       if podcomment
line 35:         if line =~# '^=\%(end\|cut\)\>'
line 36:           let podcomment = 0
line 37:         endif
line 38:         continue
line 39:       endif
line 40: 
line 41:       if triplequote
line 42:         if line =~# '^[^"]*"""[^"]*$'
line 43:           let triplequote = 0
line 44:         endif
line 45:         continue
line 46:       elseif line =~# '^[^"]*"""[^"]*$'
line 47:         let triplequote = 1
line 48:       endif
line 49: 
line 50:       if backtick
line 51:         if line =~# '^[^`]*`[^`]*$'
line 52:           let backtick = 0
line 53:         endif
line 54:         continue
line 55:       elseif &filetype ==# 'go' && line =~# '^[^`]*`[^`]*$'
line 56:         let backtick = 1
line 57:       endif
line 58: 
line 59:       if line =~# '^\s*<\!--'
line 60:         let xmlcomment = 1
line 61:       endif
line 62:       if xmlcomment
line 63:         if line =~# '-->'
line 64:           let xmlcomment = 0
line 65:         endif
line 66:         continue
line 67:       endif
line 68: 
line 69:       " This is correct order because both "<<EOF" and "EOF" matches end
line 70:       if heredoc != ''
line 71:         if line =~# heredoc
line 72:           let heredoc = ''
line 73:         endif
line 74:         continue
line 75:       endif
line 76:       let herematch = matchlist(line, '\C<<\W*\([A-Z]\+\)\s*$')
line 77:       if len(herematch) > 0
line 78:         let heredoc = herematch[1] . '$'
line 79:       endif
line 80: 
line 81:       if line[0] == "\t"
line 82:         let spaces_minus_tabs -= 1
line 83:       else
line 84:         if line[0] == " "
line 85:           let spaces_minus_tabs += 1
line 86:         endif
line 87:         let indent = len(matchstr(line, '^ *'))
line 88:         while stack[-1] > indent
line 89:           call remove(stack, -1)
line 90:         endwhile
line 91: 
line 92:         let indent_inc = indent - stack[-1]
line 93: 
line 94:         if indent_inc == 0 && len(stack) > 1
line 95:           let indent_inc = indent - stack[-2]
line 96:         endif
line 97: 
line 98:         if has_key(indents, indent_inc)
line 99:           let indents[indent_inc] += 1
line 100:           let prev_indent = indent
line 101:         endif
line 102: 
line 103:         if stack[-1] != indent
line 104:           call add(stack, indent)
line 105:         endif
line 106:       endif
line 107:     endfor
line 14:     for line in a:lines
line 15:       let lineno += 1
line 16: 
line 17:       if line =~# '^\s*$'
line 18:         continue
line 19:       endif
line 20: 
line 21:       if line =~# '^\s*/\*'
line 22:         let ccomment = 1
line 23:       endif
line 24:       if ccomment
line 25:         if line =~# '\*/'
line 26:           let ccomment = 0
line 27:         endif
line 28:         continue
line 29:       endif
line 30: 
line 31:       if line =~# '^=\w'
line 32:         let podcomment = 1
line 33:       endif
line 34:       if podcomment
line 35:         if line =~# '^=\%(end\|cut\)\>'
line 36:           let podcomment = 0
line 37:         endif
line 38:         continue
line 39:       endif
line 40: 
line 41:       if triplequote
line 42:         if line =~# '^[^"]*"""[^"]*$'
line 43:           let triplequote = 0
line 44:         endif
line 45:         continue
line 46:       elseif line =~# '^[^"]*"""[^"]*$'
line 47:         let triplequote = 1
line 48:       endif
line 49: 
line 50:       if backtick
line 51:         if line =~# '^[^`]*`[^`]*$'
line 52:           let backtick = 0
line 53:         endif
line 54:         continue
line 55:       elseif &filetype ==# 'go' && line =~# '^[^`]*`[^`]*$'
line 56:         let backtick = 1
line 57:       endif
line 58: 
line 59:       if line =~# '^\s*<\!--'
line 60:         let xmlcomment = 1
line 61:       endif
line 62:       if xmlcomment
line 63:         if line =~# '-->'
line 64:           let xmlcomment = 0
line 65:         endif
line 66:         continue
line 67:       endif
line 68: 
line 69:       " This is correct order because both "<<EOF" and "EOF" matches end
line 70:       if heredoc != ''
line 71:         if line =~# heredoc
line 72:           let heredoc = ''
line 73:         endif
line 74:         continue
line 75:       endif
line 76:       let herematch = matchlist(line, '\C<<\W*\([A-Z]\+\)\s*$')
line 77:       if len(herematch) > 0
line 78:         let heredoc = herematch[1] . '$'
line 79:       endif
line 80: 
line 81:       if line[0] == "\t"
line 82:         let spaces_minus_tabs -= 1
line 83:       else
line 84:         if line[0] == " "
line 85:           let spaces_minus_tabs += 1
line 86:         endif
line 87:         let indent = len(matchstr(line, '^ *'))
line 88:         while stack[-1] > indent
line 89:           call remove(stack, -1)
line 90:         endwhile
line 91: 
line 92:         let indent_inc = indent - stack[-1]
line 93: 
line 94:         if indent_inc == 0 && len(stack) > 1
line 95:           let indent_inc = indent - stack[-2]
line 96:         endif
line 97: 
line 98:         if has_key(indents, indent_inc)
line 99:           let indents[indent_inc] += 1
line 100:           let prev_indent = indent
line 101:         endif
line 102: 
line 103:         if stack[-1] != indent
line 104:           call add(stack, indent)
line 105:         endif
line 106:       endif
line 107:     endfor
line 14:     for line in a:lines
line 15:       let lineno += 1
line 16: 
line 17:       if line =~# '^\s*$'
line 18:         continue
line 19:       endif
line 20: 
line 21:       if line =~# '^\s*/\*'
line 22:         let ccomment = 1
line 23:       endif
line 24:       if ccomment
line 25:         if line =~# '\*/'
line 26:           let ccomment = 0
line 27:         endif
line 28:         continue
line 29:       endif
line 30: 
line 31:       if line =~# '^=\w'
line 32:         let podcomment = 1
line 33:       endif
line 34:       if podcomment
line 35:         if line =~# '^=\%(end\|cut\)\>'
line 36:           let podcomment = 0
line 37:         endif
line 38:         continue
line 39:       endif
line 40: 
line 41:       if triplequote
line 42:         if line =~# '^[^"]*"""[^"]*$'
line 43:           let triplequote = 0
line 44:         endif
line 45:         continue
line 46:       elseif line =~# '^[^"]*"""[^"]*$'
line 47:         let triplequote = 1
line 48:       endif
line 49: 
line 50:       if backtick
line 51:         if line =~# '^[^`]*`[^`]*$'
line 52:           let backtick = 0
line 53:         endif
line 54:         continue
line 55:       elseif &filetype ==# 'go' && line =~# '^[^`]*`[^`]*$'
line 56:         let backtick = 1
line 57:       endif
line 58: 
line 59:       if line =~# '^\s*<\!--'
line 60:         let xmlcomment = 1
line 61:       endif
line 62:       if xmlcomment
line 63:         if line =~# '-->'
line 64:           let xmlcomment = 0
line 65:         endif
line 66:         continue
line 67:       endif
line 68: 
line 69:       " This is correct order because both "<<EOF" and "EOF" matches end
line 70:       if heredoc != ''
line 71:         if line =~# heredoc
line 72:           let heredoc = ''
line 73:         endif
line 74:         continue
line 75:       endif
line 76:       let herematch = matchlist(line, '\C<<\W*\([A-Z]\+\)\s*$')
line 77:       if len(herematch) > 0
line 78:         let heredoc = herematch[1] . '$'
line 79:       endif
line 80: 
line 81:       if line[0] == "\t"
line 82:         let spaces_minus_tabs -= 1
line 83:       else
line 84:         if line[0] == " "
line 85:           let spaces_minus_tabs += 1
line 86:         endif
line 87:         let indent = len(matchstr(line, '^ *'))
line 88:         while stack[-1] > indent
line 89:           call remove(stack, -1)
line 90:         endwhile
line 91: 
line 92:         let indent_inc = indent - stack[-1]
line 93: 
line 94:         if indent_inc == 0 && len(stack) > 1
line 95:           let indent_inc = indent - stack[-2]
line 96:         endif
line 97: 
line 98:         if has_key(indents, indent_inc)
line 99:           let indents[indent_inc] += 1
line 100:           let prev_indent = indent
line 101:         endif
line 102: 
line 103:         if stack[-1] != indent
line 104:           call add(stack, indent)
line 105:         endif
line 106:       endif
line 107:     endfor
line 108: 
line 109:     if spaces_minus_tabs < 0
line 110:       setlocal noexpandtab
line 111:       let &l:shiftwidth=&tabstop
line 112:       return 1
line 113:     endif
line 114: 
line 115:     let shiftwidth = s:get_shiftwidth(indents)
calling function <SNR>15_detect_indent[11]..<SNR>15_guess[115]..<SNR>15_get_shiftwidth({'2': 0, '3': 0, '4': 80, '6': 0, '8': 0})

line 1:     let shiftwidth = 0
line 2:     let max_count = 0
line 3:     let final_counts = {}
line 4:     for [indent, indent_count] in items(a:indents)
line 5:       let indent_count = indent_count * 1.5
line 6:       for [indent2, indent2_count] in items(a:indents)
line 7:         if indent2 > indent && indent2 % indent == 0
line 8:           let indent_count = indent_count + indent2_count
line 9:         endif
line 10:       endfor
line 6:       for [indent2, indent2_count] in items(a:indents)
line 7:         if indent2 > indent && indent2 % indent == 0
line 8:           let indent_count = indent_count + indent2_count
line 9:         endif
line 10:       endfor
line 6:       for [indent2, indent2_count] in items(a:indents)
line 7:         if indent2 > indent && indent2 % indent == 0
line 8:           let indent_count = indent_count + indent2_count
line 9:         endif
line 10:       endfor
line 6:       for [indent2, indent2_count] in items(a:indents)
line 7:         if indent2 > indent && indent2 % indent == 0
line 8:           let indent_count = indent_count + indent2_count
line 9:         endif
line 10:       endfor
line 6:       for [indent2, indent2_count] in items(a:indents)
line 7:         if indent2 > indent && indent2 % indent == 0
line 8:           let indent_count = indent_count + indent2_count
line 9:         endif
line 10:       endfor
line 6:       for [indent2, indent2_count] in items(a:indents)
line 7:         if indent2 > indent && indent2 % indent == 0
line 8:           let indent_count = indent_count + indent2_count
line 9:         endif
line 10:       endfor
line 11:       let final_counts[indent] = indent_count
line 12:     endfor
line 4:     for [indent, indent_count] in items(a:indents)
line 5:       let indent_count = indent_count * 1.5
line 6:       for [indent2, indent2_count] in items(a:indents)
line 7:         if indent2 > indent && indent2 % indent == 0
line 8:           let indent_count = indent_count + indent2_count
line 9:         endif
line 10:       endfor
line 6:       for [indent2, indent2_count] in items(a:indents)
line 7:         if indent2 > indent && indent2 % indent == 0
line 8:           let indent_count = indent_count + indent2_count
line 9:         endif
line 10:       endfor
line 6:       for [indent2, indent2_count] in items(a:indents)
line 7:         if indent2 > indent && indent2 % indent == 0
line 8:           let indent_count = indent_count + indent2_count
line 9:         endif
line 10:       endfor
line 6:       for [indent2, indent2_count] in items(a:indents)
line 7:         if indent2 > indent && indent2 % indent == 0
line 8:           let indent_count = indent_count + indent2_count
line 9:         endif
line 10:       endfor
line 6:       for [indent2, indent2_count] in items(a:indents)
line 7:         if indent2 > indent && indent2 % indent == 0
line 8:           let indent_count = indent_count + indent2_count
line 9:         endif
line 10:       endfor
line 6:       for [indent2, indent2_count] in items(a:indents)
line 7:         if indent2 > indent && indent2 % indent == 0
line 8:           let indent_count = indent_count + indent2_count
line 9:         endif
line 10:       endfor
line 11:       let final_counts[indent] = indent_count
line 12:     endfor
line 4:     for [indent, indent_count] in items(a:indents)
line 5:       let indent_count = indent_count * 1.5
line 6:       for [indent2, indent2_count] in items(a:indents)
line 7:         if indent2 > indent && indent2 % indent == 0
line 8:           let indent_count = indent_count + indent2_count
line 9:         endif
line 10:       endfor
line 6:       for [indent2, indent2_count] in items(a:indents)
line 7:         if indent2 > indent && indent2 % indent == 0
line 8:           let indent_count = indent_count + indent2_count
line 9:         endif
line 10:       endfor
line 6:       for [indent2, indent2_count] in items(a:indents)
line 7:         if indent2 > indent && indent2 % indent == 0
line 8:           let indent_count = indent_count + indent2_count
line 9:         endif
line 10:       endfor
line 6:       for [indent2, indent2_count] in items(a:indents)
line 7:         if indent2 > indent && indent2 % indent == 0
line 8:           let indent_count = indent_count + indent2_count
line 9:         endif
line 10:       endfor
line 6:       for [indent2, indent2_count] in items(a:indents)
line 7:         if indent2 > indent && indent2 % indent == 0
line 8:           let indent_count = indent_count + indent2_count
line 9:         endif
line 10:       endfor
line 6:       for [indent2, indent2_count] in items(a:indents)
line 7:         if indent2 > indent && indent2 % indent == 0
line 8:           let indent_count = indent_count + indent2_count
line 9:         endif
line 10:       endfor
line 11:       let final_counts[indent] = indent_count
line 12:     endfor
line 4:     for [indent, indent_count] in items(a:indents)
line 5:       let indent_count = indent_count * 1.5
line 6:       for [indent2, indent2_count] in items(a:indents)
line 7:         if indent2 > indent && indent2 % indent == 0
line 8:           let indent_count = indent_count + indent2_count
line 9:         endif
line 10:       endfor
line 6:       for [indent2, indent2_count] in items(a:indents)
line 7:         if indent2 > indent && indent2 % indent == 0
line 8:           let indent_count = indent_count + indent2_count
line 9:         endif
line 10:       endfor
line 6:       for [indent2, indent2_count] in items(a:indents)
line 7:         if indent2 > indent && indent2 % indent == 0
line 8:           let indent_count = indent_count + indent2_count
line 9:         endif
line 10:       endfor
line 6:       for [indent2, indent2_count] in items(a:indents)
line 7:         if indent2 > indent && indent2 % indent == 0
line 8:           let indent_count = indent_count + indent2_count
line 9:         endif
line 10:       endfor
line 6:       for [indent2, indent2_count] in items(a:indents)
line 7:         if indent2 > indent && indent2 % indent == 0
line 8:           let indent_count = indent_count + indent2_count
line 9:         endif
line 10:       endfor
line 6:       for [indent2, indent2_count] in items(a:indents)
line 7:         if indent2 > indent && indent2 % indent == 0
line 8:           let indent_count = indent_count + indent2_count
line 9:         endif
line 10:       endfor
line 11:       let final_counts[indent] = indent_count
line 12:     endfor
line 4:     for [indent, indent_count] in items(a:indents)
line 5:       let indent_count = indent_count * 1.5
line 6:       for [indent2, indent2_count] in items(a:indents)
line 7:         if indent2 > indent && indent2 % indent == 0
line 8:           let indent_count = indent_count + indent2_count
line 9:         endif
line 10:       endfor
line 6:       for [indent2, indent2_count] in items(a:indents)
line 7:         if indent2 > indent && indent2 % indent == 0
line 8:           let indent_count = indent_count + indent2_count
line 9:         endif
line 10:       endfor
line 6:       for [indent2, indent2_count] in items(a:indents)
line 7:         if indent2 > indent && indent2 % indent == 0
line 8:           let indent_count = indent_count + indent2_count
line 9:         endif
line 10:       endfor
line 6:       for [indent2, indent2_count] in items(a:indents)
line 7:         if indent2 > indent && indent2 % indent == 0
line 8:           let indent_count = indent_count + indent2_count
line 9:         endif
line 10:       endfor
line 6:       for [indent2, indent2_count] in items(a:indents)
line 7:         if indent2 > indent && indent2 % indent == 0
line 8:           let indent_count = indent_count + indent2_count
line 9:         endif
line 10:       endfor
line 6:       for [indent2, indent2_count] in items(a:indents)
line 7:         if indent2 > indent && indent2 % indent == 0
line 8:           let indent_count = indent_count + indent2_count
line 9:         endif
line 10:       endfor
line 11:       let final_counts[indent] = indent_count
line 12:     endfor
line 4:     for [indent, indent_count] in items(a:indents)
line 5:       let indent_count = indent_count * 1.5
line 6:       for [indent2, indent2_count] in items(a:indents)
line 7:         if indent2 > indent && indent2 % indent == 0
line 8:           let indent_count = indent_count + indent2_count
line 9:         endif
line 10:       endfor
line 11:       let final_counts[indent] = indent_count
line 12:     endfor
line 13:     for [indent, final_count] in items(final_counts)
line 14:       if final_count > max_count
line 15:         let shiftwidth = indent
line 16:         let max_count = final_count
line 17:       endif
line 18:     endfor
line 13:     for [indent, final_count] in items(final_counts)
line 14:       if final_count > max_count
line 15:         let shiftwidth = indent
line 16:         let max_count = final_count
line 17:       endif
line 18:     endfor
line 13:     for [indent, final_count] in items(final_counts)
line 14:       if final_count > max_count
line 15:         let shiftwidth = indent
line 16:         let max_count = final_count
line 17:       endif
line 18:     endfor
line 13:     for [indent, final_count] in items(final_counts)
line 14:       if final_count > max_count
line 15:         let shiftwidth = indent
line 16:         let max_count = final_count
line 17:       endif
line 18:     endfor
line 13:     for [indent, final_count] in items(final_counts)
line 14:       if final_count > max_count
line 15:         let shiftwidth = indent
line 16:         let max_count = final_count
line 17:       endif
line 18:     endfor
line 13:     for [indent, final_count] in items(final_counts)
line 14:       if final_count > max_count
line 15:         let shiftwidth = indent
line 16:         let max_count = final_count
line 17:       endif
line 18:     endfor
line 19:     return shiftwidth
function <SNR>15_detect_indent[11]..<SNR>15_guess[115]..<SNR>15_get_shiftwidth returning '4'

continuing in function <SNR>15_detect_indent[11]..<SNR>15_guess

line 116: 
line 117:     if shiftwidth > 0
line 118:       setlocal expandtab
line 119:       let &l:shiftwidth=shiftwidth
line 120:       try
line 121:         " Sunchronize tabstop with shiftwidth
line 122:         let &l:softtabstop = -1
line 123:       catch /^Vim\%((\a\+)\)\=:E487/
line 124:         " -1 was not supported before Vim 7.4
line 125:         let &l:softtabstop = a:num_spaces
line 126:       endtry
line 127:       return 1
function <SNR>15_detect_indent[11]..<SNR>15_guess returning #1

continuing in function <SNR>15_detect_indent

line 12:       return
function <SNR>15_detect_indent returning #0

continuing in BufEnter Autocommands for "*"

Executing BufEnter Autocommands for "*"
autocommand sil call s:LocalBrowse(expand("<amatch>"))

Executing: sil call s:LocalBrowse(expand("<amatch>"))
calling function <SNR>31_LocalBrowse('/Users/ablanken/Sync/src/neovim-conf/conf/nvim/init.lua')

line 1:   " Unfortunate interaction -- only DechoMsg debugging calls can be safely used here.
line 2:   " Otherwise, the BufEnter event gets triggered when attempts to write to
line 3:   " the DBG buffer are made.
line 4: 
line 5:   if !exists("s:vimentered")
line 6:    " If s:vimentered doesn't exist, then the VimEnter event hasn't fired.  It will,
line 7:    " and so s:VimEnter() will then be calling this routine, but this time with s:vimentered defined.
line 8: "   call Dfunc("s:LocalBrowse(dirname<".a:dirname.">)  (s:vimentered doesn't exist)")
line 9: "   call Dret("s:LocalBrowse")
line 10:    return
line 11:   endif
line 12: 
line 13: "  call Dfunc("s:LocalBrowse(dirname<".a:dirname.">)  (s:vimentered=".s:vimentered.")")
line 14: 
line 15:   if has("amiga")
line 16:    " The check against '' is made for the Amiga, where the empty
line 17:    " string is the current directory and not checking would break
line 18:    " things such as the help command.
line 19: "   call Decho("(LocalBrowse) dirname<".a:dirname.">  (isdirectory, amiga)")
line 20:    if a:dirname != '' && isdirectory(a:dirname)
line 21:     sil! call netrw#LocalBrowseCheck(a:dirname)
line 22:     if exists("w:netrw_bannercnt") && line('.') < w:netrw_bannercnt
line 23:      exe w:netrw_bannercnt
line 24:     endif
line 25:    endif
line 26: 
line 27:   elseif isdirectory(a:dirname)
line 28: "   call Decho("(LocalBrowse) dirname<".a:dirname."> ft=".&ft."  (isdirectory, not amiga)")
line 29: "   call Dredir("LocalBrowse ft last set: ","verbose set ft")
line 30:    " Jul 13, 2021: for whatever reason, preceding the following call with
line 31:    " a   sil!  causes an unbalanced if-endif vim error
line 32:    call netrw#LocalBrowseCheck(a:dirname)
line 33:    if exists("w:netrw_bannercnt") && line('.') < w:netrw_bannercnt
line 34:     exe w:netrw_bannercnt
line 35:    endif
line 36: 
line 37:   else
line 38:    " not a directory, ignore it
line 39: "   call Decho("(LocalBrowse) dirname<".a:dirname."> not a directory, ignoring...")
line 40:   endif
line 41: 
line 42: "  call Dret("s:LocalBrowse")
function <SNR>31_LocalBrowse returning #0

continuing in BufEnter Autocommands for "*"

Executing BufEnter Autocommands for "*"
autocommand call s:Autocmd('BufEnter', +expand('<abuf>'))

Executing: call s:Autocmd('BufEnter', +expand('<abuf>'))
calling function <SNR>44_Autocmd('BufEnter', 2)

line 1:   if !get(g:, 'coc_workspace_initialized', 0)
line 2:     return
function <SNR>44_Autocmd returning #0

continuing in BufEnter Autocommands for "*"

Executing BufEnter Autocommands for "*"
autocommand call suda#BufEnter()

Executing: call suda#BufEnter()
calling function suda#BufEnter()

line 1:   if exists('b:suda_smart_edit_checked')
line 2:     return
line 3:   endif
line 4:   let b:suda_smart_edit_checked = 1
line 5:   let bufname = expand('<afile>')
line 6:   if !empty(&buftype) || empty(bufname) || match(bufname, '^[a-z]\+://*') isnot# -1 || isdirectory(bufname)
line 10:     " Non file buffer
line 11:     return
line 12:   elseif filereadable(bufname) && filewritable(bufname)
line 13:     " File is readable and writeable
line 14:     return
function suda#BufEnter returning #0

continuing in BufEnter Autocommands for "*"

Executing BufEnter Autocommands for "*"
autocommand if !g:rooter_manual_only | Rooter | endif

Executing: if !g:rooter_manual_only | Rooter | endif
Executing:  Rooter | endif
Executing: call <80><fd>R65_rooter()
calling function <SNR>65_rooter()

line 1:   if !s:activate() | return | endif
calling function <SNR>65_rooter[1]..<SNR>65_activate()

line 1:   " Directory browser plugins (e.g. vim-dirvish, NERDTree) tend to
line 2:   " set a nofile buftype when you open a directory.
line 3:   if &buftype != '' && &buftype != 'nofile' | return 0 | endif
line 3:  return 0 | endif
line 3:  endif
line 4: 
line 5:   let patterns = split(g:rooter_targets, ',')
line 6:   let fn = expand('%:p', 1)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(conf/nvim)
chdir(/Users/ablanken/Sync/src/neovim-conf)
line 7: 
line 8:   if fn =~ 'NERD_tree_\d\+$' | let fn = b:NERDTree.root.path.str().'/' | endif
line 8:  let fn = b:NERDTree.root.path.str().'/' | endif
line 8:  endif
line 9: 
line 10:   " directory
line 11:   if empty(fn) || fn[-1:] == '/'
line 12:     return index(patterns, '/') != -1
line 13:   endif
line 14: 
line 15:   " file
line 16:   if !filereadable(fn) | return 0 | endif
line 16:  return 0 | endif
line 16:  endif
line 17:   if !exists('*glob2regpat') | return 1 | endif
line 17:  return 1 | endif
line 17:  endif
line 18: 
line 19:   for p in filter(copy(patterns), 'v:val != "/"')
line 20:     if fn =~ glob2regpat(p)
line 21:       return 1
function <SNR>65_rooter[1]..<SNR>65_activate returning #1

continuing in function <SNR>65_rooter

line 1:  return | endif
line 1:  endif
line 2: 
line 3:   let root = getbufvar('%', 'rootDir')
line 4:   if empty(root)
line 5:     let root = s:root()
line 6:     call setbufvar('%', 'rootDir', root)
line 7:   endif
line 8: 
line 9:   if empty(root)
line 10:     call s:rootless()
line 11:     return
line 12:   endif
line 13: 
line 14:   call s:cd(root)
calling function <SNR>65_rooter[14]..<SNR>65_cd('/Users/ablanken/Sync/src/neovim-conf')

line 1:   if a:dir == getcwd() | return | endif
line 1:  return | endif
function <SNR>65_rooter[14]..<SNR>65_cd returning #0

continuing in function <SNR>65_rooter

function <SNR>65_rooter returning #0

continuing in BufEnter Autocommands for "*"

Executing:  endif
Executing OptionSet Autocommands for "expandtab"
autocommand IndentBlanklineRefresh

Executing: IndentBlanklineRefresh
Executing: call s:try('lua require("indent_blankline.commands").refresh("" == "!")')
calling function <SNR>54_try('lua require("indent_blankline.commands").refresh("" == "!")')

line 1:     try
line 2:         execute a:cmd
line 2: lua require("indent_blankline.commands").refresh("" == "!")
Exception thrown: Vim(lua):E12: Command not allowed from exrc/vimrc in current dir or tag search

line 3:     catch /E12/
Exception caught: Vim(lua):E12: Command not allowed from exrc/vimrc in current dir or tag search

line 4:         return
Exception finished: Vim(lua):E12: Command not allowed from exrc/vimrc in current dir or tag search

:return  made pending

line 5:     endtry
:return  resumed

function <SNR>54_try returning #0

continuing in OptionSet Autocommands for "expandtab"

Executing OptionSet Autocommands for "shiftwidth"
autocommand IndentBlanklineRefresh

Executing: IndentBlanklineRefresh
Executing: call s:try('lua require("indent_blankline.commands").refresh("" == "!")')
calling function <SNR>54_try('lua require("indent_blankline.commands").refresh("" == "!")')

line 1:     try
line 2:         execute a:cmd
line 2: lua require("indent_blankline.commands").refresh("" == "!")
Exception thrown: Vim(lua):E12: Command not allowed from exrc/vimrc in current dir or tag search

line 3:     catch /E12/
Exception caught: Vim(lua):E12: Command not allowed from exrc/vimrc in current dir or tag search

line 4:         return
Exception finished: Vim(lua):E12: Command not allowed from exrc/vimrc in current dir or tag search

:return  made pending

line 5:     endtry
:return  resumed

function <SNR>54_try returning #0

continuing in OptionSet Autocommands for "shiftwidth"

Executing OptionSet Autocommands for "tabstop"
autocommand IndentBlanklineRefresh

Executing: IndentBlanklineRefresh
Executing: call s:try('lua require("indent_blankline.commands").refresh("" == "!")')
calling function <SNR>54_try('lua require("indent_blankline.commands").refresh("" == "!")')

line 1:     try
line 2:         execute a:cmd
line 2: lua require("indent_blankline.commands").refresh("" == "!")
Exception thrown: Vim(lua):E12: Command not allowed from exrc/vimrc in current dir or tag search

line 3:     catch /E12/
Exception caught: Vim(lua):E12: Command not allowed from exrc/vimrc in current dir or tag search

line 4:         return
Exception finished: Vim(lua):E12: Command not allowed from exrc/vimrc in current dir or tag search

:return  made pending

line 5:     endtry
:return  resumed

function <SNR>54_try returning #0

continuing in OptionSet Autocommands for "tabstop"

Executing BufWinEnter Autocommands for "*"
autocommand if &ft == "" && expand("<afile>:e") == "" | call s:Observe() | endif

Executing: if &ft == "" && expand("<afile>:e") == "" | call s:Observe() | endif
Executing:  call s:Observe() | endif
Executing:  endif
Executing BufWinEnter Autocommands for "*"
autocommand call s:Autocmd('BufWinEnter', +expand('<abuf>'), win_getid())

Executing: call s:Autocmd('BufWinEnter', +expand('<abuf>'), win_getid())
calling function <SNR>44_Autocmd('BufWinEnter', 2, 1000)

line 1:   if !get(g:, 'coc_workspace_initialized', 0)
line 2:     return
function <SNR>44_Autocmd returning #0

continuing in BufWinEnter Autocommands for "*"

Executing BufWinEnter Autocommands for "*"
autocommand IndentBlanklineRefresh

Executing: IndentBlanklineRefresh
Executing: call s:try('lua require("indent_blankline.commands").refresh("" == "!")')
calling function <SNR>54_try('lua require("indent_blankline.commands").refresh("" == "!")')

line 1:     try
line 2:         execute a:cmd
line 2: lua require("indent_blankline.commands").refresh("" == "!")
line 3:     catch /E12/
line 4:         return
line 5:     endtry
function <SNR>54_try returning #0

continuing in BufWinEnter Autocommands for "*"

line 19: unlet! b:keymap_name
line 20: argglobal
line 21: balt Sync/src/neovim-conf/Sync/src/neovim-conf/Sync/src/neovim-conf/macinstall.sh
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(Sync/src/neovim-conf/Sync/src/neovim-conf/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf/Sync/src/neovim-conf/Sync/src/neovim-conf/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf)
line 22: setlocal fdm=manual
line 23: setlocal fde=0
line 24: setlocal fmr={{{,}}}
line 25: setlocal fdi=#
line 26: setlocal fdl=0
line 27: setlocal fml=1
line 28: setlocal fdn=20
line 29: setlocal fen
line 30: silent! normal! zE
Searching for "autoload/provider/clipboard.vim" in runtime path
Searching for "/Users/ablanken/.config/nvim/autoload/provider/clipboard.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/autoload/provider/clipboard.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/42header/autoload/provider/clipboard.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/auto-session/autoload/provider/clipboard.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/cheatsheet.nvim/autoload/provider/clipboard.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/coc-nvim-lua/autoload/provider/clipboard.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/coc.nvim/autoload/provider/clipboard.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/Comment.nvim/autoload/provider/clipboard.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/c_formatter_42.vim/autoload/provider/clipboard.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/FTerm.nvim/autoload/provider/clipboard.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/gentoo-syntax/autoload/provider/clipboard.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/gitsigns.nvim/autoload/provider/clipboard.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/indent-blankline.nvim/autoload/provider/clipboard.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/lualine.nvim/autoload/provider/clipboard.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/neon/autoload/provider/clipboard.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/nvim-neoclip.lua/autoload/provider/clipboard.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/nvim-treesitter/autoload/provider/clipboard.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/nvim-web-devicons/autoload/provider/clipboard.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/packer.nvim/autoload/provider/clipboard.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/plenary.nvim/autoload/provider/clipboard.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/session-lens/autoload/provider/clipboard.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/sqlite.lua/autoload/provider/clipboard.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/suda.vim/autoload/provider/clipboard.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/telescope-file-browser.nvim/autoload/provider/clipboard.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/telescope-fzf-native.nvim/autoload/provider/clipboard.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/telescope-packer.nvim/autoload/provider/clipboard.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/telescope-repo.nvim/autoload/provider/clipboard.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/telescope-symbols.nvim/autoload/provider/clipboard.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/telescope.nvim/autoload/provider/clipboard.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/vim-fugitive/autoload/provider/clipboard.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/vim-polyglot/autoload/provider/clipboard.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/vim-rooter/autoload/provider/clipboard.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/which-key.nvim/autoload/provider/clipboard.vim"
Searching for "/Users/ablanken/.local/nvim-brew/Cellar/neovim/0.7.0/share/nvim/runtime/autoload/provider/clipboard.vim"
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/nvim-brew/Cellar/neovim/0.7.0/share/nvim/runtime/autoload/provider)
chdir(/Users/ablanken/Sync/src/neovim-conf)
line 30: sourcing "/Users/ablanken/.local/nvim-brew/Cellar/neovim/0.7.0/share/nvim/runtime/autoload/provider/clipboard.vim"
line 1: " The clipboard provider uses shell commands to communicate with the clipboard.
line 2: " The provider function will only be registered if a supported command is
line 3: " available.
line 4: 
line 5: if exists('g:loaded_clipboard_provider')
line 6:   finish
line 7: endif
line 8: " Default to 1.  provider#clipboard#Executable() may set 2.
line 9: " To force a reload:
line 10: "   :unlet g:loaded_clipboard_provider
line 11: "   :runtime autoload/provider/clipboard.vim
line 12: let g:loaded_clipboard_provider = 1
line 13: 
line 14: let s:copy = {}
line 15: let s:paste = {}
line 16: let s:clipboard = {}
line 17: 
line 18: " When caching is enabled, store the jobid of the xclip/xsel process keeping
line 19: " ownership of the selection, so we know how long the cache is valid.
line 20: let s:selection = { 'owner': 0, 'data': [], 'stderr_buffered': v:true }
line 21: 
line 22: function! s:selection.on_exit(jobid, data, event) abort
line 34: 
line 35: let s:selections = { '*': s:selection, '+': copy(s:selection) }
line 36: 
line 37: function! s:try_cmd(cmd, ...) abort
line 50: 
line 51: " Returns TRUE if `cmd` exits with success, else FALSE.
line 52: function! s:cmd_ok(cmd) abort
line 56: 
line 57: function! s:split_cmd(cmd) abort
line 60: 
line 61: let s:cache_enabled = 1
line 62: let s:err = ''
line 63: 
line 64: function! provider#clipboard#Error() abort
line 67: 
line 68: function! provider#clipboard#Executable() abort
line 152: 
line 153: function! s:clipboard.get(reg) abort
line 170: 
line 171: function! s:clipboard.set(lines, regtype, reg) abort
line 229: 
line 230: function! provider#clipboard#Call(method, args) abort
line 241: 
line 242: " eval_has_provider() decides based on this variable.
line 243: let g:loaded_clipboard_provider = empty(provider#clipboard#Executable()) ? 1 : 2
calling function provider#clipboard#Executable()

line 1:   if exists('g:clipboard')
line 2:     if type({}) isnot# type(g:clipboard) || type({}) isnot# type(get(g:clipboard, 'copy', v:null)) || type({}) isnot# type(get(g:clipboard, 'paste', v:null))
line 5:       let s:err = 'clipboard: invalid g:clipboard'
line 6:       return ''
line 7:     endif
line 8: 
line 9:     let s:copy = {}
line 10:     let s:copy['+'] = s:split_cmd(get(g:clipboard.copy, '+', v:null))
line 11:     let s:copy['*'] = s:split_cmd(get(g:clipboard.copy, '*', v:null))
line 12: 
line 13:     let s:paste = {}
line 14:     let s:paste['+'] = s:split_cmd(get(g:clipboard.paste, '+', v:null))
line 15:     let s:paste['*'] = s:split_cmd(get(g:clipboard.paste, '*', v:null))
line 16: 
line 17:     let s:cache_enabled = get(g:clipboard, 'cache_enabled', 0)
line 18:     return get(g:clipboard, 'name', 'g:clipboard')
line 19:   elseif has('mac')
line 20:     let s:copy['+'] = ['pbcopy']
line 21:     let s:paste['+'] = ['pbpaste']
line 22:     let s:copy['*'] = s:copy['+']
line 23:     let s:paste['*'] = s:paste['+']
line 24:     let s:cache_enabled = 0
line 25:     return 'pbcopy'
function provider#clipboard#Executable returning 'pbcopy'

continuing in /Users/ablanken/.local/nvim-brew/Cellar/neovim/0.7.0/share/nvim/runtime/autoload/provider/clipboard.vim

finished sourcing /Users/ablanken/.local/nvim-brew/Cellar/neovim/0.7.0/share/nvim/runtime/autoload/provider/clipboard.vim
continuing in /Users/ablanken/.local/share/nvim/sessions/%Users%ablanken%Sync%src%neovim-conf.vim
line 31: let &fdl = &fdl
line 32: let s:l = 6 - ((0 * winheight(0) + 23) / 47)
line 33: if s:l < 1 | let s:l = 1 | endif
line 33:  let s:l = 1 | endif
line 33:  endif
line 34: keepjumps exe s:l
line 34: 6
line 35: normal! zt
line 36: keepjumps 6
line 37: normal! 014|
line 38: lcd ~/Sync/src/neovim-conf
[window] /Users/ablanken/Sync/src/neovim-conf
line 39: tabnext 1
line 40: if exists('s:wipebuf') && len(win_findbuf(s:wipebuf)) == 0 && getbufvar(s:wipebuf, '&buftype') isnot# 'terminal'
line 41:   silent exe 'bwipe ' . s:wipebuf
line 41: bwipe 1
Executing BufUnload Autocommands for "*"
autocommand call s:Autocmd('BufUnload', +expand('<abuf>'))

Executing: call s:Autocmd('BufUnload', +expand('<abuf>'))
calling function <SNR>44_Autocmd('BufUnload', 1)

line 1:   if !get(g:, 'coc_workspace_initialized', 0)
line 2:     return
function <SNR>44_Autocmd returning #0

continuing in BufUnload Autocommands for "*"

auto-removing autocommand: CursorHold <buffer=1>
auto-removing autocommand: CursorHoldI <buffer=1>
line 42: endif
line 43: unlet! s:wipebuf
line 44: set winheight=1 winwidth=20
line 45: let &shortmess = s:shortmess_save
line 46: let s:sx = expand("<sfile>:p:r")."x.vim"
line 47: if filereadable(s:sx)
line 48:   exe "source " . fnameescape(s:sx)
line 49: endif
line 50: let &g:so = s:so_save | let &g:siso = s:siso_save
line 50:  let &g:siso = s:siso_save
line 51: set hlsearch
line 52: nohlsearch
line 53: doautoall SessionLoadPost
line 54: unlet SessionLoad
line 55: " vim: set ft=vim :
finished sourcing /Users/ablanken/.local/share/nvim/sessions/%Users%ablanken%Sync%src%neovim-conf.vim
continuing in nvim_exec() called at VimEnter Autocommands for "*":0
info Session restored from /Users/ablanken/.local/share/nvim/sessions/\%Users\%ablanken\%Sync\%src\%neovim-conf.vim
Executing VimEnter Autocommands for "*"
autocommand call coc#rpc#notify('VimEnter', [])

Executing: call coc#rpc#notify('VimEnter', [])
calling function coc#rpc#notify('VimEnter', [])

line 1:   if !coc#rpc#ready()
calling function coc#rpc#notify[1]..coc#rpc#ready()

line 1:   if empty(s:client) || s:client['running'] == 0
line 2:     return 0
line 3:   endif
line 4:   return 1
function coc#rpc#notify[1]..coc#rpc#ready returning #1

continuing in function coc#rpc#notify

line 2:     return ''
line 3:   endif
line 4:   call s:client['notify'](a:method, a:args)
calling function coc#rpc#notify[4]..<SNR>47_notify('VimEnter', [])

line 1:   let channel = coc#client#get_channel(self)
calling function coc#rpc#notify[4]..<SNR>47_notify[1]..coc#client#get_channel({'on_async_response': function('<SNR>4...packer/start/coc.nvim/build/index.js']})

line 1:   if s:is_vim
line 2:     return a:client['channel']
line 3:   endif
line 4:   return a:client['chan_id']
function coc#rpc#notify[4]..<SNR>47_notify[1]..coc#client#get_channel returning #3

continuing in function coc#rpc#notify[4]..<SNR>47_notify

line 2:   if empty(channel)
line 3:     return ''
line 4:   endif
line 5:   try
line 6:     if s:is_vim
line 7:       call ch_sendraw(channel, json_encode([0, [a:method, a:args]])."\n")
line 8:     else
line 9:       call call('rpcnotify', [channel, a:method] + a:args)
line 10:     endif
line 11:   catch /.*/
line 12:     if v:exception =~# 'E475'
line 13:       if get(g:, 'coc_vim_leaving', 0)
line 14:         return
line 15:       endif
line 16:       echohl Error | echom '['.self.name.'] server connection lost' | echohl None
line 16:  echom '['.self.name.'] server connection lost' | echohl None
line 16:  echohl None
line 17:       let name = self.name
line 18:       call s:on_exit(name, 0)
line 19:       execute 'silent do User ConnectionLost'.toupper(name[0]).name[1:]
line 20:     elseif v:exception =~# 'E12'
line 21:       " neovim's bug, ignore it
line 22:     else
line 23:       echohl Error | echo 'Error on notify ('.a:method.'): '.v:exception | echohl None
line 23:  echo 'Error on notify ('.a:method.'): '.v:exception | echohl None
line 23:  echohl None
line 24:     endif
line 25:   endtry
function coc#rpc#notify[4]..<SNR>47_notify returning #0

continuing in function coc#rpc#notify

line 5:   return ''
function coc#rpc#notify returning ''

continuing in VimEnter Autocommands for "*"

Executing VimEnter Autocommands for "*"
autocommand lua require("indent_blankline").init()

Executing: lua require("indent_blankline").init()
Executing: noautocmd windo lua require("indent_blankline").refresh(false)
Executing: lua require("indent_blankline").refresh(false)
Executing VimEnter Autocommands for "*"
autocommand if !g:rooter_manual_only | Rooter | endif

Executing: if !g:rooter_manual_only | Rooter | endif
Executing:  Rooter | endif
Executing: call <80><fd>R65_rooter()
calling function <SNR>65_rooter()

line 1:   if !s:activate() | return | endif
calling function <SNR>65_rooter[1]..<SNR>65_activate()

line 1:   " Directory browser plugins (e.g. vim-dirvish, NERDTree) tend to
line 2:   " set a nofile buftype when you open a directory.
line 3:   if &buftype != '' && &buftype != 'nofile' | return 0 | endif
line 3:  return 0 | endif
line 3:  endif
line 4: 
line 5:   let patterns = split(g:rooter_targets, ',')
line 6:   let fn = expand('%:p', 1)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(conf/nvim)
chdir(/Users/ablanken/Sync/src/neovim-conf)
line 7: 
line 8:   if fn =~ 'NERD_tree_\d\+$' | let fn = b:NERDTree.root.path.str().'/' | endif
line 8:  let fn = b:NERDTree.root.path.str().'/' | endif
line 8:  endif
line 9: 
line 10:   " directory
line 11:   if empty(fn) || fn[-1:] == '/'
line 12:     return index(patterns, '/') != -1
line 13:   endif
line 14: 
line 15:   " file
line 16:   if !filereadable(fn) | return 0 | endif
line 16:  return 0 | endif
line 16:  endif
line 17:   if !exists('*glob2regpat') | return 1 | endif
line 17:  return 1 | endif
line 17:  endif
line 18: 
line 19:   for p in filter(copy(patterns), 'v:val != "/"')
line 20:     if fn =~ glob2regpat(p)
line 21:       return 1
function <SNR>65_rooter[1]..<SNR>65_activate returning #1

continuing in function <SNR>65_rooter

line 1:  return | endif
line 1:  endif
line 2: 
line 3:   let root = getbufvar('%', 'rootDir')
line 4:   if empty(root)
line 5:     let root = s:root()
line 6:     call setbufvar('%', 'rootDir', root)
line 7:   endif
line 8: 
line 9:   if empty(root)
line 10:     call s:rootless()
line 11:     return
line 12:   endif
line 13: 
line 14:   call s:cd(root)
calling function <SNR>65_rooter[14]..<SNR>65_cd('/Users/ablanken/Sync/src/neovim-conf')

line 1:   if a:dir == getcwd() | return | endif
line 1:  return | endif
function <SNR>65_rooter[14]..<SNR>65_cd returning #0

continuing in function <SNR>65_rooter

function <SNR>65_rooter returning #0

continuing in VimEnter Autocommands for "*"

Executing:  endif
Executing CursorMoved Autocommands for "*"
autocommand IndentBlanklineRefresh

Executing: IndentBlanklineRefresh
Executing: call s:try('lua require("indent_blankline.commands").refresh("" == "!")')
calling function <SNR>54_try('lua require("indent_blankline.commands").refresh("" == "!")')

line 1:     try
line 2:         execute a:cmd
line 2: lua require("indent_blankline.commands").refresh("" == "!")
line 3:     catch /E12/
line 4:         return
line 5:     endtry
function <SNR>54_try returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling function <SNR>30_Highlight_Matching_Pair()

line 1:   " Remove any previous match.
line 2:   call s:Remove_Matches()
calling function <SNR>30_Highlight_Matching_Pair[2]..<SNR>30_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     silent! call matchdelete(3)
line 3:     let w:paren_hl_on = 0
line 4:   endif
function <SNR>30_Highlight_Matching_Pair[2]..<SNR>30_Remove_Matches returning #0

continuing in function <SNR>30_Highlight_Matching_Pair

line 3: 
line 4:   " Avoid that we remove the popup menu.
line 5:   " Return when there are no colors (looks like the cursor jumps).
line 6:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 7:     return
line 8:   endif
line 9: 
line 10:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 11:   let c_lnum = line('.')
line 12:   let c_col = col('.')
line 13:   let before = 0
line 14: 
line 15:   let text = getline(c_lnum)
line 16:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 17:   if empty(matches)
line 18:     let [c_before, c] = ['', '']
line 19:   else
line 20:     let [c_before, c] = matches[1:2]
line 21:   endif
line 22:   let plist = split(&matchpairs, '.\zs[:,]')
line 23:   let i = index(plist, c)
line 24:   if i < 0
line 25:     " not found, in Insert mode try character before the cursor
line 26:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 27:       let before = strlen(c_before)
line 28:       let c = c_before
line 29:       let i = index(plist, c)
line 30:     endif
line 31:     if i < 0
line 32:       " not found, nothing to do
line 33:       return
line 34:     endif
line 35:   endif
line 36: 
line 37:   " Figure out the arguments for searchpairpos().
line 38:   if i % 2 == 0
line 39:     let s_flags = 'nW'
line 40:     let c2 = plist[i + 1]
line 41:   else
line 42:     let s_flags = 'nbW'
line 43:     let c2 = c
line 44:     let c = plist[i - 1]
line 45:   endif
line 46:   if c == '['
line 47:     let c = '\['
line 48:     let c2 = '\]'
line 49:   endif
line 50: 
line 51:   " Find the match.  When it was just before the cursor move it there for a
line 52:   " moment.
line 53:   if before > 0
line 54:     let has_getcurpos = exists("*getcurpos")
line 55:     if has_getcurpos
line 56:       " getcurpos() is more efficient but doesn't exist before 7.4.313.
line 57:       let save_cursor = getcurpos()
line 58:     else
line 59:       let save_cursor = winsaveview()
line 60:     endif
line 61:     call cursor(c_lnum, c_col - before)
line 62:   endif
line 63: 
line 64:   if !has("syntax") || !exists("g:syntax_on")
line 65:     let s_skip = "0"
line 66:   else
line 67:     " Build an expression that detects whether the current cursor position is
line 68:     " in certain syntax types (string, comment, etc.), for use as
line 69:     " searchpairpos()'s skip argument.
line 70:     " We match "escape" for special items, such as lispEscapeSpecial, and
line 71:     " match "symbol" for lispBarSymbol.
line 72:     let s_skip = '!empty(filter(map(synstack(line("."), col(".")), ''synIDattr(v:val, "name")''), ' . '''v:val =~? "string\\|character\\|singlequote\\|escape\\|symbol\\|comment"''))'
line 74:     " If executing the expression determines that the cursor is currently in
line 75:     " one of the syntax types, then we want searchpairpos() to find the pair
line 76:     " within those syntax types (i.e., not skip).  Otherwise, the cursor is
line 77:     " outside of the syntax types and s_skip should keep its value so we skip
line 78:     " any matching pair inside the syntax types.
line 79:     " Catch if this throws E363: pattern uses more memory than 'maxmempattern'.
line 80:     try
line 81:       execute 'if ' . s_skip . ' | let s_skip = "0" | endif'
line 81: if !empty(filter(map(synstack(line("."), col(".")), 'synIDattr(v:val, "name")'), 'v:val =~? "string\\|character\\|singlequote\\|escape\\|symbol\\|comment"')) | let s_skip = "0" | endif
line 81:  let s_skip = "0" | endif
line 81:  endif
line 82:     catch /^Vim\%((\a\+)\)\=:E363/
line 83:       " We won't find anything, so skip searching, should keep Vim responsive.
line 84:       return
line 85:     endtry
line 86:   endif
line 87: 
line 88:   " Limit the search to lines visible in the window.
line 89:   let stoplinebottom = line('w$')
line 90:   let stoplinetop = line('w0')
line 91:   if i % 2 == 0
line 92:     let stopline = stoplinebottom
line 93:   else
line 94:     let stopline = stoplinetop
line 95:   endif
line 96: 
line 97:   " Limit the search time to 300 msec to avoid a hang on very long lines.
line 98:   " This fails when a timeout is not supported.
line 99:   if mode() == 'i' || mode() == 'R'
line 100:     let timeout = exists("b:matchparen_insert_timeout") ? b:matchparen_insert_timeout : g:matchparen_insert_timeout
line 101:   else
line 102:     let timeout = exists("b:matchparen_timeout") ? b:matchparen_timeout : g:matchparen_timeout
line 103:   endif
line 104:   try
line 105:     let [m_lnum, m_col] = searchpairpos(c, '', c2, s_flags, s_skip, stopline, timeout)
line 106:   catch /E118/
line 107:     " Can't use the timeout, restrict the stopline a bit more to avoid taking
line 108:     " a long time on closed folds and long lines.
line 109:     " The "viewable" variables give a range in which we can scroll while
line 110:     " keeping the cursor at the same position.
line 111:     " adjustedScrolloff accounts for very large numbers of scrolloff.
line 112:     let adjustedScrolloff = min([&scrolloff, (line('w$') - line('w0')) / 2])
line 113:     let bottom_viewable = min([line('$'), c_lnum + &lines - adjustedScrolloff - 2])
line 114:     let top_viewable = max([1, c_lnum-&lines+adjustedScrolloff + 2])
line 115:     " one of these stoplines will be adjusted below, but the current values are
line 116:     " minimal boundaries within the current window
line 117:     if i % 2 == 0
line 118:       if has("byte_offset") && has("syntax_items") && &smc > 0
line 119: ^Ilet stopbyte = min([line2byte("$"), line2byte(".") + col(".") + &smc * 2])
line 120: ^Ilet stopline = min([bottom_viewable, byte2line(stopbyte)])
line 121:       else
line 122: ^Ilet stopline = min([bottom_viewable, c_lnum + 100])
line 123:       endif
line 124:       let stoplinebottom = stopline
line 125:     else
line 126:       if has("byte_offset") && has("syntax_items") && &smc > 0
line 127: ^Ilet stopbyte = max([1, line2byte(".") + col(".") - &smc * 2])
line 128: ^Ilet stopline = max([top_viewable, byte2line(stopbyte)])
line 129:       else
line 130: ^Ilet stopline = max([top_viewable, c_lnum - 100])
line 131:       endif
line 132:       let stoplinetop = stopline
line 133:     endif
line 134:     let [m_lnum, m_col] = searchpairpos(c, '', c2, s_flags, s_skip, stopline)
line 135:   endtry
line 136: 
line 137:   if before > 0
line 138:     if has_getcurpos
line 139:       call setpos('.', save_cursor)
line 140:     else
line 141:       call winrestview(save_cursor)
line 142:     endif
line 143:   endif
line 144: 
line 145:   " If a match is found setup match highlighting.
line 146:   if m_lnum > 0 && m_lnum >= stoplinetop && m_lnum <= stoplinebottom 
line 147:     if exists('*matchaddpos')
line 148:       call matchaddpos('MatchParen', [[c_lnum, c_col - before], [m_lnum, m_col]], 10, 3)
line 149:     else
line 150:       exe '3match MatchParen /\(\%' . c_lnum . 'l\%' . (c_col - before) . 'c\)\|\(\%' . m_lnum . 'l\%' . m_col . 'c\)/'
line 152:     endif
line 153:     let w:paren_hl_on = 1
line 154:   endif
function <SNR>30_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand call coc#float#nvim_refresh_scrollbar(win_getid())

Executing: call coc#float#nvim_refresh_scrollbar(win_getid())
Searching for "autoload/coc/float.vim" in runtime path
Searching for "/Users/ablanken/.config/nvim/autoload/coc/float.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/autoload/coc/float.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/42header/autoload/coc/float.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/auto-session/autoload/coc/float.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/cheatsheet.nvim/autoload/coc/float.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/coc-nvim-lua/autoload/coc/float.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/coc.nvim/autoload/coc/float.vim"
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/coc.nvim/autoload/coc)
chdir(/Users/ablanken/Sync/src/neovim-conf)
line 0: sourcing "/Users/ablanken/.local/share/nvim/site/pack/packer/start/coc.nvim/autoload/coc/float.vim"
line 1: scriptencoding utf-8
line 2: let s:is_vim = !has('nvim')
line 3: let s:root = expand('<sfile>:h:h:h')
line 4: let s:progresschars = get(g:, 'coc_progress_chars', ['░', '▇'])
line 5: let s:borderchars = get(g:, 'coc_borderchars', ['─', '│', '─', '│', '┌', '┐', '┘', '└'])
line 6: let s:borderjoinchars = get(g:, 'coc_border_joinchars', ['┬', '┤', '┴', '├'])
line 7: let s:prompt_win_width = get(g:, 'coc_prompt_win_width', 32)
line 8: let s:prompt_win_bufnr = 0
line 9: let s:float_supported = exists('*nvim_open_win') || has('patch-8.1.1719')
line 10: let s:popup_list_api = exists('*popup_list')
line 11: " Popup ids, used when popup_list() not exists
line 12: let s:popup_list = []
line 13: " winvar: border array of numbers,  button boolean
line 14: 
line 15: " Check visible float/popup exists.
line 16: function! coc#float#has_float(...) abort
line 19: 
line 20: function! coc#float#close_all(...) abort
line 30: 
line 31: function! coc#float#jump() abort
line 40: 
line 41: " create or config float window, returns [winid, bufnr], config including:
line 42: " - relative:  could be 'editor' 'cursor'
line 43: " - row: line count relative to editor/cursor, nagetive number means abover cursor.
line 44: " - col: column count relative to editor/cursor, nagetive number means left of cursor.
line 45: " - width: content width without border and title.
line 46: " - height: content height without border and title.
line 47: " - lines: (optional) lines to insert, default to v:null.
line 48: " - title: (optional) title.
line 49: " - border: (optional) border as number list, like [1, 1, 1 ,1].
line 50: " - cursorline: (optional) enable cursorline when is 1.
line 51: " - autohide: (optional) window should be closed on CursorMoved when is 1.
line 52: " - highlight: (optional) highlight of window, default to 'CocFloating'
line 53: " - borderhighlight: (optional) should be array for border highlights,
line 54: "   highlight all borders with first value.
line 55: " - close: (optional) show close button when is 1.
line 56: " - highlights: (optional) highlight items.
line 57: " - buttons: (optional) array of button text for create buttons at bottom.
line 58: " - codes: (optional) list of CodeBlock.
line 59: " - winblend: (optional) winblend option for float window, neovim only.
line 60: " - shadow:  (optional) use shadow as border style, neovim only.
line 61: " - focusable:  (optional) neovim only, default to true.
line 62: function! coc#float#create_float_win(winid, bufnr, config) abort
line 189: 
line 190: function! coc#float#valid(winid) abort
line 199: 
line 200: function! coc#float#nvim_create_related(winid, config, opts) abort
line 236: 
line 237: " border window for neovim, content config with border
line 238: function! coc#float#nvim_border_win(config, winid, border, title, hasbtn, hlgroup, winblend, shadow, related) abort
line 275: 
line 276: " neovim only
line 277: function! coc#float#nvim_close_btn(config, winid, border, hlgroup, winblend, related) abort
line 308: 
line 309: " Create padding window by config of current window & border config
line 310: function! coc#float#nvim_right_pad(config, winid, hlgroup, winblend, related) abort
line 349: 
line 350: " draw buttons window for window with config
line 351: function! coc#float#nvim_buttons(config, winid, buttons, borderbottom, pad, hlgroup, borderhighlight, winblend, shadow, related) abort
line 403: 
line 404: function! coc#float#getchar(winid, keys) abort
line 436: 
line 437: " Create or refresh scrollbar for winid
line 438: " Need called on create, config, buffer change, scrolled
line 439: function! coc#float#nvim_scrollbar(winid) abort
line 529: 
line 530: function! coc#float#create_border_lines(border, title, width, height, hasbtn) abort
line 558: 
line 559: " Get config, convert lines, create window, add highlights
line 560: function! coc#float#create_cursor_float(winid, bufnr, lines, config) abort
line 603: 
line 604: " Create float window for input
line 605: function! coc#float#create_prompt_win(title, default, opts) abort
line 662: 
line 663: function! coc#float#prompt_insert(text) abort
line 667: 
line 668: " Close float window by id
line 669: function! coc#float#close(winid) abort
line 674: 
line 675: " Float window id on current tab.
line 676: " return 0 if not found, used by test only
line 677: function! coc#float#get_float_win() abort
line 694: 
line 695: function! coc#float#get_float_win_list(...) abort
line 721: 
line 722: " Check if a float window is scrollable
line 723: function! coc#float#scrollable(winid) abort
line 746: 
line 747: function! coc#float#has_scroll() abort
line 751: 
line 752: function! coc#float#scroll(forward, ...)
line 770: 
line 771: function! coc#float#scroll_win(winid, forward, amount) abort
line 803: 
line 804: function! s:popup_visible(id) abort
line 811: 
line 812: function! s:convert_config_nvim(config) abort
line 839: 
line 840: " Close windows that could auto hide
line 841: function! coc#float#close_auto_hide_wins(...) abort
line 853: 
line 854: function! coc#float#content_height(bufnr, width, wrap) abort
line 869: 
line 870: function! coc#float#nvim_refresh_scrollbar(winid) abort
line 876: 
line 877: " Close related windows, or specific kind
line 878: function! coc#float#close_related(winid, ...) abort
line 901: 
line 902: " Close related windows if target window is not visible.
line 903: function! coc#float#check_related() abort
line 919: 
line 920: " Dimension of window with lines relative to cursor
line 921: " Width & height excludes border & padding
line 922: function! coc#float#get_config_cursor(lines, config) abort
line 968: 
line 969: function! coc#float#get_config_editor(lines, config) abort
line 998: 
line 999: function! coc#float#create_pum_float(winid, bufnr, lines, config) abort
line 1050: 
line 1051: function! s:empty_border(border) abort
line 1060: 
line 1061: " Show float window/popup for user confirm.
line 1062: function! coc#float#prompt_confirm(title, cb) abort
line 1139: 
line 1140: " Create buttons popup on vim
line 1141: function! coc#float#vim_buttons(winid, config) abort
line 1226: 
line 1227: function! coc#float#nvim_float_click() abort
line 1254: 
line 1255: " Add <LeftRelease> mapping if necessary
line 1256: function! coc#float#nvim_win_enter(winid) abort
line 1264: 
line 1265: function! coc#float#vim_filter(winid, key, keys) abort
line 1276: 
line 1277: " Create dialog at center
line 1278: function! coc#float#create_dialog(lines, config) abort
line 1313: 
line 1314: function! coc#float#get_related(winid, kind) abort
line 1322: 
line 1323: " Create temporarily buffer with optional lines and &bufhidden
line 1324: function! coc#float#create_buf(bufnr, ...) abort
line 1354: 
line 1355: function! coc#float#create_menu(lines, config) abort
line 1393: 
line 1394: " Notification always have border
line 1395: " config including:
line 1396: " - title: optional title.
line 1397: " - close: default to 1
line 1398: " - borderhighlight: highlight group string
line 1399: " - timeout: timeout in miniseconds
line 1400: " - buttons: array of button text for create buttons at bottom.
line 1401: " - top: default to 1
line 1402: " - right: default to 1
line 1403: " - maxHeight: default to 10
line 1404: " - maxWidth: default to 60
line 1405: " - highlight: highlight of window, default to 'CocFloating'
line 1406: function! coc#float#create_notification(lines, config) abort
line 1472: 
line 1473: " adjust position for notification windows
line 1474: function! coc#float#reflow(top) abort
line 1496: 
line 1497: " float/popup relative to current cursor position
line 1498: function! coc#float#cursor_relative(winid) abort
line 1514: 
line 1515: " Change border window & close window when scrollbar is shown.
line 1516: function! coc#float#nvim_scroll_adjust(winid) abort
line 1555: 
line 1556: " move winid include relative windows.
line 1557: function! s:adjust_win_row(winid, changed) abort
line 1595: 
line 1596: " winid, width, height, row, col (0 based).
line 1597: " works on vim & neovim, check relative window
line 1598: function! s:get_win_opts(winid) abort
line 1621: 
line 1622: function! s:create_btns_buffer(bufnr, width, buttons, borderbottom) abort
line 1659: 
line 1660: function! s:gen_filter_keys(line) abort
line 1685: 
line 1686: function! s:close_win(winid) abort
line 1699: 
line 1700: function! s:nvim_create_keymap(winid) abort
line 1720: 
line 1721: " getwininfo is buggy on neovim, use topline, width & height should for content
line 1722: function! s:nvim_get_botline(topline, height, width, bufnr) abort
line 1737: 
line 1738: " get popup position for vim8 based on config of neovim float window
line 1739: function! s:popup_position(config) abort
line 1755: 
line 1756: function! s:add_related(winid, target) abort
line 1764: 
line 1765: function! s:popup_cursor(n) abort
line 1774: 
line 1775: function! s:is_blocking() abort
line 1781: 
line 1782: " max firstline of lines, height > 0, width > 0
line 1783: function! s:max_firstline(lines, height, width) abort
line 1797: 
line 1798: " Get best lnum by topline
line 1799: function! s:get_cursorline(topline, lines, scrolloff, width, height) abort
line 1822: 
line 1823: " Get firstline for full scroll
line 1824: function! s:get_topline(topline, lines, forward, height, width) abort
line 1846: 
line 1847: " topline content_height content_width
line 1848: function! s:get_options(winid) abort
line 1869: 
line 1870: function! s:win_setview(winid, topline, lnum) abort
line 1881: 
line 1882: function! s:min_btns_width(buttons) abort
line 1892: 
line 1893: function! s:update_progress(bufnr, width, ts) abort
line 1911: 
line 1912: function! s:str_compose(line, idx, text) abort
line 1916: 
line 1917: function! s:add_highlights(winid, config, create) abort
line 1932: 
line 1933: " support for float values
line 1934: function! s:min(first, ...) abort
finished sourcing /Users/ablanken/.local/share/nvim/site/pack/packer/start/coc.nvim/autoload/coc/float.vim
continuing in CursorMoved Autocommands for "*"
calling function coc#float#nvim_refresh_scrollbar(1000)

line 1:   let id = coc#float#get_related(a:winid, 'scrollbar')
calling function coc#float#nvim_refresh_scrollbar[1]..coc#float#get_related(1000, 'scrollbar')

line 1:   for winid in getwinvar(a:winid, 'related', [])
line 2:     if getwinvar(winid, 'kind', '') ==# a:kind
line 3:       return winid
line 4:     endif
line 5:   endfor
line 6:   return 0
function coc#float#nvim_refresh_scrollbar[1]..coc#float#get_related returning #0

continuing in function coc#float#nvim_refresh_scrollbar

line 2:   if id && nvim_win_is_valid(id)
line 3:     call coc#float#nvim_scrollbar(a:winid)
line 4:   endif
function coc#float#nvim_refresh_scrollbar returning #0

continuing in CursorMoved Autocommands for "*"

autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing: call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])
calling function <SNR>44_Autocmd('CursorMoved', 2, [6, 14])

line 1:   if !get(g:, 'coc_workspace_initialized', 0)
line 2:     return
function <SNR>44_Autocmd returning #0

continuing in CursorMoved Autocommands for "*"

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing: call s:HandleWinScrolled(+expand('<amatch>'))
calling function <SNR>44_HandleWinScrolled(1000)

line 1:   if getwinvar(a:winid, 'float', 0)
line 2:     call coc#float#nvim_scrollbar(a:winid)
line 3:   endif
line 4:   call s:Autocmd('WinScrolled', a:winid)
calling function <SNR>44_HandleWinScrolled[4]..<SNR>44_Autocmd('WinScrolled', 1000)

line 1:   if !get(g:, 'coc_workspace_initialized', 0)
line 2:     return
function <SNR>44_HandleWinScrolled[4]..<SNR>44_Autocmd returning #0

continuing in function <SNR>44_HandleWinScrolled

function <SNR>44_HandleWinScrolled returning #0

continuing in WinScrolled Autocommands for "*"

Executing WinScrolled Autocommands for "*"
autocommand IndentBlanklineRefreshScroll

Executing: IndentBlanklineRefreshScroll
Executing: call s:try('lua require("indent_blankline.commands").refresh("" == "!", true)')
calling function <SNR>54_try('lua require("indent_blankline.commands").refresh("" == "!", true)')

line 1:     try
line 2:         execute a:cmd
line 2: lua require("indent_blankline.commands").refresh("" == "!", true)
line 3:     catch /E12/
line 4:         return
line 5:     endtry
function <SNR>54_try returning #0

continuing in WinScrolled Autocommands for "*"

chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(conf/nvim)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(conf/nvim)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(conf/nvim)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(conf/nvim)
chdir(/Users/ablanken/Sync/src/neovim-conf)

--- Terminal info --- {{{
&term: xterm-256color
Description: xterm with 256 colors
Aliases: xterm-256color
Boolean capabilities:
  auto_left_margin          bw         = false
  auto_right_margin         am         = true
  no_esc_ctlc               xsb        = false
  ceol_standout_glitch      xhp        = false
  eat_newline_glitch        xenl       = true
  erase_overstrike          eo         = false
  generic_type              gn         = false
  hard_copy                 hc         = false
  has_meta_key              km         = true
  has_status_line           hs         = false
  insert_null_glitch        in         = false
  memory_above              da         = false
  memory_below              db         = false
  move_insert_mode          mir        = true
  move_standout_mode        msgr       = true
  over_strike               os         = false
  status_line_esc_ok        eslok      = false
  dest_tabs_magic_smso      xt         = false
  tilde_glitch              hz         = false
  transparent_underline     ul         = false
  xon_xoff                  xon        = false
  needs_xon_xoff            nxon       = false
  prtr_silent               mc5i       = true
  hard_cursor               chts       = false
  non_rev_rmcup             nrrmc      = false
  no_pad_char               npc        = true
  non_dest_scroll_region    ndscr      = false
  can_change                ccc        = true
  back_color_erase          bce        = true
  hue_lightness_saturation  hls        = false
  col_addr_glitch           xhpa       = false
  cr_cancels_micro_mode     crxm       = false
  has_print_wheel           daisy      = false
  row_addr_glitch           xvpa       = false
  semi_auto_right_margin    sam        = false
  cpi_changes_res           cpix       = false
  lpi_changes_res           lpix       = false
  backspaces_with_bs        OTbs       = true
  crt_no_scrolling          OTns       = false
  no_correctly_working_cr   OTnc       = false
  gnu_has_meta_key          OTMT       = false
  linefeed_is_newline       OTNL       = false
  has_hardware_tabs         OTpt       = false
  return_does_clr_eol       OTxr       = false
Numeric capabilities:
  columns                   cols       = 80
  init_tabs                 it         = 8
  lines                     lines      = 24
  lines_of_memory           lm         = -1
  magic_cookie_glitch       xmc        = -1
  padding_baud_rate         pb         = -1
  virtual_terminal          vt         = -1
  width_status_line         wsl        = -1
  num_labels                nlab       = -1
  label_height              lh         = -1
  label_width               lw         = -1
  max_attributes            ma         = -1
  maximum_windows           wnum       = -1
  max_colors                colors     = 256
  max_pairs                 pairs      = 32767
  no_color_video            ncv        = -1
  buffer_capacity           bufsz      = -1
  dot_vert_spacing          spinv      = -1
  dot_horz_spacing          spinh      = -1
  max_micro_address         maddr      = -1
  max_micro_jump            mjump      = -1
  micro_col_size            mcs        = -1
  micro_line_size           mls        = -1
  number_of_pins            npins      = -1
  output_res_char           orc        = -1
  output_res_line           orl        = -1
  output_res_horz_inch      orhi       = -1
  output_res_vert_inch      orvi       = -1
  print_rate                cps        = -1
  wide_char_size            widcs      = -1
  buttons                   btns       = -1
  bit_image_entwining       bitwin     = -1
  bit_image_type            bitype     = -1
  magic_cookie_glitch_ul    OTug       = -1
  carriage_return_delay     OTdC       = -1
  new_line_delay            OTdN       = -1
  backspace_delay           OTdB       = -1
  horizontal_tab_delay      OTdT       = -1
  number_of_function_keys   OTkn       = -1
String capabilities:
  back_tab                  cbt        = <Esc>[Z
  bell                      bel        = <C-G>
  carriage_return           cr         = <CR>
  change_scroll_region      csr        = <Esc>[%i%p1%d;%p2%dr
  clear_all_tabs            tbc        = <Esc>[3g
  clear_screen              clear      = <Esc>[H<Esc>[2J
  clr_eol                   el         = <Esc>[K
  clr_eos                   ed         = <Esc>[J
  column_address            hpa        = <Esc>[%i%p1%dG
  cursor_address            cup        = <Esc>[%i%p1%d;%p2%dH
  cursor_down               cud1       = <NL>
  cursor_home               home       = <Esc>[H
  cursor_invisible          civis      = <Esc>[?25l
  cursor_left               cub1       = <C-H>
  cursor_normal             cnorm      = <Esc>[?25h
  cursor_right              cuf1       = <Esc>[C
  cursor_up                 cuu1       = <Esc>[A
  cursor_visible            cvvis      = <Esc>[?12;25h
  delete_character          dch1       = <Esc>[P
  delete_line               dl1        = <Esc>[M
  enter_alt_charset_mode    smacs      = <Esc>(0
  enter_blink_mode          blink      = <Esc>[5m
  enter_bold_mode           bold       = <Esc>[1m
  enter_ca_mode             smcup      = <Esc>[?1049h
  enter_insert_mode         smir       = <Esc>[4h
  enter_secure_mode         invis      = <Esc>[8m
  enter_reverse_mode        rev        = <Esc>[7m
  enter_standout_mode       smso       = <Esc>[7m
  enter_underline_mode      smul       = <Esc>[4m
  erase_chars               ech        = <Esc>[%p1%dX
  exit_alt_charset_mode     rmacs      = <Esc>(B
  exit_attribute_mode       sgr0       = <Esc>(B<Esc>[m
  exit_ca_mode              rmcup      = <Esc>[?1049l
  exit_insert_mode          rmir       = <Esc>[4l
  exit_standout_mode        rmso       = <Esc>[27m
  exit_underline_mode       rmul       = <Esc>[24m
  flash_screen              flash      = <Esc>[?5h$<100/><Esc>[?5l
  from_status_line          fsl        = <C-G>
  init_2string              is2        = <Esc>[!p<Esc>[?3;4l<Esc>[4l<Esc>>
  insert_line               il1        = <Esc>[L
  key_backspace             kbs        = <C-H>
  key_dc                    kdch1      = <Esc>[3~
  key_down                  kcud1      = <Esc>OB
  key_f1                    kf1        = <Esc>OP
  key_f10                   kf10       = <Esc>[21~
  key_f2                    kf2        = <Esc>OQ
  key_f3                    kf3        = <Esc>OR
  key_f4                    kf4        = <Esc>OS
  key_f5                    kf5        = <Esc>[15~
  key_f6                    kf6        = <Esc>[17~
  key_f7                    kf7        = <Esc>[18~
  key_f8                    kf8        = <Esc>[19~
  key_f9                    kf9        = <Esc>[20~
  key_home                  khome      = <Esc>OH
  key_ic                    kich1      = <Esc>[2~
  key_left                  kcub1      = <Esc>OD
  key_npage                 knp        = <Esc>[6~
  key_ppage                 kpp        = <Esc>[5~
  key_right                 kcuf1      = <Esc>OC
  key_sf                    kind       = <Esc>[1;2B
  key_sr                    kri        = <Esc>[1;2A
  key_up                    kcuu1      = <Esc>OA
  keypad_local              rmkx       = <Esc>[?1l<Esc>>
  keypad_xmit               smkx       = <Esc>[?1h<Esc>=
  meta_off                  rmm        = <Esc>[?1034l
  meta_on                   smm        = <Esc>[?1034h
  parm_dch                  dch        = <Esc>[%p1%dP
  parm_delete_line          dl         = <Esc>[%p1%dM
  parm_down_cursor          cud        = <Esc>[%p1%dB
  parm_ich                  ich        = <Esc>[%p1%d@
  parm_index                indn       = <Esc>[%p1%dS
  parm_insert_line          il         = <Esc>[%p1%dL
  parm_left_cursor          cub        = <Esc>[%p1%dD
  parm_right_cursor         cuf        = <Esc>[%p1%dC
  parm_rindex               rin        = <Esc>[%p1%dT
  parm_up_cursor            cuu        = <Esc>[%p1%dA
  print_screen              mc0        = <Esc>[i
  prtr_off                  mc4        = <Esc>[4i
  prtr_on                   mc5        = <Esc>[5i
  reset_1string             rs1        = <Esc>c
  reset_2string             rs2        = <Esc>[!p<Esc>[?3;4l<Esc>[4l<Esc>>
  restore_cursor            rc         = <Esc>8
  row_address               vpa        = <Esc>[%i%p1%dd
  save_cursor               sc         = <Esc>7
  scroll_forward            ind        = <NL>
  scroll_reverse            ri         = <Esc>M
  set_attributes            sgr        = %?%p9%t<Esc>(0%e<Esc>(B%;<Esc>[0%?%p6%t;1%;%?%p2%t;4%;%?%p1%p3%|%t;7%;%?%p4%t;5%;%?%p7%t;8%;m
  set_tab                   hts        = <Esc>H
  tab                       ht         = <Tab>
  to_status_line            tsl        = <Esc>]0;
  key_b2                    kb2        = <Esc>OE
  acs_chars                 acsc       = ``aaffggiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz{{||}}~~
  key_btab                  kcbt       = <Esc>[Z
  enter_am_mode             smam       = <Esc>[?7h
  exit_am_mode              rmam       = <Esc>[?7l
  key_end                   kend       = <Esc>OF
  key_enter                 kent       = <Esc>OM
  key_sdc                   kDC        = <Esc>[3;2~
  key_send                  kEND       = <Esc>[1;2F
  key_shome                 kHOM       = <Esc>[1;2H
  key_sic                   kIC        = <Esc>[2;2~
  key_sleft                 kLFT       = <Esc>[1;2D
  key_snext                 kNXT       = <Esc>[6;2~
  key_sprevious             kPRV       = <Esc>[5;2~
  key_sright                kRIT       = <Esc>[1;2C
  key_f11                   kf11       = <Esc>[23~
  key_f12                   kf12       = <Esc>[24~
  key_f13                   kf13       = <Esc>[1;2P
  key_f14                   kf14       = <Esc>[1;2Q
  key_f15                   kf15       = <Esc>[1;2R
  key_f16                   kf16       = <Esc>[1;2S
  key_f17                   kf17       = <Esc>[15;2~
  key_f18                   kf18       = <Esc>[17;2~
  key_f19                   kf19       = <Esc>[18;2~
  key_f20                   kf20       = <Esc>[19;2~
  key_f21                   kf21       = <Esc>[20;2~
  key_f22                   kf22       = <Esc>[21;2~
  key_f23                   kf23       = <Esc>[23;2~
  key_f24                   kf24       = <Esc>[24;2~
  key_f25                   kf25       = <Esc>[1;5P
  key_f26                   kf26       = <Esc>[1;5Q
  key_f27                   kf27       = <Esc>[1;5R
  key_f28                   kf28       = <Esc>[1;5S
  key_f29                   kf29       = <Esc>[15;5~
  key_f30                   kf30       = <Esc>[17;5~
  key_f31                   kf31       = <Esc>[18;5~
  key_f32                   kf32       = <Esc>[19;5~
  key_f33                   kf33       = <Esc>[20;5~
  key_f34                   kf34       = <Esc>[21;5~
  key_f35                   kf35       = <Esc>[23;5~
  key_f36                   kf36       = <Esc>[24;5~
  key_f37                   kf37       = <Esc>[1;6P
  key_f38                   kf38       = <Esc>[1;6Q
  key_f39                   kf39       = <Esc>[1;6R
  key_f40                   kf40       = <Esc>[1;6S
  key_f41                   kf41       = <Esc>[15;6~
  key_f42                   kf42       = <Esc>[17;6~
  key_f43                   kf43       = <Esc>[18;6~
  key_f44                   kf44       = <Esc>[19;6~
  key_f45                   kf45       = <Esc>[20;6~
  key_f46                   kf46       = <Esc>[21;6~
  key_f47                   kf47       = <Esc>[23;6~
  key_f48                   kf48       = <Esc>[24;6~
  key_f49                   kf49       = <Esc>[1;3P
  key_f50                   kf50       = <Esc>[1;3Q
  key_f51                   kf51       = <Esc>[1;3R
  key_f52                   kf52       = <Esc>[1;3S
  key_f53                   kf53       = <Esc>[15;3~
  key_f54                   kf54       = <Esc>[17;3~
  key_f55                   kf55       = <Esc>[18;3~
  key_f56                   kf56       = <Esc>[19;3~
  key_f57                   kf57       = <Esc>[20;3~
  key_f58                   kf58       = <Esc>[21;3~
  key_f59                   kf59       = <Esc>[23;3~
  key_f60                   kf60       = <Esc>[24;3~
  key_f61                   kf61       = <Esc>[1;4P
  key_f62                   kf62       = <Esc>[1;4Q
  key_f63                   kf63       = <Esc>[1;4R
  clr_bol                   el1        = <Esc>[1K
  user6                     u6         = <Esc>[%i%d;%dR
  user7                     u7         = <Esc>[6n
  user8                     u8         = <Esc>[?1;2c
  user9                     u9         = <Esc>[c
  orig_pair                 op         = <Esc>[39;49m
  initialize_color          initc      = <Esc>]4;%p1%d;rgb:%p2%{255}%*%{1000}%/%2.2X/%p3%{255}%*%{1000}%/%2.2X/%p4%{255}%*%{1000}%/%2.2X<Esc>\
  enter_italics_mode        sitm       = <Esc>[3m
  exit_italics_mode         ritm       = <Esc>[23m
  key_mouse                 kmous      = <Esc>[M
  set_a_foreground          setaf      = <Esc>[%?%p1%{8}%<%t3%p1%d%e%p1%{16}%<%t9%p1%{8}%-%d%e38;5;%p1%d%;m
  set_a_background          setab      = <Esc>[%?%p1%{8}%<%t4%p1%d%e%p1%{16}%<%t10%p1%{8}%-%d%e48;5;%p1%d%;m
  set_tb_margin             smgtb      = <Esc>[%i%p1%d;%p2%dr
  memory_lock               meml       = <Esc>l
  memory_unlock             memu       = <Esc>m
Extended boolean capabilities:
  AX                        = true
  G0                        = false
Extended string capabilities:
  E0                        = 
  S0                        = 
  kDC3                      = <Esc>[3;3~
  kDC4                      = <Esc>[3;4~
  kDC5                      = <Esc>[3;5~
  kDC6                      = <Esc>[3;6~
  kDC7                      = <Esc>[3;7~
  kDN                       = <Esc>[1;2B
  kDN3                      = <Esc>[1;3B
  kDN4                      = <Esc>[1;4B
  kDN5                      = <Esc>[1;5B
  kDN6                      = <Esc>[1;6B
  kDN7                      = <Esc>[1;7B
  kEND3                     = <Esc>[1;3F
  kEND4                     = <Esc>[1;4F
  kEND5                     = <Esc>[1;5F
  kEND6                     = <Esc>[1;6F
  kEND7                     = <Esc>[1;7F
  kHOM3                     = <Esc>[1;3H
  kHOM4                     = <Esc>[1;4H
  kHOM5                     = <Esc>[1;5H
  kHOM6                     = <Esc>[1;6H
  kHOM7                     = <Esc>[1;7H
  kIC3                      = <Esc>[2;3~
  kIC4                      = <Esc>[2;4~
  kIC5                      = <Esc>[2;5~
  kIC6                      = <Esc>[2;6~
  kIC7                      = <Esc>[2;7~
  kLFT3                     = <Esc>[1;3D
  kLFT4                     = <Esc>[1;4D
  kLFT5                     = <Esc>[1;5D
  kLFT6                     = <Esc>[1;6D
  kLFT7                     = <Esc>[1;7D
  kNXT3                     = <Esc>[6;3~
  kNXT4                     = <Esc>[6;4~
  kNXT5                     = <Esc>[6;5~
  kNXT6                     = <Esc>[6;6~
  kNXT7                     = <Esc>[6;7~
  kPRV3                     = <Esc>[5;3~
  kPRV4                     = <Esc>[5;4~
  kPRV5                     = <Esc>[5;5~
  kPRV6                     = <Esc>[5;6~
  kPRV7                     = <Esc>[5;7~
  kRIT3                     = <Esc>[1;3C
  kRIT4                     = <Esc>[1;4C
  kRIT5                     = <Esc>[1;5C
  kRIT6                     = <Esc>[1;6C
  kRIT7                     = <Esc>[1;7C
  kUP                       = <Esc>[1;2A
  kUP3                      = <Esc>[1;3A
  kUP4                      = <Esc>[1;4A
  kUP5                      = <Esc>[1;5A
  kUP6                      = <Esc>[1;6A
  kUP7                      = <Esc>[1;7A
  ka2                       = 
  kb1                       = 
  kb3                       = 
  kc2                       = 
  ext.get_bg                = <Esc>]11;?<C-G>
  Ss                        = <Esc>[%p1%d q
  Se                        = <Esc>[ q
  ext.resize_screen         = <Esc>[8;%p1%d;%p2%dt
  ext.reset_scroll_region   = <Esc>[r
  setrgbf                   = <Esc>[38:2:%p1%d:%p2%d:%p3%dm
  setrgbb                   = <Esc>[48:2:%p1%d:%p2%d:%p3%dm
  [NULL]                    = <Esc>]Pl%p1%06x<Esc>\
  ext.reset_cursor_color    = <Esc>]112<C-G>
  ext.save_title            = <Esc>[22;0t
  ext.restore_title         = <Esc>[23;0t
  ext.enable_lr_margin      = <Esc>[?69h
  ext.disable_lr_margin     = <Esc>[?69l
  ext.enable_bpaste         = <Esc>[?2004h
  ext.disable_bpaste        = <Esc>[?2004l
  ext.enable_focus          = <Esc>[?1004h
  ext.disable_focus         = <Esc>[?1004l
  ext.enable_mouse          = <Esc>[?1002h<Esc>[?1006h
  ext.disable_mouse         = <Esc>[?1002l<Esc>[?1006l
  ext.enable_extended_keys  = <Esc>[>4;2m
  ext.disable_extended_keys = <Esc>[>4;0m
}}}

calling function coc#util#path_replace_patterns()

line 1:   if has('win32unix') && exists('g:coc_cygqwin_path_prefixes')
line 2:     echohl WarningMsg 
line 3:     echon 'g:coc_cygqwin_path_prefixes is deprecated, use g:coc_uri_prefix_replace_patterns instead' 
line 4:     echohl None
line 5:     return g:coc_cygqwin_path_prefixes
line 6:   endif
line 7:   if exists('g:coc_uri_prefix_replace_patterns')
line 8:     return g:coc_uri_prefix_replace_patterns
line 9:   endif
line 10:   return v:null
function coc#util#path_replace_patterns returning v:null

chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(conf/nvim)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(conf/nvim)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(conf/nvim)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(conf/nvim)
chdir(/Users/ablanken/Sync/src/neovim-conf)
calling function coc#util#vim_info()

line 1:   return { 'apiversion': s:vim_api_version, 'mode': mode(), 'config': get(g:, 'coc_user_config', {}), 'floating': has('nvim') && exists('*nvim_open_win') ? v:true : v:false, 'extensionRoot': coc#util#extension_root(), 'globalExtensions': get(g:, 'coc_global_extensions', []), 'lines': &lines, 'columns': &columns, 'cmdheight': &cmdheight, 'pid': coc#util#getpid(), 'filetypeMap': get(g:, 'coc_filetype_map', {}), 'version': coc#util#version(), 'completeOpt': &completeopt, 'pumevent': exists('##MenuPopupChanged') || exists('##CompleteChanged'), 'isVim': has('nvim') ? v:false : v:true, 'isCygwin': has('win32unix') ? v:true : v:false, 'isMacvim': has('gui_macvim') ? v:true : v:false, 'isiTerm': $TERM_PROGRAM ==# "iTerm.app", 'colorscheme': get(g:, 'colors_name', ''), 'workspaceFolders': get(g:, 'WorkspaceFolders', v:null), 'background': &background, 'runtimepath': join(globpath(&runtimepath, '', 0, 1), ','), 'locationlist': get(g:,'coc_enable_locationlist', 1), 'progpath': v:progpath, 'guicursor': &guicursor
calling function coc#util#vim_info[1]..coc#util#extension_root()

line 1:   if get(g:, 'coc_node_env', '') ==# 'test'
line 2:     return s:root.'/src/__tests__/extensions'
line 3:   endif
line 4:   if !empty(get(g:, 'coc_extension_root', ''))
line 5:     echohl Error | echon 'g:coc_extension_root not used any more, use g:coc_data_home instead' | echohl None
line 5:  echon 'g:coc_extension_root not used any more, use g:coc_data_home instead' | echohl None
line 5:  echohl None
line 6:   endif
line 7:   return coc#util#get_data_home().'/extensions'
calling function coc#util#vim_info[1]..coc#util#extension_root[7]..coc#util#get_data_home()

line 1:   if !empty(get(g:, 'coc_data_home', ''))
line 2:     let dir = resolve(expand(g:coc_data_home))
line 3:   else
line 4:     if exists('$XDG_CONFIG_HOME')
line 5:       let dir = resolve($XDG_CONFIG_HOME."/coc")
line 6:     else
line 7:       if s:is_win
line 8:         let dir = resolve(expand('~/AppData/Local/coc'))
line 9:       else
line 10:         let dir = resolve(expand('~/.config/coc'))
line 11:       endif
line 12:     endif
line 13:   endif
line 14:   if !isdirectory(dir)
line 15:     call coc#float#create_notification(['creating data directory: '.dir], {'timeout': 2000})
line 16:     call mkdir(dir, "p", 0755)
line 17:   endif
line 18:   return dir
function coc#util#vim_info[1]..coc#util#extension_root[7]..coc#util#get_data_home returning '/Users/ablanken/Sync/dot.config/coc'

continuing in function coc#util#vim_info[1]..coc#util#extension_root

function coc#util#vim_info[1]..coc#util#extension_root returning '/Users/ablanken/Sync/dot.config/coc/extensions'

continuing in function coc#util#vim_info

calling function coc#util#vim_info[1]..coc#util#getpid()

line 1:   if !has('win32unix')
line 2:     return getpid()
function coc#util#vim_info[1]..coc#util#getpid returning #40825

continuing in function coc#util#vim_info

calling function coc#util#vim_info[1]..coc#util#version()

line 1:   if s:is_vim
line 2:     return string(v:versionlong)
line 3:   endif
line 4:   let c = execute('silent version')
line 4: silent version

NVIM v0.7.0
Build type: Release
LuaJIT 2.1.0-beta3
Compiled by ablanken@cbr6s1.42barcelona.com

Features: +acl +iconv +tui
See ":help feature-compile"

   system vimrc file: "$VIM/sysinit.vim"
  fall-back for $VIM: "/Users/ablanken/.local/nvim-brew/Cellar/neovim/0.7.0/share/nvim"

Run :checkhealth for more info
line 5:   let lines = split(matchstr(c,  'NVIM v\zs[^\n-]*'))
line 6:   return lines[0]
function coc#util#vim_info[1]..coc#util#version returning '0.7.0'

continuing in function coc#util#vim_info

calling function coc#util#vim_info[1]..coc#util#semantic_hlgroups()

line 1:   let res = split(execute('hi'), "\n")
line 1: hi
SpecialKey     xxx ctermfg=81 guifg=#3a3e4e
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
EndOfBuffer    xxx guifg=#676E95
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
TermCursor     xxx cterm=reverse gui=reverse
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
TermCursorNC   xxx cleared
NonText        xxx ctermfg=12 guifg=#3a3e4e
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
Directory      xxx ctermfg=159 gui=bold guifg=#6cb6eb
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
ErrorMsg       xxx ctermfg=15 ctermbg=1 guifg=#ec7279
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
IncSearch      xxx cterm=reverse gui=reverse
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
Search         xxx ctermfg=0 ctermbg=11 gui=reverse
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
MoreMsg        xxx ctermfg=121 gui=bold guifg=#4db5bd
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
ModeMsg        xxx cterm=bold gui=bold guifg=#4db5bd
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
LineNr         xxx ctermfg=11 guifg=#676E95
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
LineNrAbove    xxx links to LineNr
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
LineNrBelow    xxx links to LineNr
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
CursorLineNr   xxx cterm=underline ctermfg=11 guifg=#4db5bd
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
CursorLineSign xxx links to SignColumn
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
CursorLineFold xxx links to FoldColumn
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
Question       xxx ctermfg=121 gui=bold guifg=#a0c980
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
StatusLine     xxx cterm=bold,reverse guifg=#6cb6eb guibg=#2b2d37
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
StatusLineNC   xxx cterm=reverse guifg=#7e8294
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
WinSeparator   xxx links to VertSplit
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
VertSplit      xxx cterm=reverse guifg=#4C566A
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
Title          xxx ctermfg=225 gui=bold guifg=#4db5bd
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
Visual         xxx ctermbg=242 gui=reverse
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
VisualNC       xxx cleared
WarningMsg     xxx ctermfg=224 gui=bold guifg=#da8548
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
WildMenu       xxx ctermfg=0 ctermbg=11 gui=bold guifg=#2b2d37 guibg=#6cb6eb
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
Folded         xxx ctermfg=14 ctermbg=242 gui=italic guifg=#7e8294
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
FoldColumn     xxx ctermfg=14 ctermbg=242 guifg=#6cb6eb
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
DiffAdd        xxx ctermbg=4 gui=reverse guifg=#8ec07c
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
DiffChange     xxx ctermbg=5 gui=reverse guifg=#458588
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
DiffDelete     xxx ctermfg=12 ctermbg=6 gui=reverse guifg=#fb4934
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
DiffText       xxx cterm=bold ctermbg=9 gui=reverse guifg=#c5cdd9
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
SignColumn     xxx ctermfg=14 ctermbg=242 guifg=#c5cdd9 guibg=#2b2d37
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
Conceal        xxx ctermfg=7 ctermbg=242 guifg=#7e8294
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
SpellBad       xxx ctermbg=9 gui=undercurl,italic guifg=#ec7279 guisp=Red
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
SpellCap       xxx ctermbg=12 gui=undercurl,italic guifg=#6cb6eb guisp=Blue
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
SpellRare      xxx ctermbg=13 gui=undercurl,italic guifg=#4db5bd guisp=Magenta
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
SpellLocal     xxx ctermbg=14 gui=undercurl,italic guifg=#4db5bd guisp=Cyan
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
Pmenu          xxx ctermfg=0 ctermbg=13 guifg=#c5cdd9 guibg=#404455
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
PmenuSel       xxx ctermfg=242 ctermbg=0 gui=bold guifg=#2b2d37 guibg=#6cb6eb
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
PmenuSbar      xxx ctermbg=248 guifg=#c5cdd9 guibg=#363a49
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
PmenuThumb     xxx ctermbg=15 guifg=#c5cdd9 guibg=#7e8294
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
TabLine        xxx cterm=underline ctermfg=15 ctermbg=242 guifg=#7e8294
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
TabLineSel     xxx cterm=bold guifg=#2b2d37 guibg=#6cb6eb
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
TabLineFill    xxx cterm=reverse guifg=#c5cdd9
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
CursorColumn   xxx ctermbg=242 guibg=#c5cdd9
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
CursorLine     xxx cterm=underline guibg=#333644
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
ColorColumn    xxx ctermbg=1 guibg=#3a3e4e
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
QuickFixLine   xxx gui=bold,italic guifg=#6cb6eb guibg=#333644
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
Whitespace     xxx links to NonText
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
NormalNC       xxx cleared
MsgSeparator   xxx links to StatusLine
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
NormalFloat    xxx guifg=#c5cdd9 guibg=#363a49
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
MsgArea        xxx cleared
FloatBorder    xxx guifg=#6cb6eb guibg=#363a49
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
RedrawDebugNormal xxx cterm=reverse gui=reverse
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
RedrawDebugClear xxx ctermbg=11 guibg=Yellow
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
RedrawDebugComposed xxx ctermbg=10 guibg=Green
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
RedrawDebugRecompose xxx ctermbg=9 guibg=Red
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
Cursor         xxx gui=reverse guifg=#4db5bd
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
lCursor        xxx guifg=bg guibg=fg
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
Normal         xxx guifg=#c5cdd9 guibg=#2b2d37
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
Substitute     xxx links to Search
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
FloatShadow    xxx guibg=Black blend=80
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
FloatShadowThrough xxx guibg=Black blend=100
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
Error          xxx ctermfg=15 ctermbg=9 gui=bold,underline guifg=#ec7279
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
Todo           xxx ctermfg=0 ctermbg=11 gui=bold,italic guifg=#4db5bd
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
String         xxx guifg=#a0c980
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
Constant       xxx ctermfg=13 guifg=#a9a1e1
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
Character      xxx guifg=#da8548
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
Number         xxx guifg=#ec7279
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
Boolean        xxx gui=italic
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
Float          xxx guifg=#ec7279
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
Function       xxx gui=bold,italic guifg=#6cb6eb
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
Identifier     xxx cterm=bold ctermfg=14 gui=italic guifg=#6cb6eb
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
Conditional    xxx gui=italic guifg=#6cb6eb
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
Statement      xxx ctermfg=11 guifg=#6cb6eb
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
Repeat         xxx gui=italic guifg=#da8548
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
Label          xxx guifg=#4db5bd
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
Operator       xxx guifg=#6cb6eb
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
Keyword        xxx gui=italic guifg=#6cb6eb
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
Exception      xxx guifg=#6cb6eb
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
Include        xxx guifg=#6cb6eb
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
PreProc        xxx ctermfg=81 guifg=#da8548
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
Define         xxx guifg=#4db5bd
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
Macro          xxx guifg=#6cb6eb
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
PreCondit      xxx guifg=#4db5bd
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
StorageClass   xxx guifg=#4db5bd
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
Type           xxx ctermfg=121 guifg=#4db5bd
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
Structure      xxx guifg=#da8548
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
Typedef        xxx guifg=#4db5bd
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
Tag            xxx guifg=#ec7279
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
Special        xxx ctermfg=224 gui=italic guifg=#6cb6eb
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
SpecialChar    xxx guifg=#da8548
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
Delimiter      xxx guifg=#ECBE7B
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
SpecialComment xxx guifg=#6cb6eb
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
Debug          xxx guifg=#ec7279
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
DiagnosticError xxx ctermfg=1 guifg=#ec7279
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
DiagnosticWarn xxx ctermfg=3 guifg=Orange
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
DiagnosticInfo xxx ctermfg=4 guifg=LightBlue
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
DiagnosticHint xxx ctermfg=7 guifg=#4db5bd
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
DiagnosticUnderlineError xxx cterm=underline gui=underline guisp=Red
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
DiagnosticUnderlineWarn xxx cterm=underline gui=underline guisp=Orange
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
DiagnosticUnderlineInfo xxx cterm=underline gui=underline guisp=LightBlue
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
DiagnosticUnderlineHint xxx cterm=underline gui=underline guisp=LightGrey
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
DiagnosticVirtualTextError xxx links to DiagnosticError
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
DiagnosticVirtualTextWarn xxx links to DiagnosticWarn
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
DiagnosticVirtualTextInfo xxx links to DiagnosticInfo
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
DiagnosticVirtualTextHint xxx links to DiagnosticHint
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
DiagnosticFloatingError xxx links to DiagnosticError
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
DiagnosticFloatingWarn xxx links to DiagnosticWarn
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
DiagnosticFloatingInfo xxx links to DiagnosticInfo
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
DiagnosticFloatingHint xxx links to DiagnosticHint
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
DiagnosticSignError xxx links to DiagnosticError
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
DiagnosticSignWarn xxx links to DiagnosticWarn
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
DiagnosticSignInfo xxx links to DiagnosticInfo
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
DiagnosticSignHint xxx links to DiagnosticHint
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
MatchParen     xxx ctermbg=6 gui=bold,underline guifg=#ec7279
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
Comment        xxx ctermfg=14 gui=italic guifg=#7e8294
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
Underlined     xxx cterm=underline ctermfg=81 gui=underline guifg=#4db5bd
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
Ignore         xxx ctermfg=0 guifg=#4C566A
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
NvimInternalError xxx ctermfg=9 ctermbg=9 guifg=Red guibg=Red
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
NvimAssignment xxx links to Operator
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
NvimPlainAssignment xxx links to NvimAssignment
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
NvimAugmentedAssignment xxx links to NvimAssignment
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
NvimAssignmentWithAddition xxx links to NvimAugmentedAssignment
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
NvimAssignmentWithSubtraction xxx links to NvimAugmentedAssignment
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
NvimAssignmentWithConcatenation xxx links to NvimAugmentedAssignment
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
NvimOperator   xxx links to Operator
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
NvimUnaryOperator xxx links to NvimOperator
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
NvimUnaryPlus  xxx links to NvimUnaryOperator
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
NvimUnaryMinus xxx links to NvimUnaryOperator
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
NvimNot        xxx links to NvimUnaryOperator
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
NvimBinaryOperator xxx links to NvimOperator
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
NvimComparison xxx links to NvimBinaryOperator
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
NvimComparisonModifier xxx links to NvimComparison
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
NvimBinaryPlus xxx links to NvimBinaryOperator
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
NvimBinaryMinus xxx links to NvimBinaryOperator
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
NvimConcat     xxx links to NvimBinaryOperator
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
NvimConcatOrSubscript xxx links to NvimConcat
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
NvimOr         xxx links to NvimBinaryOperator
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
NvimAnd        xxx links to NvimBinaryOperator
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
NvimMultiplication xxx links to NvimBinaryOperator
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
NvimDivision   xxx links to NvimBinaryOperator
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
NvimMod        xxx links to NvimBinaryOperator
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
NvimTernary    xxx links to NvimOperator
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
NvimTernaryColon xxx links to NvimTernary
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
NvimParenthesis xxx links to Delimiter
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
NvimLambda     xxx links to NvimParenthesis
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
NvimNestingParenthesis xxx links to NvimParenthesis
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
NvimCallingParenthesis xxx links to NvimParenthesis
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
NvimSubscript  xxx links to NvimParenthesis
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
NvimSubscriptBracket xxx links to NvimSubscript
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
NvimSubscriptColon xxx links to NvimSubscript
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
NvimCurly      xxx links to NvimSubscript
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
NvimContainer  xxx links to NvimParenthesis
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
NvimDict       xxx links to NvimContainer
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
NvimList       xxx links to NvimContainer
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
NvimIdentifier xxx links to Identifier
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
NvimIdentifierScope xxx links to NvimIdentifier
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
NvimIdentifierScopeDelimiter xxx links to NvimIdentifier
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
NvimIdentifierName xxx links to NvimIdentifier
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
NvimIdentifierKey xxx links to NvimIdentifier
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
NvimColon      xxx links to Delimiter
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
NvimComma      xxx links to Delimiter
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
NvimArrow      xxx links to Delimiter
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
NvimRegister   xxx links to SpecialChar
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
NvimNumber     xxx links to Number
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
NvimFloat      xxx links to NvimNumber
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
NvimNumberPrefix xxx links to Type
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
NvimOptionSigil xxx links to Type
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
NvimOptionName xxx links to NvimIdentifier
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
NvimOptionScope xxx links to NvimIdentifierScope
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
NvimOptionScopeDelimiter xxx links to NvimIdentifierScopeDelimiter
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
NvimEnvironmentSigil xxx links to NvimOptionSigil
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
NvimEnvironmentName xxx links to NvimIdentifier
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
NvimString     xxx links to String
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
NvimStringBody xxx links to NvimString
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
NvimStringQuote xxx links to NvimString
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
NvimStringSpecial xxx links to SpecialChar
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
NvimSingleQuote xxx links to NvimStringQuote
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
NvimSingleQuotedBody xxx links to NvimStringBody
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
NvimSingleQuotedQuote xxx links to NvimStringSpecial
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
NvimDoubleQuote xxx links to NvimStringQuote
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
NvimDoubleQuotedBody xxx links to NvimStringBody
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
NvimDoubleQuotedEscape xxx links to NvimStringSpecial
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
NvimFigureBrace xxx links to NvimInternalError
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
NvimSingleQuotedUnknownEscape xxx links to NvimInternalError
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
NvimSpacing    xxx links to Normal
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
NvimInvalidSingleQuotedUnknownEscape xxx links to NvimInternalError
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
NvimInvalid    xxx links to Error
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
NvimInvalidAssignment xxx links to NvimInvalid
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
NvimInvalidPlainAssignment xxx links to NvimInvalidAssignment
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
NvimInvalidAugmentedAssignment xxx links to NvimInvalidAssignment
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
NvimInvalidAssignmentWithAddition xxx links to NvimInvalidAugmentedAssignment
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
NvimInvalidAssignmentWithSubtraction xxx links to NvimInvalidAugmentedAssignment
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
NvimInvalidAssignmentWithConcatenation xxx links to NvimInvalidAugmentedAssignment
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
NvimInvalidOperator xxx links to NvimInvalid
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
NvimInvalidUnaryOperator xxx links to NvimInvalidOperator
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
NvimInvalidUnaryPlus xxx links to NvimInvalidUnaryOperator
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
NvimInvalidUnaryMinus xxx links to NvimInvalidUnaryOperator
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
NvimInvalidNot xxx links to NvimInvalidUnaryOperator
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
NvimInvalidBinaryOperator xxx links to NvimInvalidOperator
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
NvimInvalidComparison xxx links to NvimInvalidBinaryOperator
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
NvimInvalidComparisonModifier xxx links to NvimInvalidComparison
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
NvimInvalidBinaryPlus xxx links to NvimInvalidBinaryOperator
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
NvimInvalidBinaryMinus xxx links to NvimInvalidBinaryOperator
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
NvimInvalidConcat xxx links to NvimInvalidBinaryOperator
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
NvimInvalidConcatOrSubscript xxx links to NvimInvalidConcat
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
NvimInvalidOr  xxx links to NvimInvalidBinaryOperator
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
NvimInvalidAnd xxx links to NvimInvalidBinaryOperator
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
NvimInvalidMultiplication xxx links to NvimInvalidBinaryOperator
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
NvimInvalidDivision xxx links to NvimInvalidBinaryOperator
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
NvimInvalidMod xxx links to NvimInvalidBinaryOperator
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
NvimInvalidTernary xxx links to NvimInvalidOperator
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
NvimInvalidTernaryColon xxx links to NvimInvalidTernary
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
NvimInvalidDelimiter xxx links to NvimInvalid
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
NvimInvalidParenthesis xxx links to NvimInvalidDelimiter
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
NvimInvalidLambda xxx links to NvimInvalidParenthesis
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
NvimInvalidNestingParenthesis xxx links to NvimInvalidParenthesis
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
NvimInvalidCallingParenthesis xxx links to NvimInvalidParenthesis
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
NvimInvalidSubscript xxx links to NvimInvalidParenthesis
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
NvimInvalidSubscriptBracket xxx links to NvimInvalidSubscript
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
NvimInvalidSubscriptColon xxx links to NvimInvalidSubscript
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
NvimInvalidCurly xxx links to NvimInvalidSubscript
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
NvimInvalidContainer xxx links to NvimInvalidParenthesis
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
NvimInvalidDict xxx links to NvimInvalidContainer
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
NvimInvalidList xxx links to NvimInvalidContainer
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
NvimInvalidValue xxx links to NvimInvalid
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
NvimInvalidIdentifier xxx links to NvimInvalidValue
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
NvimInvalidIdentifierScope xxx links to NvimInvalidIdentifier
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
NvimInvalidIdentifierScopeDelimiter xxx links to NvimInvalidIdentifier
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
NvimInvalidIdentifierName xxx links to NvimInvalidIdentifier
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
NvimInvalidIdentifierKey xxx links to NvimInvalidIdentifier
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
NvimInvalidColon xxx links to NvimInvalidDelimiter
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
NvimInvalidComma xxx links to NvimInvalidDelimiter
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
NvimInvalidArrow xxx links to NvimInvalidDelimiter
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
NvimInvalidRegister xxx links to NvimInvalidValue
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
NvimInvalidNumber xxx links to NvimInvalidValue
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
NvimInvalidFloat xxx links to NvimInvalidNumber
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
NvimInvalidNumberPrefix xxx links to NvimInvalidNumber
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
NvimInvalidOptionSigil xxx links to NvimInvalidIdentifier
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
NvimInvalidOptionName xxx links to NvimInvalidIdentifier
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
NvimInvalidOptionScope xxx links to NvimInvalidIdentifierScope
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
NvimInvalidOptionScopeDelimiter xxx links to NvimInvalidIdentifierScopeDelimiter
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
NvimInvalidEnvironmentSigil xxx links to NvimInvalidOptionSigil
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
NvimInvalidEnvironmentName xxx links to NvimInvalidIdentifier
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
NvimInvalidString xxx links to NvimInvalidValue
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
NvimInvalidStringBody xxx links to NvimStringBody
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
NvimInvalidStringQuote xxx links to NvimInvalidString
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
NvimInvalidStringSpecial xxx links to NvimStringSpecial
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
NvimInvalidSingleQuote xxx links to NvimInvalidStringQuote
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
NvimInvalidSingleQuotedBody xxx links to NvimInvalidStringBody
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
NvimInvalidSingleQuotedQuote xxx links to NvimInvalidStringSpecial
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
NvimInvalidDoubleQuote xxx links to NvimInvalidStringQuote
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
NvimInvalidDoubleQuotedBody xxx links to NvimInvalidStringBody
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
NvimInvalidDoubleQuotedEscape xxx links to NvimInvalidStringSpecial
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
NvimInvalidDoubleQuotedUnknownEscape xxx links to NvimInvalidValue
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
NvimInvalidFigureBrace xxx links to NvimInvalidDelimiter
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
NvimInvalidSpacing xxx links to ErrorMsg
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
NvimDoubleQuotedUnknownEscape xxx links to NvimInvalidValue
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
CocSemDefaultLibrary xxx cleared
TSOtherDefaultLibrary xxx cleared
CocSemDefaultLibraryClass xxx cleared
TSTypeDefaultLibrary xxx cleared
CocSemDefaultLibraryInterface xxx cleared
CocSemDefaultLibraryEnum xxx cleared
CocSemDefaultLibraryType xxx cleared
CocSemDefaultLibraryNamespace xxx cleared
CocSemDeclaration xxx cleared
TSOtherDeclaration xxx cleared
CocSemDeclarationClass xxx cleared
TSTypeDeclaration xxx cleared
CocSemDeclarationInterface xxx cleared
CocSemDeclarationEnum xxx cleared
CocSemDeclarationType xxx cleared
CocSemDeclarationNamespace xxx cleared
false          xxx cleared
GitSignsAdd    xxx guifg=#8ec07c
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
GitSignsChange xxx guifg=#fabd2f
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
GitSignsDelete xxx guifg=#fb4934
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
lualine_a_command xxx gui=bold guifg=#2b2d37 guibg=#ec7279
	Last set from ~/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine/highlight.lua line 129
lualine_b_command xxx guifg=#a0c980 guibg=#3a3e4e
	Last set from ~/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine/highlight.lua line 129
lualine_c_command xxx cleared
	Last set from ~/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine/highlight.lua line 47
lualine_a_inactive xxx gui=bold guifg=#c5cdd9 guibg=#3a3e4e
	Last set from ~/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine/highlight.lua line 129
lualine_b_inactive xxx guifg=#c5cdd9 guibg=#3a3e4e
	Last set from ~/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine/highlight.lua line 129
lualine_c_inactive xxx guifg=#c5cdd9 guibg=#3a3e4e
	Last set from ~/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine/highlight.lua line 129
lualine_a_replace xxx gui=bold guifg=#2b2d37 guibg=#676E95
	Last set from ~/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine/highlight.lua line 129
lualine_b_replace xxx guifg=#d38aea guibg=#3a3e4e
	Last set from ~/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine/highlight.lua line 129
lualine_c_replace xxx cleared
	Last set from ~/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine/highlight.lua line 47
lualine_a_normal xxx gui=bold guifg=#2b2d37 guibg=#5699AF
	Last set from ~/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine/highlight.lua line 129
lualine_b_normal xxx guifg=#6cb6eb guibg=#3a3e4e
	Last set from ~/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine/highlight.lua line 129
lualine_c_normal xxx guifg=#c5cdd9 guibg=#3a3e4e
	Last set from ~/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine/highlight.lua line 129
lualine_a_visual xxx gui=bold guifg=#2b2d37 guibg=#6cb6eb
	Last set from ~/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine/highlight.lua line 129
lualine_b_visual xxx guifg=#4db5bd guibg=#3a3e4e
	Last set from ~/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine/highlight.lua line 129
lualine_c_visual xxx cleared
	Last set from ~/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine/highlight.lua line 47
lualine_a_terminal xxx cleared
	Last set from ~/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine/highlight.lua line 47
lualine_b_terminal xxx cleared
	Last set from ~/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine/highlight.lua line 47
lualine_c_terminal xxx cleared
	Last set from ~/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine/highlight.lua line 47
lualine_a_insert xxx gui=bold guifg=#2b2d37 guibg=#d38aea
	Last set from ~/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine/highlight.lua line 129
lualine_b_insert xxx guifg=#a0c980 guibg=#3a3e4e
	Last set from ~/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine/highlight.lua line 129
lualine_c_insert xxx cleared
	Last set from ~/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine/highlight.lua line 47
lualine_b_diff_added_normal xxx guifg=#8ec07c guibg=#3a3e4e
	Last set from ~/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine/highlight.lua line 129
lualine_b_diff_added_insert xxx guifg=#8ec07c guibg=#3a3e4e
	Last set from ~/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine/highlight.lua line 129
lualine_b_diff_added_visual xxx guifg=#8ec07c guibg=#3a3e4e
	Last set from ~/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine/highlight.lua line 129
lualine_b_diff_added_replace xxx guifg=#8ec07c guibg=#3a3e4e
	Last set from ~/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine/highlight.lua line 129
lualine_b_diff_added_command xxx guifg=#8ec07c guibg=#3a3e4e
	Last set from ~/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine/highlight.lua line 129
lualine_b_diff_added_terminal xxx guifg=#8ec07c guibg=#3a3e4e
	Last set from ~/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine/highlight.lua line 129
lualine_b_diff_added_inactive xxx guifg=#8ec07c guibg=#3a3e4e
	Last set from ~/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine/highlight.lua line 129
lualine_b_diff_modified_normal xxx guifg=#fabd2f guibg=#3a3e4e
	Last set from ~/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine/highlight.lua line 129
lualine_b_diff_modified_insert xxx guifg=#fabd2f guibg=#3a3e4e
	Last set from ~/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine/highlight.lua line 129
lualine_b_diff_modified_visual xxx guifg=#fabd2f guibg=#3a3e4e
	Last set from ~/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine/highlight.lua line 129
lualine_b_diff_modified_replace xxx guifg=#fabd2f guibg=#3a3e4e
	Last set from ~/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine/highlight.lua line 129
lualine_b_diff_modified_command xxx guifg=#fabd2f guibg=#3a3e4e
	Last set from ~/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine/highlight.lua line 129
lualine_b_diff_modified_terminal xxx guifg=#fabd2f guibg=#3a3e4e
	Last set from ~/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine/highlight.lua line 129
lualine_b_diff_modified_inactive xxx guifg=#fabd2f guibg=#3a3e4e
	Last set from ~/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine/highlight.lua line 129
lualine_b_diff_removed_normal xxx guifg=#fb4934 guibg=#3a3e4e
	Last set from ~/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine/highlight.lua line 129
lualine_b_diff_removed_insert xxx guifg=#fb4934 guibg=#3a3e4e
	Last set from ~/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine/highlight.lua line 129
lualine_b_diff_removed_visual xxx guifg=#fb4934 guibg=#3a3e4e
	Last set from ~/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine/highlight.lua line 129
lualine_b_diff_removed_replace xxx guifg=#fb4934 guibg=#3a3e4e
	Last set from ~/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine/highlight.lua line 129
lualine_b_diff_removed_command xxx guifg=#fb4934 guibg=#3a3e4e
	Last set from ~/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine/highlight.lua line 129
lualine_b_diff_removed_terminal xxx guifg=#fb4934 guibg=#3a3e4e
	Last set from ~/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine/highlight.lua line 129
lualine_b_diff_removed_inactive xxx guifg=#fb4934 guibg=#3a3e4e
	Last set from ~/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine/highlight.lua line 129
lualine_b_diagnostics_error_normal xxx guifg=#ec7279 guibg=#3a3e4e
	Last set from ~/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine/highlight.lua line 129
lualine_b_diagnostics_error_insert xxx guifg=#ec7279 guibg=#3a3e4e
	Last set from ~/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine/highlight.lua line 129
lualine_b_diagnostics_error_visual xxx guifg=#ec7279 guibg=#3a3e4e
	Last set from ~/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine/highlight.lua line 129
lualine_b_diagnostics_error_replace xxx guifg=#ec7279 guibg=#3a3e4e
	Last set from ~/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine/highlight.lua line 129
lualine_b_diagnostics_error_command xxx guifg=#ec7279 guibg=#3a3e4e
	Last set from ~/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine/highlight.lua line 129
lualine_b_diagnostics_error_terminal xxx guifg=#ec7279 guibg=#3a3e4e
	Last set from ~/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine/highlight.lua line 129
lualine_b_diagnostics_error_inactive xxx guifg=#ec7279 guibg=#3a3e4e
	Last set from ~/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine/highlight.lua line 129
lualine_b_diagnostics_warn_normal xxx guifg=#ffa500 guibg=#3a3e4e
	Last set from ~/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine/highlight.lua line 129
lualine_b_diagnostics_warn_insert xxx guifg=#ffa500 guibg=#3a3e4e
	Last set from ~/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine/highlight.lua line 129
lualine_b_diagnostics_warn_visual xxx guifg=#ffa500 guibg=#3a3e4e
	Last set from ~/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine/highlight.lua line 129
lualine_b_diagnostics_warn_replace xxx guifg=#ffa500 guibg=#3a3e4e
	Last set from ~/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine/highlight.lua line 129
lualine_b_diagnostics_warn_command xxx guifg=#ffa500 guibg=#3a3e4e
	Last set from ~/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine/highlight.lua line 129
lualine_b_diagnostics_warn_terminal xxx guifg=#ffa500 guibg=#3a3e4e
	Last set from ~/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine/highlight.lua line 129
lualine_b_diagnostics_warn_inactive xxx guifg=#ffa500 guibg=#3a3e4e
	Last set from ~/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine/highlight.lua line 129
lualine_b_diagnostics_info_normal xxx guifg=#add8e6 guibg=#3a3e4e
	Last set from ~/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine/highlight.lua line 129
lualine_b_diagnostics_info_insert xxx guifg=#add8e6 guibg=#3a3e4e
	Last set from ~/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine/highlight.lua line 129
lualine_b_diagnostics_info_visual xxx guifg=#add8e6 guibg=#3a3e4e
	Last set from ~/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine/highlight.lua line 129
lualine_b_diagnostics_info_replace xxx guifg=#add8e6 guibg=#3a3e4e
	Last set from ~/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine/highlight.lua line 129
lualine_b_diagnostics_info_command xxx guifg=#add8e6 guibg=#3a3e4e
	Last set from ~/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine/highlight.lua line 129
lualine_b_diagnostics_info_terminal xxx guifg=#add8e6 guibg=#3a3e4e
	Last set from ~/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine/highlight.lua line 129
lualine_b_diagnostics_info_inactive xxx guifg=#add8e6 guibg=#3a3e4e
	Last set from ~/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine/highlight.lua line 129
lualine_b_diagnostics_hint_normal xxx guifg=#4db5bd guibg=#3a3e4e
	Last set from ~/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine/highlight.lua line 129
lualine_b_diagnostics_hint_insert xxx guifg=#4db5bd guibg=#3a3e4e
	Last set from ~/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine/highlight.lua line 129
lualine_b_diagnostics_hint_visual xxx guifg=#4db5bd guibg=#3a3e4e
	Last set from ~/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine/highlight.lua line 129
lualine_b_diagnostics_hint_replace xxx guifg=#4db5bd guibg=#3a3e4e
	Last set from ~/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine/highlight.lua line 129
lualine_b_diagnostics_hint_command xxx guifg=#4db5bd guibg=#3a3e4e
	Last set from ~/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine/highlight.lua line 129
lualine_b_diagnostics_hint_terminal xxx guifg=#4db5bd guibg=#3a3e4e
	Last set from ~/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine/highlight.lua line 129
lualine_b_diagnostics_hint_inactive xxx guifg=#4db5bd guibg=#3a3e4e
	Last set from ~/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine/highlight.lua line 129
lualine_a_tabs_active xxx links to lualine_a_normal
	Last set from ~/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine/highlight.lua line 129
lualine_a_tabs_inactive xxx links to lualine_a_inactive
	Last set from ~/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine/highlight.lua line 129
TSConstant     xxx links to Constant
	Last set from Lua
TSField        xxx guifg=#ec7279
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
TSFunction     xxx gui=bold,italic guifg=#d38aea
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
TSMethod       xxx gui=italic guifg=#d38aea
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
TSParameter    xxx guifg=#a9a1e1
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
TSProperty     xxx guifg=#a9a1e1
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
TSVariableBuiltin xxx gui=italic guifg=#4db5bd
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
IndentBlanklineChar xxx guifg=#676E95
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
IndentBlanklineContextChar xxx guifg=#4db5bd
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
GitSignsChangeNr xxx guifg=#fabd2f
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
GitSignsAddLn  xxx guifg=#8ec07c
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
GitSignsAddNr  xxx guifg=#8ec07c
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
CocExplorerBufferNameVisible xxx guifg=#da8548
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
CocExplorerBufferModified xxx guifg=#d38aea
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
CocExplorerBufferReadonly xxx guifg=#d38aea
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
CocExplorerFileFullPath xxx guifg=#7e8294
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
markdownListMarker xxx guifg=#ec7279
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
TSURI          xxx guifg=#d38aea
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
CocExplorerBufferRoot xxx guifg=#4db5bd
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
CocExplorerIndentLine xxx guifg=#7e8294
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
CocHintHighlight xxx guifg=#6cb6eb
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
CocInfoHighlight xxx guifg=#a0c980
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
CocWarningHighlight xxx guifg=#da8548
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
CocErrorHighlight xxx guifg=#ec7279
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
CocCodeLens    xxx guifg=#7e8294
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
CocDiagnosticsHint xxx guifg=#6cb6eb
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
CocDiagnosticsInfo xxx guifg=#a0c980
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
CocDiagnosticsWarning xxx guifg=#da8548
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
CocDiagnosticsError xxx guifg=#ec7279
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
CocHintFloat   xxx guifg=#6cb6eb
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
CocInfoFloat   xxx guifg=#a0c980
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
CocWarningFloat xxx guifg=#da8548
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
CocErrorFloat  xxx guifg=#ec7279
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
CocHintSign    xxx guifg=#6cb6eb
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
CocInfoSign    xxx guifg=#a0c980
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
CocErrorSign   xxx guifg=#ec7279
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
EasyMotionTarget2Second xxx gui=bold guifg=#ec7279
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
EasyMotionTarget2First xxx gui=bold guifg=#ec7279
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
EasyMotionTarget xxx gui=bold guifg=#ec7279
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
StartifyFooter xxx guifg=#a0c980
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
StartifySection xxx guifg=#ec7279
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
StartifyHeader xxx guifg=#d38aea
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
StartifySlash  xxx guifg=#a9a1e1
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
StartifyFile   xxx guifg=#a0c980
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
StartifyPath   xxx guifg=#6cb6eb
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
StartifySpecial xxx guifg=#4db5bd
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
StartifyBracket xxx guifg=#7e8294
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
StartifySelect xxx guifg=#a0c980
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
StartifyNumber xxx guifg=#d38aea
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
TSNumber       xxx guifg=#ec7279
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
SneakScope     xxx guibg=#404455
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
Sneak          xxx guifg=#2b2d37 guibg=#a0c980
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
BufferLineFill xxx guibg=#3a3e4e
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
BufferLineIndicatorSelected xxx guifg=#a0c980
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
TargetWord     xxx guifg=#4db5bd
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
DefinitionIcon xxx guifg=#6cb6eb
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
DefinitionCount xxx guifg=#d38aea
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
ReferencesCount xxx guifg=#d38aea
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
LspSagaCodeActionContent xxx guifg=#d38aea
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
LspSagaCodeActionTitle xxx guifg=#4C566A
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
LspSagaFinderSelection xxx guifg=#a0c980
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
LspSagaCodeActionBorder xxx guifg=#6cb6eb
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
LspSagaDefPreviewBorder xxx guifg=#a0c980
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
LspSagaHoverBorder xxx guifg=#4C566A
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
LspDiagnosticsDefaultHint xxx guifg=#4db5bd
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
DiagnosticTruncateLine xxx guifg=#c5cdd9
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
TelescopeResultsBorder xxx guifg=#6cb6eb
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
markdownIdDelimiter xxx guifg=#4db5bd
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
markdownstyle  xxx gui=italic guifg=#4db5bd
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
markdownLinkDelimiter xxx guifg=#4db5bd
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
markdownLinkText xxx guifg=#6cb6eb
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
TelescopePreviewBorder xxx guifg=#d38aea
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
markdownOrderedListMarker xxx guifg=#ec7279
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
markdownRule   xxx guifg=#7e8294
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
markdownUrl    xxx gui=underline guifg=#4db5bd
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
markdownBlockquote xxx guifg=#7e8294
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
markdownBold   xxx gui=bold guifg=#da8548
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
markdownCode   xxx guifg=#d38aea guibg=#333644
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
markdownCodeBlock xxx guifg=#a0c980
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
markdownCodeDelimiter xxx guifg=#a0c980
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
DashboardShortCut xxx guifg=#ec7279
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
DashboardHeader xxx guifg=#d38aea
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
DashboardCenter xxx guifg=#6cb6eb
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
DashboardFooter xxx gui=italic guifg=#a0c980
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
TSComment      xxx gui=italic guifg=#7e8294
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
TSConditional  xxx gui=italic guifg=#ADD8E6
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
TSKeyword      xxx gui=italic guifg=#6cb6eb
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
TSAnnotation   xxx links to PreProc
	Last set from Lua
TSRepeat       xxx gui=italic guifg=#6cb6eb
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
TSAttribute    xxx links to PreProc
	Last set from Lua
TSKeywordFunction xxx gui=italic guifg=#6cb6eb
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
TSCharacter    xxx links to Character
	Last set from Lua
TSBoolean      xxx gui=italic guifg=#da8548
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
TSConstructor  xxx links to Special
	Last set from Lua
TSFuncBuiltin  xxx gui=italic guifg=#da8548
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
TSVariable     xxx gui=italic guifg=#D8BFD8
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
DiagnosticInformation xxx guifg=#6cb6eb
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
TSConstMacro   xxx guifg=#4db5bd
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
TSError        xxx guifg=#ec7279
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
TSException    xxx guifg=#6cb6eb
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
TSFloat        xxx guifg=#ec7279
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
GitGutterAdd   xxx guifg=#8ec07c
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
SignifySignAdd xxx guifg=#8ec07c
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
TSLabel        xxx guifg=#4db5bd
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
diffAdded      xxx guifg=#8ec07c
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
TSOperator     xxx guifg=#6cb6eb
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
TSParameterReference xxx guifg=#c5cdd9
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
TSPunctDelimiter xxx guifg=#c5cdd9
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
TSPunctBracket xxx guifg=#d38aea
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
TSString       xxx guifg=#a0c980
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
TSStringRegex  xxx guifg=#6cb6eb
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
TSStringEscape xxx guifg=#da8548
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
diffRemoved    xxx guifg=#fb4934
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
TSTypeBuiltin  xxx guifg=#4db5bd
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
TSTag          xxx guifg=#6cb6eb
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
TSTagDelimiter xxx guifg=#6cb6eb
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
TSText         xxx guifg=#a9a1e1
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
TSTextReference xxx guifg=#da8548
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
TSEmphasis     xxx guifg=#a9a1e1
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
TSUnderline    xxx cterm=underline gui=underline
	Last set from Lua
TSStrike       xxx cterm=strikethrough gui=strikethrough
	Last set from Lua
TSTitle        xxx gui=bold guifg=#c5cdd9
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
TSLiteral      xxx guifg=#c5cdd9
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
LspDiagnosticsSignError xxx guifg=#ec7279
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
LspDiagnosticsFloatingError xxx gui=bold guifg=#ec7279
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
LspDiagnosticsVirtualTextError xxx gui=bold guifg=#ec7279
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
LspDiagnosticsUnderlineError xxx gui=undercurl guifg=#ec7279 guisp=#ec7279
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
DiagnosticWarning xxx guifg=#da8548
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
LspDiagnosticsSignWarning xxx guifg=#da8548
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
LspDiagnosticsFloatingWarning xxx gui=bold guifg=#da8548
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
LspDiagnosticsVirtualTextWarning xxx gui=bold guifg=#da8548
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
LspDiagnosticsUnderlineWarning xxx gui=undercurl guifg=#da8548 guisp=#da8548
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
LspDiagnosticsSignInformation xxx guifg=#6cb6eb
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
LspDiagnosticsFloatingInformation xxx gui=bold guifg=#6cb6eb
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
LspDiagnosticsVirtualTextInformation xxx gui=bold guifg=#6cb6eb
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
LspDiagnosticsUnderlineInformation xxx gui=undercurl guifg=#6cb6eb guisp=#6cb6eb
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
LspDiagnosticsSignHint xxx guifg=#4db5bd
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
LspDiagnosticsFloatingHint xxx gui=bold guifg=#4db5bd
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
LspDiagnosticsVirtualTextHint xxx gui=bold guifg=#4db5bd
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
LspDiagnosticsUnderlineHint xxx gui=undercurl guifg=#4db5bd guisp=#6cb6eb
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
LspReferenceText xxx guifg=#c5cdd9 guibg=#d38aea
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
LspReferenceRead xxx guifg=#c5cdd9 guibg=#d38aea
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
LspReferenceWrite xxx guifg=#c5cdd9 guibg=#d38aea
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
LspTroubleText xxx guifg=#404455
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
LspTroubleCount xxx guifg=#d38aea guibg=#3a3e4e
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
LspTroubleNormal xxx guifg=#c5cdd9 guibg=#2b2d37
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
diffOldFile    xxx guifg=#404455
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
diffNewFile    xxx guifg=#c5cdd9
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
diffFile       xxx guifg=#7e8294
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
diffLine       xxx guifg=#4db5bd
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
diffIndexLine  xxx guifg=#d38aea
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
NeogitBranch   xxx guifg=#4C566A
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
NeogitRemote   xxx guifg=#d38aea
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
NeogitHunkHeader xxx guifg=#c5cdd9 guibg=#4db5bd
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
NeogitHunkHeaderHighlight xxx guifg=#6cb6eb
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
NeogitDiffContextHighlight xxx guifg=#c5cdd9
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
NeogitDiffDeleteHighlight xxx guifg=#ec7279
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
NeogitDiffAddHighlight xxx guifg=#a0c980
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
SyntasticError xxx guifg=#ec7279
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
SyntasticWarning xxx guifg=#ECBE7B
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
SyntasticErrorSign xxx guifg=#ec7279
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
SyntasticWarningSign xxx guifg=#ECBE7B
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
NERDTreeDir    xxx guifg=#d38aea
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
NERDTreeDirSlash xxx guifg=#6cb6eb
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
NERDTreeOpenable xxx guifg=#da8548
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
NERDTreeHelp   xxx guifg=#4C566A
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
NERDTreeToggleOff xxx guifg=#ec7279
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
htmlArg        xxx guifg=#da8548
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
htmlBold       xxx gui=bold guifg=#da8548
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
htmlEndTag     xxx guifg=#c5cdd9
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
htmlstyle      xxx gui=italic guifg=#4db5bd
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
htmlLink       xxx gui=underline guifg=#4db5bd
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
htmlSpecialChar xxx guifg=#da8548
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
htmlSpecialTagName xxx gui=bold guifg=#6cb6eb
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
htmlTag        xxx guifg=#c5cdd9
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
htmlTagN       xxx guifg=#6cb6eb
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
htmlTagName    xxx guifg=#6cb6eb
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
htmlTitle      xxx guifg=#c5cdd9
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
htmlH1         xxx gui=bold guifg=#6cb6eb
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
htmlH2         xxx gui=bold guifg=#6cb6eb
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
htmlH3         xxx gui=bold guifg=#6cb6eb
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
htmlH4         xxx gui=bold guifg=#6cb6eb
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
htmlH5         xxx gui=bold guifg=#6cb6eb
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
markdownH1     xxx gui=bold guifg=#6cb6eb
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
markdownH2     xxx gui=bold guifg=#6cb6eb
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
markdownH3     xxx gui=bold guifg=#6cb6eb
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
markdownH4     xxx gui=bold guifg=#6cb6eb
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
markdownH5     xxx gui=bold guifg=#6cb6eb
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
markdownH6     xxx gui=bold guifg=#6cb6eb
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
markdownHeadingDelimiter xxx guifg=#ec7279
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
markdownHeadingRule xxx guifg=#7e8294
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
markdownId     xxx guifg=#4db5bd
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
TSFuncMacro    xxx guifg=#da8548
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
WhichKeyFloating xxx guibg=#333644
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
WhichKeySeperator xxx guifg=#a0c980
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
WhichKeyDesc   xxx gui=bold guifg=#6cb6eb
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
WhichKeyGroup  xxx gui=italic guifg=#a9a1e1
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
WhichKey       xxx gui=bold guifg=#d38aea
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
ALEVirtualTextInfo xxx guifg=#6cb6eb
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
ALEVirtualTextWarning xxx guifg=#ECBE7B
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
ALEVirtualTextError xxx guifg=#ec7279
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
ALEInfoSign    xxx guifg=#6cb6eb
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
ALEWarningSign xxx guifg=#da8548
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
ALEErrorSign   xxx guifg=#ec7279
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
ALEInfo        xxx guifg=#6cb6eb
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
ALEWarning     xxx guifg=#da8548
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
ALEError       xxx guifg=#ec7279
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
LspDiagnosticsHint xxx guifg=#6cb6eb
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
LspDiagnosticsInformation xxx guifg=#4C566A
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
LspDiagnosticsWarning xxx guifg=#da8548
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
LspDiagnosticsError xxx guifg=#ec7279
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
NvimTreeIndentMarker xxx guifg=#676E95
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
NvimTreeFolderIcon xxx guifg=#7e8294
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
NvimTreeEmptyFolderName xxx guifg=#7e8294
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
NvimTreeFolderName xxx guifg=#6cb6eb
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
NvimTreeSpecialFile xxx gui=underline guifg=#ECBE7B
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
NvimTreeExecFile xxx guifg=#a0c980
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
NvimTreeImageFile xxx guifg=#d38aea
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
NvimTreeGitNew xxx guifg=#a0c980
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
NvimTreeGitDirty xxx guifg=#fabd2f
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
NvimTreeNormal xxx guifg=#c5cdd9 guibg=#2b2d37
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
NvimTreeRootFolder xxx gui=italic guifg=#4db5bd
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
NERDTreeToggleOn xxx guifg=#a0c980
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
NERDTreeCWD    xxx guifg=#a0c980
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
NERDTreeUp     xxx guifg=#7e8294
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
NERDTreeExecFile xxx guifg=#a0c980
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
NERDTreeFile   xxx guifg=#6cb6eb
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
NERDTreeClosable xxx guifg=#da8548
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
GitSignsDeleteLn xxx guifg=#fb4934
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
GitGutterDelete xxx guifg=#fb4934
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
GitGutterChange xxx guifg=#458588
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
diffChanged    xxx guifg=#458588
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
TSType         xxx guifg=#da8548
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
TSSymbol       xxx guifg=#da8548
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
TSPunctSpecial xxx guifg=#ECBE7B
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
healthSuccess  xxx guifg=#a0c980
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
markdownIdDeclaration xxx guifg=#6cb6eb
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
LspDiagnosticsDefaultError xxx guifg=#ec7279
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
TSNamespace    xxx guifg=#4db5bd
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
TSInclude      xxx guifg=#6cb6eb
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
LspDiagnosticsDefaultWarning xxx guifg=#da8548
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
LspDiagnosticsDefaultInformation xxx guifg=#6cb6eb
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
TelescopePromptBorder xxx guifg=#a0c980
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
WhichKeyFloat  xxx guibg=#333644
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
CursorIM       xxx gui=reverse guifg=#4db5bd
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
LspFloatWinNormal xxx guibg=#2b2d37
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
LspFloatWinBorder xxx guifg=#d38aea
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
LspSagaBorderTitle xxx guifg=#4db5bd
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
LspSagaRenameBorder xxx guifg=#a0c980
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
LspSagaSignatureHelpBorder xxx guifg=#d38aea
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
ReferencesIcon xxx guifg=#6cb6eb
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
DapBreakpoint  xxx guifg=#ec7279
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
DapStopped     xxx guifg=#a0c980
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
qfLineNr       xxx guifg=#6cb6eb guibg=#333644
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
StartifyVar    xxx guifg=#6cb6eb
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
StatusLineTerm xxx guifg=#c5cdd9 guibg=#3a3e4e
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
StatusLineTermNC xxx guifg=#c5cdd9 guibg=#3a3e4e
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
VisualNOS      xxx gui=reverse
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
CocWarningSign xxx guifg=#da8548
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
ToolbarLine    xxx guifg=#c5cdd9 guibg=#333644
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
ToolbarButton  xxx gui=bold guifg=#c5cdd9
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
NormalMode     xxx gui=reverse guifg=#4db5bd
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
InsertMode     xxx gui=reverse guifg=#a0c980
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
ReplacelMode   xxx gui=reverse guifg=#ec7279
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
VisualMode     xxx gui=reverse guifg=#4db5bd
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
CocSelectedText xxx guifg=#ec7279
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
CommandMode    xxx gui=reverse guifg=#7e8294
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
Warnings       xxx guifg=#da8548
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
healthError    xxx guifg=#ec7279
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
healthWarning  xxx guifg=#da8548
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
CocExplorerFileRoot xxx guifg=#4db5bd
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
CocExplorerBufferFullPath xxx guifg=#7e8294
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
CocExplorerFileReadonly xxx guifg=#d38aea
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
CocExplorerFileModified xxx guifg=#d38aea
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
CocExplorerFileHidden xxx guifg=#7e8294
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
CocExplorerHelpLine xxx guifg=#d38aea
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
GitSignsChangeLn xxx guifg=#fabd2f
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
GitSignsDeleteNr xxx guifg=#fb4934
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
SignifySignChange xxx guifg=#fabd2f
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
SignifySignDelete xxx guifg=#fb4934
	Last set from ~/.local/share/nvim/site/pack/packer/start/neon/colors/neon.vim line 7
cheatComment   xxx links to Comment
	Last set from ~/.local/share/nvim/site/pack/packer/start/cheatsheet.nvim/plugin/cheatsheet.vim line 17
cheatMetadataComment xxx links to Comment
	Last set from ~/.local/share/nvim/site/pack/packer/start/cheatsheet.nvim/plugin/cheatsheet.vim line 18
cheatMetadataTag xxx links to Include
	Last set from ~/.local/share/nvim/site/pack/packer/start/cheatsheet.nvim/plugin/cheatsheet.vim line 19
cheatMetadataSection xxx links to Structure
	Last set from ~/.local/share/nvim/site/pack/packer/start/cheatsheet.nvim/plugin/cheatsheet.vim line 20
cheatDescription xxx links to String
	Last set from ~/.local/share/nvim/site/pack/packer/start/cheatsheet.nvim/plugin/cheatsheet.vim line 22
cheatSeparator xxx links to Keyword
	Last set from ~/.local/share/nvim/site/pack/packer/start/cheatsheet.nvim/plugin/cheatsheet.vim line 23
cheatCode      xxx links to Statement
	Last set from ~/.local/share/nvim/site/pack/packer/start/cheatsheet.nvim/plugin/cheatsheet.vim line 24
CocUnderline   xxx cterm=underline gui=underline
	Last set from ~/.local/share/nvim/site/pack/packer/start/coc.nvim/plugin/coc.vim line 382
CocBold        xxx cterm=bold gui=bold
	Last set from ~/.local/share/nvim/site/pack/packer/start/coc.nvim/plugin/coc.vim line 383
CocItalic      xxx cterm=italic gui=italic
	Last set from ~/.local/share/nvim/site/pack/packer/start/coc.nvim/plugin/coc.vim line 384
CocStrikeThrough xxx cterm=strikethrough gui=strikethrough
	Last set from ~/.local/share/nvim/site/pack/packer/start/coc.nvim/plugin/coc.vim line 386
CocMarkdownLink xxx ctermfg=12 guifg=#15aabf
	Last set from ~/.local/share/nvim/site/pack/packer/start/coc.nvim/plugin/coc.vim line 390
CocDisabled    xxx ctermfg=248 guifg=#999999
	Last set from ~/.local/share/nvim/site/pack/packer/start/coc.nvim/plugin/coc.vim line 391
CocFadeOut     xxx links to Conceal
	Last set from ~/.local/share/nvim/site/pack/packer/start/coc.nvim/plugin/coc.vim line 392
CocMarkdownCode xxx links to markdownCode
	Last set from ~/.local/share/nvim/site/pack/packer/start/coc.nvim/plugin/coc.vim line 393
CocMarkdownHeader xxx links to markdownH1
	Last set from ~/.local/share/nvim/site/pack/packer/start/coc.nvim/plugin/coc.vim line 394
CocMenuSel     xxx links to PmenuSel
	Last set from ~/.local/share/nvim/site/pack/packer/start/coc.nvim/plugin/coc.vim line 395
CocDeprecatedHighlight xxx links to CocStrikeThrough
	Last set from ~/.local/share/nvim/site/pack/packer/start/coc.nvim/plugin/coc.vim line 404
CocUnusedHighlight xxx links to CocFadeOut
	Last set from ~/.local/share/nvim/site/pack/packer/start/coc.nvim/plugin/coc.vim line 405
CocListMode    xxx links to ModeMsg
	Last set from ~/.local/share/nvim/site/pack/packer/start/coc.nvim/plugin/coc.vim line 406
CocListPath    xxx links to Comment
	Last set from ~/.local/share/nvim/site/pack/packer/start/coc.nvim/plugin/coc.vim line 407
CocHighlightText xxx links to CursorColumn
	Last set from ~/.local/share/nvim/site/pack/packer/start/coc.nvim/plugin/coc.vim line 408
CocHoverRange  xxx links to Search
	Last set from ~/.local/share/nvim/site/pack/packer/start/coc.nvim/plugin/coc.vim line 409
CocCursorRange xxx links to Search
	Last set from ~/.local/share/nvim/site/pack/packer/start/coc.nvim/plugin/coc.vim line 410
CocLinkedEditing xxx links to CocCursorRange
	Last set from ~/.local/share/nvim/site/pack/packer/start/coc.nvim/plugin/coc.vim line 411
CocHighlightRead xxx links to CocHighlightText
	Last set from ~/.local/share/nvim/site/pack/packer/start/coc.nvim/plugin/coc.vim line 412
CocHighlightWrite xxx links to CocHighlightText
	Last set from ~/.local/share/nvim/site/pack/packer/start/coc.nvim/plugin/coc.vim line 413
CocInlayHint   xxx links to CocHintSign
	Last set from ~/.local/share/nvim/site/pack/packer/start/coc.nvim/plugin/coc.vim line 414
CocSnippetVisual xxx links to Visual
	Last set from ~/.local/share/nvim/site/pack/packer/start/coc.nvim/plugin/coc.vim line 416
CocTreeTitle   xxx links to Title
	Last set from ~/.local/share/nvim/site/pack/packer/start/coc.nvim/plugin/coc.vim line 418
CocTreeDescription xxx links to Comment
	Last set from ~/.local/share/nvim/site/pack/packer/start/coc.nvim/plugin/coc.vim line 419
CocTreeOpenClose xxx links to CocBold
	Last set from ~/.local/share/nvim/site/pack/packer/start/coc.nvim/plugin/coc.vim line 420
CocTreeSelected xxx links to CursorLine
	Last set from ~/.local/share/nvim/site/pack/packer/start/coc.nvim/plugin/coc.vim line 421
CocSelectedRange xxx links to CocHighlightText
	Last set from ~/.local/share/nvim/site/pack/packer/start/coc.nvim/plugin/coc.vim line 422
CocSymbolDefault xxx links to MoreMsg
	Last set from ~/.local/share/nvim/site/pack/packer/start/coc.nvim/plugin/coc.vim line 424
CocSymbolFile  xxx links to Statement
	Last set from ~/.local/share/nvim/site/pack/packer/start/coc.nvim/plugin/coc.vim line 425
CocSymbolModule xxx links to Statement
	Last set from ~/.local/share/nvim/site/pack/packer/start/coc.nvim/plugin/coc.vim line 426
CocSymbolNamespace xxx links to Statement
	Last set from ~/.local/share/nvim/site/pack/packer/start/coc.nvim/plugin/coc.vim line 427
CocSymbolPackage xxx links to Statement
	Last set from ~/.local/share/nvim/site/pack/packer/start/coc.nvim/plugin/coc.vim line 428
CocSymbolClass xxx links to Statement
	Last set from ~/.local/share/nvim/site/pack/packer/start/coc.nvim/plugin/coc.vim line 429
CocSymbolMethod xxx links to Function
	Last set from ~/.local/share/nvim/site/pack/packer/start/coc.nvim/plugin/coc.vim line 430
CocSymbolProperty xxx links to Keyword
	Last set from ~/.local/share/nvim/site/pack/packer/start/coc.nvim/plugin/coc.vim line 431
CocSymbolField xxx links to CocSymbolDefault
	Last set from ~/.local/share/nvim/site/pack/packer/start/coc.nvim/plugin/coc.vim line 432
CocSymbolConstructor xxx links to Function
	Last set from ~/.local/share/nvim/site/pack/packer/start/coc.nvim/plugin/coc.vim line 433
CocSymbolEnum  xxx links to CocSymbolDefault
	Last set from ~/.local/share/nvim/site/pack/packer/start/coc.nvim/plugin/coc.vim line 434
CocSymbolInterface xxx links to CocSymbolDefault
	Last set from ~/.local/share/nvim/site/pack/packer/start/coc.nvim/plugin/coc.vim line 435
CocSymbolFunction xxx links to Function
	Last set from ~/.local/share/nvim/site/pack/packer/start/coc.nvim/plugin/coc.vim line 436
CocSymbolVariable xxx links to CocSymbolDefault
	Last set from ~/.local/share/nvim/site/pack/packer/start/coc.nvim/plugin/coc.vim line 437
CocSymbolConstant xxx links to Constant
	Last set from ~/.local/share/nvim/site/pack/packer/start/coc.nvim/plugin/coc.vim line 438
CocSymbolString xxx links to String
	Last set from ~/.local/share/nvim/site/pack/packer/start/coc.nvim/plugin/coc.vim line 439
CocSymbolNumber xxx links to Number
	Last set from ~/.local/share/nvim/site/pack/packer/start/coc.nvim/plugin/coc.vim line 440
CocSymbolBoolean xxx links to Boolean
	Last set from ~/.local/share/nvim/site/pack/packer/start/coc.nvim/plugin/coc.vim line 441
CocSymbolArray xxx links to CocSymbolDefault
	Last set from ~/.local/share/nvim/site/pack/packer/start/coc.nvim/plugin/coc.vim line 442
CocSymbolObject xxx links to CocSymbolDefault
	Last set from ~/.local/share/nvim/site/pack/packer/start/coc.nvim/plugin/coc.vim line 443
CocSymbolKey   xxx links to Keyword
	Last set from ~/.local/share/nvim/site/pack/packer/start/coc.nvim/plugin/coc.vim line 444
CocSymbolNull  xxx links to Type
	Last set from ~/.local/share/nvim/site/pack/packer/start/coc.nvim/plugin/coc.vim line 445
CocSymbolEnumMember xxx links to CocSymbolDefault
	Last set from ~/.local/share/nvim/site/pack/packer/start/coc.nvim/plugin/coc.vim line 446
CocSymbolStruct xxx links to Keyword
	Last set from ~/.local/share/nvim/site/pack/packer/start/coc.nvim/plugin/coc.vim line 447
CocSymbolEvent xxx links to Keyword
	Last set from ~/.local/share/nvim/site/pack/packer/start/coc.nvim/plugin/coc.vim line 448
CocSymbolOperator xxx links to Operator
	Last set from ~/.local/share/nvim/site/pack/packer/start/coc.nvim/plugin/coc.vim line 449
CocSymbolTypeParameter xxx links to Operator
	Last set from ~/.local/share/nvim/site/pack/packer/start/coc.nvim/plugin/coc.vim line 450
CocFloating    xxx links to NormalFloat
	Last set from ~/.local/share/nvim/site/pack/packer/start/coc.nvim/plugin/coc.vim line 453
CocCursorTransparent xxx gui=strikethrough blend=100
	Last set from ~/.local/share/nvim/site/pack/packer/start/coc.nvim/plugin/coc.vim line 464
CocErrorVirtualText xxx links to CocErrorSign
	Last set from ~/.local/share/nvim/site/pack/packer/start/coc.nvim/plugin/coc.vim line 471
CocWarningVirtualText xxx links to CocWarningSign
	Last set from ~/.local/share/nvim/site/pack/packer/start/coc.nvim/plugin/coc.vim line 471
CocInfoVirtualText xxx links to CocInfoSign
	Last set from ~/.local/share/nvim/site/pack/packer/start/coc.nvim/plugin/coc.vim line 471
CocHintVirtualText xxx links to CocHintSign
	Last set from ~/.local/share/nvim/site/pack/packer/start/coc.nvim/plugin/coc.vim line 471
CocListBlackBlack xxx guifg=#363a49 guibg=#363a49
	Last set from ~/.local/share/nvim/site/pack/packer/start/coc.nvim/plugin/coc.vim line 206
CocListBlackBlue xxx guifg=#363a49 guibg=#ECBE7B
	Last set from ~/.local/share/nvim/site/pack/packer/start/coc.nvim/plugin/coc.vim line 206
CocListBlackGreen xxx guifg=#363a49 guibg=#a0c980
	Last set from ~/.local/share/nvim/site/pack/packer/start/coc.nvim/plugin/coc.vim line 206
CocListBlackGrey xxx guifg=#363a49 guibg=#ECBE7B
	Last set from ~/.local/share/nvim/site/pack/packer/start/coc.nvim/plugin/coc.vim line 206
CocListBlackWhite xxx guifg=#363a49 guibg=#6cb6eb
	Last set from ~/.local/share/nvim/site/pack/packer/start/coc.nvim/plugin/coc.vim line 206
CocListBlackCyan xxx guifg=#363a49 guibg=#6cb6eb
	Last set from ~/.local/share/nvim/site/pack/packer/start/coc.nvim/plugin/coc.vim line 206
CocListBlackYellow xxx guifg=#363a49 guibg=#6cb6eb
	Last set from ~/.local/share/nvim/site/pack/packer/start/coc.nvim/plugin/coc.vim line 206
CocListBlackMagenta xxx guifg=#363a49 guibg=#d38aea
	Last set from ~/.local/share/nvim/site/pack/packer/start/coc.nvim/plugin/coc.vim line 206
CocListBlackRed xxx guifg=#363a49 guibg=#4db5bd
	Last set from ~/.local/share/nvim/site/pack/packer/start/coc.nvim/plugin/coc.vim line 206
CocListFgBlack xxx ctermfg=0 guifg=#363a49
	Last set from ~/.local/share/nvim/site/pack/packer/start/coc.nvim/plugin/coc.vim line 208
CocListBgBlack xxx ctermbg=0 guibg=#363a49
	Last set from ~/.local/share/nvim/site/pack/packer/start/coc.nvim/plugin/coc.vim line 209
CocListBlueBlack xxx guifg=#ECBE7B guibg=#363a49
	Last set from ~/.local/share/nvim/site/pack/packer/start/coc.nvim/plugin/coc.vim line 206
CocListBlueBlue xxx guifg=#ECBE7B guibg=#ECBE7B
	Last set from ~/.local/share/nvim/site/pack/packer/start/coc.nvim/plugin/coc.vim line 206
CocListBlueGreen xxx guifg=#ECBE7B guibg=#a0c980
	Last set from ~/.local/share/nvim/site/pack/packer/start/coc.nvim/plugin/coc.vim line 206
CocListBlueGrey xxx guifg=#ECBE7B guibg=#ECBE7B
	Last set from ~/.local/share/nvim/site/pack/packer/start/coc.nvim/plugin/coc.vim line 206
CocListBlueWhite xxx guifg=#ECBE7B guibg=#6cb6eb
	Last set from ~/.local/share/nvim/site/pack/packer/start/coc.nvim/plugin/coc.vim line 206
CocListBlueCyan xxx guifg=#ECBE7B guibg=#6cb6eb
	Last set from ~/.local/share/nvim/site/pack/packer/start/coc.nvim/plugin/coc.vim line 206
CocListBlueYellow xxx guifg=#ECBE7B guibg=#6cb6eb
	Last set from ~/.local/share/nvim/site/pack/packer/start/coc.nvim/plugin/coc.vim line 206
CocListBlueMagenta xxx guifg=#ECBE7B guibg=#d38aea
	Last set from ~/.local/share/nvim/site/pack/packer/start/coc.nvim/plugin/coc.vim line 206
CocListBlueRed xxx guifg=#ECBE7B guibg=#4db5bd
	Last set from ~/.local/share/nvim/site/pack/packer/start/coc.nvim/plugin/coc.vim line 206
CocListFgBlue  xxx ctermfg=12 guifg=#ECBE7B
	Last set from ~/.local/share/nvim/site/pack/packer/start/coc.nvim/plugin/coc.vim line 208
CocListBgBlue  xxx ctermbg=12 guibg=#ECBE7B
	Last set from ~/.local/share/nvim/site/pack/packer/start/coc.nvim/plugin/coc.vim line 209
CocListGreenBlack xxx guifg=#a0c980 guibg=#363a49
	Last set from ~/.local/share/nvim/site/pack/packer/start/coc.nvim/plugin/coc.vim line 206
CocListGreenBlue xxx guifg=#a0c980 guibg=#ECBE7B
	Last set from ~/.local/share/nvim/site/pack/packer/start/coc.nvim/plugin/coc.vim line 206
CocListGreenGreen xxx guifg=#a0c980 guibg=#a0c980
	Last set from ~/.local/share/nvim/site/pack/packer/start/coc.nvim/plugin/coc.vim line 206
CocListGreenGrey xxx guifg=#a0c980 guibg=#ECBE7B
	Last set from ~/.local/share/nvim/site/pack/packer/start/coc.nvim/plugin/coc.vim line 206
CocListGreenWhite xxx guifg=#a0c980 guibg=#6cb6eb
	Last set from ~/.local/share/nvim/site/pack/packer/start/coc.nvim/plugin/coc.vim line 206
CocListGreenCyan xxx guifg=#a0c980 guibg=#6cb6eb
	Last set from ~/.local/share/nvim/site/pack/packer/start/coc.nvim/plugin/coc.vim line 206
CocListGreenYellow xxx guifg=#a0c980 guibg=#6cb6eb
	Last set from ~/.local/share/nvim/site/pack/packer/start/coc.nvim/plugin/coc.vim line 206
CocListGreenMagenta xxx guifg=#a0c980 guibg=#d38aea
	Last set from ~/.local/share/nvim/site/pack/packer/start/coc.nvim/plugin/coc.vim line 206
CocListGreenRed xxx guifg=#a0c980 guibg=#4db5bd
	Last set from ~/.local/share/nvim/site/pack/packer/start/coc.nvim/plugin/coc.vim line 206
CocListFgGreen xxx ctermfg=10 guifg=#a0c980
	Last set from ~/.local/share/nvim/site/pack/packer/start/coc.nvim/plugin/coc.vim line 208
CocListBgGreen xxx ctermbg=10 guibg=#a0c980
	Last set from ~/.local/share/nvim/site/pack/packer/start/coc.nvim/plugin/coc.vim line 209
CocListGreyBlack xxx guifg=#ECBE7B guibg=#363a49
	Last set from ~/.local/share/nvim/site/pack/packer/start/coc.nvim/plugin/coc.vim line 206
CocListGreyBlue xxx guifg=#ECBE7B guibg=#ECBE7B
	Last set from ~/.local/share/nvim/site/pack/packer/start/coc.nvim/plugin/coc.vim line 206
CocListGreyGreen xxx guifg=#ECBE7B guibg=#a0c980
	Last set from ~/.local/share/nvim/site/pack/packer/start/coc.nvim/plugin/coc.vim line 206
CocListGreyGrey xxx guifg=#ECBE7B guibg=#ECBE7B
	Last set from ~/.local/share/nvim/site/pack/packer/start/coc.nvim/plugin/coc.vim line 206
CocListGreyWhite xxx guifg=#ECBE7B guibg=#6cb6eb
	Last set from ~/.local/share/nvim/site/pack/packer/start/coc.nvim/plugin/coc.vim line 206
CocListGreyCyan xxx guifg=#ECBE7B guibg=#6cb6eb
	Last set from ~/.local/share/nvim/site/pack/packer/start/coc.nvim/plugin/coc.vim line 206
CocListGreyYellow xxx guifg=#ECBE7B guibg=#6cb6eb
	Last set from ~/.local/share/nvim/site/pack/packer/start/coc.nvim/plugin/coc.vim line 206
CocListGreyMagenta xxx guifg=#ECBE7B guibg=#d38aea
	Last set from ~/.local/share/nvim/site/pack/packer/start/coc.nvim/plugin/coc.vim line 206
CocListGreyRed xxx guifg=#ECBE7B guibg=#4db5bd
	Last set from ~/.local/share/nvim/site/pack/packer/start/coc.nvim/plugin/coc.vim line 206
CocListFgGrey  xxx ctermfg=248 guifg=#ECBE7B
	Last set from ~/.local/share/nvim/site/pack/packer/start/coc.nvim/plugin/coc.vim line 208
CocListBgGrey  xxx ctermbg=248 guibg=#ECBE7B
	Last set from ~/.local/share/nvim/site/pack/packer/start/coc.nvim/plugin/coc.vim line 209
CocListWhiteBlack xxx guifg=#6cb6eb guibg=#363a49
	Last set from ~/.local/share/nvim/site/pack/packer/start/coc.nvim/plugin/coc.vim line 206
CocListWhiteBlue xxx guifg=#6cb6eb guibg=#ECBE7B
	Last set from ~/.local/share/nvim/site/pack/packer/start/coc.nvim/plugin/coc.vim line 206
CocListWhiteGreen xxx guifg=#6cb6eb guibg=#a0c980
	Last set from ~/.local/share/nvim/site/pack/packer/start/coc.nvim/plugin/coc.vim line 206
CocListWhiteGrey xxx guifg=#6cb6eb guibg=#ECBE7B
	Last set from ~/.local/share/nvim/site/pack/packer/start/coc.nvim/plugin/coc.vim line 206
CocListWhiteWhite xxx guifg=#6cb6eb guibg=#6cb6eb
	Last set from ~/.local/share/nvim/site/pack/packer/start/coc.nvim/plugin/coc.vim line 206
CocListWhiteCyan xxx guifg=#6cb6eb guibg=#6cb6eb
	Last set from ~/.local/share/nvim/site/pack/packer/start/coc.nvim/plugin/coc.vim line 206
CocListWhiteYellow xxx guifg=#6cb6eb guibg=#6cb6eb
	Last set from ~/.local/share/nvim/site/pack/packer/start/coc.nvim/plugin/coc.vim line 206
CocListWhiteMagenta xxx guifg=#6cb6eb guibg=#d38aea
	Last set from ~/.local/share/nvim/site/pack/packer/start/coc.nvim/plugin/coc.vim line 206
CocListWhiteRed xxx guifg=#6cb6eb guibg=#4db5bd
	Last set from ~/.local/share/nvim/site/pack/packer/start/coc.nvim/plugin/coc.vim line 206
CocListFgWhite xxx ctermfg=15 guifg=#6cb6eb
	Last set from ~/.local/share/nvim/site/pack/packer/start/coc.nvim/plugin/coc.vim line 208
CocListBgWhite xxx ctermbg=15 guibg=#6cb6eb
	Last set from ~/.local/share/nvim/site/pack/packer/start/coc.nvim/plugin/coc.vim line 209
CocListCyanBlack xxx guifg=#6cb6eb guibg=#363a49
	Last set from ~/.local/share/nvim/site/pack/packer/start/coc.nvim/plugin/coc.vim line 206
CocListCyanBlue xxx guifg=#6cb6eb guibg=#ECBE7B
	Last set from ~/.local/share/nvim/site/pack/packer/start/coc.nvim/plugin/coc.vim line 206
CocListCyanGreen xxx guifg=#6cb6eb guibg=#a0c980
	Last set from ~/.local/share/nvim/site/pack/packer/start/coc.nvim/plugin/coc.vim line 206
CocListCyanGrey xxx guifg=#6cb6eb guibg=#ECBE7B
	Last set from ~/.local/share/nvim/site/pack/packer/start/coc.nvim/plugin/coc.vim line 206
CocListCyanWhite xxx guifg=#6cb6eb guibg=#6cb6eb
	Last set from ~/.local/share/nvim/site/pack/packer/start/coc.nvim/plugin/coc.vim line 206
CocListCyanCyan xxx guifg=#6cb6eb guibg=#6cb6eb
	Last set from ~/.local/share/nvim/site/pack/packer/start/coc.nvim/plugin/coc.vim line 206
CocListCyanYellow xxx guifg=#6cb6eb guibg=#6cb6eb
	Last set from ~/.local/share/nvim/site/pack/packer/start/coc.nvim/plugin/coc.vim line 206
CocListCyanMagenta xxx guifg=#6cb6eb guibg=#d38aea
	Last set from ~/.local/share/nvim/site/pack/packer/start/coc.nvim/plugin/coc.vim line 206
CocListCyanRed xxx guifg=#6cb6eb guibg=#4db5bd
	Last set from ~/.local/share/nvim/site/pack/packer/start/coc.nvim/plugin/coc.vim line 206
CocListFgCyan  xxx ctermfg=14 guifg=#6cb6eb
	Last set from ~/.local/share/nvim/site/pack/packer/start/coc.nvim/plugin/coc.vim line 208
CocListBgCyan  xxx ctermbg=14 guibg=#6cb6eb
	Last set from ~/.local/share/nvim/site/pack/packer/start/coc.nvim/plugin/coc.vim line 209
CocListYellowBlack xxx guifg=#6cb6eb guibg=#363a49
	Last set from ~/.local/share/nvim/site/pack/packer/start/coc.nvim/plugin/coc.vim line 206
CocListYellowBlue xxx guifg=#6cb6eb guibg=#ECBE7B
	Last set from ~/.local/share/nvim/site/pack/packer/start/coc.nvim/plugin/coc.vim line 206
CocListYellowGreen xxx guifg=#6cb6eb guibg=#a0c980
	Last set from ~/.local/share/nvim/site/pack/packer/start/coc.nvim/plugin/coc.vim line 206
CocListYellowGrey xxx guifg=#6cb6eb guibg=#ECBE7B
	Last set from ~/.local/share/nvim/site/pack/packer/start/coc.nvim/plugin/coc.vim line 206
CocListYellowWhite xxx guifg=#6cb6eb guibg=#6cb6eb
	Last set from ~/.local/share/nvim/site/pack/packer/start/coc.nvim/plugin/coc.vim line 206
CocListYellowCyan xxx guifg=#6cb6eb guibg=#6cb6eb
	Last set from ~/.local/share/nvim/site/pack/packer/start/coc.nvim/plugin/coc.vim line 206
CocListYellowYellow xxx guifg=#6cb6eb guibg=#6cb6eb
	Last set from ~/.local/share/nvim/site/pack/packer/start/coc.nvim/plugin/coc.vim line 206
CocListYellowMagenta xxx guifg=#6cb6eb guibg=#d38aea
	Last set from ~/.local/share/nvim/site/pack/packer/start/coc.nvim/plugin/coc.vim line 206
CocListYellowRed xxx guifg=#6cb6eb guibg=#4db5bd
	Last set from ~/.local/share/nvim/site/pack/packer/start/coc.nvim/plugin/coc.vim line 206
CocListFgYellow xxx ctermfg=11 guifg=#6cb6eb
	Last set from ~/.local/share/nvim/site/pack/packer/start/coc.nvim/plugin/coc.vim line 208
CocListBgYellow xxx ctermbg=11 guibg=#6cb6eb
	Last set from ~/.local/share/nvim/site/pack/packer/start/coc.nvim/plugin/coc.vim line 209
CocListMagentaBlack xxx guifg=#d38aea guibg=#363a49
	Last set from ~/.local/share/nvim/site/pack/packer/start/coc.nvim/plugin/coc.vim line 206
CocListMagentaBlue xxx guifg=#d38aea guibg=#ECBE7B
	Last set from ~/.local/share/nvim/site/pack/packer/start/coc.nvim/plugin/coc.vim line 206
CocListMagentaGreen xxx guifg=#d38aea guibg=#a0c980
	Last set from ~/.local/share/nvim/site/pack/packer/start/coc.nvim/plugin/coc.vim line 206
CocListMagentaGrey xxx guifg=#d38aea guibg=#ECBE7B
	Last set from ~/.local/share/nvim/site/pack/packer/start/coc.nvim/plugin/coc.vim line 206
CocListMagentaWhite xxx guifg=#d38aea guibg=#6cb6eb
	Last set from ~/.local/share/nvim/site/pack/packer/start/coc.nvim/plugin/coc.vim line 206
CocListMagentaCyan xxx guifg=#d38aea guibg=#6cb6eb
	Last set from ~/.local/share/nvim/site/pack/packer/start/coc.nvim/plugin/coc.vim line 206
CocListMagentaYellow xxx guifg=#d38aea guibg=#6cb6eb
	Last set from ~/.local/share/nvim/site/pack/packer/start/coc.nvim/plugin/coc.vim line 206
CocListMagentaMagenta xxx guifg=#d38aea guibg=#d38aea
	Last set from ~/.local/share/nvim/site/pack/packer/start/coc.nvim/plugin/coc.vim line 206
CocListMagentaRed xxx guifg=#d38aea guibg=#4db5bd
	Last set from ~/.local/share/nvim/site/pack/packer/start/coc.nvim/plugin/coc.vim line 206
CocListFgMagenta xxx ctermfg=13 guifg=#d38aea
	Last set from ~/.local/share/nvim/site/pack/packer/start/coc.nvim/plugin/coc.vim line 208
CocListBgMagenta xxx ctermbg=13 guibg=#d38aea
	Last set from ~/.local/share/nvim/site/pack/packer/start/coc.nvim/plugin/coc.vim line 209
CocListRedBlack xxx guifg=#4db5bd guibg=#363a49
	Last set from ~/.local/share/nvim/site/pack/packer/start/coc.nvim/plugin/coc.vim line 206
CocListRedBlue xxx guifg=#4db5bd guibg=#ECBE7B
	Last set from ~/.local/share/nvim/site/pack/packer/start/coc.nvim/plugin/coc.vim line 206
CocListRedGreen xxx guifg=#4db5bd guibg=#a0c980
	Last set from ~/.local/share/nvim/site/pack/packer/start/coc.nvim/plugin/coc.vim line 206
CocListRedGrey xxx guifg=#4db5bd guibg=#ECBE7B
	Last set from ~/.local/share/nvim/site/pack/packer/start/coc.nvim/plugin/coc.vim line 206
CocListRedWhite xxx guifg=#4db5bd guibg=#6cb6eb
	Last set from ~/.local/share/nvim/site/pack/packer/start/coc.nvim/plugin/coc.vim line 206
CocListRedCyan xxx guifg=#4db5bd guibg=#6cb6eb
	Last set from ~/.local/share/nvim/site/pack/packer/start/coc.nvim/plugin/coc.vim line 206
CocListRedYellow xxx guifg=#4db5bd guibg=#6cb6eb
	Last set from ~/.local/share/nvim/site/pack/packer/start/coc.nvim/plugin/coc.vim line 206
CocListRedMagenta xxx guifg=#4db5bd guibg=#d38aea
	Last set from ~/.local/share/nvim/site/pack/packer/start/coc.nvim/plugin/coc.vim line 206
CocListRedRed  xxx guifg=#4db5bd guibg=#4db5bd
	Last set from ~/.local/share/nvim/site/pack/packer/start/coc.nvim/plugin/coc.vim line 206
CocListFgRed   xxx ctermfg=9 guifg=#4db5bd
	Last set from ~/.local/share/nvim/site/pack/packer/start/coc.nvim/plugin/coc.vim line 208
CocListBgRed   xxx ctermbg=9 guibg=#4db5bd
	Last set from ~/.local/share/nvim/site/pack/packer/start/coc.nvim/plugin/coc.vim line 209
CocSemNumber   xxx links to TSNumber
	Last set from ~/.local/share/nvim/site/pack/packer/start/coc.nvim/plugin/coc.vim line 508
CocSemFunction xxx links to TSFunction
	Last set from ~/.local/share/nvim/site/pack/packer/start/coc.nvim/plugin/coc.vim line 508
CocSemKeyword  xxx links to TSKeyword
	Last set from ~/.local/share/nvim/site/pack/packer/start/coc.nvim/plugin/coc.vim line 508
CocSemParameter xxx links to TSParameter
	Last set from ~/.local/share/nvim/site/pack/packer/start/coc.nvim/plugin/coc.vim line 508
CocSemEvent    xxx links to Keyword
	Last set from ~/.local/share/nvim/site/pack/packer/start/coc.nvim/plugin/coc.vim line 508
CocSemModifier xxx links to StorageClass
	Last set from ~/.local/share/nvim/site/pack/packer/start/coc.nvim/plugin/coc.vim line 508
CocSemMacro    xxx links to TSConstMacro
	Last set from ~/.local/share/nvim/site/pack/packer/start/coc.nvim/plugin/coc.vim line 508
CocSemDeprecated xxx links to TSStrike
	Last set from ~/.local/share/nvim/site/pack/packer/start/coc.nvim/plugin/coc.vim line 508
CocSemClass    xxx links to TSConstructor
	Last set from ~/.local/share/nvim/site/pack/packer/start/coc.nvim/plugin/coc.vim line 508
CocSemDecorator xxx links to TSSymbol
	Last set from ~/.local/share/nvim/site/pack/packer/start/coc.nvim/plugin/coc.vim line 508
CocSemOperator xxx links to TSOperator
	Last set from ~/.local/share/nvim/site/pack/packer/start/coc.nvim/plugin/coc.vim line 508
CocSemStruct   xxx links to Identifier
	Last set from ~/.local/share/nvim/site/pack/packer/start/coc.nvim/plugin/coc.vim line 508
CocSemRegexp   xxx links to TSStringRegex
	Last set from ~/.local/share/nvim/site/pack/packer/start/coc.nvim/plugin/coc.vim line 508
CocSemMethod   xxx links to TSMethod
	Last set from ~/.local/share/nvim/site/pack/packer/start/coc.nvim/plugin/coc.vim line 508
CocSemComment  xxx links to TSComment
	Last set from ~/.local/share/nvim/site/pack/packer/start/coc.nvim/plugin/coc.vim line 508
CocSemEnum     xxx links to Type
	Last set from ~/.local/share/nvim/site/pack/packer/start/coc.nvim/plugin/coc.vim line 508
CocSemInterface xxx links to Type
	Last set from ~/.local/share/nvim/site/pack/packer/start/coc.nvim/plugin/coc.vim line 508
CocSemType     xxx links to TSType
	Last set from ~/.local/share/nvim/site/pack/packer/start/coc.nvim/plugin/coc.vim line 508
CocSemProperty xxx links to TSProperty
	Last set from ~/.local/share/nvim/site/pack/packer/start/coc.nvim/plugin/coc.vim line 508
CocSemTypeParameter xxx links to TSParameter
	Last set from ~/.local/share/nvim/site/pack/packer/start/coc.nvim/plugin/coc.vim line 508
CocSemEnumMember xxx links to Constant
	Last set from ~/.local/share/nvim/site/pack/packer/start/coc.nvim/plugin/coc.vim line 508
CocSemBoolean  xxx links to TSBoolean
	Last set from ~/.local/share/nvim/site/pack/packer/start/coc.nvim/plugin/coc.vim line 508
CocSemNamespace xxx links to TSNamespace
	Last set from ~/.local/share/nvim/site/pack/packer/start/coc.nvim/plugin/coc.vim line 508
CocSemString   xxx links to TSString
	Last set from ~/.local/share/nvim/site/pack/packer/start/coc.nvim/plugin/coc.vim line 508
CocSemVariable xxx links to TSSymbol
	Last set from ~/.local/share/nvim/site/pack/packer/start/coc.nvim/plugin/coc.vim line 508
IndentBlanklineSpaceCharBlankline xxx cterm=nocombine ctermfg=12 gui=nocombine guifg=#3a3e4e
	Last set from ~/.local/share/nvim/site/pack/packer/start/indent-blankline.nvim/lua/indent_blankline/utils.lua line 253
IndentBlanklineSpaceChar xxx cterm=nocombine ctermfg=12 gui=nocombine guifg=#3a3e4e
	Last set from ~/.local/share/nvim/site/pack/packer/start/indent-blankline.nvim/lua/indent_blankline/utils.lua line 253
IndentBlanklineContextStart xxx cterm=underline gui=underline guisp=#4db5bd
	Last set from ~/.local/share/nvim/site/pack/packer/start/indent-blankline.nvim/lua/indent_blankline/utils.lua line 245
TSStorageClass xxx links to StorageClass
	Last set from Lua
TSTodo         xxx links to Todo
	Last set from Lua
TSTypeDefinition xxx links to Typedef
	Last set from Lua
TSNone         xxx cterm= gui=
	Last set from Lua
TSTagAttribute xxx links to TSProperty
	Last set from Lua
TSDanger       xxx links to WarningMsg
	Last set from Lua
TSStrong       xxx cterm=bold gui=bold
	Last set from Lua
TSEnvironmentName xxx links to Type
	Last set from Lua
TSNote         xxx links to SpecialComment
	Last set from Lua
TSEnvironment  xxx links to Macro
	Last set from Lua
TSWarning      xxx links to Todo
	Last set from Lua
TSKeywordReturn xxx links to TSKeyword
	Last set from Lua
TSDebug        xxx links to Debug
	Last set from Lua
TSDefine       xxx links to Define
	Last set from Lua
TSPreProc      xxx links to PreProc
	Last set from Lua
TSTypeQualifier xxx links to Type
	Last set from Lua
TSMath         xxx links to Special
	Last set from Lua
TSConstBuiltin xxx links to Special
	Last set from Lua
TSStringSpecial xxx links to SpecialChar
	Last set from Lua
TSCharacterSpecial xxx links to SpecialChar
	Last set from Lua
TSKeywordOperator xxx links to TSOperator
	Last set from Lua
TelescopePreviewSticky xxx links to Keyword
	Last set from Lua
TelescopePreviewSize xxx links to String
	Last set from Lua
TelescopePreviewUser xxx links to Constant
	Last set from Lua
TelescopePreviewGroup xxx links to Constant
	Last set from Lua
TelescopePreviewDate xxx links to Directory
	Last set from Lua
TelescopeResultsSpecialComment xxx links to SpecialComment
	Last set from Lua
TelescopePromptCounter xxx links to NonText
	Last set from Lua
TelescopeResultsDiffAdd xxx links to DiffAdd
	Last set from Lua
TelescopeResultsDiffChange xxx links to DiffChange
	Last set from Lua
TelescopeBorder xxx links to TelescopeNormal
	Last set from Lua
TelescopeNormal xxx links to Normal
	Last set from Lua
TelescopeResultsDiffDelete xxx links to DiffDelete
	Last set from Lua
TelescopePreviewMatch xxx links to Search
	Last set from Lua
TelescopeResultsDiffUntracked xxx links to NonText
	Last set from Lua
TelescopeResultsFileIcon xxx links to Normal
	Last set from Lua
TelescopeResultsClass xxx links to Function
	Last set from Lua
TelescopeResultsComment xxx links to Comment
	Last set from Lua
TelescopeResultsNumber xxx links to Number
	Last set from Lua
TelescopeMatching xxx links to Special
	Last set from Lua
TelescopeResultsIdentifier xxx links to Identifier
	Last set from Lua
TelescopeResultsLineNr xxx links to LineNr
	Last set from Lua
TelescopeResultsMethod xxx links to Method
	Last set from Lua
Method         xxx cleared
TelescopeResultsVariable xxx links to SpecialChar
	Last set from Lua
TelescopeResultsOperator xxx links to Operator
	Last set from Lua
TelescopeResultsStruct xxx links to Struct
	Last set from Lua
Struct         xxx cleared
TelescopeTitle xxx links to TelescopeBorder
	Last set from Lua
TelescopeResultsFunction xxx links to Function
	Last set from Lua
TelescopeResultsField xxx links to Function
	Last set from Lua
TelescopeResultsConstant xxx links to Constant
	Last set from Lua
TelescopeResultsNormal xxx links to TelescopeNormal
	Last set from Lua
TelescopeResultsTitle xxx links to TelescopeTitle
	Last set from Lua
TelescopePromptNormal xxx links to TelescopeNormal
	Last set from Lua
TelescopePromptTitle xxx links to TelescopeTitle
	Last set from Lua
TelescopePreviewNormal xxx links to TelescopeNormal
	Last set from Lua
TelescopePreviewTitle xxx links to TelescopeTitle
	Last set from Lua
TelescopePreviewMessageFillchar xxx links to TelescopePreviewMessage
	Last set from Lua
TelescopePreviewMessage xxx links to TelescopePreviewNormal
	Last set from Lua
TelescopePromptPrefix xxx links to Identifier
	Last set from Lua
TelescopeMultiIcon xxx links to Identifier
	Last set from Lua
TelescopeMultiSelection xxx links to Type
	Last set from Lua
TelescopePreviewLine xxx links to Visual
	Last set from Lua
TelescopeSelection xxx links to Visual
	Last set from Lua
TelescopeSelectionCaret xxx links to TelescopeSelection
	Last set from Lua
TelescopePreviewPipe xxx links to Constant
	Last set from Lua
TelescopePreviewCharDev xxx links to Constant
	Last set from Lua
TelescopePreviewDirectory xxx links to Directory
	Last set from Lua
TelescopePreviewBlock xxx links to Constant
	Last set from Lua
TelescopePreviewLink xxx links to Special
	Last set from Lua
TelescopePreviewSocket xxx links to Statement
	Last set from Lua
TelescopePreviewRead xxx links to Constant
	Last set from Lua
TelescopePreviewWrite xxx links to Statement
	Last set from Lua
TelescopePreviewExecute xxx links to String
	Last set from Lua
TelescopePreviewHyphen xxx links to NonText
	Last set from Lua
WhichKeySeparator xxx links to WhichKeySeperator
	Last set from ~/.local/share/nvim/site/pack/packer/start/which-key.nvim/lua/which-key/init.lua line 16
WhichKeyValue  xxx links to Comment
	Last set from ~/.local/share/nvim/site/pack/packer/start/which-key.nvim/lua/which-key/init.lua line 16
GitSignsCurrentLineBlame xxx links to NonText
	Last set from ~/.local/share/nvim/site/pack/packer/start/gitsigns.nvim/lua/gitsigns/async.lua line 71
GitSignsAddInline xxx links to TermCursor
	Last set from ~/.local/share/nvim/site/pack/packer/start/gitsigns.nvim/lua/gitsigns/async.lua line 71
GitSignsDeleteInline xxx links to TermCursor
	Last set from ~/.local/share/nvim/site/pack/packer/start/gitsigns.nvim/lua/gitsigns/async.lua line 71
GitSignsChangeInline xxx links to TermCursor
	Last set from ~/.local/share/nvim/site/pack/packer/start/gitsigns.nvim/lua/gitsigns/async.lua line 71
GitSignsAddLnInline xxx links to GitSignsAddInline
	Last set from ~/.local/share/nvim/site/pack/packer/start/gitsigns.nvim/lua/gitsigns/async.lua line 71
GitSignsChangeLnInline xxx links to GitSignsChangeInline
	Last set from ~/.local/share/nvim/site/pack/packer/start/gitsigns.nvim/lua/gitsigns/async.lua line 71
GitSignsDeleteLnInline xxx links to GitSignsDeleteInline
	Last set from ~/.local/share/nvim/site/pack/packer/start/gitsigns.nvim/lua/gitsigns/async.lua line 71
GitSignsAddLnVirtLn xxx links to GitSignsAddLn
	Last set from ~/.local/share/nvim/site/pack/packer/start/gitsigns.nvim/lua/gitsigns/async.lua line 71
GitSignsChangeVirtLn xxx links to GitSignsChangeLn
	Last set from ~/.local/share/nvim/site/pack/packer/start/gitsigns.nvim/lua/gitsigns/async.lua line 71
GitSignsDeleteVirtLn xxx links to GitSignsDeleteLn
	Last set from ~/.local/share/nvim/site/pack/packer/start/gitsigns.nvim/lua/gitsigns/async.lua line 71
GitSignsAddLnVirtLnInLine xxx links to GitSignsAddLnInline
	Last set from ~/.local/share/nvim/site/pack/packer/start/gitsigns.nvim/lua/gitsigns/async.lua line 71
GitSignsChangeVirtLnInLine xxx links to GitSignsChangeLnInline
	Last set from ~/.local/share/nvim/site/pack/packer/start/gitsigns.nvim/lua/gitsigns/async.lua line 71
GitSignsDeleteVirtLnInLine xxx links to GitSignsDeleteLnInline
	Last set from ~/.local/share/nvim/site/pack/packer/start/gitsigns.nvim/lua/gitsigns/async.lua line 71
luaComment     xxx links to Comment
	Last set from ~/.local/share/nvim/site/pack/packer/start/vim-polyglot/syntax/lua.vim line 217
luaCommentLong xxx links to luaComment
	Last set from ~/.local/share/nvim/site/pack/packer/start/vim-polyglot/syntax/lua.vim line 219
luaConstant    xxx links to Constant
	Last set from ~/.local/share/nvim/site/pack/packer/start/vim-polyglot/syntax/lua.vim line 222
luaNumber      xxx links to Number
	Last set from ~/.local/share/nvim/site/pack/packer/start/vim-polyglot/syntax/lua.vim line 241
luaString      xxx links to String
	Last set from ~/.local/share/nvim/site/pack/packer/start/vim-polyglot/syntax/lua.vim line 250
luaStringLong  xxx links to luaString
	Last set from ~/.local/share/nvim/site/pack/packer/start/vim-polyglot/syntax/lua.vim line 251
luaBuiltIn     xxx links to Special
	Last set from ~/.local/share/nvim/site/pack/packer/start/vim-polyglot/syntax/lua.vim line 216
luaTable       xxx cleared
luaParen       xxx cleared
luaBracket     xxx cleared
luaSpecialTable xxx links to Special
	Last set from ~/.local/share/nvim/site/pack/packer/start/vim-polyglot/syntax/lua.vim line 247
luaSpecialValue xxx links to PreProc
	Last set from ~/.local/share/nvim/site/pack/packer/start/vim-polyglot/syntax/lua.vim line 248
luaOperator    xxx links to Operator
	Last set from ~/.local/share/nvim/site/pack/packer/start/vim-polyglot/syntax/lua.vim line 244
luaSymbolOperator xxx links to luaOperator
	Last set from ~/.local/share/nvim/site/pack/packer/start/vim-polyglot/syntax/lua.vim line 242
luaEllipsis    xxx links to Special
	Last set from ~/.local/share/nvim/site/pack/packer/start/vim-polyglot/syntax/lua.vim line 224
luaComma       xxx cleared
luaFunc        xxx cleared
luaFuncCall    xxx links to PreProc
	Last set from ~/.local/share/nvim/site/pack/packer/start/vim-polyglot/syntax/lua.vim line 229
luaError       xxx links to Error
	Last set from ~/.local/share/nvim/site/pack/packer/start/vim-polyglot/syntax/lua.vim line 226
luaIfThen      xxx cleared
luaBlock       xxx cleared
luaLoop        xxx cleared
luaGoto        xxx links to luaStatement
	Last set from ~/.local/share/nvim/site/pack/packer/start/vim-polyglot/syntax/lua.vim line 236
luaLabel       xxx links to Label
	Last set from ~/.local/share/nvim/site/pack/packer/start/vim-polyglot/syntax/lua.vim line 239
luaLocal       xxx links to Type
	Last set from ~/.local/share/nvim/site/pack/packer/start/vim-polyglot/syntax/lua.vim line 240
luaStatement   xxx links to Statement
	Last set from ~/.local/share/nvim/site/pack/packer/start/vim-polyglot/syntax/lua.vim line 249
luaSemiCol     xxx links to Delimiter
	Last set from ~/.local/share/nvim/site/pack/packer/start/vim-polyglot/syntax/lua.vim line 246
luaErrHand     xxx links to Exception
	Last set from ~/.local/share/nvim/site/pack/packer/start/vim-polyglot/syntax/lua.vim line 253
luaNoise       xxx cleared
luaBraces      xxx links to Structure
	Last set from ~/.local/share/nvim/site/pack/packer/start/vim-polyglot/syntax/lua.vim line 214
luaParens      xxx links to Noise
	Last set from ~/.local/share/nvim/site/pack/packer/start/vim-polyglot/syntax/lua.vim line 213
luaBrackets    xxx links to Noise
	Last set from ~/.local/share/nvim/site/pack/packer/start/vim-polyglot/syntax/lua.vim line 215
luaNotEqOperator xxx links to luaOperator
	Last set from ~/.local/share/nvim/site/pack/packer/start/vim-polyglot/syntax/lua.vim line 243
luaCommentTodo xxx links to Todo
	Last set from ~/.local/share/nvim/site/pack/packer/start/vim-polyglot/syntax/lua.vim line 220
luaDocTag      xxx links to Underlined
	Last set from ~/.local/share/nvim/site/pack/packer/start/vim-polyglot/syntax/lua.vim line 223
luaCommentLongTag xxx links to luaCommentLong
	Last set from ~/.local/share/nvim/site/pack/packer/start/vim-polyglot/syntax/lua.vim line 218
luaFuncKeyword xxx links to luaFunction
	Last set from ~/.local/share/nvim/site/pack/packer/start/vim-polyglot/syntax/lua.vim line 233
luaFuncSig     xxx cleared
luaFuncId      xxx links to Function
	Last set from ~/.local/share/nvim/site/pack/packer/start/vim-polyglot/syntax/lua.vim line 230
luaFuncArgs    xxx cleared
luaFuncTable   xxx links to luaFuncId
	Last set from ~/.local/share/nvim/site/pack/packer/start/vim-polyglot/syntax/lua.vim line 232
luaFuncName    xxx links to luaFuncId
	Last set from ~/.local/share/nvim/site/pack/packer/start/vim-polyglot/syntax/lua.vim line 231
luaFuncParens  xxx links to Noise
	Last set from ~/.local/share/nvim/site/pack/packer/start/vim-polyglot/syntax/lua.vim line 235
luaFuncArgName xxx links to Noise
	Last set from ~/.local/share/nvim/site/pack/packer/start/vim-polyglot/syntax/lua.vim line 228
luaFuncArgComma xxx cleared
luaCond        xxx links to Conditional
	Last set from ~/.local/share/nvim/site/pack/packer/start/vim-polyglot/syntax/lua.vim line 221
luaThenEnd     xxx cleared
luaElseifThen  xxx cleared
luaElse        xxx links to Conditional
	Last set from ~/.local/share/nvim/site/pack/packer/start/vim-polyglot/syntax/lua.vim line 225
luaRepeat      xxx links to Repeat
	Last set from ~/.local/share/nvim/site/pack/packer/start/vim-polyglot/syntax/lua.vim line 245
luaLoopBlock   xxx cleared
luaIn          xxx links to Repeat
	Last set from ~/.local/share/nvim/site/pack/packer/start/vim-polyglot/syntax/lua.vim line 238
luaGotoLabel   xxx links to Noise
	Last set from ~/.local/share/nvim/site/pack/packer/start/vim-polyglot/syntax/lua.vim line 237
luaStringSpecial xxx links to SpecialChar
	Last set from ~/.local/share/nvim/site/pack/packer/start/vim-polyglot/syntax/lua.vim line 252
luaStringLongTag xxx cleared
luaFloat       xxx links to Float
	Last set from ~/.local/share/nvim/site/pack/packer/start/vim-polyglot/syntax/lua.vim line 227
Noise          xxx cleared
luaFunction    xxx links to Structure
	Last set from ~/.local/share/nvim/site/pack/packer/start/vim-polyglot/syntax/lua.vim line 234
lualine_transitional_lualine_a_tabs_active_to_lualine_c_normal xxx guifg=#5699AF guibg=#3a3e4e
	Last set from ~/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine/highlight.lua line 129
DevIconGvimrc  xxx ctermfg=29 guifg=#019833
	Last set from ~/.local/share/nvim/site/pack/packer/start/vim-rooter/plugin/rooter.vim line 227
DevIconSwift   xxx ctermfg=173 guifg=#e37933
	Last set from ~/.local/share/nvim/site/pack/packer/start/vim-rooter/plugin/rooter.vim line 227
DevIconTxt     xxx ctermfg=113 guifg=#89e051
	Last set from ~/.local/share/nvim/site/pack/packer/start/vim-rooter/plugin/rooter.vim line 227
DevIconCs      xxx ctermfg=58 guifg=#596706
	Last set from ~/.local/share/nvim/site/pack/packer/start/vim-rooter/plugin/rooter.vim line 227
DevIconBmp     xxx ctermfg=140 guifg=#a074c4
	Last set from ~/.local/share/nvim/site/pack/packer/start/vim-rooter/plugin/rooter.vim line 227
DevIconDefault xxx ctermfg=66 guifg=#6d8086
	Last set from ~/.local/share/nvim/site/pack/packer/start/vim-rooter/plugin/rooter.vim line 227
DevIconTerminal xxx ctermfg=71 guifg=#31B53E
	Last set from ~/.local/share/nvim/site/pack/packer/start/vim-rooter/plugin/rooter.vim line 227
DevIconZsh     xxx ctermfg=113 guifg=#89e051
	Last set from ~/.local/share/nvim/site/pack/packer/start/vim-rooter/plugin/rooter.vim line 227
DevIconSolidity xxx ctermfg=67 guifg=#519aba
	Last set from ~/.local/share/nvim/site/pack/packer/start/vim-rooter/plugin/rooter.vim line 227
DevIconScala   xxx ctermfg=167 guifg=#cc3e44
	Last set from ~/.local/share/nvim/site/pack/packer/start/vim-rooter/plugin/rooter.vim line 227
DevIconMaterial xxx ctermfg=132 guifg=#B83998
	Last set from ~/.local/share/nvim/site/pack/packer/start/vim-rooter/plugin/rooter.vim line 227
DevIconMint    xxx ctermfg=108 guifg=#87c095
	Last set from ~/.local/share/nvim/site/pack/packer/start/vim-rooter/plugin/rooter.vim line 227
DevIconMd      xxx ctermfg=67 guifg=#519aba
	Last set from ~/.local/share/nvim/site/pack/packer/start/vim-rooter/plugin/rooter.vim line 227
DevIconToml    xxx ctermfg=66 guifg=#6d8086
	Last set from ~/.local/share/nvim/site/pack/packer/start/vim-rooter/plugin/rooter.vim line 227
DevIconConfigRu xxx ctermfg=52 guifg=#701516
	Last set from ~/.local/share/nvim/site/pack/packer/start/vim-rooter/plugin/rooter.vim line 227
DevIconNim     xxx ctermfg=220 guifg=#f3d400
	Last set from ~/.local/share/nvim/site/pack/packer/start/vim-rooter/plugin/rooter.vim line 227
DevIconConf    xxx ctermfg=66 guifg=#6d8086
	Last set from ~/.local/share/nvim/site/pack/packer/start/vim-rooter/plugin/rooter.vim line 227
DevIconNPMIgnore xxx ctermfg=161 guifg=#E8274B
	Last set from ~/.local/share/nvim/site/pack/packer/start/vim-rooter/plugin/rooter.vim line 227
DevIconVue     xxx ctermfg=107 guifg=#8dc149
	Last set from ~/.local/share/nvim/site/pack/packer/start/vim-rooter/plugin/rooter.vim line 227
DevIconLicense xxx ctermfg=185 guifg=#cbcb41
	Last set from ~/.local/share/nvim/site/pack/packer/start/vim-rooter/plugin/rooter.vim line 227
DevIconNodeModules xxx ctermfg=161 guifg=#E8274B
	Last set from ~/.local/share/nvim/site/pack/packer/start/vim-rooter/plugin/rooter.vim line 227
DevIconCson    xxx ctermfg=185 guifg=#cbcb41
	Last set from ~/.local/share/nvim/site/pack/packer/start/vim-rooter/plugin/rooter.vim line 227
DevIconSql     xxx ctermfg=188 guifg=#dad8d8
	Last set from ~/.local/share/nvim/site/pack/packer/start/vim-rooter/plugin/rooter.vim line 227
DevIconYaml    xxx ctermfg=66 guifg=#6d8086
	Last set from ~/.local/share/nvim/site/pack/packer/start/vim-rooter/plugin/rooter.vim line 227
DevIconOpenTypeFont xxx ctermfg=231 guifg=#ECECEC
	Last set from ~/.local/share/nvim/site/pack/packer/start/vim-rooter/plugin/rooter.vim line 227
DevIconGo      xxx ctermfg=67 guifg=#519aba
	Last set from ~/.local/share/nvim/site/pack/packer/start/vim-rooter/plugin/rooter.vim line 227
DevIconCsv     xxx ctermfg=113 guifg=#89e051
	Last set from ~/.local/share/nvim/site/pack/packer/start/vim-rooter/plugin/rooter.vim line 227
DevIconPackageLockJson xxx guifg=#7a0d21
	Last set from ~/.local/share/nvim/site/pack/packer/start/vim-rooter/plugin/rooter.vim line 227
DevIconCPlusPlus xxx ctermfg=204 guifg=#f34b7d
	Last set from ~/.local/share/nvim/site/pack/packer/start/vim-rooter/plugin/rooter.vim line 227
DevIconDesktopEntry xxx ctermfg=60 guifg=#563d7c
	Last set from ~/.local/share/nvim/site/pack/packer/start/vim-rooter/plugin/rooter.vim line 227
DevIconDb      xxx ctermfg=188 guifg=#dad8d8
	Last set from ~/.local/share/nvim/site/pack/packer/start/vim-rooter/plugin/rooter.vim line 227
DevIconRss     xxx ctermfg=215 guifg=#FB9D3B
	Last set from ~/.local/share/nvim/site/pack/packer/start/vim-rooter/plugin/rooter.vim line 227
DevIconCp      xxx ctermfg=67 guifg=#519aba
	Last set from ~/.local/share/nvim/site/pack/packer/start/vim-rooter/plugin/rooter.vim line 227
DevIconGitConfig xxx ctermfg=59 guifg=#41535b
	Last set from ~/.local/share/nvim/site/pack/packer/start/vim-rooter/plugin/rooter.vim line 227
DevIconPng     xxx ctermfg=140 guifg=#a074c4
	Last set from ~/.local/share/nvim/site/pack/packer/start/vim-rooter/plugin/rooter.vim line 227
DevIconHh      xxx ctermfg=140 guifg=#a074c4
	Last set from ~/.local/share/nvim/site/pack/packer/start/vim-rooter/plugin/rooter.vim line 227
DevIconXml     xxx ctermfg=173 guifg=#e37933
	Last set from ~/.local/share/nvim/site/pack/packer/start/vim-rooter/plugin/rooter.vim line 227
DevIconPpt     xxx ctermfg=167 guifg=#cb4a32
	Last set from ~/.local/share/nvim/site/pack/packer/start/vim-rooter/plugin/rooter.vim line 227
DevIconDropbox xxx ctermfg=27 guifg=#0061FE
	Last set from ~/.local/share/nvim/site/pack/packer/start/vim-rooter/plugin/rooter.vim line 227
DevIconJsx     xxx ctermfg=67 guifg=#519aba
	Last set from ~/.local/share/nvim/site/pack/packer/start/vim-rooter/plugin/rooter.vim line 227
DevIconBash    xxx ctermfg=113 guifg=#89e051
	Last set from ~/.local/share/nvim/site/pack/packer/start/vim-rooter/plugin/rooter.vim line 227
DevIconProcfile xxx ctermfg=140 guifg=#a074c4
	Last set from ~/.local/share/nvim/site/pack/packer/start/vim-rooter/plugin/rooter.vim line 227
DevIconHtml    xxx ctermfg=166 guifg=#e34c26
	Last set from ~/.local/share/nvim/site/pack/packer/start/vim-rooter/plugin/rooter.vim line 227
DevIconTsx     xxx ctermfg=67 guifg=#519aba
	Last set from ~/.local/share/nvim/site/pack/packer/start/vim-rooter/plugin/rooter.vim line 227
DevIconZshprofile xxx ctermfg=113 guifg=#89e051
	Last set from ~/.local/share/nvim/site/pack/packer/start/vim-rooter/plugin/rooter.vim line 227
DevIconKsh     xxx ctermfg=59 guifg=#4d5a5e
	Last set from ~/.local/share/nvim/site/pack/packer/start/vim-rooter/plugin/rooter.vim line 227
DevIconZshenv  xxx ctermfg=113 guifg=#89e051
	Last set from ~/.local/share/nvim/site/pack/packer/start/vim-rooter/plugin/rooter.vim line 227
DevIconPsd     xxx ctermfg=67 guifg=#519aba
	Last set from ~/.local/share/nvim/site/pack/packer/start/vim-rooter/plugin/rooter.vim line 227
DevIconMakefile xxx ctermfg=66 guifg=#6d8086
	Last set from ~/.local/share/nvim/site/pack/packer/start/vim-rooter/plugin/rooter.vim line 227
DevIconVimrc   xxx ctermfg=29 guifg=#019833
	Last set from ~/.local/share/nvim/site/pack/packer/start/vim-rooter/plugin/rooter.vim line 227
DevIconJson    xxx ctermfg=185 guifg=#cbcb41
	Last set from ~/.local/share/nvim/site/pack/packer/start/vim-rooter/plugin/rooter.vim line 227
DevIconCrystal xxx ctermfg=16 guifg=#000000
	Last set from ~/.local/share/nvim/site/pack/packer/start/vim-rooter/plugin/rooter.vim line 227
DevIconPyc     xxx ctermfg=67 guifg=#ffe291
	Last set from ~/.local/share/nvim/site/pack/packer/start/vim-rooter/plugin/rooter.vim line 227
DevIconRmd     xxx ctermfg=67 guifg=#519aba
	Last set from ~/.local/share/nvim/site/pack/packer/start/vim-rooter/plugin/rooter.vim line 227
DevIconEpp     xxx guifg=#FFA61A
	Last set from ~/.local/share/nvim/site/pack/packer/start/vim-rooter/plugin/rooter.vim line 227
DevIconPyd     xxx ctermfg=67 guifg=#ffe291
	Last set from ~/.local/share/nvim/site/pack/packer/start/vim-rooter/plugin/rooter.vim line 227
DevIconSml     xxx ctermfg=173 guifg=#e37933
	Last set from ~/.local/share/nvim/site/pack/packer/start/vim-rooter/plugin/rooter.vim line 227
DevIconPyo     xxx ctermfg=67 guifg=#ffe291
	Last set from ~/.local/share/nvim/site/pack/packer/start/vim-rooter/plugin/rooter.vim line 227
DevIconVagrantfile xxx ctermfg=27 guifg=#1563FF
	Last set from ~/.local/share/nvim/site/pack/packer/start/vim-rooter/plugin/rooter.vim line 227
DevIconPackedResource xxx ctermfg=66 guifg=#6d8086
	Last set from ~/.local/share/nvim/site/pack/packer/start/vim-rooter/plugin/rooter.vim line 227
DevIconLhs     xxx ctermfg=140 guifg=#a074c4
	Last set from ~/.local/share/nvim/site/pack/packer/start/vim-rooter/plugin/rooter.vim line 227
DevIconErb     xxx ctermfg=52 guifg=#701516
	Last set from ~/.local/share/nvim/site/pack/packer/start/vim-rooter/plugin/rooter.vim line 227
DevIconSvelte  xxx ctermfg=202 guifg=#ff3e00
	Last set from ~/.local/share/nvim/site/pack/packer/start/vim-rooter/plugin/rooter.vim line 227
DevIconImportConfiguration xxx ctermfg=231 guifg=#ECECEC
	Last set from ~/.local/share/nvim/site/pack/packer/start/vim-rooter/plugin/rooter.vim line 227
DevIconLess    xxx ctermfg=60 guifg=#563d7c
	Last set from ~/.local/share/nvim/site/pack/packer/start/vim-rooter/plugin/rooter.vim line 227
DevIconFsharp  xxx ctermfg=67 guifg=#519aba
	Last set from ~/.local/share/nvim/site/pack/packer/start/vim-rooter/plugin/rooter.vim line 227
DevIconTwig    xxx ctermfg=107 guifg=#8dc149
	Last set from ~/.local/share/nvim/site/pack/packer/start/vim-rooter/plugin/rooter.vim line 227
DevIconRproj   xxx ctermfg=65 guifg=#358a5b
	Last set from ~/.local/share/nvim/site/pack/packer/start/vim-rooter/plugin/rooter.vim line 227
DevIconFavicon xxx ctermfg=185 guifg=#cbcb41
	Last set from ~/.local/share/nvim/site/pack/packer/start/vim-rooter/plugin/rooter.vim line 227
DevIconD       xxx ctermfg=64 guifg=#427819
	Last set from ~/.local/share/nvim/site/pack/packer/start/vim-rooter/plugin/rooter.vim line 227
DevIconTex     xxx ctermfg=58 guifg=#3D6117
	Last set from ~/.local/share/nvim/site/pack/packer/start/vim-rooter/plugin/rooter.vim line 227
DevIconR       xxx ctermfg=65 guifg=#358a5b
	Last set from ~/.local/share/nvim/site/pack/packer/start/vim-rooter/plugin/rooter.vim line 227
DevIconGitIgnore xxx ctermfg=59 guifg=#41535b
	Last set from ~/.local/share/nvim/site/pack/packer/start/vim-rooter/plugin/rooter.vim line 227
DevIconHaml    xxx ctermfg=188 guifg=#eaeae1
	Last set from ~/.local/share/nvim/site/pack/packer/start/vim-rooter/plugin/rooter.vim line 227
DevIconDiff    xxx ctermfg=59 guifg=#41535b
	Last set from ~/.local/share/nvim/site/pack/packer/start/vim-rooter/plugin/rooter.vim line 227
DevIconBashrc  xxx ctermfg=113 guifg=#89e051
	Last set from ~/.local/share/nvim/site/pack/packer/start/vim-rooter/plugin/rooter.vim line 227
DevIconFsi     xxx ctermfg=67 guifg=#519aba
	Last set from ~/.local/share/nvim/site/pack/packer/start/vim-rooter/plugin/rooter.vim line 227
DevIconSass    xxx ctermfg=204 guifg=#f55385
	Last set from ~/.local/share/nvim/site/pack/packer/start/vim-rooter/plugin/rooter.vim line 227
DevIconCMake   xxx ctermfg=66 guifg=#6d8086
	Last set from ~/.local/share/nvim/site/pack/packer/start/vim-rooter/plugin/rooter.vim line 227
DevIconErl     xxx ctermfg=132 guifg=#B83998
	Last set from ~/.local/share/nvim/site/pack/packer/start/vim-rooter/plugin/rooter.vim line 227
DevIconFsx     xxx ctermfg=67 guifg=#519aba
	Last set from ~/.local/share/nvim/site/pack/packer/start/vim-rooter/plugin/rooter.vim line 227
DevIconSlim    xxx ctermfg=166 guifg=#e34c26
	Last set from ~/.local/share/nvim/site/pack/packer/start/vim-rooter/plugin/rooter.vim line 227
DevIconHrl     xxx ctermfg=132 guifg=#B83998
	Last set from ~/.local/share/nvim/site/pack/packer/start/vim-rooter/plugin/rooter.vim line 227
DevIconSln     xxx ctermfg=98 guifg=#854CC7
	Last set from ~/.local/share/nvim/site/pack/packer/start/vim-rooter/plugin/rooter.vim line 227
DevIconGif     xxx ctermfg=140 guifg=#a074c4
	Last set from ~/.local/share/nvim/site/pack/packer/start/vim-rooter/plugin/rooter.vim line 227
DevIconJs      xxx ctermfg=185 guifg=#cbcb41
	Last set from ~/.local/share/nvim/site/pack/packer/start/vim-rooter/plugin/rooter.vim line 227
DevIconGemspec xxx ctermfg=52 guifg=#701516
	Last set from ~/.local/share/nvim/site/pack/packer/start/vim-rooter/plugin/rooter.vim line 227
DevIconStyl    xxx ctermfg=107 guifg=#8dc149
	Last set from ~/.local/share/nvim/site/pack/packer/start/vim-rooter/plugin/rooter.vim line 227
DevIconCobol   xxx ctermfg=25 guifg=#005ca5
	Last set from ~/.local/share/nvim/site/pack/packer/start/vim-rooter/plugin/rooter.vim line 227
DevIconClojure xxx ctermfg=107 guifg=#8dc149
	Last set from ~/.local/share/nvim/site/pack/packer/start/vim-rooter/plugin/rooter.vim line 227
DevIconSuo     xxx ctermfg=98 guifg=#e37933
	Last set from ~/.local/share/nvim/site/pack/packer/start/vim-rooter/plugin/rooter.vim line 227
DevIconConfiguration xxx ctermfg=231 guifg=#ECECEC
	Last set from ~/.local/share/nvim/site/pack/packer/start/vim-rooter/plugin/rooter.vim line 227
DevIconVim     xxx ctermfg=29 guifg=#019833
	Last set from ~/.local/share/nvim/site/pack/packer/start/vim-rooter/plugin/rooter.vim line 227
DevIconPromptPs1 xxx ctermfg=59 guifg=#4d5a5e
	Last set from ~/.local/share/nvim/site/pack/packer/start/vim-rooter/plugin/rooter.vim line 227
DevIconGodotProject xxx ctermfg=66 guifg=#6d8086
	Last set from ~/.local/share/nvim/site/pack/packer/start/vim-rooter/plugin/rooter.vim line 227
DevIconMarkdown xxx ctermfg=67 guifg=#519aba
	Last set from ~/.local/share/nvim/site/pack/packer/start/vim-rooter/plugin/rooter.vim line 227
DevIconGruntfile xxx ctermfg=173 guifg=#e37933
	Last set from ~/.local/share/nvim/site/pack/packer/start/vim-rooter/plugin/rooter.vim line 227
DevIconSig     xxx ctermfg=173 guifg=#e37933
	Last set from ~/.local/share/nvim/site/pack/packer/start/vim-rooter/plugin/rooter.vim line 227
DevIconEdn     xxx ctermfg=67 guifg=#519aba
	Last set from ~/.local/share/nvim/site/pack/packer/start/vim-rooter/plugin/rooter.vim line 227
DevIconXul     xxx ctermfg=173 guifg=#e37933
	Last set from ~/.local/share/nvim/site/pack/packer/start/vim-rooter/plugin/rooter.vim line 227
DevIconBinaryGLTF xxx ctermfg=215 guifg=#FFB13B
	Last set from ~/.local/share/nvim/site/pack/packer/start/vim-rooter/plugin/rooter.vim line 227
DevIconAi      xxx ctermfg=185 guifg=#cbcb41
	Last set from ~/.local/share/nvim/site/pack/packer/start/vim-rooter/plugin/rooter.vim line 227
DevIconDart    xxx ctermfg=25 guifg=#03589C
	Last set from ~/.local/share/nvim/site/pack/packer/start/vim-rooter/plugin/rooter.vim line 227
DevIconHxx     xxx ctermfg=140 guifg=#a074c4
	Last set from ~/.local/share/nvim/site/pack/packer/start/vim-rooter/plugin/rooter.vim line 227
DevIconGemfile xxx ctermfg=52 guifg=#701516
	Last set from ~/.local/share/nvim/site/pack/packer/start/vim-rooter/plugin/rooter.vim line 227
DevIconPy      xxx ctermfg=61 guifg=#ffbc03
	Last set from ~/.local/share/nvim/site/pack/packer/start/vim-rooter/plugin/rooter.vim line 227
DevIconMli     xxx ctermfg=173 guifg=#e37933
	Last set from ~/.local/share/nvim/site/pack/packer/start/vim-rooter/plugin/rooter.vim line 227
DevIconFsscript xxx ctermfg=67 guifg=#519aba
	Last set from ~/.local/share/nvim/site/pack/packer/start/vim-rooter/plugin/rooter.vim line 227
DevIconCsh     xxx ctermfg=59 guifg=#4d5a5e
	Last set from ~/.local/share/nvim/site/pack/packer/start/vim-rooter/plugin/rooter.vim line 227
DevIconRakefile xxx ctermfg=52 guifg=#701516
	Last set from ~/.local/share/nvim/site/pack/packer/start/vim-rooter/plugin/rooter.vim line 227
DevIconTextScene xxx ctermfg=140 guifg=#a074c4
	Last set from ~/.local/share/nvim/site/pack/packer/start/vim-rooter/plugin/rooter.vim line 227
DevIconLua     xxx ctermfg=74 guifg=#51a0cf
	Last set from ~/.local/share/nvim/site/pack/packer/start/vim-rooter/plugin/rooter.vim line 227
DevIconEx      xxx ctermfg=140 guifg=#a074c4
	Last set from ~/.local/share/nvim/site/pack/packer/start/vim-rooter/plugin/rooter.vim line 227
DevIconMustache xxx ctermfg=173 guifg=#e37933
	Last set from ~/.local/share/nvim/site/pack/packer/start/vim-rooter/plugin/rooter.vim line 227
DevIconElm     xxx ctermfg=67 guifg=#519aba
	Last set from ~/.local/share/nvim/site/pack/packer/start/vim-rooter/plugin/rooter.vim line 227
DevIconKotlin  xxx ctermfg=208 guifg=#F88A02
	Last set from ~/.local/share/nvim/site/pack/packer/start/vim-rooter/plugin/rooter.vim line 227
DevIconFennel  xxx ctermfg=230 guifg=#fff3d7
	Last set from ~/.local/share/nvim/site/pack/packer/start/vim-rooter/plugin/rooter.vim line 227
DevIconEjs     xxx ctermfg=185 guifg=#cbcb41
	Last set from ~/.local/share/nvim/site/pack/packer/start/vim-rooter/plugin/rooter.vim line 227
DevIconJl      xxx ctermfg=133 guifg=#a270ba
	Last set from ~/.local/share/nvim/site/pack/packer/start/vim-rooter/plugin/rooter.vim line 227
DevIconCoffee  xxx ctermfg=185 guifg=#cbcb41
	Last set from ~/.local/share/nvim/site/pack/packer/start/vim-rooter/plugin/rooter.vim line 227
DevIconDockerfile xxx ctermfg=59 guifg=#384d54
	Last set from ~/.local/share/nvim/site/pack/packer/start/vim-rooter/plugin/rooter.vim line 227
DevIconIco     xxx ctermfg=185 guifg=#cbcb41
	Last set from ~/.local/share/nvim/site/pack/packer/start/vim-rooter/plugin/rooter.vim line 227
DevIconHbs     xxx ctermfg=208 guifg=#f0772b
	Last set from ~/.local/share/nvim/site/pack/packer/start/vim-rooter/plugin/rooter.vim line 227
DevIconWebp    xxx ctermfg=140 guifg=#a074c4
	Last set from ~/.local/share/nvim/site/pack/packer/start/vim-rooter/plugin/rooter.vim line 227
DevIconH       xxx ctermfg=140 guifg=#a074c4
	Last set from ~/.local/share/nvim/site/pack/packer/start/vim-rooter/plugin/rooter.vim line 227
DevIconWebpack xxx ctermfg=67 guifg=#519aba
	Last set from ~/.local/share/nvim/site/pack/packer/start/vim-rooter/plugin/rooter.vim line 227
DevIconPsb     xxx ctermfg=67 guifg=#519aba
	Last set from ~/.local/share/nvim/site/pack/packer/start/vim-rooter/plugin/rooter.vim line 227
DevIconPp      xxx guifg=#FFA61A
	Last set from ~/.local/share/nvim/site/pack/packer/start/vim-rooter/plugin/rooter.vim line 227
DevIconXcPlayground xxx ctermfg=173 guifg=#e37933
	Last set from ~/.local/share/nvim/site/pack/packer/start/vim-rooter/plugin/rooter.vim line 227
DevIconYml     xxx ctermfg=66 guifg=#6d8086
	Last set from ~/.local/share/nvim/site/pack/packer/start/vim-rooter/plugin/rooter.vim line 227
DevIconGitCommit xxx ctermfg=59 guifg=#41535b
	Last set from ~/.local/share/nvim/site/pack/packer/start/vim-rooter/plugin/rooter.vim line 227
DevIconGDScript xxx ctermfg=66 guifg=#6d8086
	Last set from ~/.local/share/nvim/site/pack/packer/start/vim-rooter/plugin/rooter.vim line 227
DevIconJpeg    xxx ctermfg=140 guifg=#a074c4
	Last set from ~/.local/share/nvim/site/pack/packer/start/vim-rooter/plugin/rooter.vim line 227
DevIconRlib    xxx ctermfg=180 guifg=#dea584
	Last set from ~/.local/share/nvim/site/pack/packer/start/vim-rooter/plugin/rooter.vim line 227
DevIconJpg     xxx ctermfg=140 guifg=#a074c4
	Last set from ~/.local/share/nvim/site/pack/packer/start/vim-rooter/plugin/rooter.vim line 227
DevIconFs      xxx ctermfg=67 guifg=#519aba
	Last set from ~/.local/share/nvim/site/pack/packer/start/vim-rooter/plugin/rooter.vim line 227
DevIconGitAttributes xxx ctermfg=59 guifg=#41535b
	Last set from ~/.local/share/nvim/site/pack/packer/start/vim-rooter/plugin/rooter.vim line 227
DevIconHtm     xxx ctermfg=166 guifg=#e34c26
	Last set from ~/.local/share/nvim/site/pack/packer/start/vim-rooter/plugin/rooter.vim line 227
DevIconPl      xxx ctermfg=67 guifg=#519aba
	Last set from ~/.local/share/nvim/site/pack/packer/start/vim-rooter/plugin/rooter.vim line 227
DevIconDsStore xxx ctermfg=59 guifg=#41535b
	Last set from ~/.local/share/nvim/site/pack/packer/start/vim-rooter/plugin/rooter.vim line 227
DevIconMl      xxx ctermfg=173 guifg=#e37933
	Last set from ~/.local/share/nvim/site/pack/packer/start/vim-rooter/plugin/rooter.vim line 227
DevIconGitlabCI xxx ctermfg=166 guifg=#e24329
	Last set from ~/.local/share/nvim/site/pack/packer/start/vim-rooter/plugin/rooter.vim line 227
DevIconDump    xxx ctermfg=188 guifg=#dad8d8
	Last set from ~/.local/share/nvim/site/pack/packer/start/vim-rooter/plugin/rooter.vim line 227
DevIconRake    xxx ctermfg=52 guifg=#701516
	Last set from ~/.local/share/nvim/site/pack/packer/start/vim-rooter/plugin/rooter.vim line 227
DevIconWebmanifest xxx ctermfg=221 guifg=#f1e05a
	Last set from ~/.local/share/nvim/site/pack/packer/start/vim-rooter/plugin/rooter.vim line 227
DevIconLeex    xxx ctermfg=140 guifg=#a074c4
	Last set from ~/.local/share/nvim/site/pack/packer/start/vim-rooter/plugin/rooter.vim line 227
DevIconMixLock xxx ctermfg=140 guifg=#a074c4
	Last set from ~/.local/share/nvim/site/pack/packer/start/vim-rooter/plugin/rooter.vim line 227
DevIconCxx     xxx ctermfg=67 guifg=#519aba
	Last set from ~/.local/share/nvim/site/pack/packer/start/vim-rooter/plugin/rooter.vim line 227
DevIconGitModules xxx ctermfg=59 guifg=#41535b
	Last set from ~/.local/share/nvim/site/pack/packer/start/vim-rooter/plugin/rooter.vim line 227
DevIconExs     xxx ctermfg=140 guifg=#a074c4
	Last set from ~/.local/share/nvim/site/pack/packer/start/vim-rooter/plugin/rooter.vim line 227
DevIconZshrc   xxx ctermfg=113 guifg=#89e051
	Last set from ~/.local/share/nvim/site/pack/packer/start/vim-rooter/plugin/rooter.vim line 227
DevIconClojureJS xxx ctermfg=67 guifg=#519aba
	Last set from ~/.local/share/nvim/site/pack/packer/start/vim-rooter/plugin/rooter.vim line 227
DevIconMjs     xxx ctermfg=221 guifg=#f1e05a
	Last set from ~/.local/share/nvim/site/pack/packer/start/vim-rooter/plugin/rooter.vim line 227
DevIconFish    xxx ctermfg=59 guifg=#4d5a5e
	Last set from ~/.local/share/nvim/site/pack/packer/start/vim-rooter/plugin/rooter.vim line 227
DevIconNPMrc   xxx ctermfg=161 guifg=#E8274B
	Last set from ~/.local/share/nvim/site/pack/packer/start/vim-rooter/plugin/rooter.vim line 227
DevIconGitLogo xxx ctermfg=202 guifg=#F14C28
	Last set from ~/.local/share/nvim/site/pack/packer/start/vim-rooter/plugin/rooter.vim line 227
DevIconPhp     xxx ctermfg=140 guifg=#a074c4
	Last set from ~/.local/share/nvim/site/pack/packer/start/vim-rooter/plugin/rooter.vim line 227
DevIconBashProfile xxx ctermfg=113 guifg=#89e051
	Last set from ~/.local/share/nvim/site/pack/packer/start/vim-rooter/plugin/rooter.vim line 227
DevIconSettingsJson xxx ctermfg=98 guifg=#854CC7
	Last set from ~/.local/share/nvim/site/pack/packer/start/vim-rooter/plugin/rooter.vim line 227
DevIconJava    xxx ctermfg=167 guifg=#cc3e44
	Last set from ~/.local/share/nvim/site/pack/packer/start/vim-rooter/plugin/rooter.vim line 227
DevIconAwk     xxx ctermfg=59 guifg=#4d5a5e
	Last set from ~/.local/share/nvim/site/pack/packer/start/vim-rooter/plugin/rooter.vim line 227
DevIconClojureC xxx ctermfg=107 guifg=#8dc149
	Last set from ~/.local/share/nvim/site/pack/packer/start/vim-rooter/plugin/rooter.vim line 227
DevIconHpp     xxx ctermfg=140 guifg=#a074c4
	Last set from ~/.local/share/nvim/site/pack/packer/start/vim-rooter/plugin/rooter.vim line 227
DevIconDoc     xxx ctermfg=25 guifg=#185abd
	Last set from ~/.local/share/nvim/site/pack/packer/start/vim-rooter/plugin/rooter.vim line 227
DevIconCpp     xxx ctermfg=67 guifg=#519aba
	Last set from ~/.local/share/nvim/site/pack/packer/start/vim-rooter/plugin/rooter.vim line 227
DevIconBrewfile xxx ctermfg=52 guifg=#701516
	Last set from ~/.local/share/nvim/site/pack/packer/start/vim-rooter/plugin/rooter.vim line 227
DevIconNix     xxx ctermfg=110 guifg=#7ebae4
	Last set from ~/.local/share/nvim/site/pack/packer/start/vim-rooter/plugin/rooter.vim line 227
DevIconPdf     xxx ctermfg=124 guifg=#b30b00
	Last set from ~/.local/share/nvim/site/pack/packer/start/vim-rooter/plugin/rooter.vim line 227
DevIconRs      xxx ctermfg=180 guifg=#dea584
	Last set from ~/.local/share/nvim/site/pack/packer/start/vim-rooter/plugin/rooter.vim line 227
DevIconCMakeLists xxx ctermfg=66 guifg=#6d8086
	Last set from ~/.local/share/nvim/site/pack/packer/start/vim-rooter/plugin/rooter.vim line 227
DevIconCss     xxx ctermfg=60 guifg=#563d7c
	Last set from ~/.local/share/nvim/site/pack/packer/start/vim-rooter/plugin/rooter.vim line 227
DevIconTor     xxx ctermfg=67 guifg=#519aba
	Last set from ~/.local/share/nvim/site/pack/packer/start/vim-rooter/plugin/rooter.vim line 227
DevIconScss    xxx ctermfg=204 guifg=#f55385
	Last set from ~/.local/share/nvim/site/pack/packer/start/vim-rooter/plugin/rooter.vim line 227
DevIconC       xxx ctermfg=75 guifg=#599eff
	Last set from ~/.local/share/nvim/site/pack/packer/start/vim-rooter/plugin/rooter.vim line 227
DevIconProlog  xxx ctermfg=179 guifg=#e4b854
	Last set from ~/.local/share/nvim/site/pack/packer/start/vim-rooter/plugin/rooter.vim line 227
DevIconPackageJson xxx guifg=#e8274b
	Last set from ~/.local/share/nvim/site/pack/packer/start/vim-rooter/plugin/rooter.vim line 227
DevIconBabelrc xxx ctermfg=185 guifg=#cbcb41
	Last set from ~/.local/share/nvim/site/pack/packer/start/vim-rooter/plugin/rooter.vim line 227
DevIconBat     xxx ctermfg=154 guifg=#C1F12E
	Last set from ~/.local/share/nvim/site/pack/packer/start/vim-rooter/plugin/rooter.vim line 227
DevIconIni     xxx ctermfg=66 guifg=#6d8086
	Last set from ~/.local/share/nvim/site/pack/packer/start/vim-rooter/plugin/rooter.vim line 227
DevIconZig     xxx ctermfg=208 guifg=#f69a1b
	Last set from ~/.local/share/nvim/site/pack/packer/start/vim-rooter/plugin/rooter.vim line 227
DevIconSh      xxx ctermfg=59 guifg=#4d5a5e
	Last set from ~/.local/share/nvim/site/pack/packer/start/vim-rooter/plugin/rooter.vim line 227
DevIconPm      xxx ctermfg=67 guifg=#519aba
	Last set from ~/.local/share/nvim/site/pack/packer/start/vim-rooter/plugin/rooter.vim line 227
DevIconMdx     xxx ctermfg=67 guifg=#519aba
	Last set from ~/.local/share/nvim/site/pack/packer/start/vim-rooter/plugin/rooter.vim line 227
DevIconHs      xxx ctermfg=140 guifg=#a074c4
	Last set from ~/.local/share/nvim/site/pack/packer/start/vim-rooter/plugin/rooter.vim line 227
DevIconEex     xxx ctermfg=140 guifg=#a074c4
	Last set from ~/.local/share/nvim/site/pack/packer/start/vim-rooter/plugin/rooter.vim line 227
DevIconOPUS    xxx ctermfg=208 guifg=#F88A02
	Last set from ~/.local/share/nvim/site/pack/packer/start/vim-rooter/plugin/rooter.vim line 227
DevIconHeex    xxx ctermfg=140 guifg=#a074c4
	Last set from ~/.local/share/nvim/site/pack/packer/start/vim-rooter/plugin/rooter.vim line 227
DevIconRb      xxx ctermfg=52 guifg=#701516
	Last set from ~/.local/share/nvim/site/pack/packer/start/vim-rooter/plugin/rooter.vim line 227
DevIconTs      xxx ctermfg=67 guifg=#519aba
	Last set from ~/.local/share/nvim/site/pack/packer/start/vim-rooter/plugin/rooter.vim line 227
DevIconSvg     xxx ctermfg=215 guifg=#FFB13B
	Last set from ~/.local/share/nvim/site/pack/packer/start/vim-rooter/plugin/rooter.vim line 227
DevIconGulpfile xxx ctermfg=167 guifg=#cc3e44
	Last set from ~/.local/share/nvim/site/pack/packer/start/vim-rooter/plugin/rooter.vim line 227
DevIconTextResource xxx ctermfg=185 guifg=#cbcb41
	Last set from ~/.local/share/nvim/site/pack/packer/start/vim-rooter/plugin/rooter.vim line 227
DevIconXls     xxx ctermfg=23 guifg=#207245
	Last set from ~/.local/share/nvim/site/pack/packer/start/vim-rooter/plugin/rooter.vim line 227
lualine_b_filetype_DevIconLua_normal xxx guifg=#51a0cf guibg=#3a3e4e
	Last set from ~/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine/highlight.lua line 129
lualine_b_filetype_DevIconLua_insert xxx guifg=#51a0cf guibg=#3a3e4e
	Last set from ~/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine/highlight.lua line 129
lualine_b_filetype_DevIconLua_visual xxx guifg=#51a0cf guibg=#3a3e4e
	Last set from ~/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine/highlight.lua line 129
lualine_b_filetype_DevIconLua_replace xxx guifg=#51a0cf guibg=#3a3e4e
	Last set from ~/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine/highlight.lua line 129
lualine_b_filetype_DevIconLua_command xxx guifg=#51a0cf guibg=#3a3e4e
	Last set from ~/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine/highlight.lua line 129
lualine_b_filetype_DevIconLua_terminal xxx guifg=#51a0cf guibg=#3a3e4e
	Last set from ~/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine/highlight.lua line 129
lualine_b_filetype_DevIconLua_inactive xxx guifg=#51a0cf guibg=#3a3e4e
	Last set from ~/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine/highlight.lua line 129
lualine_x_filetype_DevIconLua_normal xxx guifg=#51a0cf guibg=#3a3e4e
	Last set from ~/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine/highlight.lua line 129
lualine_x_filetype_DevIconLua_insert xxx guifg=#51a0cf guibg=#3a3e4e
	Last set from ~/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine/highlight.lua line 129
lualine_x_filetype_DevIconLua_visual xxx guifg=#51a0cf guibg=#3a3e4e
	Last set from ~/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine/highlight.lua line 129
lualine_x_filetype_DevIconLua_replace xxx guifg=#51a0cf guibg=#3a3e4e
	Last set from ~/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine/highlight.lua line 129
lualine_x_filetype_DevIconLua_command xxx guifg=#51a0cf guibg=#3a3e4e
	Last set from ~/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine/highlight.lua line 129
lualine_x_filetype_DevIconLua_terminal xxx guifg=#51a0cf guibg=#3a3e4e
	Last set from ~/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine/highlight.lua line 129
lualine_x_filetype_DevIconLua_inactive xxx guifg=#51a0cf guibg=#3a3e4e
	Last set from ~/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine/highlight.lua line 129
lualine_transitional_lualine_a_normal_to_lualine_b_normal xxx guifg=#5699AF guibg=#3a3e4e
	Last set from ~/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine/highlight.lua line 129
line 2:   let filtered = filter(res, "v:val =~# '^CocSem'")
line 3:   return map(filtered, "matchstr(v:val,'\\v^CocSem\\w+')")
function coc#util#vim_info[1]..coc#util#semantic_hlgroups returning ['CocSemDefaultLibrary', 'CocSemDefaul...ace', 'CocSemString', 'CocSemVariable']

continuing in function coc#util#vim_info

function coc#util#vim_info returning {'columns': 149, 'version': '0.7.0', '...c-sm:block,i-ci-ve:ver25,r-cr-o:hor20'}

chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/gitsigns.nvim/lua/gitsigns)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/gitsigns.nvim/lua/gitsigns)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/gitsigns.nvim/lua/gitsigns)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/gitsigns.nvim/lua/gitsigns)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/gitsigns.nvim/lua/gitsigns)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/gitsigns.nvim/lua/gitsigns)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/gitsigns.nvim/lua/gitsigns)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/gitsigns.nvim/lua/gitsigns)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/gitsigns.nvim/lua/gitsigns)
chdir(/Users/ablanken/Sync/src/neovim-conf)
calling function coc#util#all_state()

line 1:   return { 'bufnr': bufnr('%'), 'winid': win_getid(), 'bufnrs': map(getbufinfo({'bufloaded': 1}),'v:val["bufnr"]'), 'winids': map(getwininfo(),'v:val["winid"]'), }
function coc#util#all_state returning {'bufnr': 2, 'bufnrs': [2], 'winids': [1000], 'winid': 1000}

chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(conf/nvim)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(conf/nvim)
chdir(/Users/ablanken/Sync/src/neovim-conf)
calling function coc#util#get_bufoptions(2)

line 1:   if !bufloaded(a:bufnr) | return v:null | endif
line 1:  return v:null | endif
line 1:  endif
line 2:   let bufname = bufname(a:bufnr)
line 3:   let buftype = getbufvar(a:bufnr, '&buftype')
line 4:   let winid = bufwinid(a:bufnr)
line 5:   let size = -1
line 6:   if bufnr('%') == a:bufnr
line 7:     let size = line2byte(line("$") + 1)
line 8:   elseif !empty(bufname)
line 9:     let size = getfsize(bufname)
line 10:   endif
line 11:   let lines = v:null
line 12:   if getbufvar(a:bufnr, 'coc_enabled', 1) && (buftype == '' || buftype == 'acwrite') && size < get(g:, 'coc_max_filesize', 2097152)
line 13:     let lines = getbufline(a:bufnr, 1, '$')
line 14:   endif
line 15:   return { 'bufnr': a:bufnr, 'size': size, 'lines': lines, 'winid': winid, 'bufname': bufname, 'buftype': buftype, 'previewwindow': v:false, 'eol': getbufvar(a:bufnr, '&eol'), 'indentkeys': coc#util#get_indentkeys(), 'variables': coc#util#variables(a:bufnr), 'filetype': getbufvar(a:bufnr, '&filetype'), 'iskeyword': getbufvar(a:bufnr, '&iskeyword'), 'changedtick': getbufvar(a:bufnr, 'changedtick'), 'fullpath': empty(bufname) ? '' : fnamemodify(bufname, ':p'),}
calling function coc#util#get_bufoptions[15]..coc#util#get_indentkeys()

line 1:   if empty(&indentexpr)
line 2:     return ''
line 3:   endif
line 4:   if &indentkeys !~# '='
line 5:     return ''
line 6:   endif
line 7:   return &indentkeys
function coc#util#get_bufoptions[15]..coc#util#get_indentkeys returning '0{,0},0),0],:,0#,!^F,o,O,e,0=end,0=until,0=elseif,0=else'

continuing in function coc#util#get_bufoptions

calling function coc#util#get_bufoptions[15]..coc#util#variables(2)

line 1:   let info = getbufinfo(a:bufnr)
line 2:   let variables = empty(info) ? {} : copy(info[0]['variables'])
line 3:   for key in keys(variables)
line 4:     if key !~# '\v^coc'
line 5:       unlet variables[key]
line 6:     endif
line 7:   endfor
line 3:   for key in keys(variables)
line 4:     if key !~# '\v^coc'
line 5:       unlet variables[key]
line 6:     endif
line 7:   endfor
line 3:   for key in keys(variables)
line 4:     if key !~# '\v^coc'
line 5:       unlet variables[key]
line 6:     endif
line 7:   endfor
line 3:   for key in keys(variables)
line 4:     if key !~# '\v^coc'
line 5:       unlet variables[key]
line 6:     endif
line 7:   endfor
line 3:   for key in keys(variables)
line 4:     if key !~# '\v^coc'
line 5:       unlet variables[key]
line 6:     endif
line 7:   endfor
line 3:   for key in keys(variables)
line 4:     if key !~# '\v^coc'
line 5:       unlet variables[key]
line 6:     endif
line 7:   endfor
line 3:   for key in keys(variables)
line 4:     if key !~# '\v^coc'
line 5:       unlet variables[key]
line 6:     endif
line 7:   endfor
line 3:   for key in keys(variables)
line 4:     if key !~# '\v^coc'
line 5:       unlet variables[key]
line 6:     endif
line 7:   endfor
line 3:   for key in keys(variables)
line 4:     if key !~# '\v^coc'
line 5:       unlet variables[key]
line 6:     endif
line 7:   endfor
line 3:   for key in keys(variables)
line 4:     if key !~# '\v^coc'
line 5:       unlet variables[key]
line 6:     endif
line 7:   endfor
line 3:   for key in keys(variables)
line 4:     if key !~# '\v^coc'
line 5:       unlet variables[key]
line 6:     endif
line 7:   endfor
line 3:   for key in keys(variables)
line 4:     if key !~# '\v^coc'
line 5:       unlet variables[key]
line 6:     endif
line 7:   endfor
line 3:   for key in keys(variables)
line 4:     if key !~# '\v^coc'
line 5:       unlet variables[key]
line 6:     endif
line 7:   endfor
line 3:   for key in keys(variables)
line 4:     if key !~# '\v^coc'
line 5:       unlet variables[key]
line 6:     endif
line 7:   endfor
line 3:   for key in keys(variables)
line 4:     if key !~# '\v^coc'
line 5:       unlet variables[key]
line 6:     endif
line 7:   endfor
line 3:   for key in keys(variables)
line 4:     if key !~# '\v^coc'
line 5:       unlet variables[key]
line 6:     endif
line 7:   endfor
line 8:   return variables
function coc#util#get_bufoptions[15]..coc#util#variables returning {}

continuing in function coc#util#get_bufoptions

chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(conf/nvim)
chdir(/Users/ablanken/Sync/src/neovim-conf)
function coc#util#get_bufoptions returning {'changedtick': 2, 'bufnr': 2, 'indent...t.lua', 'variables': {}, 'size': 15591}

chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(conf/nvim)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(conf/nvim)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(conf/nvim)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(conf/nvim)
chdir(/Users/ablanken/Sync/src/neovim-conf)
calling function coc#util#get_editoroption(1000)

line 1:   if !coc#compat#win_is_valid(a:winid)
Searching for "autoload/coc/compat.vim" in runtime path
Searching for "/Users/ablanken/.config/nvim/autoload/coc/compat.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/autoload/coc/compat.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/42header/autoload/coc/compat.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/auto-session/autoload/coc/compat.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/cheatsheet.nvim/autoload/coc/compat.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/coc-nvim-lua/autoload/coc/compat.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/coc.nvim/autoload/coc/compat.vim"
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/coc.nvim/autoload/coc)
chdir(/Users/ablanken/Sync/src/neovim-conf)
line 1: sourcing "/Users/ablanken/.local/share/nvim/site/pack/packer/start/coc.nvim/autoload/coc/compat.vim"
line 1: scriptencoding utf-8
line 2: let s:is_vim = !has('nvim')
line 3: 
line 4: " first window id for bufnr
line 5: " builtin bufwinid returns window of current tab only
line 6: function! coc#compat#buf_win_id(bufnr) abort
line 13: 
line 14: function! coc#compat#buf_set_lines(bufnr, start, end, replacement) abort
line 21: 
line 22: function! coc#compat#buf_line_count(bufnr) abort
line 49: 
line 50: function! coc#compat#prepend_lines(bufnr, replacement) abort
line 59: 
line 60: function! coc#compat#win_is_valid(winid) abort
line 66: 
line 67: " clear matches by window id, not throw on none exists window.
line 68: " may not work on vim < 8.1.1084 & neovim < 0.4.0
line 69: function! coc#compat#clear_matches(winid) abort
line 90: 
line 91: function! coc#compat#matchaddpos(group, pos, priority, winid) abort
line 111: 
line 112: function! coc#compat#buf_del_var(bufnr, name) abort
line 129: 
line 130: " hlGroup, pos, priority
line 131: function! coc#compat#matchaddgroups(winid, groups) abort
line 152: 
line 153: function! coc#compat#del_var(name) abort
line 160: 
line 161: " remove keymap for specific buffer
line 162: function! coc#compat#buf_del_keymap(bufnr, mode, lhs) abort
line 185: 
line 186: function! coc#compat#buf_add_keymap(bufnr, mode, lhs, rhs, opts) abort
line 210: 
line 211: " execute command or list of commands in window
line 212: function! coc#compat#execute(winid, command, ...) abort
line 237: 
line 238: function! coc#compat#trim(str)
finished sourcing /Users/ablanken/.local/share/nvim/site/pack/packer/start/coc.nvim/autoload/coc/compat.vim
continuing in function coc#util#get_editoroption
calling function coc#util#get_editoroption[1]..coc#compat#win_is_valid(1000)

line 1:   if exists('*nvim_win_is_valid')
line 2:     return nvim_win_is_valid(a:winid)
function coc#util#get_editoroption[1]..coc#compat#win_is_valid returning v:true

continuing in function coc#util#get_editoroption

line 2:     return v:null
line 3:   endif
line 4:   if has('nvim') && exists('*nvim_win_get_config')
line 5:     " avoid float window
line 6:     let config = nvim_win_get_config(a:winid)
line 7:     if !empty(get(config, 'relative', ''))
line 8:       return v:null
line 9:     endif
line 10:   endif
line 11:   let info = getwininfo(a:winid)[0]
line 12:   let bufnr = info['bufnr']
line 13:   let buftype = getbufvar(bufnr, '&buftype')
line 14:   " avoid window for other purpose.
line 15:   if buftype !=# '' && buftype !=# 'acwrite'
line 16:     return v:null
line 17:   endif
line 18:   let tabSize = getbufvar(bufnr, '&shiftwidth')
line 19:   if tabSize == 0
line 20:     let tabSize = getbufvar(bufnr, '&tabstop')
line 21:   endif
line 22:   return { 'bufnr': bufnr, 'winid': a:winid, 'winids': map(getwininfo(), 'v:val["winid"]'), 'tabpagenr': info['tabnr'], 'winnr': winnr(), 'visibleRanges': s:visible_ranges(a:winid), 'tabSize': tabSize, 'insertSpaces': getbufvar(bufnr, '&expandtab') ? v:true : v:false }
calling function coc#util#get_editoroption[22]..<SNR>46_visible_ranges(1000)

line 1:   let info = getwininfo(a:winid)[0]
line 2:   let res = []
line 3:   if !has_key(info, 'topline') || !has_key(info, 'botline')
line 4:     return res
line 5:   endif
line 6:   let begin = 0
line 7:   let curr = info['topline']
line 8:   let max = info['botline']
line 9:   if win_getid() != a:winid
line 10:     return [[curr, max]]
line 11:   endif
line 12:   while curr <= max
line 13:     let closedend = foldclosedend(curr)
line 14:     if closedend == -1
line 15:       let begin = begin == 0 ? curr : begin
line 16:       if curr == max
line 17:         call add(res, [begin, curr])
line 18:       endif
line 19:       let curr = curr + 1
line 20:     else
line 21:       if begin != 0
line 22:         call add(res, [begin, curr - 1])
line 23:         let begin = closedend + 1
line 24:       endif
line 25:       let curr = closedend + 1
line 26:     endif
line 27:   endwhile
line 12:   while curr <= max
line 13:     let closedend = foldclosedend(curr)
line 14:     if closedend == -1
line 15:       let begin = begin == 0 ? curr : begin
line 16:       if curr == max
line 17:         call add(res, [begin, curr])
line 18:       endif
line 19:       let curr = curr + 1
line 20:     else
line 21:       if begin != 0
line 22:         call add(res, [begin, curr - 1])
line 23:         let begin = closedend + 1
line 24:       endif
line 25:       let curr = closedend + 1
line 26:     endif
line 27:   endwhile
line 12:   while curr <= max
line 13:     let closedend = foldclosedend(curr)
line 14:     if closedend == -1
line 15:       let begin = begin == 0 ? curr : begin
line 16:       if curr == max
line 17:         call add(res, [begin, curr])
line 18:       endif
line 19:       let curr = curr + 1
line 20:     else
line 21:       if begin != 0
line 22:         call add(res, [begin, curr - 1])
line 23:         let begin = closedend + 1
line 24:       endif
line 25:       let curr = closedend + 1
line 26:     endif
line 27:   endwhile
line 12:   while curr <= max
line 13:     let closedend = foldclosedend(curr)
line 14:     if closedend == -1
line 15:       let begin = begin == 0 ? curr : begin
line 16:       if curr == max
line 17:         call add(res, [begin, curr])
line 18:       endif
line 19:       let curr = curr + 1
line 20:     else
line 21:       if begin != 0
line 22:         call add(res, [begin, curr - 1])
line 23:         let begin = closedend + 1
line 24:       endif
line 25:       let curr = closedend + 1
line 26:     endif
line 27:   endwhile
line 12:   while curr <= max
line 13:     let closedend = foldclosedend(curr)
line 14:     if closedend == -1
line 15:       let begin = begin == 0 ? curr : begin
line 16:       if curr == max
line 17:         call add(res, [begin, curr])
line 18:       endif
line 19:       let curr = curr + 1
line 20:     else
line 21:       if begin != 0
line 22:         call add(res, [begin, curr - 1])
line 23:         let begin = closedend + 1
line 24:       endif
line 25:       let curr = closedend + 1
line 26:     endif
line 27:   endwhile
line 12:   while curr <= max
line 13:     let closedend = foldclosedend(curr)
line 14:     if closedend == -1
line 15:       let begin = begin == 0 ? curr : begin
line 16:       if curr == max
line 17:         call add(res, [begin, curr])
line 18:       endif
line 19:       let curr = curr + 1
line 20:     else
line 21:       if begin != 0
line 22:         call add(res, [begin, curr - 1])
line 23:         let begin = closedend + 1
line 24:       endif
line 25:       let curr = closedend + 1
line 26:     endif
line 27:   endwhile
line 12:   while curr <= max
line 13:     let closedend = foldclosedend(curr)
line 14:     if closedend == -1
line 15:       let begin = begin == 0 ? curr : begin
line 16:       if curr == max
line 17:         call add(res, [begin, curr])
line 18:       endif
line 19:       let curr = curr + 1
line 20:     else
line 21:       if begin != 0
line 22:         call add(res, [begin, curr - 1])
line 23:         let begin = closedend + 1
line 24:       endif
line 25:       let curr = closedend + 1
line 26:     endif
line 27:   endwhile
line 12:   while curr <= max
line 13:     let closedend = foldclosedend(curr)
line 14:     if closedend == -1
line 15:       let begin = begin == 0 ? curr : begin
line 16:       if curr == max
line 17:         call add(res, [begin, curr])
line 18:       endif
line 19:       let curr = curr + 1
line 20:     else
line 21:       if begin != 0
line 22:         call add(res, [begin, curr - 1])
line 23:         let begin = closedend + 1
line 24:       endif
line 25:       let curr = closedend + 1
line 26:     endif
line 27:   endwhile
line 12:   while curr <= max
line 13:     let closedend = foldclosedend(curr)
line 14:     if closedend == -1
line 15:       let begin = begin == 0 ? curr : begin
line 16:       if curr == max
line 17:         call add(res, [begin, curr])
line 18:       endif
line 19:       let curr = curr + 1
line 20:     else
line 21:       if begin != 0
line 22:         call add(res, [begin, curr - 1])
line 23:         let begin = closedend + 1
line 24:       endif
line 25:       let curr = closedend + 1
line 26:     endif
line 27:   endwhile
line 12:   while curr <= max
line 13:     let closedend = foldclosedend(curr)
line 14:     if closedend == -1
line 15:       let begin = begin == 0 ? curr : begin
line 16:       if curr == max
line 17:         call add(res, [begin, curr])
line 18:       endif
line 19:       let curr = curr + 1
line 20:     else
line 21:       if begin != 0
line 22:         call add(res, [begin, curr - 1])
line 23:         let begin = closedend + 1
line 24:       endif
line 25:       let curr = closedend + 1
line 26:     endif
line 27:   endwhile
line 12:   while curr <= max
line 13:     let closedend = foldclosedend(curr)
line 14:     if closedend == -1
line 15:       let begin = begin == 0 ? curr : begin
line 16:       if curr == max
line 17:         call add(res, [begin, curr])
line 18:       endif
line 19:       let curr = curr + 1
line 20:     else
line 21:       if begin != 0
line 22:         call add(res, [begin, curr - 1])
line 23:         let begin = closedend + 1
line 24:       endif
line 25:       let curr = closedend + 1
line 26:     endif
line 27:   endwhile
line 12:   while curr <= max
line 13:     let closedend = foldclosedend(curr)
line 14:     if closedend == -1
line 15:       let begin = begin == 0 ? curr : begin
line 16:       if curr == max
line 17:         call add(res, [begin, curr])
line 18:       endif
line 19:       let curr = curr + 1
line 20:     else
line 21:       if begin != 0
line 22:         call add(res, [begin, curr - 1])
line 23:         let begin = closedend + 1
line 24:       endif
line 25:       let curr = closedend + 1
line 26:     endif
line 27:   endwhile
line 12:   while curr <= max
line 13:     let closedend = foldclosedend(curr)
line 14:     if closedend == -1
line 15:       let begin = begin == 0 ? curr : begin
line 16:       if curr == max
line 17:         call add(res, [begin, curr])
line 18:       endif
line 19:       let curr = curr + 1
line 20:     else
line 21:       if begin != 0
line 22:         call add(res, [begin, curr - 1])
line 23:         let begin = closedend + 1
line 24:       endif
line 25:       let curr = closedend + 1
line 26:     endif
line 27:   endwhile
line 12:   while curr <= max
line 13:     let closedend = foldclosedend(curr)
line 14:     if closedend == -1
line 15:       let begin = begin == 0 ? curr : begin
line 16:       if curr == max
line 17:         call add(res, [begin, curr])
line 18:       endif
line 19:       let curr = curr + 1
line 20:     else
line 21:       if begin != 0
line 22:         call add(res, [begin, curr - 1])
line 23:         let begin = closedend + 1
line 24:       endif
line 25:       let curr = closedend + 1
line 26:     endif
line 27:   endwhile
line 12:   while curr <= max
line 13:     let closedend = foldclosedend(curr)
line 14:     if closedend == -1
line 15:       let begin = begin == 0 ? curr : begin
line 16:       if curr == max
line 17:         call add(res, [begin, curr])
line 18:       endif
line 19:       let curr = curr + 1
line 20:     else
line 21:       if begin != 0
line 22:         call add(res, [begin, curr - 1])
line 23:         let begin = closedend + 1
line 24:       endif
line 25:       let curr = closedend + 1
line 26:     endif
line 27:   endwhile
line 12:   while curr <= max
line 13:     let closedend = foldclosedend(curr)
line 14:     if closedend == -1
line 15:       let begin = begin == 0 ? curr : begin
line 16:       if curr == max
line 17:         call add(res, [begin, curr])
line 18:       endif
line 19:       let curr = curr + 1
line 20:     else
line 21:       if begin != 0
line 22:         call add(res, [begin, curr - 1])
line 23:         let begin = closedend + 1
line 24:       endif
line 25:       let curr = closedend + 1
line 26:     endif
line 27:   endwhile
line 12:   while curr <= max
line 13:     let closedend = foldclosedend(curr)
line 14:     if closedend == -1
line 15:       let begin = begin == 0 ? curr : begin
line 16:       if curr == max
line 17:         call add(res, [begin, curr])
line 18:       endif
line 19:       let curr = curr + 1
line 20:     else
line 21:       if begin != 0
line 22:         call add(res, [begin, curr - 1])
line 23:         let begin = closedend + 1
line 24:       endif
line 25:       let curr = closedend + 1
line 26:     endif
line 27:   endwhile
line 12:   while curr <= max
line 13:     let closedend = foldclosedend(curr)
line 14:     if closedend == -1
line 15:       let begin = begin == 0 ? curr : begin
line 16:       if curr == max
line 17:         call add(res, [begin, curr])
line 18:       endif
line 19:       let curr = curr + 1
line 20:     else
line 21:       if begin != 0
line 22:         call add(res, [begin, curr - 1])
line 23:         let begin = closedend + 1
line 24:       endif
line 25:       let curr = closedend + 1
line 26:     endif
line 27:   endwhile
line 12:   while curr <= max
line 13:     let closedend = foldclosedend(curr)
line 14:     if closedend == -1
line 15:       let begin = begin == 0 ? curr : begin
line 16:       if curr == max
line 17:         call add(res, [begin, curr])
line 18:       endif
line 19:       let curr = curr + 1
line 20:     else
line 21:       if begin != 0
line 22:         call add(res, [begin, curr - 1])
line 23:         let begin = closedend + 1
line 24:       endif
line 25:       let curr = closedend + 1
line 26:     endif
line 27:   endwhile
line 12:   while curr <= max
line 13:     let closedend = foldclosedend(curr)
line 14:     if closedend == -1
line 15:       let begin = begin == 0 ? curr : begin
line 16:       if curr == max
line 17:         call add(res, [begin, curr])
line 18:       endif
line 19:       let curr = curr + 1
line 20:     else
line 21:       if begin != 0
line 22:         call add(res, [begin, curr - 1])
line 23:         let begin = closedend + 1
line 24:       endif
line 25:       let curr = closedend + 1
line 26:     endif
line 27:   endwhile
line 12:   while curr <= max
line 13:     let closedend = foldclosedend(curr)
line 14:     if closedend == -1
line 15:       let begin = begin == 0 ? curr : begin
line 16:       if curr == max
line 17:         call add(res, [begin, curr])
line 18:       endif
line 19:       let curr = curr + 1
line 20:     else
line 21:       if begin != 0
line 22:         call add(res, [begin, curr - 1])
line 23:         let begin = closedend + 1
line 24:       endif
line 25:       let curr = closedend + 1
line 26:     endif
line 27:   endwhile
line 12:   while curr <= max
line 13:     let closedend = foldclosedend(curr)
line 14:     if closedend == -1
line 15:       let begin = begin == 0 ? curr : begin
line 16:       if curr == max
line 17:         call add(res, [begin, curr])
line 18:       endif
line 19:       let curr = curr + 1
line 20:     else
line 21:       if begin != 0
line 22:         call add(res, [begin, curr - 1])
line 23:         let begin = closedend + 1
line 24:       endif
line 25:       let curr = closedend + 1
line 26:     endif
line 27:   endwhile
line 12:   while curr <= max
line 13:     let closedend = foldclosedend(curr)
line 14:     if closedend == -1
line 15:       let begin = begin == 0 ? curr : begin
line 16:       if curr == max
line 17:         call add(res, [begin, curr])
line 18:       endif
line 19:       let curr = curr + 1
line 20:     else
line 21:       if begin != 0
line 22:         call add(res, [begin, curr - 1])
line 23:         let begin = closedend + 1
line 24:       endif
line 25:       let curr = closedend + 1
line 26:     endif
line 27:   endwhile
line 12:   while curr <= max
line 13:     let closedend = foldclosedend(curr)
line 14:     if closedend == -1
line 15:       let begin = begin == 0 ? curr : begin
line 16:       if curr == max
line 17:         call add(res, [begin, curr])
line 18:       endif
line 19:       let curr = curr + 1
line 20:     else
line 21:       if begin != 0
line 22:         call add(res, [begin, curr - 1])
line 23:         let begin = closedend + 1
line 24:       endif
line 25:       let curr = closedend + 1
line 26:     endif
line 27:   endwhile
line 12:   while curr <= max
line 13:     let closedend = foldclosedend(curr)
line 14:     if closedend == -1
line 15:       let begin = begin == 0 ? curr : begin
line 16:       if curr == max
line 17:         call add(res, [begin, curr])
line 18:       endif
line 19:       let curr = curr + 1
line 20:     else
line 21:       if begin != 0
line 22:         call add(res, [begin, curr - 1])
line 23:         let begin = closedend + 1
line 24:       endif
line 25:       let curr = closedend + 1
line 26:     endif
line 27:   endwhile
line 12:   while curr <= max
line 13:     let closedend = foldclosedend(curr)
line 14:     if closedend == -1
line 15:       let begin = begin == 0 ? curr : begin
line 16:       if curr == max
line 17:         call add(res, [begin, curr])
line 18:       endif
line 19:       let curr = curr + 1
line 20:     else
line 21:       if begin != 0
line 22:         call add(res, [begin, curr - 1])
line 23:         let begin = closedend + 1
line 24:       endif
line 25:       let curr = closedend + 1
line 26:     endif
line 27:   endwhile
line 12:   while curr <= max
line 13:     let closedend = foldclosedend(curr)
line 14:     if closedend == -1
line 15:       let begin = begin == 0 ? curr : begin
line 16:       if curr == max
line 17:         call add(res, [begin, curr])
line 18:       endif
line 19:       let curr = curr + 1
line 20:     else
line 21:       if begin != 0
line 22:         call add(res, [begin, curr - 1])
line 23:         let begin = closedend + 1
line 24:       endif
line 25:       let curr = closedend + 1
line 26:     endif
line 27:   endwhile
line 12:   while curr <= max
line 13:     let closedend = foldclosedend(curr)
line 14:     if closedend == -1
line 15:       let begin = begin == 0 ? curr : begin
line 16:       if curr == max
line 17:         call add(res, [begin, curr])
line 18:       endif
line 19:       let curr = curr + 1
line 20:     else
line 21:       if begin != 0
line 22:         call add(res, [begin, curr - 1])
line 23:         let begin = closedend + 1
line 24:       endif
line 25:       let curr = closedend + 1
line 26:     endif
line 27:   endwhile
line 12:   while curr <= max
line 13:     let closedend = foldclosedend(curr)
line 14:     if closedend == -1
line 15:       let begin = begin == 0 ? curr : begin
line 16:       if curr == max
line 17:         call add(res, [begin, curr])
line 18:       endif
line 19:       let curr = curr + 1
line 20:     else
line 21:       if begin != 0
line 22:         call add(res, [begin, curr - 1])
line 23:         let begin = closedend + 1
line 24:       endif
line 25:       let curr = closedend + 1
line 26:     endif
line 27:   endwhile
line 12:   while curr <= max
line 13:     let closedend = foldclosedend(curr)
line 14:     if closedend == -1
line 15:       let begin = begin == 0 ? curr : begin
line 16:       if curr == max
line 17:         call add(res, [begin, curr])
line 18:       endif
line 19:       let curr = curr + 1
line 20:     else
line 21:       if begin != 0
line 22:         call add(res, [begin, curr - 1])
line 23:         let begin = closedend + 1
line 24:       endif
line 25:       let curr = closedend + 1
line 26:     endif
line 27:   endwhile
line 12:   while curr <= max
line 13:     let closedend = foldclosedend(curr)
line 14:     if closedend == -1
line 15:       let begin = begin == 0 ? curr : begin
line 16:       if curr == max
line 17:         call add(res, [begin, curr])
line 18:       endif
line 19:       let curr = curr + 1
line 20:     else
line 21:       if begin != 0
line 22:         call add(res, [begin, curr - 1])
line 23:         let begin = closedend + 1
line 24:       endif
line 25:       let curr = closedend + 1
line 26:     endif
line 27:   endwhile
line 12:   while curr <= max
line 13:     let closedend = foldclosedend(curr)
line 14:     if closedend == -1
line 15:       let begin = begin == 0 ? curr : begin
line 16:       if curr == max
line 17:         call add(res, [begin, curr])
line 18:       endif
line 19:       let curr = curr + 1
line 20:     else
line 21:       if begin != 0
line 22:         call add(res, [begin, curr - 1])
line 23:         let begin = closedend + 1
line 24:       endif
line 25:       let curr = closedend + 1
line 26:     endif
line 27:   endwhile
line 12:   while curr <= max
line 13:     let closedend = foldclosedend(curr)
line 14:     if closedend == -1
line 15:       let begin = begin == 0 ? curr : begin
line 16:       if curr == max
line 17:         call add(res, [begin, curr])
line 18:       endif
line 19:       let curr = curr + 1
line 20:     else
line 21:       if begin != 0
line 22:         call add(res, [begin, curr - 1])
line 23:         let begin = closedend + 1
line 24:       endif
line 25:       let curr = closedend + 1
line 26:     endif
line 27:   endwhile
line 12:   while curr <= max
line 13:     let closedend = foldclosedend(curr)
line 14:     if closedend == -1
line 15:       let begin = begin == 0 ? curr : begin
line 16:       if curr == max
line 17:         call add(res, [begin, curr])
line 18:       endif
line 19:       let curr = curr + 1
line 20:     else
line 21:       if begin != 0
line 22:         call add(res, [begin, curr - 1])
line 23:         let begin = closedend + 1
line 24:       endif
line 25:       let curr = closedend + 1
line 26:     endif
line 27:   endwhile
line 12:   while curr <= max
line 13:     let closedend = foldclosedend(curr)
line 14:     if closedend == -1
line 15:       let begin = begin == 0 ? curr : begin
line 16:       if curr == max
line 17:         call add(res, [begin, curr])
line 18:       endif
line 19:       let curr = curr + 1
line 20:     else
line 21:       if begin != 0
line 22:         call add(res, [begin, curr - 1])
line 23:         let begin = closedend + 1
line 24:       endif
line 25:       let curr = closedend + 1
line 26:     endif
line 27:   endwhile
line 12:   while curr <= max
line 13:     let closedend = foldclosedend(curr)
line 14:     if closedend == -1
line 15:       let begin = begin == 0 ? curr : begin
line 16:       if curr == max
line 17:         call add(res, [begin, curr])
line 18:       endif
line 19:       let curr = curr + 1
line 20:     else
line 21:       if begin != 0
line 22:         call add(res, [begin, curr - 1])
line 23:         let begin = closedend + 1
line 24:       endif
line 25:       let curr = closedend + 1
line 26:     endif
line 27:   endwhile
line 12:   while curr <= max
line 13:     let closedend = foldclosedend(curr)
line 14:     if closedend == -1
line 15:       let begin = begin == 0 ? curr : begin
line 16:       if curr == max
line 17:         call add(res, [begin, curr])
line 18:       endif
line 19:       let curr = curr + 1
line 20:     else
line 21:       if begin != 0
line 22:         call add(res, [begin, curr - 1])
line 23:         let begin = closedend + 1
line 24:       endif
line 25:       let curr = closedend + 1
line 26:     endif
line 27:   endwhile
line 12:   while curr <= max
line 13:     let closedend = foldclosedend(curr)
line 14:     if closedend == -1
line 15:       let begin = begin == 0 ? curr : begin
line 16:       if curr == max
line 17:         call add(res, [begin, curr])
line 18:       endif
line 19:       let curr = curr + 1
line 20:     else
line 21:       if begin != 0
line 22:         call add(res, [begin, curr - 1])
line 23:         let begin = closedend + 1
line 24:       endif
line 25:       let curr = closedend + 1
line 26:     endif
line 27:   endwhile
line 12:   while curr <= max
line 13:     let closedend = foldclosedend(curr)
line 14:     if closedend == -1
line 15:       let begin = begin == 0 ? curr : begin
line 16:       if curr == max
line 17:         call add(res, [begin, curr])
line 18:       endif
line 19:       let curr = curr + 1
line 20:     else
line 21:       if begin != 0
line 22:         call add(res, [begin, curr - 1])
line 23:         let begin = closedend + 1
line 24:       endif
line 25:       let curr = closedend + 1
line 26:     endif
line 27:   endwhile
line 12:   while curr <= max
line 13:     let closedend = foldclosedend(curr)
line 14:     if closedend == -1
line 15:       let begin = begin == 0 ? curr : begin
line 16:       if curr == max
line 17:         call add(res, [begin, curr])
line 18:       endif
line 19:       let curr = curr + 1
line 20:     else
line 21:       if begin != 0
line 22:         call add(res, [begin, curr - 1])
line 23:         let begin = closedend + 1
line 24:       endif
line 25:       let curr = closedend + 1
line 26:     endif
line 27:   endwhile
line 12:   while curr <= max
line 13:     let closedend = foldclosedend(curr)
line 14:     if closedend == -1
line 15:       let begin = begin == 0 ? curr : begin
line 16:       if curr == max
line 17:         call add(res, [begin, curr])
line 18:       endif
line 19:       let curr = curr + 1
line 20:     else
line 21:       if begin != 0
line 22:         call add(res, [begin, curr - 1])
line 23:         let begin = closedend + 1
line 24:       endif
line 25:       let curr = closedend + 1
line 26:     endif
line 27:   endwhile
line 12:   while curr <= max
line 13:     let closedend = foldclosedend(curr)
line 14:     if closedend == -1
line 15:       let begin = begin == 0 ? curr : begin
line 16:       if curr == max
line 17:         call add(res, [begin, curr])
line 18:       endif
line 19:       let curr = curr + 1
line 20:     else
line 21:       if begin != 0
line 22:         call add(res, [begin, curr - 1])
line 23:         let begin = closedend + 1
line 24:       endif
line 25:       let curr = closedend + 1
line 26:     endif
line 27:   endwhile
line 12:   while curr <= max
line 13:     let closedend = foldclosedend(curr)
line 14:     if closedend == -1
line 15:       let begin = begin == 0 ? curr : begin
line 16:       if curr == max
line 17:         call add(res, [begin, curr])
line 18:       endif
line 19:       let curr = curr + 1
line 20:     else
line 21:       if begin != 0
line 22:         call add(res, [begin, curr - 1])
line 23:         let begin = closedend + 1
line 24:       endif
line 25:       let curr = closedend + 1
line 26:     endif
line 27:   endwhile
line 12:   while curr <= max
line 13:     let closedend = foldclosedend(curr)
line 14:     if closedend == -1
line 15:       let begin = begin == 0 ? curr : begin
line 16:       if curr == max
line 17:         call add(res, [begin, curr])
line 18:       endif
line 19:       let curr = curr + 1
line 20:     else
line 21:       if begin != 0
line 22:         call add(res, [begin, curr - 1])
line 23:         let begin = closedend + 1
line 24:       endif
line 25:       let curr = closedend + 1
line 26:     endif
line 27:   endwhile
line 12:   while curr <= max
line 13:     let closedend = foldclosedend(curr)
line 14:     if closedend == -1
line 15:       let begin = begin == 0 ? curr : begin
line 16:       if curr == max
line 17:         call add(res, [begin, curr])
line 18:       endif
line 19:       let curr = curr + 1
line 20:     else
line 21:       if begin != 0
line 22:         call add(res, [begin, curr - 1])
line 23:         let begin = closedend + 1
line 24:       endif
line 25:       let curr = closedend + 1
line 26:     endif
line 27:   endwhile
line 12:   while curr <= max
line 13:     let closedend = foldclosedend(curr)
line 14:     if closedend == -1
line 15:       let begin = begin == 0 ? curr : begin
line 16:       if curr == max
line 17:         call add(res, [begin, curr])
line 18:       endif
line 19:       let curr = curr + 1
line 20:     else
line 21:       if begin != 0
line 22:         call add(res, [begin, curr - 1])
line 23:         let begin = closedend + 1
line 24:       endif
line 25:       let curr = closedend + 1
line 26:     endif
line 27:   endwhile
line 12:   while curr <= max
line 13:     let closedend = foldclosedend(curr)
line 14:     if closedend == -1
line 15:       let begin = begin == 0 ? curr : begin
line 16:       if curr == max
line 17:         call add(res, [begin, curr])
line 18:       endif
line 19:       let curr = curr + 1
line 20:     else
line 21:       if begin != 0
line 22:         call add(res, [begin, curr - 1])
line 23:         let begin = closedend + 1
line 24:       endif
line 25:       let curr = closedend + 1
line 26:     endif
line 27:   endwhile
line 12:   while curr <= max
line 13:     let closedend = foldclosedend(curr)
line 14:     if closedend == -1
line 15:       let begin = begin == 0 ? curr : begin
line 16:       if curr == max
line 17:         call add(res, [begin, curr])
line 18:       endif
line 19:       let curr = curr + 1
line 20:     else
line 21:       if begin != 0
line 22:         call add(res, [begin, curr - 1])
line 23:         let begin = closedend + 1
line 24:       endif
line 25:       let curr = closedend + 1
line 26:     endif
line 27:   endwhile
line 28:   return res
function coc#util#get_editoroption[22]..<SNR>46_visible_ranges returning [[6, 52]]

continuing in function coc#util#get_editoroption

function coc#util#get_editoroption returning {'bufnr': 2, 'winnr': 1, 'tabpagenr': ...nid': 1000, 'visibleRanges': [[6, 52]]}

chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/gitsigns.nvim/lua/gitsigns)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/gitsigns.nvim/lua/gitsigns)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/gitsigns.nvim/lua/gitsigns)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/gitsigns.nvim/lua/gitsigns)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/gitsigns.nvim/lua/gitsigns)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/gitsigns.nvim/lua/gitsigns)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/gitsigns.nvim/lua/gitsigns)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/gitsigns.nvim/lua/gitsigns)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/gitsigns.nvim/lua/gitsigns)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/gitsigns.nvim/lua/gitsigns)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/gitsigns.nvim/lua/gitsigns)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/gitsigns.nvim/lua/gitsigns)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/gitsigns.nvim/lua/gitsigns)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/gitsigns.nvim/lua/gitsigns)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/gitsigns.nvim/lua/gitsigns)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(conf/nvim)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(conf/nvim)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(conf/nvim)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(conf/nvim)
chdir(/Users/ablanken/Sync/src/neovim-conf)
Executing: sign define CocError linehl=CocErrorLine texthl=CocErrorSign text=>> numhl=CocErrorSign
Executing: sign define CocWarning linehl=CocWarningLine texthl=CocWarningSign text=⚠ numhl=CocWarningSign
Executing: sign define CocInfo linehl=CocInfoLine texthl=CocInfoSign text=>> numhl=CocInfoSign
Executing: sign define CocHint linehl=CocHintLine texthl=CocHintSign text=>> numhl=CocHintSign
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(conf/nvim)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(conf/nvim)
chdir(/Users/ablanken/Sync/src/neovim-conf)
Searching for "autoload/coc/highlight.vim" in runtime path
Searching for "/Users/ablanken/.config/nvim/autoload/coc/highlight.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/autoload/coc/highlight.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/42header/autoload/coc/highlight.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/auto-session/autoload/coc/highlight.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/cheatsheet.nvim/autoload/coc/highlight.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/coc-nvim-lua/autoload/coc/highlight.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/coc.nvim/autoload/coc/highlight.vim"
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/coc.nvim/autoload/coc)
chdir(/Users/ablanken/Sync/src/neovim-conf)
sourcing "/Users/ablanken/.local/share/nvim/site/pack/packer/start/coc.nvim/autoload/coc/highlight.vim"
line 1: scriptencoding utf-8
line 2: let s:is_vim = !has('nvim')
line 3: let s:clear_match_by_window = has('nvim-0.6.0') || has('patch-8.1.1084')
line 4: let s:set_extmark = has('nvim') && exists('*nvim_buf_set_extmark')
line 5: let s:del_extmark = has('nvim') && exists('*nvim_buf_del_extmark')
line 6: let s:prop_offset = get(g:, 'coc_text_prop_offset', 1000)
line 7: let s:namespace_map = {}
line 8: let s:ns_id = 1
line 9: let s:diagnostic_hlgroups = ['CocErrorHighlight', 'CocWarningHighlight', 'CocInfoHighlight', 'CocHintHighlight', 'CocDeprecatedHighlight', 'CocUnusedHighlight']
line 10: " Maximum count to highlight each time.
line 11: let g:coc_highlight_maximum_count = get(g:, 'coc_highlight_maximum_count', 100)
line 12: 
line 13: if has('nvim-0.5.0') && s:clear_match_by_window == 0
line 14:   try
line 15:     call getmatches(0)
line 16:     let s:clear_match_by_window = 1
line 17:   catch /^Vim\%((\a\+)\)\=:E118/
line 18:     " ignored
line 19:   endtry
line 20: endif
line 21: 
line 22: " Update buffer region by region.
line 23: function! coc#highlight#buffer_update(bufnr, key, highlights, ...) abort
line 45: 
line 46: " Update highlights by check exists highlights.
line 47: " 0 based, end exclusive start and end
line 48: function! coc#highlight#update_highlights(bufnr, key, highlights, ...) abort
line 146: 
line 147: " 0 based line, start_col and end_col
line 148: " 0 based start & end line, end inclusive.
line 149: function! coc#highlight#get_highlights(bufnr, key, ...) abort
line 223: 
line 224: " Add multiple highlights to buffer.
line 225: " type HighlightItem = [hlGroup, lnum, colStart, colEnd, combine?, start_incl?, end_incl?]
line 226: function! coc#highlight#set(bufnr, key, highlights, priority) abort
line 237: 
line 238: " Clear highlights by 0 based line numbers.
line 239: function! coc#highlight#clear(bufnr, key, lnums) abort
line 257: 
line 258: function! coc#highlight#del_markers(bufnr, key, ids) abort
line 267: 
line 268: " highlight LSP range,
line 269: function! coc#highlight#ranges(bufnr, key, hlGroup, ranges, ...) abort
line 303: 
line 304: function! coc#highlight#add_highlight(bufnr, src_id, hl_group, line, col_start, col_end, ...) abort
line 329: 
line 330: function! coc#highlight#clear_highlight(bufnr, key, start_line, end_line) abort
line 342: 
line 343: " highlight buffer in winid with CodeBlock &HighlightItems
line 344: " export interface HighlightItem {
line 345: "   lnum: number // 0 based
line 346: "   hlGroup: string
line 347: "   colStart: number // 0 based
line 348: "   colEnd: number
line 349: " }
line 350: " export interface CodeBlock {
line 351: "   filetype?: string
line 352: "   hlGroup?: string
line 353: "   startLine: number // 0 based
line 354: "   endLine: number
line 355: " }
line 356: function! coc#highlight#add_highlights(winid, codes, highlights) abort
line 370: 
line 371: 
line 372: " Add highlights to line groups of winid, support hlGroup and filetype
line 373: " config should have startLine, endLine (0 based, end excluded) and filetype or hlGroup
line 374: " endLine should > startLine and endLine is excluded
line 375: "
line 376: " export interface CodeBlock {
line 377: "   filetype?: string
line 378: "   hlGroup?: string
line 379: "   startLine: number // 0 based
line 380: "   endLine: number
line 381: " }
line 382: function! coc#highlight#highlight_lines(winid, blocks) abort
line 411: 
line 412: " Compose hlGroups with foreground and background colors.
line 413: function! coc#highlight#compose_hlgroup(fgGroup, bgGroup) abort
line 462: 
line 463: " add matches for winid, use 0 for current window.
line 464: function! coc#highlight#match_ranges(winid, bufnr, ranges, hlGroup, priority) abort
line 525: 
line 526: " Clear matches by hlGroup regexp.
line 527: function! coc#highlight#clear_match_group(winid, match) abort
line 555: 
line 556: " Clear matches by match ids, use 0 for current win.
line 557: function! coc#highlight#clear_matches(winid, ids)
line 591: 
line 592: function! coc#highlight#clear_all() abort
line 603: 
line 604: function! coc#highlight#create_namespace(key) abort
line 619: 
line 620: function! coc#highlight#get_syntax_name(lnum, col)
line 623: 
line 624: function! s:prop_type_hlgroup(type) abort
line 630: 
line 631: function! s:update_highlights_timer(bufnr, changedtick, key, priority, groups, idx) abort
line 648: 
line 649: function! s:add_highlights_timer(bufnr, ns, highlights, priority) abort
line 664: 
line 665: function! s:add_highlights(bufnr, ns, highlights, priority) abort
line 676: 
line 677: function! s:to_group(items) abort
line 690: 
line 691: function! s:get_priority(key, hlGroup, priority) abort
line 700: 
line 701: function! s:group_hls(hls, linecount) abort
finished sourcing /Users/ablanken/.local/share/nvim/site/pack/packer/start/coc.nvim/autoload/coc/highlight.vim
calling function coc#highlight#create_namespace('diagnostic-virtualText')

line 1:   if type(a:key) == 0
line 2:     return a:key
line 3:   endif
line 4:   if has_key(s:namespace_map, a:key)
line 5:     return s:namespace_map[a:key]
line 6:   endif
line 7:   if has('nvim')
line 8:     let s:namespace_map[a:key] = nvim_create_namespace('coc-'.a:key)
line 9:   else
line 10:     let s:namespace_map[a:key] = s:ns_id
line 11:     let s:ns_id = s:ns_id + 1
line 12:   endif
line 13:   return s:namespace_map[a:key]
function coc#highlight#create_namespace returning #15

chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(conf/nvim)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(conf/nvim)
chdir(/Users/ablanken/Sync/src/neovim-conf)
Executing: sign define CocSelected text=* texthl=CocSelectedText linehl=CocSelectedLine
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(conf/nvim)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(conf/nvim)
chdir(/Users/ablanken/Sync/src/neovim-conf)
calling function coc#highlight#create_namespace('codelens')

line 1:   if type(a:key) == 0
line 2:     return a:key
line 3:   endif
line 4:   if has_key(s:namespace_map, a:key)
line 5:     return s:namespace_map[a:key]
line 6:   endif
line 7:   if has('nvim')
line 8:     let s:namespace_map[a:key] = nvim_create_namespace('coc-'.a:key)
line 9:   else
line 10:     let s:namespace_map[a:key] = s:ns_id
line 11:     let s:ns_id = s:ns_id + 1
line 12:   endif
line 13:   return s:namespace_map[a:key]
function coc#highlight#create_namespace returning #16

chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(conf/nvim)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(conf/nvim)
chdir(/Users/ablanken/Sync/src/neovim-conf)
calling function coc#highlight#create_namespace('inlayHint')

line 1:   if type(a:key) == 0
line 2:     return a:key
line 3:   endif
line 4:   if has_key(s:namespace_map, a:key)
line 5:     return s:namespace_map[a:key]
line 6:   endif
line 7:   if has('nvim')
line 8:     let s:namespace_map[a:key] = nvim_create_namespace('coc-'.a:key)
line 9:   else
line 10:     let s:namespace_map[a:key] = s:ns_id
line 11:     let s:ns_id = s:ns_id + 1
line 12:   endif
line 13:   return s:namespace_map[a:key]
function coc#highlight#create_namespace returning #17

chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(conf/nvim)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(conf/nvim)
chdir(/Users/ablanken/Sync/src/neovim-conf)
calling function coc#highlight#create_namespace('refactor')

line 1:   if type(a:key) == 0
line 2:     return a:key
line 3:   endif
line 4:   if has_key(s:namespace_map, a:key)
line 5:     return s:namespace_map[a:key]
line 6:   endif
line 7:   if has('nvim')
line 8:     let s:namespace_map[a:key] = nvim_create_namespace('coc-'.a:key)
line 9:   else
line 10:     let s:namespace_map[a:key] = s:ns_id
line 11:     let s:ns_id = s:ns_id + 1
line 12:   endif
line 13:   return s:namespace_map[a:key]
function coc#highlight#create_namespace returning #18

chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(conf/nvim)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(conf/nvim)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(conf/nvim)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(conf/nvim)
chdir(/Users/ablanken/Sync/src/neovim-conf)
Executing: autocmd BufNewFile,BufRead *.snippets setf snippets
Executing: execute 'noa set rtp+='.fnameescape('/Users/ablanken/Sync/dot.config/coc/extensions/node_modules/coc-snippets')
Executing: noa set rtp+=/Users/ablanken/Sync/dot.config/coc/extensions/node_modules/coc-snippets
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(conf/nvim)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(conf/nvim)
chdir(/Users/ablanken/Sync/src/neovim-conf)
Executing: 
Executing: augroup coc_dynamic_autocmd
Executing:   autocmd!
Executing:   autocmd BufReadCmd,FileReadCmd,SourceCmd output:/* call coc#rpc#request('CocAutocmd', ['BufReadCmd','output', expand('<afile>')])
Executing:   autocmd VimLeavePre * call coc#rpc#request('doAutocmd', [1])
Executing:   autocmd OptionSet runtimepath call coc#rpc#notify('OptionSet',[expand('<amatch>'), v:option_old, v:option_new])
Executing: augroup end
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(conf/nvim)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(conf/nvim)
chdir(/Users/ablanken/Sync/src/neovim-conf)
calling function coc#util#do_autocmd('CocNvimInit')

line 1:   if exists('#User#'.a:name)
line 2:     exe 'doautocmd <nomodeline> User '.a:name
line 3:   endif
function coc#util#do_autocmd returning #0

chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(conf/nvim)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(conf/nvim)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(conf/nvim)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(conf/nvim)
chdir(/Users/ablanken/Sync/src/neovim-conf)
Searching for "autoload/provider/python3.vim" in runtime path
Searching for "/Users/ablanken/.config/nvim/autoload/provider/python3.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/autoload/provider/python3.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/42header/autoload/provider/python3.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/auto-session/autoload/provider/python3.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/cheatsheet.nvim/autoload/provider/python3.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/coc-nvim-lua/autoload/provider/python3.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/coc.nvim/autoload/provider/python3.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/Comment.nvim/autoload/provider/python3.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/c_formatter_42.vim/autoload/provider/python3.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/FTerm.nvim/autoload/provider/python3.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/gentoo-syntax/autoload/provider/python3.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/gitsigns.nvim/autoload/provider/python3.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/indent-blankline.nvim/autoload/provider/python3.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/lualine.nvim/autoload/provider/python3.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/neon/autoload/provider/python3.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/nvim-neoclip.lua/autoload/provider/python3.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/nvim-treesitter/autoload/provider/python3.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/nvim-web-devicons/autoload/provider/python3.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/packer.nvim/autoload/provider/python3.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/plenary.nvim/autoload/provider/python3.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/session-lens/autoload/provider/python3.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/sqlite.lua/autoload/provider/python3.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/suda.vim/autoload/provider/python3.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/telescope-file-browser.nvim/autoload/provider/python3.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/telescope-fzf-native.nvim/autoload/provider/python3.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/telescope-packer.nvim/autoload/provider/python3.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/telescope-repo.nvim/autoload/provider/python3.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/telescope-symbols.nvim/autoload/provider/python3.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/telescope.nvim/autoload/provider/python3.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/vim-fugitive/autoload/provider/python3.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/vim-polyglot/autoload/provider/python3.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/vim-rooter/autoload/provider/python3.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/which-key.nvim/autoload/provider/python3.vim"
Searching for "/Users/ablanken/.local/nvim-brew/Cellar/neovim/0.7.0/share/nvim/runtime/autoload/provider/python3.vim"
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/nvim-brew/Cellar/neovim/0.7.0/share/nvim/runtime/autoload/provider)
chdir(/Users/ablanken/Sync/src/neovim-conf)
sourcing "/Users/ablanken/.local/nvim-brew/Cellar/neovim/0.7.0/share/nvim/runtime/autoload/provider/python3.vim"
line 1: " The Python3 provider uses a Python3 host to emulate an environment for running
line 2: " python3 plugins. :help provider
line 3: "
line 4: " Associating the plugin with the Python3 host is the first step because
line 5: " plugins will be passed as command-line arguments
line 6: 
line 7: if exists('g:loaded_python3_provider')
line 8:   finish
line 9: endif
line 10: let [s:prog, s:err] = provider#pythonx#Detect(3)
Searching for "autoload/provider/pythonx.vim" in runtime path
Searching for "/Users/ablanken/.config/nvim/autoload/provider/pythonx.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/autoload/provider/pythonx.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/42header/autoload/provider/pythonx.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/auto-session/autoload/provider/pythonx.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/cheatsheet.nvim/autoload/provider/pythonx.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/coc-nvim-lua/autoload/provider/pythonx.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/coc.nvim/autoload/provider/pythonx.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/Comment.nvim/autoload/provider/pythonx.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/c_formatter_42.vim/autoload/provider/pythonx.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/FTerm.nvim/autoload/provider/pythonx.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/gentoo-syntax/autoload/provider/pythonx.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/gitsigns.nvim/autoload/provider/pythonx.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/indent-blankline.nvim/autoload/provider/pythonx.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/lualine.nvim/autoload/provider/pythonx.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/neon/autoload/provider/pythonx.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/nvim-neoclip.lua/autoload/provider/pythonx.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/nvim-treesitter/autoload/provider/pythonx.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/nvim-web-devicons/autoload/provider/pythonx.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/packer.nvim/autoload/provider/pythonx.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/plenary.nvim/autoload/provider/pythonx.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/session-lens/autoload/provider/pythonx.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/sqlite.lua/autoload/provider/pythonx.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/suda.vim/autoload/provider/pythonx.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/telescope-file-browser.nvim/autoload/provider/pythonx.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/telescope-fzf-native.nvim/autoload/provider/pythonx.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/telescope-packer.nvim/autoload/provider/pythonx.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/telescope-repo.nvim/autoload/provider/pythonx.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/telescope-symbols.nvim/autoload/provider/pythonx.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/telescope.nvim/autoload/provider/pythonx.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/vim-fugitive/autoload/provider/pythonx.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/vim-polyglot/autoload/provider/pythonx.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/vim-rooter/autoload/provider/pythonx.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/which-key.nvim/autoload/provider/pythonx.vim"
Searching for "/Users/ablanken/.local/nvim-brew/Cellar/neovim/0.7.0/share/nvim/runtime/autoload/provider/pythonx.vim"
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/nvim-brew/Cellar/neovim/0.7.0/share/nvim/runtime/autoload/provider)
chdir(/Users/ablanken/Sync/src/neovim-conf)
line 10: sourcing "/Users/ablanken/.local/nvim-brew/Cellar/neovim/0.7.0/share/nvim/runtime/autoload/provider/pythonx.vim"
line 1: " The Python provider helper
line 2: if exists('s:loaded_pythonx_provider')
line 3:   finish
line 4: endif
line 5: 
line 6: let s:loaded_pythonx_provider = 1
line 7: 
line 8: function! provider#pythonx#Require(host) abort
line 22: 
line 23: function! s:get_python_executable_from_host_var(major_version) abort
line 26: 
line 27: function! s:get_python_candidates(major_version) abort
line 32: 
line 33: " Returns [path_to_python_executable, error_message]
line 34: function! provider#pythonx#Detect(major_version) abort
line 37: 
line 38: " Returns [path_to_python_executable, error_message]
line 39: function! provider#pythonx#DetectByModule(module, major_version) abort
line 61: 
line 62: " Returns array: [prog_exitcode, prog_version]
line 63: function! s:import_module(prog, module) abort
line 73: 
line 74: " Returns array: [was_success, error_message]
line 75: function! provider#pythonx#CheckForModule(prog, module, major_version) abort
finished sourcing /Users/ablanken/.local/nvim-brew/Cellar/neovim/0.7.0/share/nvim/runtime/autoload/provider/pythonx.vim
continuing in /Users/ablanken/.local/nvim-brew/Cellar/neovim/0.7.0/share/nvim/runtime/autoload/provider/python3.vim
calling function provider#pythonx#Detect(3)

line 1:   return provider#pythonx#DetectByModule('neovim', a:major_version)
calling function provider#pythonx#Detect[1]..provider#pythonx#DetectByModule('neovim', 3)

line 1:   let python_exe = s:get_python_executable_from_host_var(a:major_version)
calling function provider#pythonx#Detect[1]..provider#pythonx#DetectByModule[1]..<SNR>83_get_python_executable_from_host_var(3)

line 1:   return expand(get(g:, 'python'.(a:major_version == 3 ? '3' : execute("throw 'unsupported'")).'_host_prog', ''), v:true)
function provider#pythonx#Detect[1]..provider#pythonx#DetectByModule[1]..<SNR>83_get_python_executable_from_host_var returning ''

continuing in function provider#pythonx#Detect[1]..provider#pythonx#DetectByModule

line 2: 
line 3:   if !empty(python_exe)
line 4:     return [exepath(expand(python_exe, v:true)), '']
line 5:   endif
line 6: 
line 7:   let candidates = s:get_python_candidates(a:major_version)
calling function provider#pythonx#Detect[1]..provider#pythonx#DetectByModule[7]..<SNR>83_get_python_candidates(3)

line 1:   return { 3: ['python3', 'python3.10', 'python3.9', 'python3.8', 'python3.7', 'python'] }[a:major_version]
function provider#pythonx#Detect[1]..provider#pythonx#DetectByModule[7]..<SNR>83_get_python_candidates returning ['python3', 'python3.10', 'python3.9', 'python3.8', 'python3.7', 'python']

continuing in function provider#pythonx#Detect[1]..provider#pythonx#DetectByModule

line 8:   let errors = []
line 9: 
line 10:   for exe in candidates
line 11:     let [result, error] = provider#pythonx#CheckForModule(exe, a:module, a:major_version)
calling function provider#pythonx#Detect[1]..provider#pythonx#DetectByModule[11]..provider#pythonx#CheckForModule('python3', 'neovim', 3)

line 1:   let prog_path = exepath(a:prog)
line 2:   if prog_path ==# ''
line 3:     return [0, a:prog . ' not found in search path or not executable.']
line 4:   endif
line 5: 
line 6:   let min_version = '3.7'
line 7: 
line 8:   " Try to load module, and output Python version.
line 9:   " Exit codes:
line 10:   "   0  module can be loaded.
line 11:   "   2  module cannot be loaded.
line 12:   "   Otherwise something else went wrong (e.g. 1 or 127).
line 13:   let [prog_exitcode, prog_version] = s:import_module(a:prog, a:module)
calling function provider#pythonx#Detect[1]..provider#pythonx#DetectByModule[11]..provider#pythonx#CheckForModule[13]..<SNR>83_import_module('python3', 'neovim')

line 1:   let prog_version = system([a:prog, '-c' , printf( 'import sys; ' . 'sys.path = list(filter(lambda x: x != "", sys.path)); ' . 'sys.stdout.write(str(sys.version_info[0]) + "." + str(sys.version_info[1])); ' . 'import pkgutil; ' . 'exit(2*int(pkgutil.get_loader("%s") is None))', a:module)])
Executing command: "'/usr/local/bin/python3' '-c' 'import sys; sys.path = list(filter(lambda x: x != "", sys.path)); sys.stdout.write(str(sys.version_info[0]) + "." + str(sys.version_info[1])); import pkgutil; exit(2*int(pkgutil.get_loader("neovim") is None))'"


line 8:   return [v:shell_error, prog_version]
function provider#pythonx#Detect[1]..provider#pythonx#DetectByModule[11]..provider#pythonx#CheckForModule[13]..<SNR>83_import_module returning [0, '3.7']

continuing in function provider#pythonx#Detect[1]..provider#pythonx#DetectByModule[11]..provider#pythonx#CheckForModule

line 14: 
line 15:   if prog_exitcode == 2 || prog_exitcode == 0
line 16:     " Check version only for expected return codes.
line 17:     if prog_version !~ '^' . a:major_version
line 18:       return [0, prog_path . ' is Python ' . prog_version . ' and cannot provide Python ' . a:major_version . '.']
line 20:     elseif prog_version =~ '^' . a:major_version && str2nr(prog_version[2:]) < str2nr(min_version[2:])
line 21:       return [0, prog_path . ' is Python ' . prog_version . ' and cannot provide Python >= ' . min_version . '.']
line 23:     endif
line 24:   endif
line 25: 
line 26:   if prog_exitcode == 2
line 27:     return [0, prog_path.' does not have the "' . a:module . '" module.']
line 28:   elseif prog_exitcode == 127
line 29:     " This can happen with pyenv's shims.
line 30:     return [0, prog_path . ' does not exist: ' . prog_version]
line 31:   elseif prog_exitcode
line 32:     return [0, 'Checking ' . prog_path . ' caused an unknown error. ' . '(' . prog_exitcode . ', output: ' . prog_version . ')' . ' Report this at https://github.com/neovim/neovim']
line 35:   endif
line 36: 
line 37:   return [1, '']
function provider#pythonx#Detect[1]..provider#pythonx#DetectByModule[11]..provider#pythonx#CheckForModule returning [1, '']

continuing in function provider#pythonx#Detect[1]..provider#pythonx#DetectByModule

line 12:     if result
line 13:       return [exe, error]
function provider#pythonx#Detect[1]..provider#pythonx#DetectByModule returning ['python3', '']

continuing in function provider#pythonx#Detect

function provider#pythonx#Detect returning ['python3', '']

continuing in /Users/ablanken/.local/nvim-brew/Cellar/neovim/0.7.0/share/nvim/runtime/autoload/provider/python3.vim

line 11: let g:loaded_python3_provider = empty(s:prog) ? 1 : 2
line 12: 
line 13: function! provider#python3#Prog() abort
line 16: 
line 17: function! provider#python3#Error() abort
line 20: 
line 21: " The Python3 provider plugin will run in a separate instance of the Python3
line 22: " host.
line 23: call remote#host#RegisterClone('legacy-python3-provider', 'python3')
Searching for "autoload/remote/host.vim" in runtime path
Searching for "/Users/ablanken/.config/nvim/autoload/remote/host.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/autoload/remote/host.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/42header/autoload/remote/host.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/auto-session/autoload/remote/host.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/cheatsheet.nvim/autoload/remote/host.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/coc-nvim-lua/autoload/remote/host.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/coc.nvim/autoload/remote/host.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/Comment.nvim/autoload/remote/host.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/c_formatter_42.vim/autoload/remote/host.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/FTerm.nvim/autoload/remote/host.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/gentoo-syntax/autoload/remote/host.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/gitsigns.nvim/autoload/remote/host.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/indent-blankline.nvim/autoload/remote/host.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/lualine.nvim/autoload/remote/host.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/neon/autoload/remote/host.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/nvim-neoclip.lua/autoload/remote/host.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/nvim-treesitter/autoload/remote/host.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/nvim-web-devicons/autoload/remote/host.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/packer.nvim/autoload/remote/host.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/plenary.nvim/autoload/remote/host.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/session-lens/autoload/remote/host.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/sqlite.lua/autoload/remote/host.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/suda.vim/autoload/remote/host.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/telescope-file-browser.nvim/autoload/remote/host.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/telescope-fzf-native.nvim/autoload/remote/host.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/telescope-packer.nvim/autoload/remote/host.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/telescope-repo.nvim/autoload/remote/host.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/telescope-symbols.nvim/autoload/remote/host.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/telescope.nvim/autoload/remote/host.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/vim-fugitive/autoload/remote/host.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/vim-polyglot/autoload/remote/host.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/vim-rooter/autoload/remote/host.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/which-key.nvim/autoload/remote/host.vim"
Searching for "/Users/ablanken/.local/nvim-brew/Cellar/neovim/0.7.0/share/nvim/runtime/autoload/remote/host.vim"
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/nvim-brew/Cellar/neovim/0.7.0/share/nvim/runtime/autoload/remote)
chdir(/Users/ablanken/Sync/src/neovim-conf)
line 23: sourcing "/Users/ablanken/.local/nvim-brew/Cellar/neovim/0.7.0/share/nvim/runtime/autoload/remote/host.vim"
line 1: let s:hosts = {}
line 2: let s:plugin_patterns = {}
line 3: let s:plugins_for_host = {}
line 4: 
line 5: " Register a host by associating it with a factory(funcref)
line 6: function! remote#host#Register(name, pattern, factory) abort
line 14: 
line 15: " Register a clone to an existing host. The new host will use the same factory
line 16: " as `source`, but it will run as a different process. This can be used by
line 17: " plugins that should run isolated from other plugins created for the same host
line 18: " type
line 19: function! remote#host#RegisterClone(name, orig_name) abort
line 31: 
line 32: " Get a host channel, bootstrapping it if necessary
line 33: function! remote#host#Require(name) abort
line 48: 
line 49: function! remote#host#IsRunning(name) abort
line 55: 
line 56: " Example of registering a Python plugin with two commands (one async), one
line 57: " autocmd (async) and one function (sync):
line 58: "
line 59: " let s:plugin_path = expand('<sfile>:p:h').'/nvim_plugin.py'
line 60: " call remote#host#RegisterPlugin('python', s:plugin_path, [
line 61: "   \ {'type': 'command', 'name': 'PyCmd', 'sync': 1, 'opts': {}},
line 62: "   \ {'type': 'command', 'name': 'PyAsyncCmd', 'sync': 0, 'opts': {'eval': 'cursor()'}},
line 63: "   \ {'type': 'autocmd', 'name': 'BufEnter', 'sync': 0, 'opts': {'eval': 'expand("<afile>")'}},
line 64: "   \ {'type': 'function', 'name': 'PyFunc', 'sync': 1, 'opts': {}}
line 65: "   \ ])
line 66: "
line 67: " The third item in a declaration is a boolean: non zero means the command,
line 68: " autocommand or function will be executed synchronously with rpcrequest.
line 69: function! remote#host#RegisterPlugin(host, path, specs) abort
line 111: 
line 112: function! s:RegistrationCommands(host) abort
line 155: 
line 156: function! remote#host#UpdateRemotePlugins() abort
line 176: 
line 177: function! remote#host#PluginsForHost(host) abort
line 183: 
line 184: function! remote#host#LoadErrorForHost(host, log) abort
line 190: 
line 191: " Registration of standard hosts
line 192: 
line 193: " Python/Python3
line 194: call remote#host#Register('python', '*', function('provider#pythonx#Require'))
calling function remote#host#Register('python', '*', function('provider#pythonx#Require'))

line 1:   let s:hosts[a:name] = {'factory': a:factory, 'channel': 0, 'initialized': 0}
line 2:   let s:plugin_patterns[a:name] = a:pattern
line 3:   if type(a:factory) == type(1) && a:factory
line 4:     " Passed a channel directly
line 5:     let s:hosts[a:name].channel = a:factory
line 6:   endif
function remote#host#Register returning #0

continuing in /Users/ablanken/.local/nvim-brew/Cellar/neovim/0.7.0/share/nvim/runtime/autoload/remote/host.vim

line 196: call remote#host#Register('python3', '*', function('provider#pythonx#Require'))
calling function remote#host#Register('python3', '*', function('provider#pythonx#Require'))

line 1:   let s:hosts[a:name] = {'factory': a:factory, 'channel': 0, 'initialized': 0}
line 2:   let s:plugin_patterns[a:name] = a:pattern
line 3:   if type(a:factory) == type(1) && a:factory
line 4:     " Passed a channel directly
line 5:     let s:hosts[a:name].channel = a:factory
line 6:   endif
function remote#host#Register returning #0

continuing in /Users/ablanken/.local/nvim-brew/Cellar/neovim/0.7.0/share/nvim/runtime/autoload/remote/host.vim

line 198: 
line 199: " Ruby
line 200: call remote#host#Register('ruby', '*.rb', function('provider#ruby#Require'))
calling function remote#host#Register('ruby', '*.rb', function('provider#ruby#Require'))

line 1:   let s:hosts[a:name] = {'factory': a:factory, 'channel': 0, 'initialized': 0}
line 2:   let s:plugin_patterns[a:name] = a:pattern
line 3:   if type(a:factory) == type(1) && a:factory
line 4:     " Passed a channel directly
line 5:     let s:hosts[a:name].channel = a:factory
line 6:   endif
function remote#host#Register returning #0

continuing in /Users/ablanken/.local/nvim-brew/Cellar/neovim/0.7.0/share/nvim/runtime/autoload/remote/host.vim

line 202: 
line 203: " nodejs
line 204: call remote#host#Register('node', '*', function('provider#node#Require'))
calling function remote#host#Register('node', '*', function('provider#node#Require'))

line 1:   let s:hosts[a:name] = {'factory': a:factory, 'channel': 0, 'initialized': 0}
line 2:   let s:plugin_patterns[a:name] = a:pattern
line 3:   if type(a:factory) == type(1) && a:factory
line 4:     " Passed a channel directly
line 5:     let s:hosts[a:name].channel = a:factory
line 6:   endif
function remote#host#Register returning #0

continuing in /Users/ablanken/.local/nvim-brew/Cellar/neovim/0.7.0/share/nvim/runtime/autoload/remote/host.vim

line 206: 
line 207: " perl
line 208: call remote#host#Register('perl', '*', function('provider#perl#Require'))
calling function remote#host#Register('perl', '*', function('provider#perl#Require'))

line 1:   let s:hosts[a:name] = {'factory': a:factory, 'channel': 0, 'initialized': 0}
line 2:   let s:plugin_patterns[a:name] = a:pattern
line 3:   if type(a:factory) == type(1) && a:factory
line 4:     " Passed a channel directly
line 5:     let s:hosts[a:name].channel = a:factory
line 6:   endif
function remote#host#Register returning #0

continuing in /Users/ablanken/.local/nvim-brew/Cellar/neovim/0.7.0/share/nvim/runtime/autoload/remote/host.vim

finished sourcing /Users/ablanken/.local/nvim-brew/Cellar/neovim/0.7.0/share/nvim/runtime/autoload/remote/host.vim
continuing in /Users/ablanken/.local/nvim-brew/Cellar/neovim/0.7.0/share/nvim/runtime/autoload/provider/python3.vim
calling function remote#host#RegisterClone('legacy-python3-provider', 'python3')

line 1:   if !has_key(s:hosts, a:orig_name)
line 2:     throw 'No host named "'.a:orig_name.'" is registered'
line 3:   endif
line 4:   let Factory = s:hosts[a:orig_name].factory
line 5:   let s:hosts[a:name] = { 'factory': Factory, 'channel': 0, 'initialized': 0, 'orig_name': a:orig_name }
function remote#host#RegisterClone returning #0

continuing in /Users/ablanken/.local/nvim-brew/Cellar/neovim/0.7.0/share/nvim/runtime/autoload/provider/python3.vim

line 24: call remote#host#RegisterPlugin('legacy-python3-provider', 'script_host.py', [])
calling function remote#host#RegisterPlugin('legacy-python3-provider', 'script_host.py', [])

line 1:   let plugins = remote#host#PluginsForHost(a:host)
calling function remote#host#RegisterPlugin[1]..remote#host#PluginsForHost('legacy-python3-provider')

line 1:   if !has_key(s:plugins_for_host, a:host)
line 2:     let s:plugins_for_host[a:host] = []
line 3:   end
line 4:   return s:plugins_for_host[a:host]
function remote#host#RegisterPlugin[1]..remote#host#PluginsForHost returning []

continuing in function remote#host#RegisterPlugin

line 2: 
line 3:   for plugin in plugins
line 4:     if plugin.path == a:path
line 5:       throw 'Plugin "'.a:path.'" is already registered'
line 6:     endif
line 7:   endfor
line 8: 
line 9:   if has_key(s:hosts, a:host) && remote#host#IsRunning(a:host)
calling function remote#host#RegisterPlugin[9]..remote#host#IsRunning('legacy-python3-provider')

line 1:   if !has_key(s:hosts, a:name)
line 2:     throw 'No host named "'.a:name.'" is registered'
line 3:   endif
line 4:   return s:hosts[a:name].channel != 0
function remote#host#RegisterPlugin[9]..remote#host#IsRunning returning #0

continuing in function remote#host#RegisterPlugin

line 10:     " For now we won't allow registration of plugins when the host is already
line 11:     " running.
line 12:     throw 'Host "'.a:host.'" is already running'
line 13:   endif
line 14: 
line 15:   for spec in a:specs
line 16:     let type = spec.type
line 17:     let name = spec.name
line 18:     let sync = spec.sync
line 19:     let opts = spec.opts
line 20:     let rpc_method = a:path
line 21:     if type == 'command'
line 22:       let rpc_method .= ':command:'.name
line 23:       call remote#define#CommandOnHost(a:host, rpc_method, sync, name, opts)
line 24:     elseif type == 'autocmd'
line 25:       " Since multiple handlers can be attached to the same autocmd event by a
line 26:       " single plugin, we need a way to uniquely identify the rpc method to
line 27:       " call.  The solution is to append the autocmd pattern to the method
line 28:       " name(This still has a limit: one handler per event/pattern combo, but
line 29:       " there's no need to allow plugins define multiple handlers in that case)
line 30:       let rpc_method .= ':autocmd:'.name.':'.get(opts, 'pattern', '*')
line 31:       call remote#define#AutocmdOnHost(a:host, rpc_method, sync, name, opts)
line 32:     elseif type == 'function'
line 33:       let rpc_method .= ':function:'.name
line 34:       call remote#define#FunctionOnHost(a:host, rpc_method, sync, name, opts)
line 35:     else
line 36:       echoerr 'Invalid declaration type: '.type
line 37:     endif
line 38:   endfor
line 39: 
line 40:   call add(plugins, {'path': a:path, 'specs': a:specs})
function remote#host#RegisterPlugin returning #0

continuing in /Users/ablanken/.local/nvim-brew/Cellar/neovim/0.7.0/share/nvim/runtime/autoload/provider/python3.vim

line 25: 
line 26: function! provider#python3#Call(method, args) abort
finished sourcing /Users/ablanken/.local/nvim-brew/Cellar/neovim/0.7.0/share/nvim/runtime/autoload/provider/python3.vim
calling function provider#python3#Call('eval', ['1'])

line 1:   if s:err != ''
line 2:     return
line 3:   endif
line 4:   if !exists('s:host')
line 5:     let s:rpcrequest = function('rpcrequest')
line 6: 
line 7:     " Ensure that we can load the Python3 host before bootstrapping
line 8:     try
line 9:       let s:host = remote#host#Require('legacy-python3-provider')
calling function provider#python3#Call[9]..remote#host#Require('legacy-python3-provider')

line 1:   if !has_key(s:hosts, a:name)
line 2:     throw 'No host named "'.a:name.'" is registered'
line 3:   endif
line 4:   let host = s:hosts[a:name]
line 5:   if !host.channel && !host.initialized
line 6:     let host_info = { 'name': a:name, 'orig_name': get(host, 'orig_name', a:name) }
line 10:     let host.channel = call(host.factory, [host_info])
calling function provider#python3#Call[9]..remote#host#Require[10]..provider#pythonx#Require({'orig_name': 'python3', 'name': 'legacy-python3-provider'})

line 1:   " Python host arguments
line 2:   let prog = provider#python3#Prog()
calling function provider#python3#Call[9]..remote#host#Require[10]..provider#pythonx#Require[2]..provider#python3#Prog()

line 1:   return s:prog
function provider#python3#Call[9]..remote#host#Require[10]..provider#pythonx#Require[2]..provider#python3#Prog returning 'python3'

continuing in function provider#python3#Call[9]..remote#host#Require[10]..provider#pythonx#Require

line 3:   let args = [prog, '-c', 'import sys; sys.path = list(filter(lambda x: x != "", sys.path)); import neovim; neovim.start_host()']
line 4: 
line 5: 
line 6:   " Collect registered Python plugins into args
line 7:   let python_plugins = remote#host#PluginsForHost(a:host.name)
calling function provider#python3#Call[9]..remote#host#Require[10]..provider#pythonx#Require[7]..remote#host#PluginsForHost('legacy-python3-provider')

line 1:   if !has_key(s:plugins_for_host, a:host)
line 2:     let s:plugins_for_host[a:host] = []
line 3:   end
line 4:   return s:plugins_for_host[a:host]
function provider#python3#Call[9]..remote#host#Require[10]..provider#pythonx#Require[7]..remote#host#PluginsForHost returning [{'specs': [], 'path': 'script_host.py'}]

continuing in function provider#python3#Call[9]..remote#host#Require[10]..provider#pythonx#Require

line 8:   for plugin in python_plugins
line 9:     call add(args, plugin.path)
line 10:   endfor
line 8:   for plugin in python_plugins
line 9:     call add(args, plugin.path)
line 10:   endfor
line 11: 
line 12:   return provider#Poll(args, a:host.orig_name, '$NVIM_PYTHON_LOG_FILE', {'overlapped': v:true})
Searching for "autoload/provider.vim" in runtime path
Searching for "/Users/ablanken/.config/nvim/autoload/provider.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/autoload/provider.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/42header/autoload/provider.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/auto-session/autoload/provider.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/cheatsheet.nvim/autoload/provider.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/coc-nvim-lua/autoload/provider.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/coc.nvim/autoload/provider.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/Comment.nvim/autoload/provider.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/c_formatter_42.vim/autoload/provider.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/FTerm.nvim/autoload/provider.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/gentoo-syntax/autoload/provider.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/gitsigns.nvim/autoload/provider.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/indent-blankline.nvim/autoload/provider.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/lualine.nvim/autoload/provider.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/neon/autoload/provider.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/nvim-neoclip.lua/autoload/provider.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/nvim-treesitter/autoload/provider.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/nvim-web-devicons/autoload/provider.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/packer.nvim/autoload/provider.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/plenary.nvim/autoload/provider.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/session-lens/autoload/provider.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/sqlite.lua/autoload/provider.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/suda.vim/autoload/provider.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/telescope-file-browser.nvim/autoload/provider.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/telescope-fzf-native.nvim/autoload/provider.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/telescope-packer.nvim/autoload/provider.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/telescope-repo.nvim/autoload/provider.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/telescope-symbols.nvim/autoload/provider.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/telescope.nvim/autoload/provider.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/vim-fugitive/autoload/provider.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/vim-polyglot/autoload/provider.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/vim-rooter/autoload/provider.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/which-key.nvim/autoload/provider.vim"
Searching for "/Users/ablanken/.local/nvim-brew/Cellar/neovim/0.7.0/share/nvim/runtime/autoload/provider.vim"
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/nvim-brew/Cellar/neovim/0.7.0/share/nvim/runtime/autoload)
chdir(/Users/ablanken/Sync/src/neovim-conf)
line 12: sourcing "/Users/ablanken/.local/nvim-brew/Cellar/neovim/0.7.0/share/nvim/runtime/autoload/provider.vim"
line 1: " Common functions for providers
line 2: 
line 3: " Start the provider and perform a 'poll' request
line 4: "
line 5: " Returns a valid channel on success
line 6: function! provider#Poll(argv, orig_name, log_env, ...) abort
finished sourcing /Users/ablanken/.local/nvim-brew/Cellar/neovim/0.7.0/share/nvim/runtime/autoload/provider.vim
continuing in function provider#python3#Call[9]..remote#host#Require[10]..provider#pythonx#Require
calling function provider#python3#Call[9]..remote#host#Require[10]..provider#pythonx#Require[12]..provider#Poll(['python3', '-c', 'import sys; sys.pat...neovim.start_host()', 'script_host.py'], 'python3', '$NVIM_PYTHON_LOG_FILE', {'overlapped': v:true})

line 1:   let job = {'rpc': v:true, 'stderr_buffered': v:true}
line 2:   if a:0
line 3:     let job = extend(job, a:1)
line 4:   endif
line 5:   try
line 6:     let channel_id = jobstart(a:argv, job)
line 7:     if channel_id > 0 && rpcrequest(channel_id, 'poll') ==# 'ok'
line 8:       return channel_id
:return 6 made pending

line 9:     endif
line 10:   catch
line 11:     echomsg v:throwpoint
line 12:     echomsg v:exception
line 13:     for row in get(job, 'stderr', [])
line 14:       echomsg row
line 15:     endfor
line 16:   endtry
:return 6 resumed

function provider#python3#Call[9]..remote#host#Require[10]..provider#pythonx#Require[12]..provider#Poll returning #6

continuing in function provider#python3#Call[9]..remote#host#Require[10]..provider#pythonx#Require

function provider#python3#Call[9]..remote#host#Require[10]..provider#pythonx#Require returning #6

continuing in function provider#python3#Call[9]..remote#host#Require

line 11:     let host.initialized = 1
line 12:   endif
line 13:   return host.channel
function provider#python3#Call[9]..remote#host#Require returning #6

continuing in function provider#python3#Call

line 10:     catch
line 11:       let s:err = v:exception
line 12:       echohl WarningMsg
line 13:       echomsg v:exception
line 14:       echohl None
line 15:       return
line 16:     endtry
line 17:   endif
line 18:   return call(s:rpcrequest, insert(insert(a:args, 'python_'.a:method), s:host))
Executing: au DirChanged * call rpcnotify(6, "python_chdir", v:event.cwd)
Executing: call rpcnotify(6, "python_chdir", getcwd())
function provider#python3#Call returning v:null

Executing: xnoremap <silent> <Plug>(coc-convert-snippet) :<C-U>call coc#rpc#notify('doKeymap', ['convert-snippet'])<cr>
Executing: inoremap <silent><expr> <Plug>(coc-snippets-expand) coc#_insert_key('request', 'snippets-expand', 1)
Executing: inoremap <silent><expr> <Plug>(coc-snippets-expand-jump) coc#_insert_key('request', 'snippets-expand-jump', 1)
Executing: vnoremap <silent> <Plug>(coc-snippets-select) :<C-U>call coc#rpc#notify('doKeymap', ['snippets-select'])<cr>
calling function coc#util#do_autocmd('CocStatusChange')

line 1:   if exists('#User#'.a:name)
line 2:     exe 'doautocmd <nomodeline> User '.a:name
line 3:   endif
function coc#util#do_autocmd returning #0

Executing: source /Users/ablanken/.local/share/nvim/site/pack/packer/start/coc-nvim-lua/autoload/coc/source/nvim_lua.vim
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/coc-nvim-lua/autoload/coc/source)
chdir(/Users/ablanken/Sync/src/neovim-conf)
sourcing "/Users/ablanken/.local/share/nvim/site/pack/packer/start/coc-nvim-lua/autoload/coc/source/nvim_lua.vim"
line 1: function! coc#source#nvim_lua#init() abort
line 8: 
line 9: function! coc#source#nvim_lua#complete(opt, cb)
finished sourcing /Users/ablanken/.local/share/nvim/site/pack/packer/start/coc-nvim-lua/autoload/coc/source/nvim_lua.vim
calling function coc#util#do_autocmd('CocStatusChange')

line 1:   if exists('#User#'.a:name)
line 2:     exe 'doautocmd <nomodeline> User '.a:name
line 3:   endif
function coc#util#do_autocmd returning #0

Searching for "autoload/coc/window.vim" in runtime path
Searching for "/Users/ablanken/.config/nvim/autoload/coc/window.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/autoload/coc/window.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/42header/autoload/coc/window.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/auto-session/autoload/coc/window.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/cheatsheet.nvim/autoload/coc/window.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/coc-nvim-lua/autoload/coc/window.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/coc.nvim/autoload/coc/window.vim"
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/coc.nvim/autoload/coc)
chdir(/Users/ablanken/Sync/src/neovim-conf)
sourcing "/Users/ablanken/.local/share/nvim/site/pack/packer/start/coc.nvim/autoload/coc/window.vim"
line 1: let g:coc_max_treeview_width = get(g:, 'coc_max_treeview_width', 40)
line 2: 
line 3: function! coc#window#tabnr(winid) abort
line 15: 
line 16: function! coc#window#is_float(winid) abort
line 27: 
line 28: function! coc#window#set_height(winid, height) abort
line 38: 
line 39: function! coc#window#adjust_width(winid) abort
line 58: 
line 59: " Get single window by window variable, current tab only
line 60: function! coc#window#find(key, val) abort
line 69: 
line 70: " Visible buffer numbers
line 71: function! coc#window#bufnrs() abort
line 80: 
line 81: " Make sure window exists
line 82: function! coc#window#gotoid(winid) abort
line 88: 
line 89: " Avoid errors
line 90: function! coc#window#close(winid) abort
line 113: 
line 114: function! coc#window#visible_range(bufnr) abort
line 122: 
line 123: function! coc#window#visible_ranges(bufnr) abort
finished sourcing /Users/ablanken/.local/share/nvim/site/pack/packer/start/coc.nvim/autoload/coc/window.vim
calling function coc#window#bufnrs()

line 1:   let winids = []
line 2:   if exists('*nvim_list_wins')
line 3:     let winids = nvim_list_wins()
line 4:   else
line 5:     let winids = map(getwininfo(), 'v:val["winid"]')
line 6:   endif
line 7:   return uniq(map(winids, 'winbufnr(v:val)'))
function coc#window#bufnrs returning [2]

chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(conf/nvim)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(conf/nvim)
chdir(/Users/ablanken/Sync/src/neovim-conf)
calling function coc#util#remote_fns('nvim_lua')

line 1:   let fns = ['init', 'complete', 'should_complete', 'refresh', 'get_startcol', 'on_complete', 'on_enter']
line 2:   let res = []
line 3:   for fn in fns
line 4:     if exists('*coc#source#'.a:name.'#'.fn)
line 5:       call add(res, fn)
line 6:     endif
line 7:   endfor
line 3:   for fn in fns
line 4:     if exists('*coc#source#'.a:name.'#'.fn)
line 5:       call add(res, fn)
line 6:     endif
line 7:   endfor
line 3:   for fn in fns
line 4:     if exists('*coc#source#'.a:name.'#'.fn)
line 5:       call add(res, fn)
line 6:     endif
line 7:   endfor
line 3:   for fn in fns
line 4:     if exists('*coc#source#'.a:name.'#'.fn)
line 5:       call add(res, fn)
line 6:     endif
line 7:   endfor
line 3:   for fn in fns
line 4:     if exists('*coc#source#'.a:name.'#'.fn)
line 5:       call add(res, fn)
line 6:     endif
line 7:   endfor
line 3:   for fn in fns
line 4:     if exists('*coc#source#'.a:name.'#'.fn)
line 5:       call add(res, fn)
line 6:     endif
line 7:   endfor
line 3:   for fn in fns
line 4:     if exists('*coc#source#'.a:name.'#'.fn)
line 5:       call add(res, fn)
line 6:     endif
line 7:   endfor
line 3:   for fn in fns
line 4:     if exists('*coc#source#'.a:name.'#'.fn)
line 5:       call add(res, fn)
line 6:     endif
line 7:   endfor
line 8:   return res
function coc#util#remote_fns returning ['init', 'complete']

chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(conf/nvim)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(conf/nvim)
chdir(/Users/ablanken/Sync/src/neovim-conf)
calling function coc#source#nvim_lua#init()

line 1:   return { 'shortcut': 'Nlua', 'filetypes': ['lua', 'lua.luapad'], 'priority': 2,}
function coc#source#nvim_lua#init returning {'filetypes': ['lua', 'lua.luapad'], 'priority': 2, 'shortcut': 'Nlua'}

chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(conf/nvim)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(conf/nvim)
chdir(/Users/ablanken/Sync/src/neovim-conf)
Executing: exe 'pyxfile '.fnameescape('/Users/ablanken/Sync/dot.config/coc/extensions/node_modules/coc-snippets/python/ultisnips.py')
Executing: pyxfile /Users/ablanken/Sync/dot.config/coc/extensions/node_modules/coc-snippets/python/ultisnips.py
calling function provider#python3#Call('execute_file', ['/Users/ablanken/Sync/dot.config/coc/...oc-snippets/python/ultisnips.py', 6, 6])

line 1:   if s:err != ''
line 2:     return
line 3:   endif
line 4:   if !exists('s:host')
line 5:     let s:rpcrequest = function('rpcrequest')
line 6: 
line 7:     " Ensure that we can load the Python3 host before bootstrapping
line 8:     try
line 9:       let s:host = remote#host#Require('legacy-python3-provider')
line 10:     catch
line 11:       let s:err = v:exception
line 12:       echohl WarningMsg
line 13:       echomsg v:exception
line 14:       echohl None
line 15:       return
line 16:     endtry
line 17:   endif
line 18:   return call(s:rpcrequest, insert(insert(a:args, 'python_'.a:method), s:host))
function provider#python3#Call returning v:null

chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(conf/nvim)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(conf/nvim)
chdir(/Users/ablanken/Sync/src/neovim-conf)
calling function coc#window#bufnrs()

line 1:   let winids = []
line 2:   if exists('*nvim_list_wins')
line 3:     let winids = nvim_list_wins()
line 4:   else
line 5:     let winids = map(getwininfo(), 'v:val["winid"]')
line 6:   endif
line 7:   return uniq(map(winids, 'winbufnr(v:val)'))
function coc#window#bufnrs returning [2]

chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(conf/nvim)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(conf/nvim)
chdir(/Users/ablanken/Sync/src/neovim-conf)
calling function coc#util#do_autocmd('CocStatusChange')

line 1:   if exists('#User#'.a:name)
line 2:     exe 'doautocmd <nomodeline> User '.a:name
line 3:   endif
function coc#util#do_autocmd returning #0

chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(conf/nvim)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(conf/nvim)
chdir(/Users/ablanken/Sync/src/neovim-conf)
calling function coc#util#do_autocmd('CocStatusChange')

line 1:   if exists('#User#'.a:name)
line 2:     exe 'doautocmd <nomodeline> User '.a:name
line 3:   endif
function coc#util#do_autocmd returning #0

chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(conf/nvim)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(conf/nvim)
chdir(/Users/ablanken/Sync/src/neovim-conf)
calling function coc#util#do_autocmd('CocStatusChange')

line 1:   if exists('#User#'.a:name)
line 2:     exe 'doautocmd <nomodeline> User '.a:name
line 3:   endif
function coc#util#do_autocmd returning #0

chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(conf/nvim)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(conf/nvim)
chdir(/Users/ablanken/Sync/src/neovim-conf)
calling function coc#highlight#get_highlights(2, 'color')

line 1:   if !bufloaded(a:bufnr)
line 2:     return v:null
line 3:   endif
line 4:   if !has_key(s:namespace_map, a:key)
line 5:     return []
function coc#highlight#get_highlights returning []

chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(conf/nvim)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(conf/nvim)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(conf/nvim)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(conf/nvim)
chdir(/Users/ablanken/Sync/src/neovim-conf)
calling function coc#util#do_autocmd('CocStatusChange')

line 1:   if exists('#User#'.a:name)
line 2:     exe 'doautocmd <nomodeline> User '.a:name
line 3:   endif
function coc#util#do_autocmd returning #0

chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(conf/nvim)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(conf/nvim)
chdir(/Users/ablanken/Sync/src/neovim-conf)
calling function coc#window#visible_range(2)

line 1:   let winid = bufwinid(a:bufnr)
line 2:   if winid == -1
line 3:     return v:null
line 4:   endif
line 5:   let info = getwininfo(winid)[0]
line 6:   return [info['topline'], info['botline']]
function coc#window#visible_range returning [6, 52]

chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(conf/nvim)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(conf/nvim)
chdir(/Users/ablanken/Sync/src/neovim-conf)
calling function coc#window#bufnrs()

line 1:   let winids = []
line 2:   if exists('*nvim_list_wins')
line 3:     let winids = nvim_list_wins()
line 4:   else
line 5:     let winids = map(getwininfo(), 'v:val["winid"]')
line 6:   endif
line 7:   return uniq(map(winids, 'winbufnr(v:val)'))
function coc#window#bufnrs returning [2]

chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(conf/nvim)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(conf/nvim)
chdir(/Users/ablanken/Sync/src/neovim-conf)
calling function coc#window#bufnrs()

line 1:   let winids = []
line 2:   if exists('*nvim_list_wins')
line 3:     let winids = nvim_list_wins()
line 4:   else
line 5:     let winids = map(getwininfo(), 'v:val["winid"]')
line 6:   endif
line 7:   return uniq(map(winids, 'winbufnr(v:val)'))
function coc#window#bufnrs returning [2]

calling function coc#window#bufnrs()

line 1:   let winids = []
line 2:   if exists('*nvim_list_wins')
line 3:     let winids = nvim_list_wins()
line 4:   else
line 5:     let winids = map(getwininfo(), 'v:val["winid"]')
line 6:   endif
line 7:   return uniq(map(winids, 'winbufnr(v:val)'))
function coc#window#bufnrs returning [2]

chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(conf/nvim)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(conf/nvim)
chdir(/Users/ablanken/Sync/src/neovim-conf)
calling function coc#window#bufnrs()

line 1:   let winids = []
line 2:   if exists('*nvim_list_wins')
line 3:     let winids = nvim_list_wins()
line 4:   else
line 5:     let winids = map(getwininfo(), 'v:val["winid"]')
line 6:   endif
line 7:   return uniq(map(winids, 'winbufnr(v:val)'))
function coc#window#bufnrs returning [2]

chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(conf/nvim)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(conf/nvim)
chdir(/Users/ablanken/Sync/src/neovim-conf)
Executing CursorHold Autocommands for "*"
autocommand silent! checktime

Executing: silent! checktime
Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

Executing: call coc#float#check_related()
calling function coc#float#check_related()

line 1:   let invalids = []
line 2:   let ids = coc#float#get_float_win_list(1)
calling function coc#float#check_related[2]..coc#float#get_float_win_list(1)

line 1:   let res = []
line 2:   let all = get(a:, 1, 0)
line 3:   if s:is_vim
line 4:     if s:popup_list_api
line 5:       return filter(popup_list(), 'popup_getpos(v:val)["visible"]'.(all ? '' : '&& getwinvar(v:val, "float", 0)'))
line 6:     endif
line 7:     return filter(s:popup_list, 's:popup_visible(v:val)')
line 8:   elseif has('nvim') && exists('*nvim_win_get_config')
line 9:     let res = []
line 10:     for i in range(1, winnr('$'))
line 11:       let id = win_getid(i)
line 12:       let config = nvim_win_get_config(id)
line 13:       if empty(config) || empty(config['relative'])
line 14:         continue
line 10:     for i in range(1, winnr('$'))
line 11:       let id = win_getid(i)
line 12:       let config = nvim_win_get_config(id)
line 13:       if empty(config) || empty(config['relative'])
line 14:         continue
line 15:       endif
line 16:       " ignore border & button window & others
line 17:       if !all && !getwinvar(id, 'float', 0)
line 18:         continue
line 19:       endif
line 20:       call add(res, id)
line 21:     endfor
line 22:     return res
function coc#float#check_related[2]..coc#float#get_float_win_list returning []

continuing in function coc#float#check_related

line 3:   for id in ids
line 4:     let target = getwinvar(id, 'target_winid', 0)
line 5:     if (target && index(ids, target) == -1) || getwinvar(id, 'kind', '') == 'pum'
line 6:       call add(invalids, id)
line 7:     endif
line 8:   endfor
line 9:   if !s:popup_list_api
line 10:     let s:popup_list = filter(ids, "index(invalids, v:val) == -1")
line 11:   endif
line 12:   for id in invalids
line 13:     call coc#float#close(id)
line 14:   endfor
function coc#float#check_related returning #0

continuing in CursorHold Autocommands for "*"

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')], coc#util#suggest_variables(bufnr('%')))

Executing: call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')], coc#util#suggest_variables(bufnr('%')))
calling function coc#util#suggest_variables(2)

line 1:   return { 'coc_suggest_disable': getbufvar(a:bufnr, 'coc_suggest_disable', 0), 'coc_disabled_sources': getbufvar(a:bufnr, 'coc_disabled_sources', []), 'coc_suggest_blacklist': getbufvar(a:bufnr, 'coc_suggest_blacklist', []), }
function coc#util#suggest_variables returning {'coc_disabled_sources': [], 'coc_sugg...sable': 0, 'coc_suggest_blacklist': []}

continuing in CursorHold Autocommands for "*"

calling function <SNR>44_Autocmd('CursorHold', 2, [6, 14], {'coc_disabled_sources': [], 'coc_sugg...sable': 0, 'coc_suggest_blacklist': []})

line 1:   if !get(g:, 'coc_workspace_initialized', 0)
line 2:     return
line 3:   endif
line 4:   call coc#rpc#notify('CocAutocmd', a:000)
calling function <SNR>44_Autocmd[4]..coc#rpc#notify('CocAutocmd', ['CursorHold', 2, [6, 14], {'coc_disab...able': 0, 'coc_suggest_blacklist': []}])

line 1:   if !coc#rpc#ready()
calling function <SNR>44_Autocmd[4]..coc#rpc#notify[1]..coc#rpc#ready()

line 1:   if empty(s:client) || s:client['running'] == 0
line 2:     return 0
line 3:   endif
line 4:   return 1
function <SNR>44_Autocmd[4]..coc#rpc#notify[1]..coc#rpc#ready returning #1

continuing in function <SNR>44_Autocmd[4]..coc#rpc#notify

line 2:     return ''
line 3:   endif
line 4:   call s:client['notify'](a:method, a:args)
calling function <SNR>44_Autocmd[4]..coc#rpc#notify[4]..<SNR>47_notify('CocAutocmd', ['CursorHold', 2, [6, 14], {'coc_disab...able': 0, 'coc_suggest_blacklist': []}])

line 1:   let channel = coc#client#get_channel(self)
calling function <SNR>44_Autocmd[4]..coc#rpc#notify[4]..<SNR>47_notify[1]..coc#client#get_channel({'on_async_response': function('<SNR>4...packer/start/coc.nvim/build/index.js']})

line 1:   if s:is_vim
line 2:     return a:client['channel']
line 3:   endif
line 4:   return a:client['chan_id']
function <SNR>44_Autocmd[4]..coc#rpc#notify[4]..<SNR>47_notify[1]..coc#client#get_channel returning #3

continuing in function <SNR>44_Autocmd[4]..coc#rpc#notify[4]..<SNR>47_notify

line 2:   if empty(channel)
line 3:     return ''
line 4:   endif
line 5:   try
line 6:     if s:is_vim
line 7:       call ch_sendraw(channel, json_encode([0, [a:method, a:args]])."\n")
line 8:     else
line 9:       call call('rpcnotify', [channel, a:method] + a:args)
line 10:     endif
line 11:   catch /.*/
line 12:     if v:exception =~# 'E475'
line 13:       if get(g:, 'coc_vim_leaving', 0)
line 14:         return
line 15:       endif
line 16:       echohl Error | echom '['.self.name.'] server connection lost' | echohl None
line 16:  echom '['.self.name.'] server connection lost' | echohl None
line 16:  echohl None
line 17:       let name = self.name
line 18:       call s:on_exit(name, 0)
line 19:       execute 'silent do User ConnectionLost'.toupper(name[0]).name[1:]
line 20:     elseif v:exception =~# 'E12'
line 21:       " neovim's bug, ignore it
line 22:     else
line 23:       echohl Error | echo 'Error on notify ('.a:method.'): '.v:exception | echohl None
line 23:  echo 'Error on notify ('.a:method.'): '.v:exception | echohl None
line 23:  echohl None
line 24:     endif
line 25:   endtry
function <SNR>44_Autocmd[4]..coc#rpc#notify[4]..<SNR>47_notify returning #0

continuing in function <SNR>44_Autocmd[4]..coc#rpc#notify

line 5:   return ''
function <SNR>44_Autocmd[4]..coc#rpc#notify returning ''

continuing in function <SNR>44_Autocmd

function <SNR>44_Autocmd returning #0

continuing in CursorHold Autocommands for "*"

chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(conf/nvim)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(conf/nvim)
chdir(/Users/ablanken/Sync/src/neovim-conf)
calling function coc#util#all_state()

line 1:   return { 'bufnr': bufnr('%'), 'winid': win_getid(), 'bufnrs': map(getbufinfo({'bufloaded': 1}),'v:val["bufnr"]'), 'winids': map(getwininfo(),'v:val["winid"]'), }
function coc#util#all_state returning {'bufnr': 2, 'bufnrs': [2], 'winids': [1000], 'winid': 1000}

calling function coc#window#is_float(1000)

line 1:   if !has('nvim')
line 2:     if exists('*popup_list')
line 3:       return index(popup_list(), a:winid) != -1
line 4:     endif
line 5:     return 0
line 6:   elseif exists('*nvim_win_get_config')
line 7:     let config = nvim_win_get_config(a:winid)
line 8:     return !empty(config) && !empty(get(config, 'relative', ''))
function coc#window#is_float returning #0

chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(conf/nvim)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(conf/nvim)
chdir(/Users/ablanken/Sync/src/neovim-conf)
calling function coc#window#visible_range(2)

line 1:   let winid = bufwinid(a:bufnr)
line 2:   if winid == -1
line 3:     return v:null
line 4:   endif
line 5:   let info = getwininfo(winid)[0]
line 6:   return [info['topline'], info['botline']]
function coc#window#visible_range returning [6, 52]

chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(conf/nvim)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(conf/nvim)
chdir(/Users/ablanken/Sync/src/neovim-conf)
Searching for "autoload/coc/cursor.vim" in runtime path
Searching for "/Users/ablanken/.config/nvim/autoload/coc/cursor.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/autoload/coc/cursor.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/42header/autoload/coc/cursor.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/auto-session/autoload/coc/cursor.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/cheatsheet.nvim/autoload/coc/cursor.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/coc-nvim-lua/autoload/coc/cursor.vim"
Searching for "/Users/ablanken/.local/share/nvim/site/pack/packer/start/coc.nvim/autoload/coc/cursor.vim"
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/coc.nvim/autoload/coc)
chdir(/Users/ablanken/Sync/src/neovim-conf)
sourcing "/Users/ablanken/.local/share/nvim/site/pack/packer/start/coc.nvim/autoload/coc/cursor.vim"
line 1: scriptencoding utf-8
line 2: 
line 3: " Position of cursor relative to screen cell
line 4: function! coc#cursor#screen_pos() abort
line 9: 
line 10: function! coc#cursor#move_by_col(delta)
line 14: 
line 15: " Get cursor position.
line 16: function! coc#cursor#position()
line 19: 
line 20: " Move cursor to position.
line 21: function! coc#cursor#move_to(line, character) abort
line 27: 
line 28: " Character offset of current cursor, vim provide bytes offset only.
line 29: function! coc#cursor#char_offset() abort
line 41: 
line 42: " Returns latest selection range
line 43: function! coc#cursor#get_selection(char) abort
finished sourcing /Users/ablanken/.local/share/nvim/site/pack/packer/start/coc.nvim/autoload/coc/cursor.vim
calling function coc#cursor#position()

line 1:   return [line('.') - 1, strchars(strpart(getline('.'), 0, col('.') - 1))]
function coc#cursor#position returning [5, 13]

chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(conf/nvim)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(conf/nvim)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(conf/nvim)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(conf/nvim)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(conf/nvim)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(conf/nvim)
chdir(/Users/ablanken/Sync/src/neovim-conf)

Executing: qa
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(conf/nvim)
chdir(/Users/ablanken/Sync/src/neovim-conf)
Executing BufWinLeave Autocommands for "*"
autocommand call s:Autocmd('BufWinLeave', +expand('<abuf>'), bufwinid(+expand('<abuf>')))

Executing: call s:Autocmd('BufWinLeave', +expand('<abuf>'), bufwinid(+expand('<abuf>')))
calling function <SNR>44_Autocmd('BufWinLeave', 2, 1000)

line 1:   if !get(g:, 'coc_workspace_initialized', 0)
line 2:     return
line 3:   endif
line 4:   call coc#rpc#notify('CocAutocmd', a:000)
calling function <SNR>44_Autocmd[4]..coc#rpc#notify('CocAutocmd', ['BufWinLeave', 2, 1000])

line 1:   if !coc#rpc#ready()
calling function <SNR>44_Autocmd[4]..coc#rpc#notify[1]..coc#rpc#ready()

line 1:   if empty(s:client) || s:client['running'] == 0
line 2:     return 0
line 3:   endif
line 4:   return 1
function <SNR>44_Autocmd[4]..coc#rpc#notify[1]..coc#rpc#ready returning #1

continuing in function <SNR>44_Autocmd[4]..coc#rpc#notify

line 2:     return ''
line 3:   endif
line 4:   call s:client['notify'](a:method, a:args)
calling function <SNR>44_Autocmd[4]..coc#rpc#notify[4]..<SNR>47_notify('CocAutocmd', ['BufWinLeave', 2, 1000])

line 1:   let channel = coc#client#get_channel(self)
calling function <SNR>44_Autocmd[4]..coc#rpc#notify[4]..<SNR>47_notify[1]..coc#client#get_channel({'on_async_response': function('<SNR>4...packer/start/coc.nvim/build/index.js']})

line 1:   if s:is_vim
line 2:     return a:client['channel']
line 3:   endif
line 4:   return a:client['chan_id']
function <SNR>44_Autocmd[4]..coc#rpc#notify[4]..<SNR>47_notify[1]..coc#client#get_channel returning #3

continuing in function <SNR>44_Autocmd[4]..coc#rpc#notify[4]..<SNR>47_notify

line 2:   if empty(channel)
line 3:     return ''
line 4:   endif
line 5:   try
line 6:     if s:is_vim
line 7:       call ch_sendraw(channel, json_encode([0, [a:method, a:args]])."\n")
line 8:     else
line 9:       call call('rpcnotify', [channel, a:method] + a:args)
line 10:     endif
line 11:   catch /.*/
line 12:     if v:exception =~# 'E475'
line 13:       if get(g:, 'coc_vim_leaving', 0)
line 14:         return
line 15:       endif
line 16:       echohl Error | echom '['.self.name.'] server connection lost' | echohl None
line 16:  echom '['.self.name.'] server connection lost' | echohl None
line 16:  echohl None
line 17:       let name = self.name
line 18:       call s:on_exit(name, 0)
line 19:       execute 'silent do User ConnectionLost'.toupper(name[0]).name[1:]
line 20:     elseif v:exception =~# 'E12'
line 21:       " neovim's bug, ignore it
line 22:     else
line 23:       echohl Error | echo 'Error on notify ('.a:method.'): '.v:exception | echohl None
line 23:  echo 'Error on notify ('.a:method.'): '.v:exception | echohl None
line 23:  echohl None
line 24:     endif
line 25:   endtry
function <SNR>44_Autocmd[4]..coc#rpc#notify[4]..<SNR>47_notify returning #0

continuing in function <SNR>44_Autocmd[4]..coc#rpc#notify

line 5:   return ''
function <SNR>44_Autocmd[4]..coc#rpc#notify returning ''

continuing in function <SNR>44_Autocmd

function <SNR>44_Autocmd returning #0

continuing in BufWinLeave Autocommands for "*"

chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(conf/nvim)
chdir(/Users/ablanken/Sync/src/neovim-conf)
Executing BufUnload Autocommands for "*"
autocommand call s:Autocmd('BufUnload', +expand('<abuf>'))

Executing: call s:Autocmd('BufUnload', +expand('<abuf>'))
calling function <SNR>44_Autocmd('BufUnload', 2)

line 1:   if !get(g:, 'coc_workspace_initialized', 0)
line 2:     return
line 3:   endif
line 4:   call coc#rpc#notify('CocAutocmd', a:000)
calling function <SNR>44_Autocmd[4]..coc#rpc#notify('CocAutocmd', ['BufUnload', 2])

line 1:   if !coc#rpc#ready()
calling function <SNR>44_Autocmd[4]..coc#rpc#notify[1]..coc#rpc#ready()

line 1:   if empty(s:client) || s:client['running'] == 0
line 2:     return 0
line 3:   endif
line 4:   return 1
function <SNR>44_Autocmd[4]..coc#rpc#notify[1]..coc#rpc#ready returning #1

continuing in function <SNR>44_Autocmd[4]..coc#rpc#notify

line 2:     return ''
line 3:   endif
line 4:   call s:client['notify'](a:method, a:args)
calling function <SNR>44_Autocmd[4]..coc#rpc#notify[4]..<SNR>47_notify('CocAutocmd', ['BufUnload', 2])

line 1:   let channel = coc#client#get_channel(self)
calling function <SNR>44_Autocmd[4]..coc#rpc#notify[4]..<SNR>47_notify[1]..coc#client#get_channel({'on_async_response': function('<SNR>4...packer/start/coc.nvim/build/index.js']})

line 1:   if s:is_vim
line 2:     return a:client['channel']
line 3:   endif
line 4:   return a:client['chan_id']
function <SNR>44_Autocmd[4]..coc#rpc#notify[4]..<SNR>47_notify[1]..coc#client#get_channel returning #3

continuing in function <SNR>44_Autocmd[4]..coc#rpc#notify[4]..<SNR>47_notify

line 2:   if empty(channel)
line 3:     return ''
line 4:   endif
line 5:   try
line 6:     if s:is_vim
line 7:       call ch_sendraw(channel, json_encode([0, [a:method, a:args]])."\n")
line 8:     else
line 9:       call call('rpcnotify', [channel, a:method] + a:args)
line 10:     endif
line 11:   catch /.*/
line 12:     if v:exception =~# 'E475'
line 13:       if get(g:, 'coc_vim_leaving', 0)
line 14:         return
line 15:       endif
line 16:       echohl Error | echom '['.self.name.'] server connection lost' | echohl None
line 16:  echom '['.self.name.'] server connection lost' | echohl None
line 16:  echohl None
line 17:       let name = self.name
line 18:       call s:on_exit(name, 0)
line 19:       execute 'silent do User ConnectionLost'.toupper(name[0]).name[1:]
line 20:     elseif v:exception =~# 'E12'
line 21:       " neovim's bug, ignore it
line 22:     else
line 23:       echohl Error | echo 'Error on notify ('.a:method.'): '.v:exception | echohl None
line 23:  echo 'Error on notify ('.a:method.'): '.v:exception | echohl None
line 23:  echohl None
line 24:     endif
line 25:   endtry
function <SNR>44_Autocmd[4]..coc#rpc#notify[4]..<SNR>47_notify returning #0

continuing in function <SNR>44_Autocmd[4]..coc#rpc#notify

line 5:   return ''
function <SNR>44_Autocmd[4]..coc#rpc#notify returning ''

continuing in function <SNR>44_Autocmd

function <SNR>44_Autocmd returning #0

continuing in BufUnload Autocommands for "*"

Executing VimLeavePre Autocommands for "*"
autocommand :lua require("neoclip.handlers").on_exit()

Executing: :lua require("neoclip.handlers").on_exit()
Executing VimLeavePre Autocommands for "*"
autocommand let g:coc_vim_leaving = 1

Executing: let g:coc_vim_leaving = 1
autocommand call s:Autocmd('VimLeavePre')

Executing: call s:Autocmd('VimLeavePre')
calling function <SNR>44_Autocmd('VimLeavePre')

line 1:   if !get(g:, 'coc_workspace_initialized', 0)
line 2:     return
line 3:   endif
line 4:   call coc#rpc#notify('CocAutocmd', a:000)
calling function <SNR>44_Autocmd[4]..coc#rpc#notify('CocAutocmd', ['VimLeavePre'])

line 1:   if !coc#rpc#ready()
calling function <SNR>44_Autocmd[4]..coc#rpc#notify[1]..coc#rpc#ready()

line 1:   if empty(s:client) || s:client['running'] == 0
line 2:     return 0
line 3:   endif
line 4:   return 1
function <SNR>44_Autocmd[4]..coc#rpc#notify[1]..coc#rpc#ready returning #1

continuing in function <SNR>44_Autocmd[4]..coc#rpc#notify

line 2:     return ''
line 3:   endif
line 4:   call s:client['notify'](a:method, a:args)
calling function <SNR>44_Autocmd[4]..coc#rpc#notify[4]..<SNR>47_notify('CocAutocmd', ['VimLeavePre'])

line 1:   let channel = coc#client#get_channel(self)
calling function <SNR>44_Autocmd[4]..coc#rpc#notify[4]..<SNR>47_notify[1]..coc#client#get_channel({'on_async_response': function('<SNR>4...packer/start/coc.nvim/build/index.js']})

line 1:   if s:is_vim
line 2:     return a:client['channel']
line 3:   endif
line 4:   return a:client['chan_id']
function <SNR>44_Autocmd[4]..coc#rpc#notify[4]..<SNR>47_notify[1]..coc#client#get_channel returning #3

continuing in function <SNR>44_Autocmd[4]..coc#rpc#notify[4]..<SNR>47_notify

line 2:   if empty(channel)
line 3:     return ''
line 4:   endif
line 5:   try
line 6:     if s:is_vim
line 7:       call ch_sendraw(channel, json_encode([0, [a:method, a:args]])."\n")
line 8:     else
line 9:       call call('rpcnotify', [channel, a:method] + a:args)
line 10:     endif
line 11:   catch /.*/
line 12:     if v:exception =~# 'E475'
line 13:       if get(g:, 'coc_vim_leaving', 0)
line 14:         return
line 15:       endif
line 16:       echohl Error | echom '['.self.name.'] server connection lost' | echohl None
line 16:  echom '['.self.name.'] server connection lost' | echohl None
line 16:  echohl None
line 17:       let name = self.name
line 18:       call s:on_exit(name, 0)
line 19:       execute 'silent do User ConnectionLost'.toupper(name[0]).name[1:]
line 20:     elseif v:exception =~# 'E12'
line 21:       " neovim's bug, ignore it
line 22:     else
line 23:       echohl Error | echo 'Error on notify ('.a:method.'): '.v:exception | echohl None
line 23:  echo 'Error on notify ('.a:method.'): '.v:exception | echohl None
line 23:  echohl None
line 24:     endif
line 25:   endtry
function <SNR>44_Autocmd[4]..coc#rpc#notify[4]..<SNR>47_notify returning #0

continuing in function <SNR>44_Autocmd[4]..coc#rpc#notify

line 5:   return ''
function <SNR>44_Autocmd[4]..coc#rpc#notify returning ''

continuing in function <SNR>44_Autocmd

function <SNR>44_Autocmd returning #0

continuing in VimLeavePre Autocommands for "*"

Executing VimLeavePre Autocommands for "*"
autocommand <Lua function 679>

Executing: 
Executing VimLeavePre Autocommands for "*"
autocommand call coc#rpc#request('doAutocmd', [1])

Executing: call coc#rpc#request('doAutocmd', [1])
calling function coc#rpc#request('doAutocmd', [1])

line 1:   if !coc#rpc#ready()
calling function coc#rpc#request[1]..coc#rpc#ready()

line 1:   if empty(s:client) || s:client['running'] == 0
line 2:     return 0
line 3:   endif
line 4:   return 1
function coc#rpc#request[1]..coc#rpc#ready returning #1

continuing in function coc#rpc#request

line 2:     return ''
line 3:   endif
line 4:   return s:client['request'](a:method, a:args)
calling function coc#rpc#request[4]..<SNR>47_request('doAutocmd', [1])

line 1:   let channel = coc#client#get_channel(self)
calling function coc#rpc#request[4]..<SNR>47_request[1]..coc#client#get_channel({'on_async_response': function('<SNR>4...packer/start/coc.nvim/build/index.js']})

line 1:   if s:is_vim
line 2:     return a:client['channel']
line 3:   endif
line 4:   return a:client['chan_id']
function coc#rpc#request[4]..<SNR>47_request[1]..coc#client#get_channel returning #3

continuing in function coc#rpc#request[4]..<SNR>47_request

line 2:   if empty(channel) | return '' | endif
line 2:  return '' | endif
line 2:  endif
line 3:   try
line 4:     if s:is_vim
line 5:       let res = ch_evalexpr(channel, [a:method, a:args], {'timeout': 60 * 1000})
line 6:       if type(res) == 1 && res ==# ''
line 7:         throw 'request '.a:method. ' '.string(a:args).' timeout after 60s'
line 8:       endif
line 9:       let [l:errmsg, res] =  res
line 10:       if !empty(l:errmsg)
line 11:         throw l:errmsg
line 12:       else
line 13:         return res
line 14:       endif
line 15:     else
line 16:       return call('rpcrequest', [channel, a:method] + a:args)
calling function coc#rpc#request[4]..<SNR>47_request[16]..coc#highlight#clear_highlight(2, 'diagnosticlua', 0, -1)

line 1:   let bufnr = a:bufnr == 0 ? bufnr('%') : a:bufnr
line 2:   if !bufloaded(bufnr)
line 3:     return
line 4:   endif
line 5:   let src_id = coc#highlight#create_namespace(a:key)
calling function coc#rpc#request[4]..<SNR>47_request[16]..coc#highlight#clear_highlight[5]..coc#highlight#create_namespace('diagnosticlua')

line 1:   if type(a:key) == 0
line 2:     return a:key
line 3:   endif
line 4:   if has_key(s:namespace_map, a:key)
line 5:     return s:namespace_map[a:key]
function coc#rpc#request[4]..<SNR>47_request[16]..coc#highlight#clear_highlight[5]..coc#highlight#create_namespace returning #20

continuing in function coc#rpc#request[4]..<SNR>47_request[16]..coc#highlight#clear_highlight

line 6:   if has('nvim')
line 7:     call nvim_buf_clear_namespace(a:bufnr, src_id, a:start_line, a:end_line)
line 8:   else
line 9:     call coc#api#call('buf_clear_namespace', [a:bufnr, src_id, a:start_line, a:end_line])
line 10:   endif
function coc#rpc#request[4]..<SNR>47_request[16]..coc#highlight#clear_highlight returning #0

continuing in function coc#rpc#request[4]..<SNR>47_request

calling function coc#rpc#request[4]..<SNR>47_request[16]..coc#highlight#clear_highlight(2, 15, 0, -1)

line 1:   let bufnr = a:bufnr == 0 ? bufnr('%') : a:bufnr
line 2:   if !bufloaded(bufnr)
line 3:     return
line 4:   endif
line 5:   let src_id = coc#highlight#create_namespace(a:key)
calling function coc#rpc#request[4]..<SNR>47_request[16]..coc#highlight#clear_highlight[5]..coc#highlight#create_namespace(15)

line 1:   if type(a:key) == 0
line 2:     return a:key
function coc#rpc#request[4]..<SNR>47_request[16]..coc#highlight#clear_highlight[5]..coc#highlight#create_namespace returning #15

continuing in function coc#rpc#request[4]..<SNR>47_request[16]..coc#highlight#clear_highlight

line 6:   if has('nvim')
line 7:     call nvim_buf_clear_namespace(a:bufnr, src_id, a:start_line, a:end_line)
line 8:   else
line 9:     call coc#api#call('buf_clear_namespace', [a:bufnr, src_id, a:start_line, a:end_line])
line 10:   endif
function coc#rpc#request[4]..<SNR>47_request[16]..coc#highlight#clear_highlight returning #0

continuing in function coc#rpc#request[4]..<SNR>47_request

line 16: silent mksession! /Users/ablanken/.local/share/nvim/sessions/%Users%ablanken%Sync%src%neovim-conf.vim
Exception thrown: Vim(mksession):E190: Cannot open "/Users/ablanken/.local/share/nvim/sessions/conf/nvim/init.luaUsersconf/nvim/init.luaablankenconf/nvim/init.luaSyncconf/nvim/init.luasrcconf/nvim/init.luaneovim-conf.vim" for writing

Exception discarded: Vim(mksession):E190: Cannot open "/Users/ablanken/.local/share/nvim/sessions/conf/nvim/init.luaUsersconf/nvim/init.luaablankenconf/nvim/init.luaSyncconf/nvim/init.luasrcconf/nvim/init.luaneovim-conf.vim" for writing

Exception thrown: Vim(return):Error invoking 'doAutocmd' on channel 3 (coc):^@Vim(mksession):E190: Cannot open "/Users/ablanken/.local/share/nvim/sessions/conf/nvim/init.luaUsersconf/nvim/init.luaablankenconf/nvim/init.luaSyncconf/nvim/init.luasrcconf/nvim/init.luaneovim-conf.vim" for writing

line 17:     endif
line 18:   catch /.*/
Exception caught: Vim(return):Error invoking 'doAutocmd' on channel 3 (coc):^@Vim(mksession):E190: Cannot open "/Users/ablanken/.local/share/nvim/sessions/conf/nvim/init.luaUsersconf/nvim/init.luaablankenconf/nvim/init.luaSyncconf/nvim/init.luasrcconf/nvim/init.luaneovim-conf.vim" for writing

line 19:     if v:exception =~# 'E475'
line 20:       if get(g:, 'coc_vim_leaving', 0) | return | endif
line 20:  return | endif
line 20:  endif
line 21:       echohl Error | echom '['.self.name.'] server connection lost' | echohl None
line 21:  echom '['.self.name.'] server connection lost' | echohl None
line 21:  echohl None
line 22:       let name = self.name
line 23:       call s:on_exit(name, 0)
line 24:       execute 'silent do User ConnectionLost'.toupper(name[0]).name[1:]
line 25:     elseif v:exception =~# 'E12'
line 26:       " neovim's bug, ignore it
line 27:     else
line 28:       echohl Error | echo 'Error on request ('.a:method.'): '.v:exception | echohl None
line 28:  echo 'Error on request ('.a:method.'): '.v:exception | echohl None
                                                                            Error on request (doAutocmd): Vim(return):Error invoking 'doAutocmd' on channel 3 (coc):
Vim(mksession):E190: Cannot open "/Users/ablanken/.local/share/nvim/sessions/conf/nvim/init.luaUsersconf/nvim/init.luaablankenconf/nvim/init.luaSyncconf/nvim/init.luasrcconf/nvim/init.luaneovim-conf.vim" for writing
line 28:  echohl None
line 29:     endif
line 30:   endtry
Exception finished: Vim(return):Error invoking 'doAutocmd' on channel 3 (coc):^@Vim(mksession):E190: Cannot open "/Users/ablanken/.local/share/nvim/sessions/conf/nvim/init.luaUsersconf/nvim/init.luaablankenconf/nvim/init.luaSyncconf/nvim/init.luasrcconf/nvim/init.luaneovim-conf.vim" for writing

function coc#rpc#request[4]..<SNR>47_request returning #0

continuing in function coc#rpc#request

function coc#rpc#request returning #0

continuing in VimLeavePre Autocommands for "*"

Writing ShaDa file "/Users/ablanken/.local/share/nvim/shada/main.shada"
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim/site/pack/packer/start/sqlite.lua/lua/sqlite)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/share/nvim-20220509115152/site/pack/packer/start/sqlite.lua/lua/sqlite)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/.local/src/neovim-conf/conf/nvim)
chdir(/Users/ablanken/Sync/src/neovim-conf)
Executing VimLeave Autocommands for "*"
autocommand call LuaAutoSaveSession()

Executing: call LuaAutoSaveSession()
Executing: mks! /Users/ablanken/.local/share/nvim/sessions/\%Users\%ablanken\%Sync\%src\%neovim-conf.vim
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken)
chdir(/Users/ablanken/Sync/src/neovim-conf)
chdir(/Users/ablanken/Sync/src/neovim-conf)
calling function coc#util#do_autocmd('CocStatusChange')

line 1:   if exists('#User#'.a:name)
line 2:     exe 'doautocmd <nomodeline> User '.a:name
line 3:   endif
function coc#util#do_autocmd returning #0

calling function <lambda>9(3, 143, 'exit')

calling function <lambda>9[1]..<SNR>47_on_exit('coc', 143)

line 1:   if get(g:, 'coc_vim_leaving', 0) | return | endif
line 1:  return | endif
function <lambda>9[1]..<SNR>47_on_exit returning #0

continuing in function <lambda>9

function <lambda>9 returning #0
